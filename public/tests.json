{
  "stats": {
    "suites": 209,
    "tests": 194,
    "passes": 123,
    "pending": 0,
    "failures": 71,
    "start": "2021-09-08T19:20:36.039Z",
    "end": "2021-09-08T19:21:26.873Z",
    "duration": 50834,
    "testsRegistered": 194,
    "passPercent": 63.4020618556701,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d5a5e16f-b011-4888-8dd3-d6c625a002b2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "66b7dff3-5927-4672-9574-6043e09503b0",
          "parentUUID": "d5a5e16f-b011-4888-8dd3-d6c625a002b2",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "28a942f3-94de-44d0-a0c3-ea7663d4ac29",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 835,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "1210490d-04a2-4fb0-98dd-5e03096ed091",
              "parentUUID": "28a942f3-94de-44d0-a0c3-ea7663d4ac29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1210490d-04a2-4fb0-98dd-5e03096ed091"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 835,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get contact data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/')\n  .set('Accept', 'application/json')\n  .expect(302)\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "4d180964-d797-46b1-a19a-130593726999",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "7ca745a5-acfb-40f2-9f01-ca28a838761c",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "688a6268-7ad1-45c2-9d6b-e22f0c6b6e34",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "915f5d0e-8f05-443e-baaa-ba7ee94013e8",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "7520d605-1aa1-4800-87d9-5a359fcc9334",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "df4ad375-a3af-4959-b550-07351b77e8b6",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "0f9ceddb-eaa5-4fed-8d8d-11b571f7ea7a",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "80bb8cdd-e860-4d41-9b00-456c63c0ca18",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "9b95e878-1c57-410a-832a-e347575e3368",
              "parentUUID": "c9793b9e-a09c-424b-ab3d-ed1396ea2b58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d180964-d797-46b1-a19a-130593726999",
            "7ca745a5-acfb-40f2-9f01-ca28a838761c",
            "688a6268-7ad1-45c2-9d6b-e22f0c6b6e34",
            "915f5d0e-8f05-443e-baaa-ba7ee94013e8",
            "7520d605-1aa1-4800-87d9-5a359fcc9334",
            "df4ad375-a3af-4959-b550-07351b77e8b6",
            "0f9ceddb-eaa5-4fed-8d8d-11b571f7ea7a",
            "80bb8cdd-e860-4d41-9b00-456c63c0ca18",
            "9b95e878-1c57-410a-832a-e347575e3368"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 767,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "23302393-a23d-43a4-9610-7f72535f06d4",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site', 'dataset');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a5975cdf-2fa2-4392-949b-96339440d26d",
              "parentUUID": "23302393-a23d-43a4-9610-7f72535f06d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 677,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "8d837243-f677-4511-8a92-1c56a8710e14",
              "parentUUID": "23302393-a23d-43a4-9610-7f72535f06d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1041,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "3b2ed9ac-1895-48b2-ad2b-86b8d00147fa",
              "parentUUID": "23302393-a23d-43a4-9610-7f72535f06d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 1319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "4162b552-e606-4e95-a28e-c43a8306f84d",
              "parentUUID": "23302393-a23d-43a4-9610-7f72535f06d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "26dc58de-69aa-4f57-8083-cd26ec681bf7",
              "parentUUID": "23302393-a23d-43a4-9610-7f72535f06d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 1515,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "70af06e3-1972-4fc1-b897-b6ca27cd7e66",
              "parentUUID": "23302393-a23d-43a4-9610-7f72535f06d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1700,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b150ff60-b4c2-4be0-a49c-422a58f880bb",
              "parentUUID": "23302393-a23d-43a4-9610-7f72535f06d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5975cdf-2fa2-4392-949b-96339440d26d",
            "8d837243-f677-4511-8a92-1c56a8710e14",
            "3b2ed9ac-1895-48b2-ad2b-86b8d00147fa",
            "4162b552-e606-4e95-a28e-c43a8306f84d",
            "26dc58de-69aa-4f57-8083-cd26ec681bf7",
            "70af06e3-1972-4fc1-b897-b6ca27cd7e66",
            "b150ff60-b4c2-4be0-a49c-422a58f880bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7376,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "a768bc62-3c43-4069-9fcf-bc664804f96b",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "79a90a6b-80b3-4d67-812c-b072b6e280ef",
              "parentUUID": "a768bc62-3c43-4069-9fcf-bc664804f96b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "7ecef393-4df0-4903-b429-447eaf784973",
              "parentUUID": "a768bc62-3c43-4069-9fcf-bc664804f96b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "8c531b41-814a-4814-81a8-cb4e23dda548",
              "parentUUID": "a768bc62-3c43-4069-9fcf-bc664804f96b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "0f3c9dbf-56df-4236-b494-095af8699081",
              "parentUUID": "a768bc62-3c43-4069-9fcf-bc664804f96b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "79a90a6b-80b3-4d67-812c-b072b6e280ef",
            "7ecef393-4df0-4903-b429-447eaf784973",
            "8c531b41-814a-4814-81a8-cb4e23dda548",
            "0f3c9dbf-56df-4236-b494-095af8699081"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 251,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e15c639b-62d7-4072-98d8-fc48155885d6",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "8c04601d-bfe2-4d3a-bc02-1166872a632d",
              "parentUUID": "e15c639b-62d7-4072-98d8-fc48155885d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c04601d-bfe2-4d3a-bc02-1166872a632d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9b39207f-d85e-4c01-a82d-7d29592f2933",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 27,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property '0' of undefined",
                "estack": "TypeError: Cannot read property '0' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:22:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "a6e1eabc-de90-4d5a-90bb-d36114f1494c",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 26,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {
                "message": "TypeError: Cannot read property '0' of undefined",
                "estack": "TypeError: Cannot read property '0' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:34:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "e304ea6f-75db-4964-abb7-02f23b27d3c4",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 26,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property '0' of undefined",
                "estack": "TypeError: Cannot read property '0' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:44:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "a8f9bbd5-93f8-4e5f-beae-276c6c864d81",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property '0' of undefined",
                "estack": "TypeError: Cannot read property '0' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:53:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "8a1d64db-5e13-4916-81ef-3ba67f2c28fc",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "c8e449c1-a022-4cbd-aed7-7d0982e09c21",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "8aa4f989-474a-499c-a49a-8d983f4f9c3b",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules/supertest/lib/test.js:268:12)\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ba5d0956-d9a8-4b6b-990f-99a3611414a2",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property 'length' of undefined",
                "estack": "TypeError: Cannot read property 'length' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:85:37\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "bb7b5f41-49d0-4e66-ac26-b10ababcc4c0",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property 'length' of undefined",
                "estack": "TypeError: Cannot read property 'length' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:98:31\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "09ebf818-73a4-4473-8f6d-847bd9aeb862",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property 'length' of undefined",
                "estack": "TypeError: Cannot read property 'length' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:107:31\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ad614555-5f82-4a07-a2f7-5912b977ff02",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property 'length' of undefined",
                "estack": "TypeError: Cannot read property 'length' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:118:37\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "4541fb80-525c-479d-b247-6255ed39b7fb",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property 'length' of undefined",
                "estack": "TypeError: Cannot read property 'length' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:133:37\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "2036f34b-f54f-4b0b-a129-827d28aa98a0",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property '0' of undefined",
                "estack": "TypeError: Cannot read property '0' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:146:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "b6b5b481-c157-4a19-ac46-ba156a88edff",
              "parentUUID": "9b39207f-d85e-4c01-a82d-7d29592f2933",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8e449c1-a022-4cbd-aed7-7d0982e09c21",
            "8aa4f989-474a-499c-a49a-8d983f4f9c3b"
          ],
          "failures": [
            "a6e1eabc-de90-4d5a-90bb-d36114f1494c",
            "e304ea6f-75db-4964-abb7-02f23b27d3c4",
            "a8f9bbd5-93f8-4e5f-beae-276c6c864d81",
            "8a1d64db-5e13-4916-81ef-3ba67f2c28fc",
            "ba5d0956-d9a8-4b6b-990f-99a3611414a2",
            "bb7b5f41-49d0-4e66-ac26-b10ababcc4c0",
            "09ebf818-73a4-4473-8f6d-847bd9aeb862",
            "ad614555-5f82-4a07-a2f7-5912b977ff02",
            "4541fb80-525c-479d-b247-6255ed39b7fb",
            "2036f34b-f54f-4b0b-a129-827d28aa98a0",
            "b6b5b481-c157-4a19-ac46-ba156a88edff"
          ],
          "pending": [],
          "skipped": [],
          "duration": 238,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d02e0d90-1f8b-419c-87df-8975b42d6d93",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "db0248c8-2bca-48a3-88ee-dc56e2a0191d",
              "parentUUID": "d02e0d90-1f8b-419c-87df-8975b42d6d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "e4e59541-9816-47eb-8453-7fb93e2993c0",
              "parentUUID": "d02e0d90-1f8b-419c-87df-8975b42d6d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 22,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property 'result' of undefined",
                "estack": "TypeError: Cannot read property 'result' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:39:30\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "d98a524a-4f20-49b9-b146-e6dddfd8ef1a",
              "parentUUID": "d02e0d90-1f8b-419c-87df-8975b42d6d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property 'result' of undefined",
                "estack": "TypeError: Cannot read property 'result' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:48:30\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "b50d45ea-c0aa-41b2-a59d-4f25b0b8dc5a",
              "parentUUID": "d02e0d90-1f8b-419c-87df-8975b42d6d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "d47dcc65-6f10-405f-8dbd-8f7b00535c36",
              "parentUUID": "d02e0d90-1f8b-419c-87df-8975b42d6d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "e433e2f4-d2e6-44d1-bdde-c9364c88c51f",
              "parentUUID": "d02e0d90-1f8b-419c-87df-8975b42d6d93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b5754881-97ec-4127-8505-ff8ec9a79d95",
              "parentUUID": "d02e0d90-1f8b-419c-87df-8975b42d6d93",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db0248c8-2bca-48a3-88ee-dc56e2a0191d",
            "e4e59541-9816-47eb-8453-7fb93e2993c0",
            "d47dcc65-6f10-405f-8dbd-8f7b00535c36",
            "e433e2f4-d2e6-44d1-bdde-c9364c88c51f",
            "b5754881-97ec-4127-8505-ff8ec9a79d95"
          ],
          "failures": [
            "d98a524a-4f20-49b9-b146-e6dddfd8ef1a",
            "b50d45ea-c0aa-41b2-a59d-4f25b0b8dc5a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 366,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c196633b-646f-4aec-b924-b1dace67eade",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "950643ac-d87a-40ca-8079-7e5565e49f44",
              "parentUUID": "c196633b-646f-4aec-b924-b1dace67eade",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "950643ac-d87a-40ca-8079-7e5565e49f44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 182,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8885aaf4-c24a-4e71-ba2f-ab2f3dc8056e",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 9894,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3444bc05-ff64-47ef-9c51-8cb36fb3a04a",
              "parentUUID": "8885aaf4-c24a-4e71-ba2f-ab2f3dc8056e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3444bc05-ff64-47ef-9c51-8cb36fb3a04a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9894,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6105b86b-3e51-4498-889f-5179d75d2111",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "762abed0-f059-4728-a3ca-dec304b02c86",
              "parentUUID": "6105b86b-3e51-4498-889f-5179d75d2111",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "762abed0-f059-4728-a3ca-dec304b02c86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fe69db4b-ce96-47dc-9504-b2054dc91e2a",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cbe35af2-089c-4009-bf62-bb71aa9cf3e1",
              "parentUUID": "fe69db4b-ce96-47dc-9504-b2054dc91e2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbe35af2-089c-4009-bf62-bb71aa9cf3e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "bae8a18c-486d-4925-9a5d-134d4ce45dce",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 637,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d3f1952b-3aa4-41e6-b2b4-394019f07e0f",
              "parentUUID": "bae8a18c-486d-4925-9a5d-134d4ce45dce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3f1952b-3aa4-41e6-b2b4-394019f07e0f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 637,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "53e3dd90-5774-467c-9ffe-84fe61edd00c",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 648,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ed520cc4-b2d6-43c6-8a9f-5091d04af9cc",
              "parentUUID": "53e3dd90-5774-467c-9ffe-84fe61edd00c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed520cc4-b2d6-43c6-8a9f-5091d04af9cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 648,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "026d458e-9be7-4e60-a0eb-f78697fe8f55",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ed73f271-2cb3-4f1c-b01f-0fdfd4f2b091",
              "parentUUID": "026d458e-9be7-4e60-a0eb-f78697fe8f55",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed73f271-2cb3-4f1c-b01f-0fdfd4f2b091"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 130,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4f008a93-b26e-4d76-b633-923c39fd8ed8",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "11b040b1-a80a-4876-b489-a3b42481b200",
              "parentUUID": "4f008a93-b26e-4d76-b633-923c39fd8ed8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11b040b1-a80a-4876-b489-a3b42481b200"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "27da9cb9-37a8-443b-878c-91a9289c8f38",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fc52aed7-f218-45b7-812d-0ea1d47c117e",
              "parentUUID": "27da9cb9-37a8-443b-878c-91a9289c8f38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc52aed7-f218-45b7-812d-0ea1d47c117e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b5d73fae-b52e-40a6-a029-a63d15460ea9",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a8428cb4-98ee-49c7-a779-e7045e56ea62",
              "parentUUID": "b5d73fae-b52e-40a6-a029-a63d15460ea9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8428cb4-98ee-49c7-a779-e7045e56ea62"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "857c1838-fb0f-4efd-be38-8ca6180d62c4",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 125,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "40b91781-9e7b-4276-9d03-23a3cc3a9662",
              "parentUUID": "857c1838-fb0f-4efd-be38-8ca6180d62c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "40b91781-9e7b-4276-9d03-23a3cc3a9662"
          ],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e040047f-8040-4e0b-a277-c104dac799b4",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 584,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/authorpis' in your API spec\n\nres did not satisfy it because: response should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        getpeople: '(1,\"International Organization for Standardization\")'\n      },\n      { getpeople: '(2,\"United States Central Intelligence Agency\")' },\n      { getpeople: '(3,\"Ahearn, P. J.\")' },\n      { getpeople: '(4,\"Albert, Lois E.\")' },\n      { getpeople: '(5,\"Allen, William H., Jr.\")' },\n      { getpeople: '(6,\"Almendinger, John C.\")' },\n      { getpeople: '(7,\"Anderson, R. Scott\")' },\n      { getpeople: '(8,\"Anderson, Thane W.\")' },\n      { getpeople: '(9,\"Bailey, Robert E.\")' },\n      { getpeople: '(10,\"Ashworth, Allan C.\")' },\n      { getpeople: '(11,\"Baker, Richard G.\")' },\n      { getpeople: '(12,\"Barclay, Frank H.\")' },\n      { getpeople: '(13,\"Bernabo, J. Christopher\")' },\n      { getpeople: '(14,\"Birks, Harry John Betteley\")' },\n      { getpeople: '(15,\"Stiernberg, Edward J.\")' },\n      { getpeople: '(16,\"Bostwick, Lisa G.\")' },\n      { getpeople: '(17,\"Bouchard, Michel A.\")' },\n      { getpeople: '(18,\"Bradbury, J. Platt\")' },\n      { getpeople: '(19,\"Bright, Robert C.\")' },\n      { getpeople: '(20,\"Brubaker, Linda Beck\")' },\n      { getpeople: '(21,\"Bryant, Vaughn M., Jr.\")' },\n      { getpeople: '(22,\"Camfield, M.\")' },\n      { getpeople: '(23,\"Comtois, Paul G.\")' },\n      { getpeople: '(24,\"Cotter, James F. P.\")' },\n      { getpeople: '(25,\"Craig, Alan J.\")' },\n      { getpeople: '(26,\"Crisman, Thomas\")' },\n      { getpeople: '(27,\"Cushing, Edward J., Jr.\")' },\n      { getpeople: '(28,\"Davis, Anthony M.\")' },\n      { getpeople: '(29,\"Davis, Margaret B.\")' },\n      { getpeople: '(30,\"Davis, P. Thompson\")' },\n      { getpeople: '(31,\"Davis, Ronald B.\")' },\n      { getpeople: '(32,\"Delcourt, Hazel R.\")' },\n      { getpeople: '(33,\"Delcourt, Paul A.\")' },\n      { getpeople: '(34,\"Engstrom, Daniel R.\")' },\n      { getpeople: '(35,\"Eyster-Smith, Nancy M.\")' },\n      { getpeople: '(36,\"Farley-Gill, L. D.\")' },\n      { getpeople: '(37,\"Fredlund, Glen G.\")' },\n      { getpeople: '(38,\"Fries, Magnus\")' },\n      { getpeople: '(39,\"Futyma, Richard\")' },\n      { getpeople: '(40,\"Gajewski, Konrad J.\")' },\n      { getpeople: '(41,\"Gaudreau, Denise C.\")' },\n      { getpeople: '(42,\"Gauthier, Robert\")' },\n      { getpeople: '(43,\"Gilliam, Jeanne A.\")' },\n      { getpeople: '(44,\"Grimm, Eric Christopher\")' },\n      { getpeople: '(45,\"Hadden, Kathleen A.\")' },\n      { getpeople: '(46,\"Hansen, Barbara C. S.\")' },\n      { getpeople: '(47,\"Hartman, Richard T.\")' },\n      { getpeople: '(48,\"Heide, Kathleen M.\")' },\n      { getpeople: '(49,\"Ibe, Ralph .A.\")' },\n      { getpeople: '(50,\"Jacobson, G.\")' },\n      { getpeople: '(51,\"Janssen, C. Roel\")' },\n      { getpeople: '(52,\"Jordan, Richard H.\")' },\n      { getpeople: '(53,\"Kapp, Ronald O.\")' },\n      { getpeople: '(54,\"Karrow, Paul F.\")' },\n      { getpeople: '(55,\"Kay, Paul A.\")' },\n      { getpeople: '(56,\"Kerfoot, Wilson Charles\")' },\n      { getpeople: '(57,\"Kim, H. K.\")' },\n      { getpeople: '(58,\"King, James E.\")' },\n      { getpeople: '(59,\"Labelle, Claude\")' },\n      { getpeople: '(60,\"Lamb, Henry F.\")' },\n      { getpeople: '(61,\"Larouche, Alayn C.\")' },\n      { getpeople: '(62,\"Lawrenz, Ronald W.\")' },\n      { getpeople: '(63,\"Lichti-Federovich, Sigrid\")' },\n      { getpeople: '(64,\"Liu, Kam-biu\")' },\n      { getpeople: '(65,\"Livingstone, Daniel A.\")' },\n      { getpeople: '(66,\"Macpherson, Joyce B.\")' },\n      { getpeople: '(67,\"Maher, Louis J., Jr.\")' },\n      { getpeople: '(68,\"Maxwell, J. A.\")' },\n      { getpeople: '(69,\"McAndrews, John H.\")' },\n      { getpeople: '(70,\"McDowell, L. L.\")' },\n      { getpeople: '(71,\"Miller, Norton G.\")' },\n      { getpeople: '(72,\"Mode, William N.\")' },\n      { getpeople: '(73,\"Morrison, Alastair\")' },\n      { getpeople: '(74,\"Mott, Robert J.\")' },\n      { getpeople: '(76,\"Nichols, Harvey\")' },\n      { getpeople: '(77,\"Nickmann, Rudy J.\")' },\n      { getpeople: '(78,\"Niering, William A.\")' },\n      { getpeople: '(79,\"Ogden, James Gordon, III\")' },\n      { getpeople: '(80,\"Overpeck, Jonathan T.\")' },\n      { getpeople: '(81,\"Patterson, William Albert, III\")' },\n      { getpeople: '(82,\"Peters, M. A.\")' },\n      { getpeople: '(83,\"Radle, Nancy Jean\")' },\n      { getpeople: '(84,\"Rasmussen, Jack B.\")' },\n      { getpeople: '(85,\"Richard, Pierre J. H.\")' },\n      { getpeople: '(86,\"Ritchie, James C.\")' },\n      { getpeople: '(87,\"Saarnisto, Matti\")' },\n      { getpeople: '(88,\"Samson, Gilles\")' },\n      { getpeople: '(89,\"Savoie, Louise\")' },\n      { getpeople: '(90,\"Shane, Linda C. K.\")' },\n      { getpeople: '(91,\"Sheehan, M. C.\")' },\n      { getpeople: '(92,\"Short, Susan K.\")' },\n      { getpeople: '(93,\"Sirkin, Leslie A.\")' },\n      { getpeople: '(94,\"Smith, Everett Newman, Jr.\")' },\n      { getpeople: '(95,\"Spear, Ray W.\")' },\n      { getpeople: '(96,\"Stravers, Loreen K. Stegeman\")' },\n      { getpeople: '(97,\"Suter, Suzanne M.\")' },\n      { getpeople: '(98,\"Swain, Albert M.\")' },\n      { getpeople: '(99,\"Swain, Patricia C.\")' },\n      { getpeople: '(100,\"Terasmae, Jaan\")' },\n      { getpeople: '(101,\"Van Zant, Kent L.\")' },\n      ... 10431 more items\n    ],\n    message: 'Retrieved all authors PIs'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/authorpis' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/authorpiresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/authorpis' in your API spec\n\nres did not satisfy it because: response should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        getpeople: '(1,\"International Organization for Standardization\")'\n      },\n      { getpeople: '(2,\"United States Central Intelligence Agency\")' },\n      { getpeople: '(3,\"Ahearn, P. J.\")' },\n      { getpeople: '(4,\"Albert, Lois E.\")' },\n      { getpeople: '(5,\"Allen, William H., Jr.\")' },\n      { getpeople: '(6,\"Almendinger, John C.\")' },\n      { getpeople: '(7,\"Anderson, R. Scott\")' },\n      { getpeople: '(8,\"Anderson, Thane W.\")' },\n      { getpeople: '(9,\"Bailey, Robert E.\")' },\n      { getpeople: '(10,\"Ashworth, Allan C.\")' },\n      { getpeople: '(11,\"Baker, Richard G.\")' },\n      { getpeople: '(12,\"Barclay, Frank H.\")' },\n      { getpeople: '(13,\"Bernabo, J. Christopher\")' },\n      { getpeople: '(14,\"Birks, Harry John Betteley\")' },\n      { getpeople: '(15,\"Stiernberg, Edward J.\")' },\n      { getpeople: '(16,\"Bostwick, Lisa G.\")' },\n      { getpeople: '(17,\"Bouchard, Michel A.\")' },\n      { getpeople: '(18,\"Bradbury, J. Platt\")' },\n      { getpeople: '(19,\"Bright, Robert C.\")' },\n      { getpeople: '(20,\"Brubaker, Linda Beck\")' },\n      { getpeople: '(21,\"Bryant, Vaughn M., Jr.\")' },\n      { getpeople: '(22,\"Camfield, M.\")' },\n      { getpeople: '(23,\"Comtois, Paul G.\")' },\n      { getpeople: '(24,\"Cotter, James F. P.\")' },\n      { getpeople: '(25,\"Craig, Alan J.\")' },\n      { getpeople: '(26,\"Crisman, Thomas\")' },\n      { getpeople: '(27,\"Cushing, Edward J., Jr.\")' },\n      { getpeople: '(28,\"Davis, Anthony M.\")' },\n      { getpeople: '(29,\"Davis, Margaret B.\")' },\n      { getpeople: '(30,\"Davis, P. Thompson\")' },\n      { getpeople: '(31,\"Davis, Ronald B.\")' },\n      { getpeople: '(32,\"Delcourt, Hazel R.\")' },\n      { getpeople: '(33,\"Delcourt, Paul A.\")' },\n      { getpeople: '(34,\"Engstrom, Daniel R.\")' },\n      { getpeople: '(35,\"Eyster-Smith, Nancy M.\")' },\n      { getpeople: '(36,\"Farley-Gill, L. D.\")' },\n      { getpeople: '(37,\"Fredlund, Glen G.\")' },\n      { getpeople: '(38,\"Fries, Magnus\")' },\n      { getpeople: '(39,\"Futyma, Richard\")' },\n      { getpeople: '(40,\"Gajewski, Konrad J.\")' },\n      { getpeople: '(41,\"Gaudreau, Denise C.\")' },\n      { getpeople: '(42,\"Gauthier, Robert\")' },\n      { getpeople: '(43,\"Gilliam, Jeanne A.\")' },\n      { getpeople: '(44,\"Grimm, Eric Christopher\")' },\n      { getpeople: '(45,\"Hadden, Kathleen A.\")' },\n      { getpeople: '(46,\"Hansen, Barbara C. S.\")' },\n      { getpeople: '(47,\"Hartman, Richard T.\")' },\n      { getpeople: '(48,\"Heide, Kathleen M.\")' },\n      { getpeople: '(49,\"Ibe, Ralph .A.\")' },\n      { getpeople: '(50,\"Jacobson, G.\")' },\n      { getpeople: '(51,\"Janssen, C. Roel\")' },\n      { getpeople: '(52,\"Jordan, Richard H.\")' },\n      { getpeople: '(53,\"Kapp, Ronald O.\")' },\n      { getpeople: '(54,\"Karrow, Paul F.\")' },\n      { getpeople: '(55,\"Kay, Paul A.\")' },\n      { getpeople: '(56,\"Kerfoot, Wilson Charles\")' },\n      { getpeople: '(57,\"Kim, H. K.\")' },\n      { getpeople: '(58,\"King, James E.\")' },\n      { getpeople: '(59,\"Labelle, Claude\")' },\n      { getpeople: '(60,\"Lamb, Henry F.\")' },\n      { getpeople: '(61,\"Larouche, Alayn C.\")' },\n      { getpeople: '(62,\"Lawrenz, Ronald W.\")' },\n      { getpeople: '(63,\"Lichti-Federovich, Sigrid\")' },\n      { getpeople: '(64,\"Liu, Kam-biu\")' },\n      { getpeople: '(65,\"Livingstone, Daniel A.\")' },\n      { getpeople: '(66,\"Macpherson, Joyce B.\")' },\n      { getpeople: '(67,\"Maher, Louis J., Jr.\")' },\n      { getpeople: '(68,\"Maxwell, J. A.\")' },\n      { getpeople: '(69,\"McAndrews, John H.\")' },\n      { getpeople: '(70,\"McDowell, L. L.\")' },\n      { getpeople: '(71,\"Miller, Norton G.\")' },\n      { getpeople: '(72,\"Mode, William N.\")' },\n      { getpeople: '(73,\"Morrison, Alastair\")' },\n      { getpeople: '(74,\"Mott, Robert J.\")' },\n      { getpeople: '(76,\"Nichols, Harvey\")' },\n      { getpeople: '(77,\"Nickmann, Rudy J.\")' },\n      { getpeople: '(78,\"Niering, William A.\")' },\n      { getpeople: '(79,\"Ogden, James Gordon, III\")' },\n      { getpeople: '(80,\"Overpeck, Jonathan T.\")' },\n      { getpeople: '(81,\"Patterson, William Albert, III\")' },\n      { getpeople: '(82,\"Peters, M. A.\")' },\n      { getpeople: '(83,\"Radle, Nancy Jean\")' },\n      { getpeople: '(84,\"Rasmussen, Jack B.\")' },\n      { getpeople: '(85,\"Richard, Pierre J. H.\")' },\n      { getpeople: '(86,\"Ritchie, James C.\")' },\n      { getpeople: '(87,\"Saarnisto, Matti\")' },\n      { getpeople: '(88,\"Samson, Gilles\")' },\n      { getpeople: '(89,\"Savoie, Louise\")' },\n      { getpeople: '(90,\"Shane, Linda C. K.\")' },\n      { getpeople: '(91,\"Sheehan, M. C.\")' },\n      { getpeople: '(92,\"Short, Susan K.\")' },\n      { getpeople: '(93,\"Sirkin, Leslie A.\")' },\n      { getpeople: '(94,\"Smith, Everett Newman, Jr.\")' },\n      { getpeople: '(95,\"Spear, Ray W.\")' },\n      { getpeople: '(96,\"Stravers, Loreen K. Stegeman\")' },\n      { getpeople: '(97,\"Suter, Suzanne M.\")' },\n      { getpeople: '(98,\"Swain, Albert M.\")' },\n      { getpeople: '(99,\"Swain, Patricia C.\")' },\n      { getpeople: '(100,\"Terasmae, Jaan\")' },\n      { getpeople: '(101,\"Van Zant, Kent L.\")' },\n      ... 10431 more items\n    ],\n    message: 'Retrieved all authors PIs'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/authorpis' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/authorpiresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "4809733f-a62f-492a-a026-abb98e8b98b1",
              "parentUUID": "e040047f-8040-4e0b-a277-c104dac799b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4809733f-a62f-492a-a026-abb98e8b98b1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 584,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5a4a8810-8474-46bc-8fea-5cbdd1db7303",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2aeba4e7-f348-49a2-ba60-1a5543765c9c",
              "parentUUID": "5a4a8810-8474-46bc-8fea-5cbdd1db7303",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2aeba4e7-f348-49a2-ba60-1a5543765c9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b6ae76cf-0760-429f-ba0f-9b50211eb1f3",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 127,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/datasettypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasettyperesponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdatasettypes: '(biomarker,21)' },\n      { getdatasettypes: '(charcoal,16)' },\n      { getdatasettypes: '(\"charcoal surface sample\",33)' },\n      { getdatasettypes: '(chironomid,30)' },\n      { getdatasettypes: '(cladocera,34)' },\n      { getdatasettypes: '(diatom,11)' },\n      { getdatasettypes: '(\"diatom surface sample\",13)' },\n      { getdatasettypes: '(\"diatom top-bottom\",35)' },\n      {\n        getdatasettypes: '(\"energy dispersive X-ray spectroscopy (EDS/EDX)\",20)'\n      },\n      { getdatasettypes: '(geochemistry,14)' },\n      { getdatasettypes: '(geochronologic,1)' },\n      { getdatasettypes: '(insect,8)' },\n      { getdatasettypes: '(\"insect modern\",29)' },\n      { getdatasettypes: '(loss-on-ignition,2)' },\n      { getdatasettypes: '(macrocharcoal,37)' },\n      { getdatasettypes: '(macroinvertebrate,6)' },\n      { getdatasettypes: '(microcharcoal,36)' },\n      { getdatasettypes: '(\"modern biochemistry\",27)' },\n      { getdatasettypes: '(\"organic carbon\",28)' },\n      { getdatasettypes: '(ostracode,9)' },\n      { getdatasettypes: '(\"ostracode surface sample\",12)' },\n      { getdatasettypes: '(paleomagnetic,25)' },\n      { getdatasettypes: '(\"physical sedimentology\",15)' },\n      { getdatasettypes: '(phytolith,23)' },\n      { getdatasettypes: '(\"plant macrofossil\",4)' },\n      { getdatasettypes: '(pollen,3)' },\n      { getdatasettypes: '(\"pollen surface sample\",7)' },\n      { getdatasettypes: '(\"pollen trap\",38)' },\n      { getdatasettypes: '(\"specimen stable isotope\",24)' },\n      { getdatasettypes: '(\"stable isotope\",31)' },\n      { getdatasettypes: '(\"testate amoebae\",17)' },\n      { getdatasettypes: '(\"testate amoebae surface sample\",32)' },\n      { getdatasettypes: '(\"vertebrate fauna\",5)' },\n      { getdatasettypes: '(\"water chemistry\",10)' },\n      { getdatasettypes: '(\"X-ray diffraction (XRD)\",19)' },\n      { getdatasettypes: '(\"X-ray fluorescence (XRF)\",18)' }\n    ],\n    message: 'Retrieved all datasettypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/datasettypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasettyperesponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/datasettypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasettyperesponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdatasettypes: '(biomarker,21)' },\n      { getdatasettypes: '(charcoal,16)' },\n      { getdatasettypes: '(\"charcoal surface sample\",33)' },\n      { getdatasettypes: '(chironomid,30)' },\n      { getdatasettypes: '(cladocera,34)' },\n      { getdatasettypes: '(diatom,11)' },\n      { getdatasettypes: '(\"diatom surface sample\",13)' },\n      { getdatasettypes: '(\"diatom top-bottom\",35)' },\n      {\n        getdatasettypes: '(\"energy dispersive X-ray spectroscopy (EDS/EDX)\",20)'\n      },\n      { getdatasettypes: '(geochemistry,14)' },\n      { getdatasettypes: '(geochronologic,1)' },\n      { getdatasettypes: '(insect,8)' },\n      { getdatasettypes: '(\"insect modern\",29)' },\n      { getdatasettypes: '(loss-on-ignition,2)' },\n      { getdatasettypes: '(macrocharcoal,37)' },\n      { getdatasettypes: '(macroinvertebrate,6)' },\n      { getdatasettypes: '(microcharcoal,36)' },\n      { getdatasettypes: '(\"modern biochemistry\",27)' },\n      { getdatasettypes: '(\"organic carbon\",28)' },\n      { getdatasettypes: '(ostracode,9)' },\n      { getdatasettypes: '(\"ostracode surface sample\",12)' },\n      { getdatasettypes: '(paleomagnetic,25)' },\n      { getdatasettypes: '(\"physical sedimentology\",15)' },\n      { getdatasettypes: '(phytolith,23)' },\n      { getdatasettypes: '(\"plant macrofossil\",4)' },\n      { getdatasettypes: '(pollen,3)' },\n      { getdatasettypes: '(\"pollen surface sample\",7)' },\n      { getdatasettypes: '(\"pollen trap\",38)' },\n      { getdatasettypes: '(\"specimen stable isotope\",24)' },\n      { getdatasettypes: '(\"stable isotope\",31)' },\n      { getdatasettypes: '(\"testate amoebae\",17)' },\n      { getdatasettypes: '(\"testate amoebae surface sample\",32)' },\n      { getdatasettypes: '(\"vertebrate fauna\",5)' },\n      { getdatasettypes: '(\"water chemistry\",10)' },\n      { getdatasettypes: '(\"X-ray diffraction (XRD)\",19)' },\n      { getdatasettypes: '(\"X-ray fluorescence (XRF)\",18)' }\n    ],\n    message: 'Retrieved all datasettypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/datasettypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasettyperesponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "d073442b-0cda-4a91-8cf7-22228c1f2a2f",
              "parentUUID": "b6ae76cf-0760-429f-ba0f-9b50211eb1f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d073442b-0cda-4a91-8cf7-22228c1f2a2f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8fe5c277-da45-4cd4-961f-e6d1bee49c59",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 95,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/depositionalresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdeptenvtypesroot: '(6,Biological,11)' },\n      { getdeptenvtypesroot: '(99,Spring,7)' },\n      { getdeptenvtypesroot: '(19,Lacustrine,4)' },\n      { getdeptenvtypesroot: '(93,Sampler,4)' },\n      { getdeptenvtypesroot: '(1,Archaeological,7)' },\n      { getdeptenvtypesroot: '(16,Estuarine,3)' },\n      { getdeptenvtypesroot: '(51,Marine,10)' },\n      { getdeptenvtypesroot: '(103,Terrestrial,8)' },\n      { getdeptenvtypesroot: '(136,Other,3)' },\n      { getdeptenvtypesroot: '(180,Well,2)' },\n      { getdeptenvtypesroot: '(76,Riverine,5)' },\n      { getdeptenvtypesroot: '(137,Unknown,1)' },\n      { getdeptenvtypesroot: '(59,Palustrine,7)' }\n    ],\n    message: 'Retrieved root depositional environment types'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/depositionalresponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/depositionalresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdeptenvtypesroot: '(6,Biological,11)' },\n      { getdeptenvtypesroot: '(99,Spring,7)' },\n      { getdeptenvtypesroot: '(19,Lacustrine,4)' },\n      { getdeptenvtypesroot: '(93,Sampler,4)' },\n      { getdeptenvtypesroot: '(1,Archaeological,7)' },\n      { getdeptenvtypesroot: '(16,Estuarine,3)' },\n      { getdeptenvtypesroot: '(51,Marine,10)' },\n      { getdeptenvtypesroot: '(103,Terrestrial,8)' },\n      { getdeptenvtypesroot: '(136,Other,3)' },\n      { getdeptenvtypesroot: '(180,Well,2)' },\n      { getdeptenvtypesroot: '(76,Riverine,5)' },\n      { getdeptenvtypesroot: '(137,Unknown,1)' },\n      { getdeptenvtypesroot: '(59,Palustrine,7)' }\n    ],\n    message: 'Retrieved root depositional environment types'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/depositionalresponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "0d83518b-9b1d-4b25-8f00-a1a89108215d",
              "parentUUID": "8fe5c277-da45-4cd4-961f-e6d1bee49c59",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0d83518b-9b1d-4b25-8f00-a1a89108215d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6ac85e61-d528-44ac-aa3c-065c78510ef0",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cf81a280-2025-4f17-b22a-bc92a812b9b0",
              "parentUUID": "6ac85e61-d528-44ac-aa3c-065c78510ef0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf81a280-2025-4f17-b22a-bc92a812b9b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "22715124-76ac-4839-af7b-f49d2ff69772",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taphonomyresponse\n\nres contained: {\n  body: {\n    status: 'failure',\n    data: null,\n    message: 'No datasetTypeId provided.'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taphonomyresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taphonomyresponse\n\nres contained: {\n  body: {\n    status: 'failure',\n    data: null,\n    message: 'No datasetTypeId provided.'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taphonomyresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "919553f0-e08b-4039-b5a6-922d3ebe3be3",
              "parentUUID": "22715124-76ac-4839-af7b-f49d2ff69772",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "919553f0-e08b-4039-b5a6-922d3ebe3be3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d10fbcc0-7737-4bff-88a9-644199f66395",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 178,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taxagroupresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { gettaxagrouptypes: '(ACR,Acritarchs)' },\n      { gettaxagrouptypes: '(ALG,Algae)' },\n      { gettaxagrouptypes: '(ANM,\"Animals undiff.\")' },\n      { gettaxagrouptypes: '(ANL,Annelids)' },\n      { gettaxagrouptypes: '(AQU,\"Aquatic parameters\")' },\n      { gettaxagrouptypes: '(ART,\"Arthropods undiff.\")' },\n      { gettaxagrouptypes: '(AVE,Birds)' },\n      { gettaxagrouptypes: '(BRC,Brachiopods)' },\n      { gettaxagrouptypes: '(BRY,Bryophytes)' },\n      { gettaxagrouptypes: '(BRZ,Bryozoa)' },\n      { gettaxagrouptypes: '(CHO,Chromista)' },\n      { gettaxagrouptypes: '(CRU,\"Crustaceans undiff.\")' },\n      { gettaxagrouptypes: '(DIA,Diatoms)' },\n      { gettaxagrouptypes: '(DIN,Dinoflagellates)' },\n      { gettaxagrouptypes: '(ECH,Echinoderms)' },\n      { gettaxagrouptypes: '(FSH,Fish)' },\n      { gettaxagrouptypes: '(FLT,Flatworms)' },\n      { gettaxagrouptypes: '(FOR,Foraminifera)' },\n      { gettaxagrouptypes: '(FUN,Fungi)' },\n      { gettaxagrouptypes: '(INS,Insects)' },\n      { gettaxagrouptypes: '(MAM,Mammals)' },\n      { gettaxagrouptypes: '(MOL,Molluscs)' },\n      { gettaxagrouptypes: '(NEM,Nematodes)' },\n      { gettaxagrouptypes: '(CAR,\"Organic carbon\")' },\n      { gettaxagrouptypes: '(OST,Ostracode)' },\n      { gettaxagrouptypes: '(MAG,Paleomagnetics)' },\n      { gettaxagrouptypes: '(PHY,\"Physical variables\")' },\n      { gettaxagrouptypes: '(PHT,Phytolith)' },\n      { gettaxagrouptypes: '(PLA,\"Plants undiff.\")' },\n      { gettaxagrouptypes: '(PRO,\"Protista undiff.\")' },\n      { gettaxagrouptypes: '(HRP,\"Reptiles and amphibians\")' },\n      { gettaxagrouptypes: '(ROT,Rotifers)' },\n      { gettaxagrouptypes: '(SIL,Silicoflagellates)' },\n      { gettaxagrouptypes: '(SPO,Sponges)' },\n      { gettaxagrouptypes: '(ISO,\"Stable isotopes\")' },\n      { gettaxagrouptypes: '(TES,\"Testate amoebae\")' },\n      { gettaxagrouptypes: '(VPL,\"Vascular plants\")' },\n      { gettaxagrouptypes: '(VER,\"Vertebrates undiff.\")' }\n    ],\n    message: 'Retrieved all taxagrouptypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxagroupresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taxagroupresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { gettaxagrouptypes: '(ACR,Acritarchs)' },\n      { gettaxagrouptypes: '(ALG,Algae)' },\n      { gettaxagrouptypes: '(ANM,\"Animals undiff.\")' },\n      { gettaxagrouptypes: '(ANL,Annelids)' },\n      { gettaxagrouptypes: '(AQU,\"Aquatic parameters\")' },\n      { gettaxagrouptypes: '(ART,\"Arthropods undiff.\")' },\n      { gettaxagrouptypes: '(AVE,Birds)' },\n      { gettaxagrouptypes: '(BRC,Brachiopods)' },\n      { gettaxagrouptypes: '(BRY,Bryophytes)' },\n      { gettaxagrouptypes: '(BRZ,Bryozoa)' },\n      { gettaxagrouptypes: '(CHO,Chromista)' },\n      { gettaxagrouptypes: '(CRU,\"Crustaceans undiff.\")' },\n      { gettaxagrouptypes: '(DIA,Diatoms)' },\n      { gettaxagrouptypes: '(DIN,Dinoflagellates)' },\n      { gettaxagrouptypes: '(ECH,Echinoderms)' },\n      { gettaxagrouptypes: '(FSH,Fish)' },\n      { gettaxagrouptypes: '(FLT,Flatworms)' },\n      { gettaxagrouptypes: '(FOR,Foraminifera)' },\n      { gettaxagrouptypes: '(FUN,Fungi)' },\n      { gettaxagrouptypes: '(INS,Insects)' },\n      { gettaxagrouptypes: '(MAM,Mammals)' },\n      { gettaxagrouptypes: '(MOL,Molluscs)' },\n      { gettaxagrouptypes: '(NEM,Nematodes)' },\n      { gettaxagrouptypes: '(CAR,\"Organic carbon\")' },\n      { gettaxagrouptypes: '(OST,Ostracode)' },\n      { gettaxagrouptypes: '(MAG,Paleomagnetics)' },\n      { gettaxagrouptypes: '(PHY,\"Physical variables\")' },\n      { gettaxagrouptypes: '(PHT,Phytolith)' },\n      { gettaxagrouptypes: '(PLA,\"Plants undiff.\")' },\n      { gettaxagrouptypes: '(PRO,\"Protista undiff.\")' },\n      { gettaxagrouptypes: '(HRP,\"Reptiles and amphibians\")' },\n      { gettaxagrouptypes: '(ROT,Rotifers)' },\n      { gettaxagrouptypes: '(SIL,Silicoflagellates)' },\n      { gettaxagrouptypes: '(SPO,Sponges)' },\n      { gettaxagrouptypes: '(ISO,\"Stable isotopes\")' },\n      { gettaxagrouptypes: '(TES,\"Testate amoebae\")' },\n      { gettaxagrouptypes: '(VPL,\"Vascular plants\")' },\n      { gettaxagrouptypes: '(VER,\"Vertebrates undiff.\")' }\n    ],\n    message: 'Retrieved all taxagrouptypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxagroupresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "315874fa-5d7a-490a-a6b5-c45cfe0ac4d5",
              "parentUUID": "d10fbcc0-7737-4bff-88a9-644199f66395",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "315874fa-5d7a-490a-a6b5-c45cfe0ac4d5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 178,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4c45c008-084c-4bb7-86c4-bed59853efc4",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3011,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "52077d8a-9d31-420e-8691-cea9115ca48e",
              "parentUUID": "4c45c008-084c-4bb7-86c4-bed59853efc4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "52077d8a-9d31-420e-8691-cea9115ca48e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3011,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "304d2672-5eda-44a6-af7b-61f53b00e9b1",
          "title": "GET /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronology/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "6ea825dc-0483-4b34-83b2-bdeae302f948",
              "parentUUID": "304d2672-5eda-44a6-af7b-61f53b00e9b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6ea825dc-0483-4b34-83b2-bdeae302f948"
          ],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9e9559a3-d0e6-416a-ab3f-10af8ec38588",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "1a43f8b2-294f-4f23-a52d-67665d984bf8",
              "parentUUID": "9e9559a3-d0e6-416a-ab3f-10af8ec38588",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1a43f8b2-294f-4f23-a52d-67665d984bf8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fc9554f5-8aa1-4723-806f-722bc053a48e",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3d99ced1-db7c-4154-83f2-af266b8dd88c",
              "parentUUID": "fc9554f5-8aa1-4723-806f-722bc053a48e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d99ced1-db7c-4154-83f2-af266b8dd88c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "97c95021-f331-4e23-b545-33c287a73326",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 229,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "4bcb4073-8357-4c88-a2a0-16d7fbea743f",
              "parentUUID": "97c95021-f331-4e23-b545-33c287a73326",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4bcb4073-8357-4c88-a2a0-16d7fbea743f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 229,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e88dac89-43cb-43bb-8b7c-7f792c429508",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "6e2ab394-170f-4afe-b10a-a5f70a3d8011",
              "parentUUID": "e88dac89-43cb-43bb-8b7c-7f792c429508",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6e2ab394-170f-4afe-b10a-a5f70a3d8011"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6acafd52-8283-482c-bf83-3040ef524990",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ea284422-78c3-4595-9758-4c7e5596c603",
              "parentUUID": "6acafd52-8283-482c-bf83-3040ef524990",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ea284422-78c3-4595-9758-4c7e5596c603"
          ],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4e16bd1c-b6d5-4837-a256-47273ea55140",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1867,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        sites: {\n          site: {\n            handle: 'ADYCHA',\n            siteid: 11,\n            altitude: 130,\n            sitename: 'Konus Exposure, Adycha River',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n            sitenotes: 'Adycha River, Lower Yana River.',\n            collectionunit: null,\n            sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n            collectionunitid: 11\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3097s', '10.21233/n3d59w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 8820,\n                  ageyoung: 1000\n                }\n              ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 11,\n              datasetpi: [\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                },\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 7860,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUILAR',\n            siteid: 15,\n            altitude: 4000,\n            sitename: 'Aguilar',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n            collectionunitid: 15\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3g974', '10.21233/n3w88w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9822,\n                  ageyoung: 0\n                }\n              ],\n              database: 'Latin American Pollen Database',\n              datasetid: 15,\n              datasetpi: [\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                },\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7863,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGE',\n            siteid: 12,\n            altitude: 58,\n            sitename: 'Ageröds Mosse',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n            sitenotes: 'Surrounding vegetation: birch woodland.',\n            collectionunit: null,\n            sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n            collectionunitid: 12\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/znex-sp94' ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 11004,\n                  ageyoung: -26\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9660,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 12,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                },\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Regnéll Joachim.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7861,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '16-1',\n            siteid: 3,\n            altitude: 285,\n            sitename: '16/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n            sitenotes: null,\n            collectionunit: '16/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 3\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/g2yc-7s57', '10.21233/n3rp48' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 3,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-1',\n            siteid: 4,\n            altitude: 235,\n            sitename: '17/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n            sitenotes: null,\n            collectionunit: '17/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 4\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/7s96-8m25',\n                '10.21233/n39g6x',\n                '10.21233/n3qp4z',\n                '10.21233/n3wh55'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 4,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADANGE',\n            siteid: 9,\n            altitude: 1750,\n            sitename: 'Adange',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n            sitenotes: 'The site is the wide part of the mouth of the river.',\n            collectionunit: null,\n            sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n            collectionunitid: 9\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3301b',\n                '10.21233/n37t27',\n                '10.21233/n3np4b'\n              ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 6051,\n                  ageyoung: -475\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4000,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 9,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Kvavadze Eliso V.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7859,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC2',\n            siteid: 14,\n            altitude: 4210,\n            sitename: 'Aguas Calientes 2',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Mire.',\n            collectionunitid: 14\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3101q', '10.21233/n3m10z' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 14,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7862,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-3',\n            siteid: 6,\n            altitude: 255,\n            sitename: '17/3',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n            sitenotes: null,\n            collectionunit: '17/3',\n            sitedescription: 'Lake.',\n            collectionunitid: 6\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n32011',\n                '10.21233/n3g59h',\n                '10.21233/n3n09b'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 6,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ABALONE',\n            siteid: 8,\n            altitude: 0,\n            sitename: 'Abalone Rocks Marsh',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n            collectionunitid: 8\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n36p49',\n                '10.21233/n3ch5h',\n                '10.21233/n3sg68'\n              ],\n              agerange: [\n                {\n                  units: 'Calendar years BP',\n                  ageold: 6904,\n                  ageyoung: -43\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 8,\n              datasetpi: [\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7858,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10469,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'charcoal',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADC001',\n            siteid: 10,\n            altitude: 37,\n            sitename: 'Site 1 (Cohen unpublished)',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: null,\n            collectionunitid: 10\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3409p', '10.21233/n3j01c' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10,\n              datasetpi: [\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                },\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-2',\n            siteid: 5,\n            altitude: 335,\n            sitename: '17/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n            sitenotes: null,\n            collectionunit: '17/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 5\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/8rvx-be32',\n                '10.21233/n35p40',\n                '10.21233/n3kw21',\n                '10.21233/n3rt1h'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 5,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC1',\n            siteid: 13,\n            altitude: 4210,\n            sitename: 'Aguas Calientes',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n            sitenotes: null,\n            collectionunit: '1',\n            sitedescription: 'Mire.',\n            collectionunitid: 13\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n34s3b', '10.21233/n3qt16' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 13,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '3PINES',\n            siteid: 7,\n            altitude: 294,\n            sitename: 'Three Pines Bog',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n            sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n            collectionunit: null,\n            sitedescription: 'Bog.',\n            collectionunitid: 7\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3bc7k',\n                '10.21233/n3h98t',\n                '10.21233/n3x59j'\n              ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 6485,\n                  ageyoung: -26\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 7,\n              datasetpi: [\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7857,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AHL5',\n            siteid: 16,\n            altitude: 2,\n            sitename: 'Ahlenmoor',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n            sitenotes: null,\n            collectionunit: 'AHL V',\n            sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n            collectionunitid: 16\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3bh6k', '10.21233/n3rg6z' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4276,\n                  ageyoung: 990\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 16,\n              datasetpi: [\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7864,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-1',\n            siteid: 1,\n            altitude: 244,\n            sitename: '15/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n            sitenotes: null,\n            collectionunit: '15/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 1\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-2',\n            siteid: 2,\n            altitude: 305,\n            sitename: '15/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n            sitenotes: null,\n            collectionunit: '15/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 2\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/hhsf-6760', '10.21233/n3wc7j' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 2,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/datasetv2' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        sites: {\n          site: {\n            handle: 'ADYCHA',\n            siteid: 11,\n            altitude: 130,\n            sitename: 'Konus Exposure, Adycha River',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n            sitenotes: 'Adycha River, Lower Yana River.',\n            collectionunit: null,\n            sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n            collectionunitid: 11\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3097s', '10.21233/n3d59w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 8820,\n                  ageyoung: 1000\n                }\n              ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 11,\n              datasetpi: [\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                },\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 7860,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUILAR',\n            siteid: 15,\n            altitude: 4000,\n            sitename: 'Aguilar',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n            collectionunitid: 15\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3g974', '10.21233/n3w88w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9822,\n                  ageyoung: 0\n                }\n              ],\n              database: 'Latin American Pollen Database',\n              datasetid: 15,\n              datasetpi: [\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                },\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7863,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGE',\n            siteid: 12,\n            altitude: 58,\n            sitename: 'Ageröds Mosse',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n            sitenotes: 'Surrounding vegetation: birch woodland.',\n            collectionunit: null,\n            sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n            collectionunitid: 12\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/znex-sp94' ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 11004,\n                  ageyoung: -26\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9660,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 12,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                },\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Regnéll Joachim.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7861,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '16-1',\n            siteid: 3,\n            altitude: 285,\n            sitename: '16/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n            sitenotes: null,\n            collectionunit: '16/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 3\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/g2yc-7s57', '10.21233/n3rp48' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 3,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-1',\n            siteid: 4,\n            altitude: 235,\n            sitename: '17/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n            sitenotes: null,\n            collectionunit: '17/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 4\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/7s96-8m25',\n                '10.21233/n39g6x',\n                '10.21233/n3qp4z',\n                '10.21233/n3wh55'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 4,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADANGE',\n            siteid: 9,\n            altitude: 1750,\n            sitename: 'Adange',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n            sitenotes: 'The site is the wide part of the mouth of the river.',\n            collectionunit: null,\n            sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n            collectionunitid: 9\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3301b',\n                '10.21233/n37t27',\n                '10.21233/n3np4b'\n              ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 6051,\n                  ageyoung: -475\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4000,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 9,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Kvavadze Eliso V.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7859,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC2',\n            siteid: 14,\n            altitude: 4210,\n            sitename: 'Aguas Calientes 2',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Mire.',\n            collectionunitid: 14\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3101q', '10.21233/n3m10z' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 14,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7862,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-3',\n            siteid: 6,\n            altitude: 255,\n            sitename: '17/3',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n            sitenotes: null,\n            collectionunit: '17/3',\n            sitedescription: 'Lake.',\n            collectionunitid: 6\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n32011',\n                '10.21233/n3g59h',\n                '10.21233/n3n09b'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 6,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ABALONE',\n            siteid: 8,\n            altitude: 0,\n            sitename: 'Abalone Rocks Marsh',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n            collectionunitid: 8\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n36p49',\n                '10.21233/n3ch5h',\n                '10.21233/n3sg68'\n              ],\n              agerange: [\n                {\n                  units: 'Calendar years BP',\n                  ageold: 6904,\n                  ageyoung: -43\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 8,\n              datasetpi: [\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7858,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10469,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'charcoal',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADC001',\n            siteid: 10,\n            altitude: 37,\n            sitename: 'Site 1 (Cohen unpublished)',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: null,\n            collectionunitid: 10\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3409p', '10.21233/n3j01c' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10,\n              datasetpi: [\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                },\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-2',\n            siteid: 5,\n            altitude: 335,\n            sitename: '17/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n            sitenotes: null,\n            collectionunit: '17/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 5\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/8rvx-be32',\n                '10.21233/n35p40',\n                '10.21233/n3kw21',\n                '10.21233/n3rt1h'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 5,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC1',\n            siteid: 13,\n            altitude: 4210,\n            sitename: 'Aguas Calientes',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n            sitenotes: null,\n            collectionunit: '1',\n            sitedescription: 'Mire.',\n            collectionunitid: 13\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n34s3b', '10.21233/n3qt16' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 13,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '3PINES',\n            siteid: 7,\n            altitude: 294,\n            sitename: 'Three Pines Bog',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n            sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n            collectionunit: null,\n            sitedescription: 'Bog.',\n            collectionunitid: 7\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3bc7k',\n                '10.21233/n3h98t',\n                '10.21233/n3x59j'\n              ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 6485,\n                  ageyoung: -26\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 7,\n              datasetpi: [\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7857,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AHL5',\n            siteid: 16,\n            altitude: 2,\n            sitename: 'Ahlenmoor',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n            sitenotes: null,\n            collectionunit: 'AHL V',\n            sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n            collectionunitid: 16\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3bh6k', '10.21233/n3rg6z' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4276,\n                  ageyoung: 990\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 16,\n              datasetpi: [\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7864,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-1',\n            siteid: 1,\n            altitude: 244,\n            sitename: '15/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n            sitenotes: null,\n            collectionunit: '15/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 1\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-2',\n            siteid: 2,\n            altitude: 305,\n            sitename: '15/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n            sitenotes: null,\n            collectionunit: '15/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 2\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/hhsf-6760', '10.21233/n3wc7j' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 2,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/datasetv2' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a32b90b9-78da-4df7-a184-1019ad39305c",
              "parentUUID": "4e16bd1c-b6d5-4837-a256-47273ea55140",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a32b90b9-78da-4df7-a184-1019ad39305c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1867,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b7eb0bef-94c3-4571-91e0-17ec41a111a1",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 801,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "677b4081-dbac-4470-8bf3-345534df4d0a",
              "parentUUID": "b7eb0bef-94c3-4571-91e0-17ec41a111a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "677b4081-dbac-4470-8bf3-345534df4d0a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 801,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "bc5850e0-c7e7-4b73-ad75-0e647bc2d02f",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 118,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologiesresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/chronologiesresponse' }\n      }\n    },\n    description: 'chronology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologiesresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/chronologiesresponse' }\n      }\n    },\n    description: 'chronology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "740d5e36-4567-4a21-8296-fc32da8ada4a",
              "parentUUID": "bc5850e0-c7e7-4b73-ad75-0e647bc2d02f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "740d5e36-4567-4a21-8296-fc32da8ada4a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "754d931c-7c84-4e82-bbfe-59045ca70ef1",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ae3ac89c-f11b-4e72-9350-0298fdc48491",
              "parentUUID": "754d931c-7c84-4e82-bbfe-59045ca70ef1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae3ac89c-f11b-4e72-9350-0298fdc48491"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8ed1be2d-97d4-4353-99bd-cda0ab8d867c",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/doiresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [ { datasetid: 1, dois: '10.21233/9twd-s570' } ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/doiresponse' } }\n    },\n    description: 'DOI'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/doiresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [ { datasetid: 1, dois: '10.21233/9twd-s570' } ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/doiresponse' } }\n    },\n    description: 'DOI'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "0bb1f090-3755-4789-8edb-4745b8ce8ab0",
              "parentUUID": "8ed1be2d-97d4-4353-99bd-cda0ab8d867c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0bb1f090-3755-4789-8edb-4745b8ce8ab0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "acb0f933-8fcb-458b-8935-b0dc913c5232",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 93,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/lithologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/lithologyresponse' } }\n    },\n    description: 'Lithology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/lithologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/lithologyresponse' } }\n    },\n    description: 'Lithology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "cd856d26-66f3-4890-9a11-404c340f96b4",
              "parentUUID": "acb0f933-8fcb-458b-8935-b0dc913c5232",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cd856d26-66f3-4890-9a11-404c340f96b4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 93,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b7b48cd8-5671-4744-a878-7209f0be19d6",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 103,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "5b46fda3-099a-4139-b6f2-0ae178cae262",
              "parentUUID": "b7b48cd8-5671-4744-a878-7209f0be19d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5b46fda3-099a-4139-b6f2-0ae178cae262"
          ],
          "pending": [],
          "skipped": [],
          "duration": 103,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f07369a1-4ed4-480e-b2ec-b9e9ff1e1bbc",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "159aef5f-a7bd-4007-b440-783a2d066a3c",
              "parentUUID": "f07369a1-4ed4-480e-b2ec-b9e9ff1e1bbc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "159aef5f-a7bd-4007-b440-783a2d066a3c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ca565b83-2163-4310-a350-17ae71406628",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 112,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "19917456-56f7-4bbe-91af-6a4012547ec6",
              "parentUUID": "ca565b83-2163-4310-a350-17ae71406628",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "19917456-56f7-4bbe-91af-6a4012547ec6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "284fce09-837c-4d21-8a74-57ad09ef7b57",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 90,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "843ff827-db4d-4044-9179-5610a49368b4",
              "parentUUID": "284fce09-837c-4d21-8a74-57ad09ef7b57",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "843ff827-db4d-4044-9179-5610a49368b4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 90,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9502e82f-ffb3-4736-9d39-00f66bc264f5",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "6bc2fb9c-8b79-4c5b-aa95-1652e5f24d37",
              "parentUUID": "9502e82f-ffb3-4736-9d39-00f66bc264f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6bc2fb9c-8b79-4c5b-aa95-1652e5f24d37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "785821cd-43a8-4007-a91d-df9a653f4f0d",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a35e8e6a-5f77-4aa5-ba5e-917be8858b96",
              "parentUUID": "785821cd-43a8-4007-a91d-df9a653f4f0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a35e8e6a-5f77-4aa5-ba5e-917be8858b96"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ab4e2d5b-df36-4e2d-b42c-291c2a1516ea",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "74ab0cf3-c2a5-4776-b5ae-40da4a4b1b8b",
              "parentUUID": "ab4e2d5b-df36-4e2d-b42c-291c2a1516ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "74ab0cf3-c2a5-4776-b5ae-40da4a4b1b8b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7269b125-e523-4711-a07e-72a5d2f74fdf",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f889c139-a928-408a-8d88-b4e4e990548c",
              "parentUUID": "7269b125-e523-4711-a07e-72a5d2f74fdf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f889c139-a928-408a-8d88-b4e4e990548c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 139,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "74e254da-bf8c-4653-8b2c-522d1caba2b2",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "5c646215-c6e8-49e2-a339-cd2821eb3b18",
              "parentUUID": "74e254da-bf8c-4653-8b2c-522d1caba2b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5c646215-c6e8-49e2-a339-cd2821eb3b18"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1928345c-d564-472f-870c-054db4a61d0e",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a7f68cf9-d552-4fd8-b83d-8c9f2c800e30",
              "parentUUID": "1928345c-d564-472f-870c-054db4a61d0e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7f68cf9-d552-4fd8-b83d-8c9f2c800e30"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 99,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b8e41206-3d0f-4756-8e90-66038c894ab1",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 144,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "86dcb53d-e94c-4b6f-b68e-2f25100c6626",
              "parentUUID": "b8e41206-3d0f-4756-8e90-66038c894ab1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "86dcb53d-e94c-4b6f-b68e-2f25100c6626"
          ],
          "pending": [],
          "skipped": [],
          "duration": 144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f9aa4f2f-e7b5-40a8-a39f-6b87fcd6572c",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0978eb1c-4b63-4682-92e2-f95cde9f90a2",
              "parentUUID": "f9aa4f2f-e7b5-40a8-a39f-6b87fcd6572c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0978eb1c-4b63-4682-92e2-f95cde9f90a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4ec8544d-51ea-4170-9cb8-05fb03f7ce9a",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "59a680c3-b58a-4d37-b403-d52934a050e6",
              "parentUUID": "4ec8544d-51ea-4170-9cb8-05fb03f7ce9a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "59a680c3-b58a-4d37-b403-d52934a050e6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "527c91f4-7364-4dbc-aafb-5d6c42dfc97e",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "034a659e-a507-456a-b6dc-ba830fabcb73",
              "parentUUID": "527c91f4-7364-4dbc-aafb-5d6c42dfc97e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "034a659e-a507-456a-b6dc-ba830fabcb73"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "037ca4a6-c8e3-4454-8bbf-c8fa084940ce",
          "title": "GET /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "c1de27ff-ff5c-4647-9d49-5155caf55327",
              "parentUUID": "037ca4a6-c8e3-4454-8bbf-c8fa084940ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c1de27ff-ff5c-4647-9d49-5155caf55327"
          ],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e2a8e836-7d22-40d6-a32a-c8cc21629e69",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "4a8121b7-3a9d-482c-9540-ce88c08e3e6f",
              "parentUUID": "e2a8e836-7d22-40d6-a32a-c8cc21629e69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4a8121b7-3a9d-482c-9540-ce88c08e3e6f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "13bea8a3-dc08-4972-bb1e-b39483685738",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "16167c40-d26f-4301-bdc9-5875e7918a32",
              "parentUUID": "13bea8a3-dc08-4972-bb1e-b39483685738",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "16167c40-d26f-4301-bdc9-5875e7918a32"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d350b5d0-2f2d-473a-bd71-6f09ff3f8277",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 24,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "49f60eb5-03ed-4333-8d9c-f6bfdd5d4523",
              "parentUUID": "d350b5d0-2f2d-473a-bd71-6f09ff3f8277",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "49f60eb5-03ed-4333-8d9c-f6bfdd5d4523"
          ],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2d1e8962-0708-4e2d-bf1a-7b1df7511476",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1135493c-d56c-4631-ae51-a62c18769f3e",
              "parentUUID": "2d1e8962-0708-4e2d-bf1a-7b1df7511476",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1135493c-d56c-4631-ae51-a62c18769f3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a3824904-e3db-48ee-b678-53f92c1cc4a6",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cb1dc323-e62e-4e3c-b985-70df9dc9d3c7",
              "parentUUID": "a3824904-e3db-48ee-b678-53f92c1cc4a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb1dc323-e62e-4e3c-b985-70df9dc9d3c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 234,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6563c1b9-77e0-4055-9e2c-7779d15e7210",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "556f0a25-5a34-4ed5-87f1-2469f6b27127",
              "parentUUID": "6563c1b9-77e0-4055-9e2c-7779d15e7210",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "556f0a25-5a34-4ed5-87f1-2469f6b27127"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "bc059481-d3d8-4630-93f4-d565cd39fe8b",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 114,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/chronologyresponse' } }\n    },\n    description: 'chronology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/chronologyresponse' } }\n    },\n    description: 'chronology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "52a66728-256d-4092-a66f-9089a33f634e",
              "parentUUID": "bc059481-d3d8-4630-93f4-d565cd39fe8b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "52a66728-256d-4092-a66f-9089a33f634e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "58d90b05-8c6c-4314-b74f-70c16c8cba05",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "39edecc3-6347-4d03-9512-8332d1af60cf",
              "parentUUID": "58d90b05-8c6c-4314-b74f-70c16c8cba05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39edecc3-6347-4d03-9512-8332d1af60cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d980dba6-ba05-4f8e-acd2-6d62d8614865",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1085,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "8ec80860-620d-466b-a9b5-c14083f622a0",
              "parentUUID": "d980dba6-ba05-4f8e-acd2-6d62d8614865",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8ec80860-620d-466b-a9b5-c14083f622a0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1085,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "29ace118-77d9-420d-86de-e568ba8b06fb",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "3bf84c6f-eca7-4d67-8c08-391930d7db48",
              "parentUUID": "29ace118-77d9-420d-86de-e568ba8b06fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3bf84c6f-eca7-4d67-8c08-391930d7db48"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4bbd9831-c252-46bb-8b4c-51108d8df35f",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7add0c6e-dedb-4099-b486-6ec7747e3761",
              "parentUUID": "4bbd9831-c252-46bb-8b4c-51108d8df35f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7add0c6e-dedb-4099-b486-6ec7747e3761"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "67900a31-cf87-4151-9cba-912ff58dc3f5",
          "title": "GET /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 30,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "c236e1cc-d9ad-49f7-8e76-b587a1959f68",
              "parentUUID": "67900a31-cf87-4151-9cba-912ff58dc3f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c236e1cc-d9ad-49f7-8e76-b587a1959f68"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1f817965-246f-4e2e-882c-3a7eb99533be",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "d9fdc799-4b7a-4e8d-8dd9-1ec0e9881604",
              "parentUUID": "1f817965-246f-4e2e-882c-3a7eb99533be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d9fdc799-4b7a-4e8d-8dd9-1ec0e9881604"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "154832a8-2cea-498c-8e1d-05da0f354cda",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 87,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "d604bb67-440b-485b-a885-2fca3e07f5b2",
              "parentUUID": "154832a8-2cea-498c-8e1d-05da0f354cda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d604bb67-440b-485b-a885-2fca3e07f5b2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ad54e1b7-ad31-45eb-8404-3d8c618584af",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 86,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "7b7d0605-1734-4a34-aa1a-1f2e20b985e5",
              "parentUUID": "ad54e1b7-ad31-45eb-8404-3d8c618584af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7b7d0605-1734-4a34-aa1a-1f2e20b985e5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 86,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b82a0dc3-00d8-4364-83c6-d78a8abf5f6a",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 92,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "1ea0354b-7f75-4d0c-a852-06944e65890d",
              "parentUUID": "b82a0dc3-00d8-4364-83c6-d78a8abf5f6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1ea0354b-7f75-4d0c-a852-06944e65890d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 92,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3274d5a6-d15c-4b52-b38a-7164cec7bef1",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 103,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in your API spec\n\nres did not satisfy it because: status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 1,\n        taxoncode: 'Abi',\n        taxonname: 'Abies',\n        author: 'Miller, 1754',\n        valid: true,\n        highertaxonid: 329,\n        extinct: false,\n        taxagroupid: 'VPL',\n        publicationid: 299,\n        validatorid: 44,\n        validatedate: '2017-04-21T07:00:00.000Z',\n        notes: null,\n        recdatecreated: '2012-03-21T07:00:00.000Z',\n        recdatemodified: '2017-04-21T17:46:35.000Z'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxa' } }\n    },\n    description: 'A taxon or array of taxa.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in your API spec\n\nres did not satisfy it because: status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 1,\n        taxoncode: 'Abi',\n        taxonname: 'Abies',\n        author: 'Miller, 1754',\n        valid: true,\n        highertaxonid: 329,\n        extinct: false,\n        taxagroupid: 'VPL',\n        publicationid: 299,\n        validatorid: 44,\n        validatedate: '2017-04-21T07:00:00.000Z',\n        notes: null,\n        recdatecreated: '2012-03-21T07:00:00.000Z',\n        recdatemodified: '2017-04-21T17:46:35.000Z'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxa' } }\n    },\n    description: 'A taxon or array of taxa.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "4af5c882-87fd-4970-8180-d74aa29797c5",
              "parentUUID": "3274d5a6-d15c-4b52-b38a-7164cec7bef1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4af5c882-87fd-4970-8180-d74aa29797c5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 103,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cb75c1c7-1d8e-401f-8bcb-89009e1b5cf0",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "b02abc00-0cae-4483-9d9d-23513e8a52c8",
              "parentUUID": "cb75c1c7-1d8e-401f-8bcb-89009e1b5cf0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b02abc00-0cae-4483-9d9d-23513e8a52c8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2ad189a4-021a-4fa2-859c-5afeff51e136",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "1d3afa6f-ccf5-4966-a263-237e68cdb40f",
              "parentUUID": "2ad189a4-021a-4fa2-859c-5afeff51e136",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1d3afa6f-ccf5-4966-a263-237e68cdb40f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "22424d50-6fe4-47df-a278-1f7db3319a6b",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 452,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "714a6f8c-4527-4281-99e2-dc9e31233bd7",
              "parentUUID": "22424d50-6fe4-47df-a278-1f7db3319a6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "714a6f8c-4527-4281-99e2-dc9e31233bd7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 452,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5d680798-2e27-4a7a-a501-2dc3bc390ad4",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "efb62a68-e8ef-45cd-a690-478465736e3b",
              "parentUUID": "5d680798-2e27-4a7a-a501-2dc3bc390ad4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "52515edd-e9d5-4c94-962a-e3d62758a8a1",
              "parentUUID": "5d680798-2e27-4a7a-a501-2dc3bc390ad4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "f87d9de5-1de1-48b1-ab33-6687236733c4",
              "parentUUID": "5d680798-2e27-4a7a-a501-2dc3bc390ad4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "fe7e898d-d435-4d85-89af-9cc66cfcba10",
              "parentUUID": "5d680798-2e27-4a7a-a501-2dc3bc390ad4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "fecc5204-020c-4e36-a63d-348e8541a82f",
              "parentUUID": "5d680798-2e27-4a7a-a501-2dc3bc390ad4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "efb62a68-e8ef-45cd-a690-478465736e3b",
            "52515edd-e9d5-4c94-962a-e3d62758a8a1",
            "f87d9de5-1de1-48b1-ab33-6687236733c4",
            "fe7e898d-d435-4d85-89af-9cc66cfcba10",
            "fecc5204-020c-4e36-a63d-348e8541a82f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 476,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fb6e5df6-acda-4e85-b17a-9e4931ba594b",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property '0' of undefined",
                "estack": "TypeError: Cannot read property '0' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:21:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f5e4acf0-87ae-4420-8394-7045935e73b3",
              "parentUUID": "fb6e5df6-acda-4e85-b17a-9e4931ba594b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 155,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "11be4be2-d9c5-4215-a85f-f3b25322722c",
              "parentUUID": "fb6e5df6-acda-4e85-b17a-9e4931ba594b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1745,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "1204cbac-7873-4341-b16d-0ed83a649431",
              "parentUUID": "fb6e5df6-acda-4e85-b17a-9e4931ba594b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11be4be2-d9c5-4215-a85f-f3b25322722c",
            "1204cbac-7873-4341-b16d-0ed83a649431"
          ],
          "failures": [
            "f5e4acf0-87ae-4420-8394-7045935e73b3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1912,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a986d897-127d-4e40-99aa-fa4e74436458",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property '0' of undefined",
                "estack": "TypeError: Cannot read property '0' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:59:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "7e245949-7169-413f-ad18-a43236550f23",
              "parentUUID": "a986d897-127d-4e40-99aa-fa4e74436458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 164,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ef95fb32-b421-428f-bd31-5edf057e4971",
              "parentUUID": "a986d897-127d-4e40-99aa-fa4e74436458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1467,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "514558ac-cd23-40c1-8a3e-6a23ad2390e0",
              "parentUUID": "a986d897-127d-4e40-99aa-fa4e74436458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2905135c-490a-4e6b-a5ac-3bd5601d0648",
              "parentUUID": "a986d897-127d-4e40-99aa-fa4e74436458",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef95fb32-b421-428f-bd31-5edf057e4971",
            "514558ac-cd23-40c1-8a3e-6a23ad2390e0",
            "2905135c-490a-4e6b-a5ac-3bd5601d0648"
          ],
          "failures": [
            "7e245949-7169-413f-ad18-a43236550f23"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2993,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "f1001142-8711-4229-a0ae-21df87c235ae",
              "parentUUID": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "844c9e38-bdae-46c6-9c95-fbe05a921cfc",
              "parentUUID": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "a5f0fc47-b090-4ea3-bb18-8b1bd2e2161e",
              "parentUUID": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "f99ec190-179e-4c63-bcbe-9c6a83a0382a",
              "parentUUID": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 414,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "294c2456-7f69-4f4f-bea3-3b2645df97e1",
              "parentUUID": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "91f04156-0fde-42fb-a568-341d0deccbc2",
              "parentUUID": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "4089160f-dc7c-4ac0-ae76-578960cbbd64",
              "parentUUID": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 165,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "c1fdb312-5cef-4f79-bd4c-77fda11e87b2",
              "parentUUID": "10882889-eb8f-4d24-b5ca-846efb26f7e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1001142-8711-4229-a0ae-21df87c235ae",
            "844c9e38-bdae-46c6-9c95-fbe05a921cfc",
            "a5f0fc47-b090-4ea3-bb18-8b1bd2e2161e",
            "f99ec190-179e-4c63-bcbe-9c6a83a0382a",
            "294c2456-7f69-4f4f-bea3-3b2645df97e1",
            "91f04156-0fde-42fb-a568-341d0deccbc2",
            "4089160f-dc7c-4ac0-ae76-578960cbbd64",
            "c1fdb312-5cef-4f79-bd4c-77fda11e87b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1330,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3d3a18f0-fe6c-4359-a554-11ee71f63106",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ca9c9e6f-479b-490a-a298-ece0492ba32a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5a85a4a8-84cf-46e4-b81c-d03b2f46487c",
                  "parentUUID": "ca9c9e6f-479b-490a-a298-ece0492ba32a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a85a4a8-84cf-46e4-b81c-d03b2f46487c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "61431c20-5c93-4352-a837-5a564b09a8e1",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ae3af1d4-4861-42a2-a18d-297a05302e75",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "81831dda-9f62-4cc7-ae10-28497dda9b65",
                  "parentUUID": "ae3af1d4-4861-42a2-a18d-297a05302e75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81831dda-9f62-4cc7-ae10-28497dda9b65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3692aa96-b893-4c1a-b736-e4aae714f766",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "039c173c-f52b-43b1-b6c9-bd97eb9f65cf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7e9b6627-ac5f-488c-9903-8101cb8edd33",
                  "parentUUID": "039c173c-f52b-43b1-b6c9-bd97eb9f65cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e9b6627-ac5f-488c-9903-8101cb8edd33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c941d2ec-282a-4af2-ac45-91b0c2e8a72c",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0ad08067-1cd0-41ee-9182-81cc8bbd3e6b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/-94875939', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b8d2e677-e958-4a08-81fd-60b574b0a283",
                  "parentUUID": "0ad08067-1cd0-41ee-9182-81cc8bbd3e6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8d2e677-e958-4a08-81fd-60b574b0a283"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6d7d609a-f903-4d52-851b-400ee690127d",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5991fcce-9fb1-4b6e-ba42-cfd52bf8e1dc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/99785699', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "70c64d37-9a06-42e2-9512-fd561eb97043",
                  "parentUUID": "5991fcce-9fb1-4b6e-ba42-cfd52bf8e1dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70c64d37-9a06-42e2-9512-fd561eb97043"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0dd5a3f0-eef4-4536-85ec-c56974567897",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2daa39ad-73a2-407f-b3a1-e0a16ce32698",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 675,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/3960287', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7b4fa723-262f-414c-a67e-fd6b7a104921",
                  "parentUUID": "2daa39ad-73a2-407f-b3a1-e0a16ce32698",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b4fa723-262f-414c-a67e-fd6b7a104921"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 675,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "db4312f6-0213-4aee-9131-38d12d159d9d",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c8b3e8c3-d4a9-41c3-b0e3-8679a15e1e98",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 88590290, 'gpname': 'dolor fugiat sint Excepteur minim', 'rank': 1, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c3668fbb-60fe-455f-ade5-d16a1937ea6a",
                  "parentUUID": "c8b3e8c3-d4a9-41c3-b0e3-8679a15e1e98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3668fbb-60fe-455f-ade5-d16a1937ea6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3e85d4d4-1bdf-4a9e-add8-e19c6bc47377",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "573ae6cd-9676-4586-bbfe-ba1bcc53f21a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/63187358', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "538cc652-0a25-4d6e-9f6a-40e8aacd0df4",
                  "parentUUID": "573ae6cd-9676-4586-bbfe-ba1bcc53f21a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "538cc652-0a25-4d6e-9f6a-40e8aacd0df4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4f44fb05-cad0-40e3-b016-e99f23cb8a33",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a79e3b0a-4b68-44f1-8c53-249079a11120",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/6692001', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "96c5530d-64c3-4724-8274-7eb59e170e1a",
                  "parentUUID": "a79e3b0a-4b68-44f1-8c53-249079a11120",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96c5530d-64c3-4724-8274-7eb59e170e1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d37a6417-9543-46aa-8d8b-6fd4652cca3b",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e1d12928-e1c5-4cbb-aec5-0e67fb8b9dd1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/5747', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "99a448ff-1c11-46e5-b24f-5c58f978f6d8",
                  "parentUUID": "e1d12928-e1c5-4cbb-aec5-0e67fb8b9dd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99a448ff-1c11-46e5-b24f-5c58f978f6d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "97b30ea2-1b97-43bc-b659-9d3271bd8415",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d210c64-2a3d-4428-96af-1d122f56ba80",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "19636a38-df69-4033-9bf2-5bd3d8c45bb3",
                  "parentUUID": "1d210c64-2a3d-4428-96af-1d122f56ba80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19636a38-df69-4033-9bf2-5bd3d8c45bb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b972e1e9-b8e4-4a0f-846d-3533377ff954",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e3bcbbaa-1c23-4548-abb1-2b8e3d0aa735",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9d9cbe74-1b21-498b-b5c3-b78c4cde48e3",
                  "parentUUID": "e3bcbbaa-1c23-4548-abb1-2b8e3d0aa735",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d9cbe74-1b21-498b-b5c3-b78c4cde48e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1c459d72-5ea0-4334-a2ba-c31cdb968799",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "737c8b50-44b1-4297-b711-d8ab4667586d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b5573ed5-dd43-4f58-ba6f-0b4697636209",
                  "parentUUID": "737c8b50-44b1-4297-b711-d8ab4667586d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5573ed5-dd43-4f58-ba6f-0b4697636209"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8bd2167a-bc0b-4be1-a865-360989546eb0",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cf1c41d9-4d8e-4736-bbc3-352a7a117452",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b8064a21-ee8d-4960-ba5b-a394d3ae36c6",
                  "parentUUID": "cf1c41d9-4d8e-4736-bbc3-352a7a117452",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8064a21-ee8d-4960-ba5b-a394d3ae36c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9ce91d11-5e07-44ec-9ac7-ef0351ef83ff",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cd007938-f37d-458f-ad22-af16d435495a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f64b3e00-3250-427d-842f-2da06e8e4cd5",
                  "parentUUID": "cd007938-f37d-458f-ad22-af16d435495a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f64b3e00-3250-427d-842f-2da06e8e4cd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "44c5e134-b5df-4122-85e7-4290a3901afb",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0b148fe2-2318-4fb1-bf61-dc4766669fe7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e92c2073-528b-4201-803f-b29ad2c8042c",
                  "parentUUID": "0b148fe2-2318-4fb1-bf61-dc4766669fe7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e92c2073-528b-4201-803f-b29ad2c8042c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "92bb033c-2126-4695-90ea-f8167b84fde8",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "67bd0650-b8b6-4a70-a419-2c429cae8d9b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2834919d-43fb-4b4f-a2ea-66c596d3231a",
                  "parentUUID": "67bd0650-b8b6-4a70-a419-2c429cae8d9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2834919d-43fb-4b4f-a2ea-66c596d3231a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "105cfd9d-0ed8-486e-b205-713727270414",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "49aa5410-7f5d-4456-b065-082dece33892",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1e2d2fd2-470c-4a22-a4aa-d19283ca8de3",
                  "parentUUID": "49aa5410-7f5d-4456-b065-082dece33892",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e2d2fd2-470c-4a22-a4aa-d19283ca8de3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a3f53217-eead-4ca9-9792-f0257e702037",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b552a3d8-45be-4ceb-884a-46de47f31b72",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "7be3e455-0a68-496a-88d9-ba34a684314b",
                  "parentUUID": "b552a3d8-45be-4ceb-884a-46de47f31b72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7be3e455-0a68-496a-88d9-ba34a684314b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9e078807-4bf1-4c25-9ce2-e4d169401167",
          "title": "tests for /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
          "file": "/test/v2.0-data-chronology-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c33140f7-40c0-4171-ac3b-ff971289a809",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
              "file": "/test/v2.0-data-chronology-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronology/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronology/87624127', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "bae9f522-1ac7-4128-a1af-b012b457b010",
                  "parentUUID": "c33140f7-40c0-4171-ac3b-ff971289a809",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bae9f522-1ac7-4128-a1af-b012b457b010"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c52fef4a-f785-4688-9d0e-d43a84accc4c",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0538915a-8481-4983-8530-ed69c35d205c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 27307983, 'familyname': 'esse', 'contactname': 'in veniam', 'contactstatus': 'extant', 'limit': 79898871, 'offset': 38058998 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c96a9e08-4595-40cb-8221-6a1dd7bc3633",
                  "parentUUID": "0538915a-8481-4983-8530-ed69c35d205c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c96a9e08-4595-40cb-8221-6a1dd7bc3633"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b0f0ff06-d328-4f57-851f-6fd66347df25",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ce59be64-db2d-49fb-be07-fc1ebefe8565",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/56150576/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "76f9fafd-7052-4ac2-9c05-2387338c571d",
                  "parentUUID": "ce59be64-db2d-49fb-be07-fc1ebefe8565",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76f9fafd-7052-4ac2-9c05-2387338c571d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f1b693f2-497f-4ad8-bdf2-78d563942c61",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3849e202-3e08-4a0a-b408-0bb5d3a18971",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/29294895', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9492cd42-3da6-421e-b2a7-6c3f1a5cadbe",
                  "parentUUID": "3849e202-3e08-4a0a-b408-0bb5d3a18971",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9492cd42-3da6-421e-b2a7-6c3f1a5cadbe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b5ccb593-85c6-4d30-9be6-7d9b46bb0816",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0a329c48-69d3-436a-96c7-7c77fdea2212",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 110,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 36561589, 'offset': 14390108 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "d827bdcd-4c26-421a-b9e1-d9fb7719c7d6",
                  "parentUUID": "0a329c48-69d3-436a-96c7-7c77fdea2212",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d827bdcd-4c26-421a-b9e1-d9fb7719c7d6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 110,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0483071f-3bb4-4ec8-98cf-3bb3d6e88153",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "04423adf-6ba0-4e4d-8b44-3dfe1f25f27d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 687,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 20733, 'contactid': 41171739, 'datasettype': 'esse minim', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 11652171 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d2ace357-07a7-41f0-b763-42cd43dfe2c5",
                  "parentUUID": "04423adf-6ba0-4e4d-8b44-3dfe1f25f27d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2ace357-07a7-41f0-b763-42cd43dfe2c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 687,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fdc65ba6-6474-4d67-86d4-9a32decd5358",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "baceca2d-5fab-4f17-8738-ce4ce1a63814",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/81514660/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "00dff8d0-0a92-4a79-be21-7a3c07535ee9",
                  "parentUUID": "baceca2d-5fab-4f17-8738-ce4ce1a63814",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00dff8d0-0a92-4a79-be21-7a3c07535ee9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5126e94f-1ea4-4b75-a22b-ad0d8bf6e9ac",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eb2a8b2c-c9ff-4730-af5b-914db0db88b9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/57690762/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1685371e-103e-469d-bf23-c0c1f5e1709f",
                  "parentUUID": "eb2a8b2c-c9ff-4730-af5b-914db0db88b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1685371e-103e-469d-bf23-c0c1f5e1709f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1b8a3849-34ca-4cb2-9455-79534ede967f",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "12d1d7a3-f560-4a6f-83b4-dae2f85d1c4d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/82345827/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c6c4d71e-92b4-4ce6-b64f-00b9516ae0ff",
                  "parentUUID": "12d1d7a3-f560-4a6f-83b4-dae2f85d1c4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6c4d71e-92b4-4ce6-b64f-00b9516ae0ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c13c2d1b-cd8e-45d9-b311-c8662dc8984e",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "09c69124-3dbe-4d73-8151-aae2e68d9b2b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/3633764/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b782ee88-c3e5-43b2-9d00-3bb84b285d93",
                  "parentUUID": "09c69124-3dbe-4d73-8151-aae2e68d9b2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b782ee88-c3e5-43b2-9d00-3bb84b285d93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7ff07488-bc7d-4f07-9c7f-5c289ef632ec",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7f47a0dc-103a-4553-a888-e5687886147f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/78566397/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "22e8bcb9-eb75-4c84-a2ba-1ea5fe43791b",
                  "parentUUID": "7f47a0dc-103a-4553-a888-e5687886147f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22e8bcb9-eb75-4c84-a2ba-1ea5fe43791b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "caea9053-c0c2-4a04-bdec-0982b965cbaa",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "237f71e6-ba7b-4eed-874d-b14f1daab8a5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/69188231/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "55501b6c-ee90-4a82-915d-f9a57c322abd",
                  "parentUUID": "237f71e6-ba7b-4eed-874d-b14f1daab8a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55501b6c-ee90-4a82-915d-f9a57c322abd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "71425bb6-ffb7-4581-b0cb-4b9bf169e216",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5fc4f06f-9e64-422e-81f8-a80c8c01fb24",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/71567569/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "9cc1bc96-dae3-4182-ab62-449a2a8586bf",
                  "parentUUID": "5fc4f06f-9e64-422e-81f8-a80c8c01fb24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9cc1bc96-dae3-4182-ab62-449a2a8586bf"
              ],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "68600377-60bc-4acf-9551-8c505080526d",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad1a8bdb-8ce8-4949-a175-89efd1bf83f5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/59333019', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "940d981e-1be1-4782-b301-a2599ebba7f4",
                  "parentUUID": "ad1a8bdb-8ce8-4949-a175-89efd1bf83f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "940d981e-1be1-4782-b301-a2599ebba7f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1e428b80-ad21-4d1d-86e4-1a5d71525456",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b28f7e65-4d66-458b-836d-7a79f4e6f9a2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 26,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 27548, 'contactid': 44688781, 'datasettype': 'cillum reprehenderit cupidatat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 2537699 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "c08daa8a-7703-422d-ba4f-720b60c07a18",
                  "parentUUID": "b28f7e65-4d66-458b-836d-7a79f4e6f9a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c08daa8a-7703-422d-ba4f-720b60c07a18"
              ],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "be9bd008-e9bd-44b9-9546-72dd8c5a0f7f",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5dd6b7e9-ec70-4f7b-99a9-0afbb5b79f71",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 26,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/21949863', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "aad41b64-2e7b-42d7-89c2-a7758a2098aa",
                  "parentUUID": "5dd6b7e9-ec70-4f7b-99a9-0afbb5b79f71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "aad41b64-2e7b-42d7-89c2-a7758a2098aa"
              ],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e95a558c-4343-4bb8-9d80-8ae2678e5e67",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "05258c51-0b79-4ee4-932e-c9d6742ae4dd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'in enim minim', 'limit': 89773212, 'offset': 37903628 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "156ee379-def0-4fc9-af7a-8286128c6668",
                  "parentUUID": "05258c51-0b79-4ee4-932e-c9d6742ae4dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "156ee379-def0-4fc9-af7a-8286128c6668"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "13f61973-a937-4523-bc1f-11259c19ea05",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0339f3db-5446-43cc-b3d7-76e780f42391",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "40d7a45c-3494-4621-b8fe-c524b16c6003",
                  "parentUUID": "0339f3db-5446-43cc-b3d7-76e780f42391",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40d7a45c-3494-4621-b8fe-c524b16c6003"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "246abf91-6e31-4422-a756-9df753c985c8",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f0e88724-0fda-41fb-bb26-b87ce832fbab",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/98367280', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "0a83a700-b9bd-4d01-aebb-6e0219c9b2f5",
                  "parentUUID": "f0e88724-0fda-41fb-bb26-b87ce832fbab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0a83a700-b9bd-4d01-aebb-6e0219c9b2f5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "951bf3ee-b318-4c3e-b7e1-6d67fa0acbbc",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "64635d85-4e38-411a-9976-7d395f28c56f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/20590623', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "94e971c1-23b6-43f3-95bb-b20b933abd9a",
                  "parentUUID": "64635d85-4e38-411a-9976-7d395f28c56f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94e971c1-23b6-43f3-95bb-b20b933abd9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5dfb61b8-1501-4ef7-a619-32e7ff394a1e",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1e061b72-d0ab-42c9-aaf6-efc14299ea55",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 87582162, 'gpname': 'ut magna', 'rank': 4, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "36e86670-af4f-4412-99cd-3566f0531e62",
                  "parentUUID": "1e061b72-d0ab-42c9-aaf6-efc14299ea55",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36e86670-af4f-4412-99cd-3566f0531e62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6fbf3985-f421-4776-a9e6-6365b3b42240",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "66a54949-d358-4f17-b541-7cad4c1aed51",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/90372695/datasets', {\n  'qs': { 'limit': 52094121, 'offset': 69839404 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "dc5bde69-d21e-4fe3-8474-6cd8732ed1c2",
                  "parentUUID": "66a54949-d358-4f17-b541-7cad4c1aed51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc5bde69-d21e-4fe3-8474-6cd8732ed1c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 124,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "15cf125f-14d7-4875-91ab-e17a21989b73",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0dc4e24d-6a52-4b7b-aeac-75a7d7c2c432",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/31988172/sites', {\n  'qs': { 'limit': 30963215, 'offset': 15650477 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "82a15ea7-a940-470d-9bab-a634d7288957",
                  "parentUUID": "0dc4e24d-6a52-4b7b-aeac-75a7d7c2c432",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82a15ea7-a940-470d-9bab-a634d7288957"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 123,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "34fbce6b-91fd-457e-94b7-35e52ab72787",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "da17a66f-c35d-4f14-a6e6-978899eda5db",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/95521762', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2503ae0b-0fd8-4a27-84fa-7cce4382c60a",
                  "parentUUID": "da17a66f-c35d-4f14-a6e6-978899eda5db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2503ae0b-0fd8-4a27-84fa-7cce4382c60a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e6376ed0-f0ce-4759-aa1d-d7ddbaf5504a",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a7a89bd4-3085-44b6-863e-3b0b9c16d0c1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'irure ut ut', 'taxonid': 40952, 'siteid': 19711, 'sitename': 'ad minim do ut in', 'datasettype': 'non occaecat aliqua in dolore', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 9249546, 'ageyoung': 1000, 'ageold': 10000, 'limit': 12099788, 'offset': 31578920 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "35a06f56-e14e-4a42-8d6a-dadefcef3b5d",
                  "parentUUID": "a7a89bd4-3085-44b6-863e-3b0b9c16d0c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "35a06f56-e14e-4a42-8d6a-dadefcef3b5d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ae83c4c7-8fa6-4fca-9442-9db7d328b7f2",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e99de784-b195-457d-9fc2-1e61d8298322",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/5941885', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "272bca91-7288-4931-8024-4c9a0ae33b76",
                  "parentUUID": "e99de784-b195-457d-9fc2-1e61d8298322",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "272bca91-7288-4931-8024-4c9a0ae33b76"
              ],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "72fab09e-4f92-4d2c-a1e0-eb716f8d383e",
          "title": "tests for /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
          "file": "/test/v2.0-data-oxcal-calibrate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3810a7b1-c24b-4587-81d4-7fadfb6b148d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
              "file": "/test/v2.0-data-oxcal-calibrate-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "c01b2c55-f8f8-4bac-be82-f0b069199c5c",
                  "parentUUID": "3810a7b1-c24b-4587-81d4-7fadfb6b148d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c01b2c55-f8f8-4bac-be82-f0b069199c5c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "adfe4f94-f420-4d6a-8117-f0b2f7f74e11",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b609e6dd-0b47-4d6d-902e-a14c2e5fb779",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'irure est fugiat esse aliquip', 'taxonid': 167, 'siteid': 15200, 'sitename': 'dolore non in deserunt', 'datasettype': 'sit voluptate amet do', 'altmin': 10, 'altmax': 100, 'loc': \"{#\\\\tc_#n'Js}\", 'ageof': 12034798, 'ageyoung': 1000, 'ageold': 10000, 'limit': 30271739, 'offset': 93600775 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "6431dc69-8c37-4e17-9562-0578f478d032",
                  "parentUUID": "b609e6dd-0b47-4d6d-902e-a14c2e5fb779",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6431dc69-8c37-4e17-9562-0578f478d032"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7928d9d3-b1f4-48af-8b0e-7c47f29251d8",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cd602726-4056-48dc-8da8-dfdbeaf6097b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "b389564a-c781-4d06-a1a3-c71918304104",
                  "parentUUID": "cd602726-4056-48dc-8da8-dfdbeaf6097b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b389564a-c781-4d06-a1a3-c71918304104"
              ],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9209a5d8-fbb1-4d40-bd1e-317e2915a67a",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "72ec2428-52c6-49ea-bde0-b67216222878",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 3696700, 'datasetid': 20407579, 'siteid': 4983, 'familyname': 'in id enim dolore veniam', 'pubtype': 'Authored Book', 'year': 1629, 'search': 'consequat exercitation ullamco consectetur', 'limit': 95623353, 'offset': 77433200 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "9e150ab4-66e4-43d5-a1db-80de12f959a1",
                  "parentUUID": "72ec2428-52c6-49ea-bde0-b67216222878",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9e150ab4-66e4-43d5-a1db-80de12f959a1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8c2fa59c-d08f-4630-87ed-8c489f0f7fe2",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "94e9636f-4008-4f8b-a8d0-87934b68df2d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 95,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/{publicationid}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "0f821564-02d0-4e84-ac23-109b8615edd7",
                  "parentUUID": "94e9636f-4008-4f8b-a8d0-87934b68df2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0f821564-02d0-4e84-ac23-109b8615edd7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8a1e2792-723b-4712-8deb-e02655959e0f",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e83859c8-b73e-4824-a082-396adee41a34",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 24737, 'sitename': 'eu est voluptate', 'altmax': 100, 'altmin': 10, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 40355368, 'offset': 90066965 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "2e6716a0-df29-40cf-965e-071338e1199b",
                  "parentUUID": "e83859c8-b73e-4824-a082-396adee41a34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2e6716a0-df29-40cf-965e-071338e1199b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b67aa89a-fa6d-4a2d-98d6-0672d7e20fb0",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1fbe64ae-48f4-40d8-aa91-a0963322ea93",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/21863/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0d21cb0f-2d64-496a-848e-baae86abf49e",
                  "parentUUID": "1fbe64ae-48f4-40d8-aa91-a0963322ea93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d21cb0f-2d64-496a-848e-baae86abf49e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 130,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f92a955e-96e1-41b3-932c-617d6d79cc4b",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "43a4f620-1d1b-4c7b-a484-2bf599098668",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1897/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2286af36-6584-4fec-8226-ac4d6b2bf371",
                  "parentUUID": "43a4f620-1d1b-4c7b-a484-2bf599098668",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2286af36-6584-4fec-8226-ac4d6b2bf371"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2e5a4d79-e28e-429a-882c-65acd19b4d78",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b1ebb174-74f6-4f0d-966d-18d13abb13b5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1570/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0a8f039e-45fa-44e5-964b-20aaf675b2ec",
                  "parentUUID": "b1ebb174-74f6-4f0d-966d-18d13abb13b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a8f039e-45fa-44e5-964b-20aaf675b2ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3d634434-1b9c-4607-865b-9c8461149aab",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "25e498f7-9442-4d4b-8ac1-c5028cf1b3e5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/6552/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "9414105c-0a25-47fc-ac02-6fe5e0f8940b",
                  "parentUUID": "25e498f7-9442-4d4b-8ac1-c5028cf1b3e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9414105c-0a25-47fc-ac02-6fe5e0f8940b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3eb67edb-bc04-4fee-8f51-fe956adc4bf8",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2cbfe015-7da2-463d-860e-f919fd2316ab",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/27910/geopoliticalunits', {\n  'qs': { 'limit': 33247263, 'offset': 97153596 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "621ad952-26eb-45c2-b546-a6a46f2ae871",
                  "parentUUID": "2cbfe015-7da2-463d-860e-f919fd2316ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "621ad952-26eb-45c2-b546-a6a46f2ae871"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4f306688-fff9-4efd-9ae8-f0e3af3532b1",
          "title": "tests for /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0721794-7075-46f4-917f-f63cbd0e410d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/5218/sites', {\n  'qs': { 'limit': 11271725, 'offset': 74404187 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3a49c745-4c96-4c8f-aba1-39bcc56535cc",
                  "parentUUID": "a0721794-7075-46f4-917f-f63cbd0e410d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a49c745-4c96-4c8f-aba1-39bcc56535cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2b178248-9c1a-440d-b4ba-8b069bef3a60",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1a55927a-8150-4630-b63e-6b1e92268307",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/11731', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7e932606-0ece-4228-b486-d9921ee3e9e2",
                  "parentUUID": "1a55927a-8150-4630-b63e-6b1e92268307",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e932606-0ece-4228-b486-d9921ee3e9e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c0374208-d127-401c-89c8-b7d22be908b2",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a05bb0fb-7d0c-4521-aa4a-0f22454ef4f2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 237,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "79ef56fd-447a-4863-9288-fb266d6c9bd2",
                  "parentUUID": "a05bb0fb-7d0c-4521-aa4a-0f22454ef4f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79ef56fd-447a-4863-9288-fb266d6c9bd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 237,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0082a3cc-f734-44de-aef0-b995cbde524d",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4d2c94bc-9de6-47fd-8f46-eea51786b9fa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 302,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "33daf8c2-70bf-493b-b53b-fefd710da78e",
                  "parentUUID": "4d2c94bc-9de6-47fd-8f46-eea51786b9fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33daf8c2-70bf-493b-b53b-fefd710da78e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 302,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f1e5adfd-a646-437b-8168-582d81a18641",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b5af8341-a4f0-46a5-a227-a95a709c845e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 4568,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7e304ffb-2233-4c11-9d70-0fe07514437f",
                  "parentUUID": "b5af8341-a4f0-46a5-a227-a95a709c845e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e304ffb-2233-4c11-9d70-0fe07514437f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4568,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "18113068-c9d9-406c-90aa-1f6cba30a231",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c49c199d-a5bc-4844-b3cc-c62d0648de13",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'aliqua labore cupidatat veniam', 'datasetid': 62760072, 'siteid': 25941 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7836f4f4-cb7e-485f-9823-6a8573e409fc",
                  "parentUUID": "c49c199d-a5bc-4844-b3cc-c62d0648de13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7836f4f4-cb7e-485f-9823-6a8573e409fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 132,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9e423560-5345-43d4-9441-93867384caba",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36c73ec3-30e9-433c-8234-0ad9b52a4ebc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/35095/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "c4c322a0-82d8-49d8-9e43-0a130d57d9b9",
                  "parentUUID": "36c73ec3-30e9-433c-8234-0ad9b52a4ebc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c4c322a0-82d8-49d8-9e43-0a130d57d9b9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ba74cde7-8437-4f82-98d4-d902a1f319bd",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9909de6d-0abc-42fc-9796-5bd8a70ea9c0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/1241', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e8c943bc-1b18-45a2-9559-1e5f0f49bc51",
                  "parentUUID": "9909de6d-0abc-42fc-9796-5bd8a70ea9c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8c943bc-1b18-45a2-9559-1e5f0f49bc51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4be17a2f-54af-433e-a31d-1e6d24098fe5",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1b269832-de44-4d89-986d-032c665e783f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "88e63ee8-2a01-4dc4-813e-deccadd89d93",
                  "parentUUID": "1b269832-de44-4d89-986d-032c665e783f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "88e63ee8-2a01-4dc4-813e-deccadd89d93"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a4969e37-8477-46c7-9c10-4d3c067b6c06",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd83952b-8a92-494e-9199-6064f1b4e8c3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f5599b1d-479f-45a1-8967-ce7ece088723",
                  "parentUUID": "bd83952b-8a92-494e-9199-6064f1b4e8c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5599b1d-479f-45a1-8967-ce7ece088723"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}