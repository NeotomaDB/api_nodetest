{
  "stats": {
    "suites": 205,
    "tests": 202,
    "passes": 173,
    "pending": 0,
    "failures": 29,
    "start": "2022-11-24T22:49:45.890Z",
    "end": "2022-11-24T22:55:27.319Z",
    "duration": 341429,
    "testsRegistered": 202,
    "passPercent": 85.64356435643565,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a5f82624-6eea-42a2-ac9e-b838f3aad94a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "4774fbf7-26ed-4da3-9814-27f0b0da427a",
          "parentUUID": "a5f82624-6eea-42a2-ac9e-b838f3aad94a",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1a6a6295-5a2b-44a9-b31b-9f03f2dc1383",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 866,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "805655e0-13d4-4b44-b3c2-57f8f29b9d79",
              "parentUUID": "1a6a6295-5a2b-44a9-b31b-9f03f2dc1383",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "805655e0-13d4-4b44-b3c2-57f8f29b9d79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 866,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c7867011-6aff-4f89-b48a-7044950a1728",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "b5d617fd-25be-4d43-8f17-e00e89696fb6",
              "parentUUID": "c7867011-6aff-4f89-b48a-7044950a1728",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "441b2b32-8a49-4708-9069-6d8ec35d4f56",
              "parentUUID": "c7867011-6aff-4f89-b48a-7044950a1728",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "20fe8658-7a5b-4dc9-84dd-7f50dbf22962",
              "parentUUID": "c7867011-6aff-4f89-b48a-7044950a1728",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "be9d5050-36e8-4815-8150-d8c0736bc4da",
              "parentUUID": "c7867011-6aff-4f89-b48a-7044950a1728",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "2ec7939b-6775-413a-90fd-46f126a53950",
              "parentUUID": "c7867011-6aff-4f89-b48a-7044950a1728",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "804f6254-e64e-4410-a1f0-1eb408f6d925",
              "parentUUID": "c7867011-6aff-4f89-b48a-7044950a1728",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "854aaf95-97ee-42a8-ad91-bc7b4bd31bd2",
              "parentUUID": "c7867011-6aff-4f89-b48a-7044950a1728",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "426afe3f-c583-4d00-bf8e-2838712ab625",
              "parentUUID": "c7867011-6aff-4f89-b48a-7044950a1728",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5d617fd-25be-4d43-8f17-e00e89696fb6",
            "441b2b32-8a49-4708-9069-6d8ec35d4f56",
            "20fe8658-7a5b-4dc9-84dd-7f50dbf22962",
            "be9d5050-36e8-4815-8150-d8c0736bc4da",
            "2ec7939b-6775-413a-90fd-46f126a53950",
            "804f6254-e64e-4410-a1f0-1eb408f6d925",
            "854aaf95-97ee-42a8-ad91-bc7b4bd31bd2",
            "426afe3f-c583-4d00-bf8e-2838712ab625"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 819,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "62aa7575-7eb6-4a27-8297-abccf372ec2b",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 887,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]['site']['datasets'][0]).includes('datasetid');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "eeeae7de-d0d3-4784-a153-e29fdd957b14",
              "parentUUID": "62aa7575-7eb6-4a27-8297-abccf372ec2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 748,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b10979c8-6252-43b9-8149-963150614cea",
              "parentUUID": "62aa7575-7eb6-4a27-8297-abccf372ec2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 736,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a0bee0f7-b90e-4fb2-be4a-fc2069eda76f",
              "parentUUID": "62aa7575-7eb6-4a27-8297-abccf372ec2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 847,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c4584a9a-9ec2-4c4a-ac20-29e2545d3aac",
              "parentUUID": "62aa7575-7eb6-4a27-8297-abccf372ec2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "11e4bbf7-109f-4cb0-b671-55ce90602eb8",
              "parentUUID": "62aa7575-7eb6-4a27-8297-abccf372ec2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 1525,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "5f83afdd-c733-4bd5-a2ce-d07669a1b921",
              "parentUUID": "62aa7575-7eb6-4a27-8297-abccf372ec2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "db291f78-22bd-4aa1-9e69-c100d219517b",
              "parentUUID": "62aa7575-7eb6-4a27-8297-abccf372ec2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eeeae7de-d0d3-4784-a153-e29fdd957b14",
            "b10979c8-6252-43b9-8149-963150614cea",
            "a0bee0f7-b90e-4fb2-be4a-fc2069eda76f",
            "c4584a9a-9ec2-4c4a-ac20-29e2545d3aac",
            "11e4bbf7-109f-4cb0-b671-55ce90602eb8",
            "5f83afdd-c733-4bd5-a2ce-d07669a1b921",
            "db291f78-22bd-4aa1-9e69-c100d219517b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5978,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "8731f757-f60a-4d9f-8592-6145a46c70eb",
          "title": "Tests for Explorer App Services",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
          "file": "/test/explorerCalls.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dc812688-2f24-4773-af4b-98363373425f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
              "file": "/test/explorerCalls.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for TaxaGroupTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaGroupTypes",
                  "timedOut": false,
                  "duration": 273,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaGroupTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "25b1e3a2-d66e-4927-b32b-080173d1cfae",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomyTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomyTypes",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomyTypes', {\n  'qs': {\n    taphonomicSystemId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6de4fcf8-b0fb-4082-82ec-16bd2da90dfd",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomySystems",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomySystems",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomySystems', {\n  'qs': {\n    datasetTypeId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f2fb6ef3-b502-405b-9eee-6933e11d2ea9",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for ElementTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for ElementTypes",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/ElementTypes', {\n  'qs': {\n    taxagroupid: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9df0516a-d08c-41ec-b4c9-c7acfc90099e",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaxaInDatasets (a slow service)",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaInDatasets (a slow service)",
                  "timedOut": false,
                  "duration": 5619,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "13000a59-ddbb-4687-8825-ec7b800f4d00",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for collectionTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for collectionTypes",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "12b1f27b-b472-4f1b-ab81-18328bc66d24",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for keywords",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for keywords",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d445b68d-d858-47a1-ac9f-4c7cef167f29",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for authorpis",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for authorpis",
                  "timedOut": false,
                  "duration": 553,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3e7eaeac-5a4c-4faa-92de-f9577c93f0bc",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DepositionalEnvironments",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DepositionalEnvironments",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DepositionalEnvironments', {\n  'qs': { idProperty: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9d4d612c-5cb2-418f-b8a0-0f98c690f0a4",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Search",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Search",
                  "timedOut": false,
                  "duration": 843,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Search', {\n  'qs': { search: '{\"taxa\":null,\"time\":null,\"space\":null,\"metadata\":null,\"datasetTypeId\":\"21\"}',\n    'time': true }\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d60727e7-9198-47fd-b717-e424dfd35209",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DatasetTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DatasetTypes",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fc93e514-ec67-4694-a402-3afc0760f56f",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for RelativeAges",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for RelativeAges",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/RelativeAges', {\n  'qs': { agescaleid: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e23a3b6e-4a42-4a44-8b69-7af8322dc1cf",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Geochronologies",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Geochronologies",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Geochronologies', {\n  'qs': { datasetId: 1001 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8b5be644-71b2-4c77-96c8-e19463e81253",
                  "parentUUID": "dc812688-2f24-4773-af4b-98363373425f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25b1e3a2-d66e-4927-b32b-080173d1cfae",
                "6de4fcf8-b0fb-4082-82ec-16bd2da90dfd",
                "f2fb6ef3-b502-405b-9eee-6933e11d2ea9",
                "9df0516a-d08c-41ec-b4c9-c7acfc90099e",
                "13000a59-ddbb-4687-8825-ec7b800f4d00",
                "12b1f27b-b472-4f1b-ab81-18328bc66d24",
                "d445b68d-d858-47a1-ac9f-4c7cef167f29",
                "3e7eaeac-5a4c-4faa-92de-f9577c93f0bc",
                "9d4d612c-5cb2-418f-b8a0-0f98c690f0a4",
                "d60727e7-9198-47fd-b717-e424dfd35209",
                "fc93e514-ec67-4694-a402-3afc0760f56f",
                "e23a3b6e-4a42-4a44-8b69-7af8322dc1cf",
                "8b5be644-71b2-4c77-96c8-e19463e81253"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7924,
              "root": false,
              "rootEmpty": false,
              "_timeout": 8000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 8000
        },
        {
          "uuid": "0f054418-3e8a-4f1d-a49d-3cc8566722ee",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "0d55263a-32e7-4494-b88e-4d21403e3833",
              "parentUUID": "0f054418-3e8a-4f1d-a49d-3cc8566722ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "9aebeb67-c5bf-403f-83b4-7b61d24c6807",
              "parentUUID": "0f054418-3e8a-4f1d-a49d-3cc8566722ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "35952f47-7924-45a8-a1ea-b51c0f94afc8",
              "parentUUID": "0f054418-3e8a-4f1d-a49d-3cc8566722ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "9c18ee83-4914-4983-b0f5-0a0e03c9cdb2",
              "parentUUID": "0f054418-3e8a-4f1d-a49d-3cc8566722ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d55263a-32e7-4494-b88e-4d21403e3833",
            "9aebeb67-c5bf-403f-83b4-7b61d24c6807",
            "35952f47-7924-45a8-a1ea-b51c0f94afc8",
            "9c18ee83-4914-4983-b0f5-0a0e03c9cdb2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 265,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c8e6538e-79f7-45f0-8e66-1b2254f8d721",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "26a98c97-b4e4-45bf-9d6a-19fa511865f8",
              "parentUUID": "c8e6538e-79f7-45f0-8e66-1b2254f8d721",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26a98c97-b4e4-45bf-9d6a-19fa511865f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "61f06287-1557-4afe-8c5e-145a6e9e81f8",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 6738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "583581bf-61a4-469a-8e9a-6e3a7d50ceea",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 6290,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c15b7a93-9ff5-4977-8749-e6f502d10f16",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 1114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2bf73941-e62a-4084-a5f4-725669c5abaa",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "389690a1-620a-4868-8090-bbda26daa229",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "aee57421-2f65-4431-9451-8959b4256107",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 117,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "55e5ec1a-4223-4791-9de4-0f276d5d79e4",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "32bbe440-c517-4a12-8535-d79fc8c4775b",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "73230003-926c-4857-85e4-3642eb00997f",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "1734d9e5-153f-4e12-8d35-eeb71e313bee",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "fe5ac70a-2d8b-4ea6-a4fe-76f63456d83f",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 286,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2f296097-122d-4735-b606-675676cb6599",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2cff0c39-1836-4258-bedd-f36199f6fece",
              "parentUUID": "5f5e9c67-3839-476a-ab98-85e9f1c6817c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61f06287-1557-4afe-8c5e-145a6e9e81f8",
            "583581bf-61a4-469a-8e9a-6e3a7d50ceea",
            "c15b7a93-9ff5-4977-8749-e6f502d10f16",
            "2bf73941-e62a-4084-a5f4-725669c5abaa",
            "389690a1-620a-4868-8090-bbda26daa229",
            "aee57421-2f65-4431-9451-8959b4256107",
            "55e5ec1a-4223-4791-9de4-0f276d5d79e4",
            "32bbe440-c517-4a12-8535-d79fc8c4775b",
            "73230003-926c-4857-85e4-3642eb00997f",
            "1734d9e5-153f-4e12-8d35-eeb71e313bee",
            "fe5ac70a-2d8b-4ea6-a4fe-76f63456d83f",
            "2f296097-122d-4735-b606-675676cb6599",
            "2cff0c39-1836-4258-bedd-f36199f6fece"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15451,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e85bd035-700e-4460-b120-b1df755a2079",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6469fd3a-a190-4cf2-90f9-cf92901a21cf",
              "parentUUID": "e85bd035-700e-4460-b120-b1df755a2079",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "144568ff-c60d-4b68-aad0-9f62f59bb9a0",
              "parentUUID": "e85bd035-700e-4460-b120-b1df755a2079",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "0bc6de1d-8dc6-448a-afb1-3c73b453e68a",
              "parentUUID": "e85bd035-700e-4460-b120-b1df755a2079",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "70a2999c-b05d-4f62-9a59-6519fc60823b",
              "parentUUID": "e85bd035-700e-4460-b120-b1df755a2079",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "e601ed2f-bd1a-4a99-96b3-428225983075",
              "parentUUID": "e85bd035-700e-4460-b120-b1df755a2079",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "77739262-c530-4dd1-b045-5685c40770cc",
              "parentUUID": "e85bd035-700e-4460-b120-b1df755a2079",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ca0f9ebe-edde-4294-bd95-888c89ad2905",
              "parentUUID": "e85bd035-700e-4460-b120-b1df755a2079",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6469fd3a-a190-4cf2-90f9-cf92901a21cf",
            "144568ff-c60d-4b68-aad0-9f62f59bb9a0",
            "0bc6de1d-8dc6-448a-afb1-3c73b453e68a",
            "70a2999c-b05d-4f62-9a59-6519fc60823b",
            "e601ed2f-bd1a-4a99-96b3-428225983075",
            "77739262-c530-4dd1-b045-5685c40770cc",
            "ca0f9ebe-edde-4294-bd95-888c89ad2905"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 685,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e0490e3c-b976-46b2-817a-7bd2d748138c",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 244,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ab657534-4e70-4592-93b8-c39a75b153c5",
              "parentUUID": "e0490e3c-b976-46b2-817a-7bd2d748138c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab657534-4e70-4592-93b8-c39a75b153c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 244,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ffe7c8f9-af29-4248-bd9b-e3b2701ebf53",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3658,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7d9ab13d-31cc-405d-8f65-c87097fed029",
              "parentUUID": "ffe7c8f9-af29-4248-bd9b-e3b2701ebf53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d9ab13d-31cc-405d-8f65-c87097fed029"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3658,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6c12e903-b763-4580-8209-d3f59be906f7",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "08fbac9c-4c54-44c9-9933-16e115151a62",
              "parentUUID": "6c12e903-b763-4580-8209-d3f59be906f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08fbac9c-4c54-44c9-9933-16e115151a62"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bae57ceb-b9e0-4b53-bb93-f5af2057ae5f",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d5ce3e94-2603-4257-a00a-80d9405ad6f4",
              "parentUUID": "bae57ceb-b9e0-4b53-bb93-f5af2057ae5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5ce3e94-2603-4257-a00a-80d9405ad6f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 154,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b1a0a1ee-95cb-4b06-934b-f7bb67ed8b74",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 701,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "8eb92887-c552-4203-a485-4e57489924c3",
              "parentUUID": "b1a0a1ee-95cb-4b06-934b-f7bb67ed8b74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8eb92887-c552-4203-a485-4e57489924c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 701,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e1f80bf1-d5fe-44c6-a7b3-52ad136eecc9",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 714,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1d560c8b-3c34-4648-ba5d-82b520519d52",
              "parentUUID": "e1f80bf1-d5fe-44c6-a7b3-52ad136eecc9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d560c8b-3c34-4648-ba5d-82b520519d52"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 714,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eb9acdf2-cb27-42a1-8232-410aa2fe125d",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1215b9ce-0ff5-4c86-b994-698b4309c412",
              "parentUUID": "eb9acdf2-cb27-42a1-8232-410aa2fe125d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1215b9ce-0ff5-4c86-b994-698b4309c412"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0e5c2055-7f18-4b1b-8c25-bb711c85d514",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d8ca2db6-2663-495c-a5f0-8286c1637362",
              "parentUUID": "0e5c2055-7f18-4b1b-8c25-bb711c85d514",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d8ca2db6-2663-495c-a5f0-8286c1637362"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "afda8753-e047-4129-b6bd-b351ef65d135",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "50f54d54-2f56-4c55-a647-76672c53157f",
              "parentUUID": "afda8753-e047-4129-b6bd-b351ef65d135",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50f54d54-2f56-4c55-a647-76672c53157f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9deb90fd-da72-4499-abdd-a8bc9c30d75c",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9347087f-057f-4d75-b373-fb0efe576256",
              "parentUUID": "9deb90fd-da72-4499-abdd-a8bc9c30d75c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9347087f-057f-4d75-b373-fb0efe576256"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "44c56808-30e3-421c-8593-afdfa46b2577",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b725181d-e18e-488e-b5b4-70487a747709",
              "parentUUID": "44c56808-30e3-421c-8593-afdfa46b2577",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b725181d-e18e-488e-b5b4-70487a747709"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "77207cf7-fe96-41e4-9c2a-b8f30fc070b0",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 732,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "90e0ce7c-c7ff-4ef8-bb64-4f60aa6c1000",
              "parentUUID": "77207cf7-fe96-41e4-9c2a-b8f30fc070b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90e0ce7c-c7ff-4ef8-bb64-4f60aa6c1000"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 732,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0fb6bed0-96c9-4fa5-b0da-e80bfd3aea6b",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fcaa76f6-4760-4f4c-944b-5db12a18fec2",
              "parentUUID": "0fb6bed0-96c9-4fa5-b0da-e80bfd3aea6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fcaa76f6-4760-4f4c-944b-5db12a18fec2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "772c4305-5bff-48be-9b8d-8173c17877db",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7f3be614-ecf8-4e73-a8e7-dac348466c61",
              "parentUUID": "772c4305-5bff-48be-9b8d-8173c17877db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f3be614-ecf8-4e73-a8e7-dac348466c61"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 227,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cef19ead-bf2e-418b-89e0-f2085e982761",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "df207377-ac17-43f4-924e-d3741fec418d",
              "parentUUID": "cef19ead-bf2e-418b-89e0-f2085e982761",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df207377-ac17-43f4-924e-d3741fec418d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d853fad1-9199-4538-915f-7128e2a00862",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "18264b67-d60a-4a7f-95e3-b1b797404310",
              "parentUUID": "d853fad1-9199-4538-915f-7128e2a00862",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18264b67-d60a-4a7f-95e3-b1b797404310"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "273335ea-4aa1-40fe-8cbe-f3d7954b860a",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a9564989-347e-4644-8675-291d1a7f256a",
              "parentUUID": "273335ea-4aa1-40fe-8cbe-f3d7954b860a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a9564989-347e-4644-8675-291d1a7f256a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ba2c5944-09fc-4265-ab23-ef1d553d73ea",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "630c2ae6-f222-43c5-8255-a17fd217fa55",
              "parentUUID": "ba2c5944-09fc-4265-ab23-ef1d553d73ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "630c2ae6-f222-43c5-8255-a17fd217fa55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 189,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "50807577-40f1-43c6-af00-9552621dd22d",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 120610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a2294829-26b6-4e5d-ba45-bc8864871629",
              "parentUUID": "50807577-40f1-43c6-af00-9552621dd22d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a2294829-26b6-4e5d-ba45-bc8864871629"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120610,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5f15a27b-3b99-46f7-ac33-e5d837deffcf",
          "title": "GET /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronologies/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 616,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "dcb30962-7e9e-4457-b02f-ad3db58a8a76",
              "parentUUID": "5f15a27b-3b99-46f7-ac33-e5d837deffcf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dcb30962-7e9e-4457-b02f-ad3db58a8a76"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 616,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2f671896-56af-4c90-9c27-5dbca12015ee",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 142,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: data.result[0].contactstatus should be integer, data.result[0].fax should be string, data.result[0].notes should be string, data.result[0].suffix should be string, data.result[0].url should be string, data.result[1].address should be string, data.result[1].contactstatus should be integer, data.result[1].phone should be string, data.result[1].fax should be string, data.result[1].notes should be string, data.result[1].suffix should be string, data.result[1].title should be string, data.result[1].url should be string, data.result[2].address should be string, data.result[2].contactstatus should be integer, data.result[2].phone should be string, data.result[2].fax should be string, data.result[2].notes should be string, data.result[2].suffix should be string, data.result[2].title should be string, data.result[2].url should be string, data.result[3].address should be string, data.result[3].contactstatus should be integer, data.result[3].phone should be string, data.result[3].fax should be string, data.result[3].notes should be string, data.result[3].suffix should be string, data.result[3].title should be string, data.result[3].url should be string, data.result[4].address should be string, data.result[4].contactstatus should be integer, data.result[4].phone should be string, data.result[4].fax should be string, data.result[4].notes should be string, data.result[4].suffix should be string, data.result[4].title should be string, data.result[4].url should be string, data.result[5].address should be string, data.result[5].contactstatus should be integer, data.result[5].phone should be string, data.result[5].fax should be string, data.result[5].notes should be string, data.result[5].suffix should be string, data.result[5].title should be string, data.result[5].url should be string, data.result[6].address should be string, data.result[6].contactstatus should be integer, data.result[6].phone should be string, data.result[6].fax should be string, data.result[6].notes should be string, data.result[6].suffix should be string, data.result[6].title should be string, data.result[6].url should be string, data.result[7].address should be string, data.result[7].contactstatus should be integer, data.result[7].phone should be string, data.result[7].fax should be string, data.result[7].notes should be string, data.result[7].suffix should be string, data.result[7].title should be string, data.result[7].url should be string, data.result[8].contactstatus should be integer, data.result[8].phone should be string, data.result[8].fax should be string, data.result[8].notes should be string, data.result[8].suffix should be string, data.result[8].title should be string, data.result[8].url should be string, data.result[9].contactstatus should be integer, data.result[9].phone should be string, data.result[9].fax should be string, data.result[9].notes should be string, data.result[9].suffix should be string, data.result[9].url should be string, data.result[10].address should be string, data.result[10].contactstatus should be integer, data.result[10].phone should be string, data.result[10].fax should be string, data.result[10].notes should be string, data.result[10].suffix should be string, data.result[10].title should be string, data.result[10].url should be string, data.result[11].address should be string, data.result[11].contactstatus should be integer, data.result[11].phone should be string, data.result[11].fax should be string, data.result[11].notes should be string, data.result[11].suffix should be string, data.result[11].url should be string, data.result[12].address should be string, data.result[12].contactstatus should be integer, data.result[12].phone should be string, data.result[12].fax should be string, data.result[12].notes should be string, data.result[12].suffix should be string, data.result[12].title should be string, data.result[12].url should be string, data.result[13].address should be string, data.result[13].contactstatus should be integer, data.result[13].phone should be string, data.result[13].fax should be string, data.result[13].notes should be string, data.result[13].suffix should be string, data.result[13].title should be string, data.result[13].url should be string, data.result[14].address should be string, data.result[14].contactstatus should be integer, data.result[14].phone should be string, data.result[14].fax should be string, data.result[14].notes should be string, data.result[14].suffix should be string, data.result[14].title should be string, data.result[14].url should be string, data.result[15].address should be string, data.result[15].contactstatus should be integer, data.result[15].phone should be string, data.result[15].fax should be string, data.result[15].notes should be string, data.result[15].suffix should be string, data.result[15].url should be string, data.result[16].address should be string, data.result[16].contactstatus should be integer, data.result[16].phone should be string, data.result[16].fax should be string, data.result[16].notes should be string, data.result[16].suffix should be string, data.result[16].title should be string, data.result[16].url should be string, data.result[17].address should be string, data.result[17].contactstatus should be integer, data.result[17].phone should be string, data.result[17].fax should be string, data.result[17].notes should be string, data.result[17].suffix should be string, data.result[17].title should be string, data.result[17].url should be string, data.result[18].address should be string, data.result[18].contactstatus should be integer, data.result[18].phone should be string, data.result[18].fax should be string, data.result[18].notes should be string, data.result[18].suffix should be string, data.result[18].title should be string, data.result[18].url should be string, data.result[19].address should be string, data.result[19].contactstatus should be integer, data.result[19].phone should be string, data.result[19].fax should be string, data.result[19].notes should be string, data.result[19].suffix should be string, data.result[19].title should be string, data.result[19].url should be string, data.result[20].address should be string, data.result[20].contactstatus should be integer, data.result[20].phone should be string, data.result[20].fax should be string, data.result[20].notes should be string, data.result[20].suffix should be string, data.result[20].title should be string, data.result[20].url should be string, data.result[21].address should be string, data.result[21].contactstatus should be integer, data.result[21].phone should be string, data.result[21].fax should be string, data.result[21].notes should be string, data.result[21].suffix should be string, data.result[21].title should be string, data.result[21].url should be string, data.result[22].address should be string, data.result[22].contactstatus should be integer, data.result[22].phone should be string, data.result[22].fax should be string, data.result[22].notes should be string, data.result[22].suffix should be string, data.result[22].title should be string, data.result[22].url should be string, data.result[23].address should be string, data.result[23].contactstatus should be integer, data.result[23].phone should be string, data.result[23].fax should be string, data.result[23].notes should be string, data.result[23].suffix should be string, data.result[23].title should be string, data.result[23].url should be string, data.result[24].address should be string, data.result[24].contactstatus should be integer, data.result[24].phone should be string, data.result[24].fax should be string, data.result[24].notes should be string, data.result[24].suffix should be string, data.result[24].title should be string, data.result[24].url should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: 25,\n        offset: 0\n      },\n      result: [\n        {\n          contactid: 251,\n          contactname: 'Schoenweter, James',\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          contactname: 'Parry, W. J.',\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          contactname: 'Marvan, P.',\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          contactname: 'Pinsof, J. D.',\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          contactname: 'Cambon, Geneviève',\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          contactname: 'Bell, G. L.',\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          contactname: 'Zhou, Shanfu',\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          contactname: 'Räsänen, Satu',\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          contactname: 'Andersson, Sofia',\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          contactstatus: 'active'\n        },\n        {\n          contactid: 18149,\n          contactname: 'Labeyrie, Laurent',\n          familyname: 'Labeyrie',\n          leadinginitials: 'L.',\n          givennames: 'Laurent',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16703,\n          contactname: 'Irion, Georg',\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          contactname: 'Ruff, B.',\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          contactname: 'Castro, H.',\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          contactname: 'Iversen, J.',\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          contactname: 'Farrington, A.',\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          contactname: 'Waldrop, J. S.',\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          contactname: 'Bade, M. J.',\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          contactname: 'Carraway, L. N.',\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          contactname: 'Santos, F. R.',\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          contactname: 'Fortsch, D. E.',\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 18160,\n          contactname: 'Andruleit, Harald',\n          familyname: 'Andruleit',\n          leadinginitials: 'H.',\n          givennames: 'Harald',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          contactname: 'Hudon, C.',\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'contact'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: data.result[0].contactstatus should be integer, data.result[0].fax should be string, data.result[0].notes should be string, data.result[0].suffix should be string, data.result[0].url should be string, data.result[1].address should be string, data.result[1].contactstatus should be integer, data.result[1].phone should be string, data.result[1].fax should be string, data.result[1].notes should be string, data.result[1].suffix should be string, data.result[1].title should be string, data.result[1].url should be string, data.result[2].address should be string, data.result[2].contactstatus should be integer, data.result[2].phone should be string, data.result[2].fax should be string, data.result[2].notes should be string, data.result[2].suffix should be string, data.result[2].title should be string, data.result[2].url should be string, data.result[3].address should be string, data.result[3].contactstatus should be integer, data.result[3].phone should be string, data.result[3].fax should be string, data.result[3].notes should be string, data.result[3].suffix should be string, data.result[3].title should be string, data.result[3].url should be string, data.result[4].address should be string, data.result[4].contactstatus should be integer, data.result[4].phone should be string, data.result[4].fax should be string, data.result[4].notes should be string, data.result[4].suffix should be string, data.result[4].title should be string, data.result[4].url should be string, data.result[5].address should be string, data.result[5].contactstatus should be integer, data.result[5].phone should be string, data.result[5].fax should be string, data.result[5].notes should be string, data.result[5].suffix should be string, data.result[5].title should be string, data.result[5].url should be string, data.result[6].address should be string, data.result[6].contactstatus should be integer, data.result[6].phone should be string, data.result[6].fax should be string, data.result[6].notes should be string, data.result[6].suffix should be string, data.result[6].title should be string, data.result[6].url should be string, data.result[7].address should be string, data.result[7].contactstatus should be integer, data.result[7].phone should be string, data.result[7].fax should be string, data.result[7].notes should be string, data.result[7].suffix should be string, data.result[7].title should be string, data.result[7].url should be string, data.result[8].contactstatus should be integer, data.result[8].phone should be string, data.result[8].fax should be string, data.result[8].notes should be string, data.result[8].suffix should be string, data.result[8].title should be string, data.result[8].url should be string, data.result[9].contactstatus should be integer, data.result[9].phone should be string, data.result[9].fax should be string, data.result[9].notes should be string, data.result[9].suffix should be string, data.result[9].url should be string, data.result[10].address should be string, data.result[10].contactstatus should be integer, data.result[10].phone should be string, data.result[10].fax should be string, data.result[10].notes should be string, data.result[10].suffix should be string, data.result[10].title should be string, data.result[10].url should be string, data.result[11].address should be string, data.result[11].contactstatus should be integer, data.result[11].phone should be string, data.result[11].fax should be string, data.result[11].notes should be string, data.result[11].suffix should be string, data.result[11].url should be string, data.result[12].address should be string, data.result[12].contactstatus should be integer, data.result[12].phone should be string, data.result[12].fax should be string, data.result[12].notes should be string, data.result[12].suffix should be string, data.result[12].title should be string, data.result[12].url should be string, data.result[13].address should be string, data.result[13].contactstatus should be integer, data.result[13].phone should be string, data.result[13].fax should be string, data.result[13].notes should be string, data.result[13].suffix should be string, data.result[13].title should be string, data.result[13].url should be string, data.result[14].address should be string, data.result[14].contactstatus should be integer, data.result[14].phone should be string, data.result[14].fax should be string, data.result[14].notes should be string, data.result[14].suffix should be string, data.result[14].title should be string, data.result[14].url should be string, data.result[15].address should be string, data.result[15].contactstatus should be integer, data.result[15].phone should be string, data.result[15].fax should be string, data.result[15].notes should be string, data.result[15].suffix should be string, data.result[15].url should be string, data.result[16].address should be string, data.result[16].contactstatus should be integer, data.result[16].phone should be string, data.result[16].fax should be string, data.result[16].notes should be string, data.result[16].suffix should be string, data.result[16].title should be string, data.result[16].url should be string, data.result[17].address should be string, data.result[17].contactstatus should be integer, data.result[17].phone should be string, data.result[17].fax should be string, data.result[17].notes should be string, data.result[17].suffix should be string, data.result[17].title should be string, data.result[17].url should be string, data.result[18].address should be string, data.result[18].contactstatus should be integer, data.result[18].phone should be string, data.result[18].fax should be string, data.result[18].notes should be string, data.result[18].suffix should be string, data.result[18].title should be string, data.result[18].url should be string, data.result[19].address should be string, data.result[19].contactstatus should be integer, data.result[19].phone should be string, data.result[19].fax should be string, data.result[19].notes should be string, data.result[19].suffix should be string, data.result[19].title should be string, data.result[19].url should be string, data.result[20].address should be string, data.result[20].contactstatus should be integer, data.result[20].phone should be string, data.result[20].fax should be string, data.result[20].notes should be string, data.result[20].suffix should be string, data.result[20].title should be string, data.result[20].url should be string, data.result[21].address should be string, data.result[21].contactstatus should be integer, data.result[21].phone should be string, data.result[21].fax should be string, data.result[21].notes should be string, data.result[21].suffix should be string, data.result[21].title should be string, data.result[21].url should be string, data.result[22].address should be string, data.result[22].contactstatus should be integer, data.result[22].phone should be string, data.result[22].fax should be string, data.result[22].notes should be string, data.result[22].suffix should be string, data.result[22].title should be string, data.result[22].url should be string, data.result[23].address should be string, data.result[23].contactstatus should be integer, data.result[23].phone should be string, data.result[23].fax should be string, data.result[23].notes should be string, data.result[23].suffix should be string, data.result[23].title should be string, data.result[23].url should be string, data.result[24].address should be string, data.result[24].contactstatus should be integer, data.result[24].phone should be string, data.result[24].fax should be string, data.result[24].notes should be string, data.result[24].suffix should be string, data.result[24].title should be string, data.result[24].url should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: 25,\n        offset: 0\n      },\n      result: [\n        {\n          contactid: 251,\n          contactname: 'Schoenweter, James',\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          contactname: 'Parry, W. J.',\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          contactname: 'Marvan, P.',\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          contactname: 'Pinsof, J. D.',\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          contactname: 'Cambon, Geneviève',\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          contactname: 'Bell, G. L.',\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          contactname: 'Zhou, Shanfu',\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          contactname: 'Räsänen, Satu',\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          contactname: 'Andersson, Sofia',\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          contactstatus: 'active'\n        },\n        {\n          contactid: 18149,\n          contactname: 'Labeyrie, Laurent',\n          familyname: 'Labeyrie',\n          leadinginitials: 'L.',\n          givennames: 'Laurent',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16703,\n          contactname: 'Irion, Georg',\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          contactname: 'Ruff, B.',\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          contactname: 'Castro, H.',\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          contactname: 'Iversen, J.',\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          contactname: 'Farrington, A.',\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          contactname: 'Waldrop, J. S.',\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          contactname: 'Bade, M. J.',\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          contactname: 'Carraway, L. N.',\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          contactname: 'Santos, F. R.',\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          contactname: 'Fortsch, D. E.',\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 18160,\n          contactname: 'Andruleit, Harald',\n          familyname: 'Andruleit',\n          leadinginitials: 'H.',\n          givennames: 'Harald',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          contactname: 'Hudon, C.',\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          contactstatus: 'unknown'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'contact'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d06e816c-0896-47ea-8f45-8d4c0889720b",
              "parentUUID": "2f671896-56af-4c90-9c27-5dbca12015ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d06e816c-0896-47ea-8f45-8d4c0889720b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 142,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "846310b3-85df-4566-932f-e5f44baf07a2",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 121,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        contactname: 'International Organization for Standardization',\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        contactname: 'International Organization for Standardization',\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "88734a44-7927-4a66-8a47-7dbfc753019b",
              "parentUUID": "846310b3-85df-4566-932f-e5f44baf07a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "88734a44-7927-4a66-8a47-7dbfc753019b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "66333393-54c2-432e-8ad3-85a3c6f49530",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 59,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "dd906ad1-5fb9-4258-9bcf-9287a4b29172",
              "parentUUID": "66333393-54c2-432e-8ad3-85a3c6f49530",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dd906ad1-5fb9-4258-9bcf-9287a4b29172"
          ],
          "pending": [],
          "skipped": [],
          "duration": 59,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ad12785e-b7e5-496e-b094-81e9f5c75d58",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "eb59efdd-4fd3-432f-9eed-382d92731fce",
              "parentUUID": "ad12785e-b7e5-496e-b094-81e9f5c75d58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb59efdd-4fd3-432f-9eed-382d92731fce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4349,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d460cbd6-54c7-4bc6-acd7-17a03876acf6",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 81,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "d0be91df-854b-4a4c-bd55-e21340ece60c",
              "parentUUID": "d460cbd6-54c7-4bc6-acd7-17a03876acf6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d0be91df-854b-4a4c-bd55-e21340ece60c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 81,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8e933b87-ff2b-4b59-8aa4-7fcb2673090b",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "581630ac-fb15-42b2-9f62-d5a96b31da76",
              "parentUUID": "8e933b87-ff2b-4b59-8aa4-7fcb2673090b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "581630ac-fb15-42b2-9f62-d5a96b31da76"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1082,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "58fdc0a1-58a7-42b7-865d-8916cb5bf5c7",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ea455096-9ea5-429f-8615-aea45de445cb",
              "parentUUID": "58fdc0a1-58a7-42b7-865d-8916cb5bf5c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ea455096-9ea5-429f-8615-aea45de445cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a2ffb888-e6df-4e70-a1e2-782d6a640c2b",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d9748b0c-3d68-437a-8f87-85e609a4e940",
              "parentUUID": "a2ffb888-e6df-4e70-a1e2-782d6a640c2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9748b0c-3d68-437a-8f87-85e609a4e940"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b7b12132-24b3-47d0-8abe-6199440ed4f7",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "06a23729-eaeb-4df6-a6b7-eaafebb7cd31",
              "parentUUID": "b7b12132-24b3-47d0-8abe-6199440ed4f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06a23729-eaeb-4df6-a6b7-eaafebb7cd31"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5abf4360-a715-44bd-bb69-c59c7b1e3424",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "76bdb132-9c91-453b-b878-25b10b8c5056",
              "parentUUID": "5abf4360-a715-44bd-bb69-c59c7b1e3424",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76bdb132-9c91-453b-b878-25b10b8c5056"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1acd662a-bbe0-4005-b7ab-9da7947de792",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "95949b3e-a8f5-43c0-87e2-649aa76fac58",
              "parentUUID": "1acd662a-bbe0-4005-b7ab-9da7947de792",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95949b3e-a8f5-43c0-87e2-649aa76fac58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f91b1d9e-4f59-4a1e-8ded-9e987bf8347d",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "247f29c8-9251-474e-bda5-335abb07263e",
              "parentUUID": "f91b1d9e-4f59-4a1e-8ded-9e987bf8347d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "247f29c8-9251-474e-bda5-335abb07263e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5bb95228-fd5e-4e4b-b8a0-8f769dac2edd",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 123,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "21111828-8c6d-44aa-9b64-366f8f65b7d1",
              "parentUUID": "5bb95228-fd5e-4e4b-b8a0-8f769dac2edd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "21111828-8c6d-44aa-9b64-366f8f65b7d1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c61fce12-0f0a-4ce6-89c4-48f0cc29156c",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 108,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a30d2ba9-19c5-44bb-886d-0f8d3efd9708",
              "parentUUID": "c61fce12-0f0a-4ce6-89c4-48f0cc29156c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a30d2ba9-19c5-44bb-886d-0f8d3efd9708"
          ],
          "pending": [],
          "skipped": [],
          "duration": 108,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eee52b14-efee-400c-a5e0-0757dcc97ff1",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 949,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "cee60dfc-5951-458b-acfb-866217c3ddfb",
              "parentUUID": "eee52b14-efee-400c-a5e0-0757dcc97ff1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cee60dfc-5951-458b-acfb-866217c3ddfb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 949,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "34169eaf-200a-44be-b347-a83b82450754",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 143,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'taxonpaths' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'variableunits' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'samples' },\n      { tablename: 'datasetpis' },\n      { tablename: 'datasetpublications' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'contacts' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'data' },\n      { tablename: 'taxa' },\n      { tablename: 'chronologies' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'collectiontypes' },\n      { tablename: 'collectionunits' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'datasetdatabases' },\n      { tablename: 'datasetdoi' },\n      { tablename: 'datasets' },\n      { tablename: 'sites' },\n      { tablename: 'datasettypes' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'aggregatedatasets' },\n      { tablename: 'aggregateordertypes' },\n      { tablename: 'aggregatesampleages' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'analysisunitaltdepths' },\n      { tablename: 'analysisunitaltdepthscales' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'analysisunits' },\n      { tablename: 'calibrationcurves' },\n      { tablename: 'calibrationprograms' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'chroncontrols' },\n      { tablename: 'chroncontrolscal14c' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'dataprocessors' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'datasettaxonnotes' },\n      { tablename: 'datasetvariables' },\n      { tablename: 'datataxonnotes' },\n      { tablename: 'depagents' },\n      { tablename: 'depagenttypes' },\n      { tablename: 'depenvttypes' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'eventtypes' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'faciestypes' },\n      { tablename: 'formtaxa' },\n      { tablename: 'fractiondated' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'geochronology' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'geopaths' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'taxonpaths' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'variableunits' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'samples' },\n      { tablename: 'datasetpis' },\n      { tablename: 'datasetpublications' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'contacts' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'data' },\n      { tablename: 'taxa' },\n      { tablename: 'chronologies' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'collectiontypes' },\n      { tablename: 'collectionunits' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'datasetdatabases' },\n      { tablename: 'datasetdoi' },\n      { tablename: 'datasets' },\n      { tablename: 'sites' },\n      { tablename: 'datasettypes' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'aggregatedatasets' },\n      { tablename: 'aggregateordertypes' },\n      { tablename: 'aggregatesampleages' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'analysisunitaltdepths' },\n      { tablename: 'analysisunitaltdepthscales' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'analysisunits' },\n      { tablename: 'calibrationcurves' },\n      { tablename: 'calibrationprograms' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'chroncontrols' },\n      { tablename: 'chroncontrolscal14c' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'dataprocessors' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'datasettaxonnotes' },\n      { tablename: 'datasetvariables' },\n      { tablename: 'datataxonnotes' },\n      { tablename: 'depagents' },\n      { tablename: 'depagenttypes' },\n      { tablename: 'depenvttypes' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'eventtypes' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'faciestypes' },\n      { tablename: 'formtaxa' },\n      { tablename: 'fractiondated' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'geochronology' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'geopaths' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "bb9f2b8e-8bb7-4140-8226-cb7fefeedce3",
              "parentUUID": "34169eaf-200a-44be-b347-a83b82450754",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bb9f2b8e-8bb7-4140-8226-cb7fefeedce3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 143,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "05a0a711-5caf-4fd9-95d2-189e082456dc",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 119,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'taxonpaths' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'variableunits' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'samples' },\n      { tablename: 'datasetpis' },\n      { tablename: 'datasetpublications' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'contacts' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'data' },\n      { tablename: 'taxa' },\n      { tablename: 'chronologies' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'collectiontypes' },\n      { tablename: 'collectionunits' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'datasetdatabases' },\n      { tablename: 'datasetdoi' },\n      { tablename: 'datasets' },\n      { tablename: 'sites' },\n      { tablename: 'datasettypes' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'aggregatedatasets' },\n      { tablename: 'aggregateordertypes' },\n      { tablename: 'aggregatesampleages' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'analysisunitaltdepths' },\n      { tablename: 'analysisunitaltdepthscales' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'analysisunits' },\n      { tablename: 'calibrationcurves' },\n      { tablename: 'calibrationprograms' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'chroncontrols' },\n      { tablename: 'chroncontrolscal14c' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'dataprocessors' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'datasettaxonnotes' },\n      { tablename: 'datasetvariables' },\n      { tablename: 'datataxonnotes' },\n      { tablename: 'depagents' },\n      { tablename: 'depagenttypes' },\n      { tablename: 'depenvttypes' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'eventtypes' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'faciestypes' },\n      { tablename: 'formtaxa' },\n      { tablename: 'fractiondated' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'geochronology' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'geopaths' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'taxonpaths' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'variableunits' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'samples' },\n      { tablename: 'datasetpis' },\n      { tablename: 'datasetpublications' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'contacts' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'data' },\n      { tablename: 'taxa' },\n      { tablename: 'chronologies' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'collectiontypes' },\n      { tablename: 'collectionunits' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'datasetdatabases' },\n      { tablename: 'datasetdoi' },\n      { tablename: 'datasets' },\n      { tablename: 'sites' },\n      { tablename: 'datasettypes' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'aggregatedatasets' },\n      { tablename: 'aggregateordertypes' },\n      { tablename: 'aggregatesampleages' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'analysisunitaltdepths' },\n      { tablename: 'analysisunitaltdepthscales' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'analysisunits' },\n      { tablename: 'calibrationcurves' },\n      { tablename: 'calibrationprograms' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'chroncontrols' },\n      { tablename: 'chroncontrolscal14c' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'dataprocessors' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'datasettaxonnotes' },\n      { tablename: 'datasetvariables' },\n      { tablename: 'datataxonnotes' },\n      { tablename: 'depagents' },\n      { tablename: 'depagenttypes' },\n      { tablename: 'depenvttypes' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'eventtypes' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'faciestypes' },\n      { tablename: 'formtaxa' },\n      { tablename: 'fractiondated' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'geochronology' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'geopaths' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "adea8594-cf5a-431d-b718-b87e92612b90",
              "parentUUID": "05a0a711-5caf-4fd9-95d2-189e082456dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "adea8594-cf5a-431d-b718-b87e92612b90"
          ],
          "pending": [],
          "skipped": [],
          "duration": 119,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d785593c-8e58-4470-b3f6-f6d9fd2efe99",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 893,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f689097b-72bd-49a1-81f9-b9a9f00bc2ff",
              "parentUUID": "d785593c-8e58-4470-b3f6-f6d9fd2efe99",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f689097b-72bd-49a1-81f9-b9a9f00bc2ff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 893,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "16598701-3094-421a-8063-736994d4080c",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 155,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "23820c74-cd87-480d-bb5b-785f11c4f38c",
              "parentUUID": "16598701-3094-421a-8063-736994d4080c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "23820c74-cd87-480d-bb5b-785f11c4f38c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 155,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6cac2e06-59b4-4e10-8905-1ba86db9bbc6",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0120565e-30a2-42c5-aee4-808f439f4644",
              "parentUUID": "6cac2e06-59b4-4e10-8905-1ba86db9bbc6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0120565e-30a2-42c5-aee4-808f439f4644"
          ],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fe0a8f97-bb67-4cef-aebe-85f2c62f826c",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7b055028-2127-4b11-923a-06413cb415d5",
              "parentUUID": "fe0a8f97-bb67-4cef-aebe-85f2c62f826c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b055028-2127-4b11-923a-06413cb415d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5d285648-c11f-4412-8197-19d824ec9b4a",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 776,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4a25e00d-4d02-4654-bf2e-52c1a44b05f5",
              "parentUUID": "5d285648-c11f-4412-8197-19d824ec9b4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4a25e00d-4d02-4654-bf2e-52c1a44b05f5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 776,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e2aa742e-8698-4ee2-b574-a5b35bbcb061",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5e6eb541-f531-43f6-be55-bcc4bc4fc955",
              "parentUUID": "e2aa742e-8698-4ee2-b574-a5b35bbcb061",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5e6eb541-f531-43f6-be55-bcc4bc4fc955"
          ],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dcbdfbdb-ea3e-41e0-9d31-8e32c78bc2fc",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 230,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9d2093a4-90d1-4b17-ade1-6889d41560fb",
              "parentUUID": "dcbdfbdb-ea3e-41e0-9d31-8e32c78bc2fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9d2093a4-90d1-4b17-ade1-6889d41560fb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 230,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2d95ecd2-8151-4505-93b9-dd6f19ef483f",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "4e9cf848-f134-49b7-9058-21dd42d4d49c",
              "parentUUID": "2d95ecd2-8151-4505-93b9-dd6f19ef483f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e9cf848-f134-49b7-9058-21dd42d4d49c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "260e6363-9fa9-4ded-9781-d636d01a855c",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f206f598-ce32-4bb3-b9e1-40c0805300b6",
              "parentUUID": "260e6363-9fa9-4ded-9781-d636d01a855c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f206f598-ce32-4bb3-b9e1-40c0805300b6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "77c264bc-e9cd-4a7d-9c33-8d8f58350271",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "df656274-7e39-41c7-8e53-ce05b444c9d1",
              "parentUUID": "77c264bc-e9cd-4a7d-9c33-8d8f58350271",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df656274-7e39-41c7-8e53-ce05b444c9d1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "59b8b76d-0340-4376-9eb4-4bcfc81ae1e1",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 824,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b8d6f195-63e5-46fe-a658-3b242dd56817",
              "parentUUID": "59b8b76d-0340-4376-9eb4-4bcfc81ae1e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8d6f195-63e5-46fe-a658-3b242dd56817"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 824,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cfe75b08-f97d-4d44-93d0-2fc673b87886",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "372286e5-1731-4b72-9b6e-7843b84d421e",
              "parentUUID": "cfe75b08-f97d-4d44-93d0-2fc673b87886",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "372286e5-1731-4b72-9b6e-7843b84d421e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "21c6a986-31ac-42ef-a044-2e220ea80d25",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "67abab88-4bc5-4da1-838d-6a3864b4a94b",
              "parentUUID": "21c6a986-31ac-42ef-a044-2e220ea80d25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "67abab88-4bc5-4da1-838d-6a3864b4a94b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "42b8177f-e3cc-4f11-81dc-e7bd7d290dd8",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a1438c72-b3be-4b27-a52e-f1826933eb7a",
              "parentUUID": "42b8177f-e3cc-4f11-81dc-e7bd7d290dd8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a1438c72-b3be-4b27-a52e-f1826933eb7a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fb5a41a8-4e38-40ea-a4c6-541b5eb2a71e",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "960e4e48-0ce4-4b7b-8f52-8ef8c01efd9e",
              "parentUUID": "fb5a41a8-4e38-40ea-a4c6-541b5eb2a71e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "960e4e48-0ce4-4b7b-8f52-8ef8c01efd9e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f3612e28-1812-478b-9a70-732c2f1bdb5a",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e53db8ac-f0a1-4a33-8aa9-75ec33c9e008",
              "parentUUID": "f3612e28-1812-478b-9a70-732c2f1bdb5a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e53db8ac-f0a1-4a33-8aa9-75ec33c9e008"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "290dcbfe-89eb-4d85-b40e-7b369e1a77c4",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 776,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "6907319a-ae03-4406-9168-53c9927b3d78",
              "parentUUID": "290dcbfe-89eb-4d85-b40e-7b369e1a77c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6907319a-ae03-4406-9168-53c9927b3d78"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 776,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "14a560ff-6c62-4cca-8fcb-4f84554d8b6e",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 943,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9bb00e84-4af4-4b97-a9d4-2e574d3d07e6",
              "parentUUID": "14a560ff-6c62-4cca-8fcb-4f84554d8b6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9bb00e84-4af4-4b97-a9d4-2e574d3d07e6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 943,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e8f83bb2-08ad-4664-8de2-389b766b62f8",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2707e865-f0e3-413c-a6e9-ed5a2c65af6b",
              "parentUUID": "e8f83bb2-08ad-4664-8de2-389b766b62f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2707e865-f0e3-413c-a6e9-ed5a2c65af6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "12bc2072-9b00-4103-9eb3-20f119a6ad52",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 346,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "feffc68b-c994-4854-bd81-2edc6a0e6c66",
              "parentUUID": "12bc2072-9b00-4103-9eb3-20f119a6ad52",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "feffc68b-c994-4854-bd81-2edc6a0e6c66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 346,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e3a4d206-5cd9-45f1-81d2-4e8a7712e4a8",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 393,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bf68430d-0c69-4b5b-b3dc-28eaf7fbf2c2",
              "parentUUID": "e3a4d206-5cd9-45f1-81d2-4e8a7712e4a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bf68430d-0c69-4b5b-b3dc-28eaf7fbf2c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 393,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "977e056a-9468-4a11-aa70-ba3d402683cf",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "624db43b-b94b-4c28-a67a-876c07c706c9",
              "parentUUID": "977e056a-9468-4a11-aa70-ba3d402683cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "624db43b-b94b-4c28-a67a-876c07c706c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5270,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fa94cff6-b5e5-4936-b51e-cee1411ee64f",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c535a040-0d25-4dae-bd4c-301a3f3c922e",
              "parentUUID": "fa94cff6-b5e5-4936-b51e-cee1411ee64f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c535a040-0d25-4dae-bd4c-301a3f3c922e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 407,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "66f58777-526f-4255-89c7-5d9ab2c41c51",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "07e192ac-7f55-4db4-b926-07828907b342",
              "parentUUID": "66f58777-526f-4255-89c7-5d9ab2c41c51",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07e192ac-7f55-4db4-b926-07828907b342"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 209,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3fbbed93-7df9-4a88-b987-39a882633659",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 28681,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f643ccc9-0927-4131-9417-756d70906831",
              "parentUUID": "3fbbed93-7df9-4a88-b987-39a882633659",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f643ccc9-0927-4131-9417-756d70906831"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28681,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d9d2b0fc-f86b-4d6a-aea5-9201f60c9b32",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "7a170f3f-1a0d-4a80-9a2d-821369332598",
              "parentUUID": "d9d2b0fc-f86b-4d6a-aea5-9201f60c9b32",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7a170f3f-1a0d-4a80-9a2d-821369332598"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a879c4bb-f3a8-4987-9aea-05a807ede67b",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 438,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b0092ac1-1bad-4184-9c0d-7b23be59d69a",
              "parentUUID": "a879c4bb-f3a8-4987-9aea-05a807ede67b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0092ac1-1bad-4184-9c0d-7b23be59d69a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 438,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "076516e1-175e-43be-bebb-54c9e52eb7d0",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (test/sites.js:23:32)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "51f0f9ec-8112-4006-bc8d-1b5131e04640",
              "parentUUID": "076516e1-175e-43be-bebb-54c9e52eb7d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (test/sites.js:33:44)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c656a9d1-60ed-4c0c-9577-6e4e3aace5b1",
              "parentUUID": "076516e1-175e-43be-bebb-54c9e52eb7d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "d3f75699-1a9b-4bdd-91b6-90039127b524",
              "parentUUID": "076516e1-175e-43be-bebb-54c9e52eb7d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "18a006c2-9ad7-4631-a640-62d98baabb77",
              "parentUUID": "076516e1-175e-43be-bebb-54c9e52eb7d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/sites.js:70:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "739fc290-c85d-4d36-a30e-b2603333ec21",
              "parentUUID": "076516e1-175e-43be-bebb-54c9e52eb7d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3f75699-1a9b-4bdd-91b6-90039127b524",
            "18a006c2-9ad7-4631-a640-62d98baabb77"
          ],
          "failures": [
            "51f0f9ec-8112-4006-bc8d-1b5131e04640",
            "c656a9d1-60ed-4c0c-9577-6e4e3aace5b1",
            "739fc290-c85d-4d36-a30e-b2603333ec21"
          ],
          "pending": [],
          "skipped": [],
          "duration": 42,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dd2c3189-b142-40e9-9700-47b5f6a149b0",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 492,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "df7501bf-ae69-4358-8ce6-216bd783ccf0",
              "parentUUID": "dd2c3189-b142-40e9-9700-47b5f6a149b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:32:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "4717ae79-f952-4d59-8d7b-9414e5e24cd1",
              "parentUUID": "dd2c3189-b142-40e9-9700-47b5f6a149b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c4fd6628-0dfe-454e-b706-e3f3e9e47acd",
              "parentUUID": "dd2c3189-b142-40e9-9700-47b5f6a149b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df7501bf-ae69-4358-8ce6-216bd783ccf0",
            "c4fd6628-0dfe-454e-b706-e3f3e9e47acd"
          ],
          "failures": [
            "4717ae79-f952-4d59-8d7b-9414e5e24cd1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1723,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d93cb3d4-85cd-4212-8c5c-cb26f87885ae",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 665,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b9677c11-7f8d-40b2-a857-99dbe8d4c20a",
              "parentUUID": "d93cb3d4-85cd-4212-8c5c-cb26f87885ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:70:44\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5911971d-571b-4949-be54-95f8cfcd8958",
              "parentUUID": "d93cb3d4-85cd-4212-8c5c-cb26f87885ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "1a13ef31-2270-4f37-8e62-304651d4e59e",
              "parentUUID": "d93cb3d4-85cd-4212-8c5c-cb26f87885ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1435,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a74f68df-35d2-4dab-8e7e-e09b967878f1",
              "parentUUID": "d93cb3d4-85cd-4212-8c5c-cb26f87885ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9677c11-7f8d-40b2-a857-99dbe8d4c20a",
            "1a13ef31-2270-4f37-8e62-304651d4e59e",
            "a74f68df-35d2-4dab-8e7e-e09b967878f1"
          ],
          "failures": [
            "5911971d-571b-4949-be54-95f8cfcd8958"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3503,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "843f5191-2b4e-4de8-8431-039deda81d00",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query returns the first 25 taxa.",
              "fullTitle": "Get taxon data: An empty query returns the first 25 taxa.",
              "timedOut": false,
              "duration": 536,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(200, done);",
              "err": {},
              "uuid": "b05070e5-4d04-4f24-bd6d-fe552a0d3b8b",
              "parentUUID": "843f5191-2b4e-4de8-8431-039deda81d00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 12);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "4cbd0891-c3d6-49de-bbae-58b8d644cf25",
              "parentUUID": "843f5191-2b4e-4de8-8431-039deda81d00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 159,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "3ec36213-d100-4f72-9b9b-667ed6d8610e",
              "parentUUID": "843f5191-2b4e-4de8-8431-039deda81d00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 158,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "dcf1bb5c-ee18-4e60-9834-b28d898fdd90",
              "parentUUID": "843f5191-2b4e-4de8-8431-039deda81d00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 293,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "c22f42b2-6a8a-47cb-8370-b9f70690a9d8",
              "parentUUID": "843f5191-2b4e-4de8-8431-039deda81d00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "d83fd969-fb0d-4cf3-8a86-75a5df62474d",
              "parentUUID": "843f5191-2b4e-4de8-8431-039deda81d00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 25);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "3db9f15d-0011-4186-9ea3-05c2dfea3b6e",
              "parentUUID": "843f5191-2b4e-4de8-8431-039deda81d00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 30);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "5c580152-aa39-4b54-a5ac-e0c527bd1a59",
              "parentUUID": "843f5191-2b4e-4de8-8431-039deda81d00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b05070e5-4d04-4f24-bd6d-fe552a0d3b8b",
            "4cbd0891-c3d6-49de-bbae-58b8d644cf25",
            "3ec36213-d100-4f72-9b9b-667ed6d8610e",
            "dcf1bb5c-ee18-4e60-9834-b28d898fdd90",
            "c22f42b2-6a8a-47cb-8370-b9f70690a9d8",
            "d83fd969-fb0d-4cf3-8a86-75a5df62474d",
            "3db9f15d-0011-4186-9ea3-05c2dfea3b6e",
            "5c580152-aa39-4b54-a5ac-e0c527bd1a59"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1752,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "486fb2b6-3c8a-4ef7-90c6-7899521b73a5",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6c79e7a3-a725-4885-8ba7-1b6e7632adae",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 133,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "396aeb9f-1765-46fa-878e-5110f4eb8f07",
                  "parentUUID": "6c79e7a3-a725-4885-8ba7-1b6e7632adae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "396aeb9f-1765-46fa-878e-5110f4eb8f07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 133,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "10992460-1de4-4291-ab45-e4644f5b491e",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b01a26dc-d91f-4f6b-bf61-5e2417a781f2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 11182,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "459b2139-c167-4a96-834a-8048c2635273",
                  "parentUUID": "b01a26dc-d91f-4f6b-bf61-5e2417a781f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "459b2139-c167-4a96-834a-8048c2635273"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11182,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "99408fd4-7810-4573-b352-4d5b4669fed5",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e96b1ae7-dd85-462d-97de-241cb4e474ae",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "83fa2693-76e4-4dad-ab0b-25104208e665",
                  "parentUUID": "e96b1ae7-dd85-462d-97de-241cb4e474ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83fa2693-76e4-4dad-ab0b-25104208e665"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6b802d89-a4fc-4e02-8068-836607165def",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "488da565-a3d2-49b7-8199-712e070ab0ef",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "051240bc-cb6d-44ad-9c02-0646622e5bf8",
                  "parentUUID": "488da565-a3d2-49b7-8199-712e070ab0ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "051240bc-cb6d-44ad-9c02-0646622e5bf8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "00fe6d0c-1088-4b4b-88d0-f24b424afa30",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3768c821-a2f8-4f9b-b33d-6df54d605ed8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 762,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6a1eae2d-01f3-4198-a0f4-fdccc5ea33fa",
                  "parentUUID": "3768c821-a2f8-4f9b-b33d-6df54d605ed8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a1eae2d-01f3-4198-a0f4-fdccc5ea33fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 762,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5639b8af-b257-4032-af33-973d21921a84",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5565bfcc-915c-4e56-8cec-34bd7674bb6b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 667,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a09d5505-b365-435c-a970-b4ea7c3de37e",
                  "parentUUID": "5565bfcc-915c-4e56-8cec-34bd7674bb6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a09d5505-b365-435c-a970-b4ea7c3de37e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 667,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6658f113-54fe-4d8f-b651-490f24607811",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "20118253-9bf4-402d-b8d7-1177b5ffc20c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 10977, 'gpname': 'occaecat officia consequat Ut', 'rank': 1, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c43ac06e-7221-41e1-8376-783dc1acf501",
                  "parentUUID": "20118253-9bf4-402d-b8d7-1177b5ffc20c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c43ac06e-7221-41e1-8376-783dc1acf501"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 126,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5b475174-fdbf-4faf-aaac-c77eec874877",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c244f4a6-0991-4538-9b26-69c005655131",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/1166', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "31b98fe7-9081-42fb-94c8-6183ec71b0c3",
                  "parentUUID": "c244f4a6-0991-4538-9b26-69c005655131",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31b98fe7-9081-42fb-94c8-6183ec71b0c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "892aa631-cbb1-446a-ba83-2ec2b3fe57db",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1563d8ac-abc3-451c-9c7e-b6a3e14515a5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0266d0ca-e1f9-4d32-87df-415418a1bb20",
                  "parentUUID": "1563d8ac-abc3-451c-9c7e-b6a3e14515a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0266d0ca-e1f9-4d32-87df-415418a1bb20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1736685c-c9f7-4bc8-9a5a-085a6e5293aa",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ca9c8c7a-a8ca-4c10-b060-278196befe32",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "08b42870-baee-46a1-bb2c-4ba3b8aeb734",
                  "parentUUID": "ca9c8c7a-a8ca-4c10-b060-278196befe32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08b42870-baee-46a1-bb2c-4ba3b8aeb734"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f755fcad-933c-48a3-86d1-1dcd205f4e4f",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "591dfcb8-8259-46d7-9350-5709981097d3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5b471f26-ff61-4b89-800e-27c4a5ec3eec",
                  "parentUUID": "591dfcb8-8259-46d7-9350-5709981097d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b471f26-ff61-4b89-800e-27c4a5ec3eec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "87a46c77-b945-4719-9470-9d0d139cf8db",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "449f234a-acb7-49a3-89a9-54511a566462",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 577,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5d1c10f6-fe4b-4e43-a207-7def0b2ad915",
                  "parentUUID": "449f234a-acb7-49a3-89a9-54511a566462",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d1c10f6-fe4b-4e43-a207-7def0b2ad915"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 577,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8aaae616-f85b-4711-8cde-b35fe09cab1e",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0a66c7b1-94d1-49d9-9635-0c045fcfc203",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "39d84aa4-85d6-4c7b-8c54-4db49a5632c3",
                  "parentUUID": "0a66c7b1-94d1-49d9-9635-0c045fcfc203",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39d84aa4-85d6-4c7b-8c54-4db49a5632c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "704bf4ea-3c09-4750-851f-3e4f38a7c0e5",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c1beb859-e3ca-4540-9c5b-60423959a99a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 309,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0fd51f8a-460f-4428-a997-db210f09198b",
                  "parentUUID": "c1beb859-e3ca-4540-9c5b-60423959a99a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fd51f8a-460f-4428-a997-db210f09198b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 309,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5a98d34c-aee5-4bf6-8e23-b710a393af59",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0281933-4d24-425b-bf8b-00782265669f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "112722bd-8e06-4e3a-a462-6627157c7002",
                  "parentUUID": "a0281933-4d24-425b-bf8b-00782265669f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "112722bd-8e06-4e3a-a462-6627157c7002"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "31e62739-b2d8-4d90-9c8b-4e4d13dbd366",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5a7572f0-f9d8-4357-9240-fe0044507a6c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "531a415c-4bad-4976-acd2-3b32b13b2bc1",
                  "parentUUID": "5a7572f0-f9d8-4357-9240-fe0044507a6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "531a415c-4bad-4976-acd2-3b32b13b2bc1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "29243c12-a588-42d7-8745-40e9b26fc76a",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a9316f84-c7a0-4a1a-b63b-64efe3af902a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "41725845-9c48-40c1-9793-dac57a35740c",
                  "parentUUID": "a9316f84-c7a0-4a1a-b63b-64efe3af902a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41725845-9c48-40c1-9793-dac57a35740c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e0d5d812-5e00-44fa-ab14-64e45756dd47",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "859e42a8-69ed-42a2-b0ed-ca72e83982c1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 316,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "84fcde50-4d01-4491-8cb0-bf5c0932b80a",
                  "parentUUID": "859e42a8-69ed-42a2-b0ed-ca72e83982c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84fcde50-4d01-4491-8cb0-bf5c0932b80a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 316,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a30343af-8185-49b2-ad89-5db69abbf9dc",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "61e8e6d3-fa26-4955-af4f-9d317d0ea306",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 93114,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f76d9ec1-c5e0-41c5-8832-d72cbddfd2b9",
                  "parentUUID": "61e8e6d3-fa26-4955-af4f-9d317d0ea306",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f76d9ec1-c5e0-41c5-8832-d72cbddfd2b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "242eada8-071d-42e3-9cd5-2654c6124bfe",
          "title": "tests for /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
          "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7817f306-15a3-4cf1-a600-d8f967feef49",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
              "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronologies/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 433,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronologies/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "95603461-96fc-4236-890b-9c348c5355b9",
                  "parentUUID": "7817f306-15a3-4cf1-a600-d8f967feef49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95603461-96fc-4236-890b-9c348c5355b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 433,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c1bcbd04-645c-438e-9b50-c9cb59f11147",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "88431a90-ba44-4a1d-97c3-5b46b262b18e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 13679, 'familyname': 'Ut deserunt enim dolor', 'contactname': 'enim', 'contactstatus': 'unknown', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a9c409d1-2384-429f-9903-24f8ac292cff",
                  "parentUUID": "88431a90-ba44-4a1d-97c3-5b46b262b18e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9c409d1-2384-429f-9903-24f8ac292cff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e54f794a-bf7e-44d3-9fe8-37488644dfc4",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ec169f41-2b21-4509-994d-98c54011ebec",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "d450fb6e-6a44-4b88-9d21-483d9447d0ba",
                  "parentUUID": "ec169f41-2b21-4509-994d-98c54011ebec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d450fb6e-6a44-4b88-9d21-483d9447d0ba"
              ],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e6cde043-b643-42d6-afc2-589e2cd692c4",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6c710fce-c125-43c2-94d5-2b68ca177830",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "905b0f29-1c3e-4c9b-bc8e-720c76aea3e4",
                  "parentUUID": "6c710fce-c125-43c2-94d5-2b68ca177830",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "905b0f29-1c3e-4c9b-bc8e-720c76aea3e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "82e273a5-5990-45f8-919d-cab5f2778e3b",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d05fd87d-4705-4aaf-9fb7-d983c8a515dd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Deep-Time Palynology Database' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "88d4ccca-9b28-418f-971c-804d11f09e43",
                  "parentUUID": "d05fd87d-4705-4aaf-9fb7-d983c8a515dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "88d4ccca-9b28-418f-971c-804d11f09e43"
              ],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "30606498-0c04-474a-9fc1-fae41af247c5",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d134ac2a-2132-486e-bc94-b818fdd25931",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'datasetid': 52574896, 'siteid': 2225, 'contactid': 15811, 'datasettype': 'proident non', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'gpid': 7691, 'ageyoung': 1000, 'ageold': 10000, 'ageof': 11810993, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "595e7aa7-c00c-4e52-9141-0f06e99da6cf",
                  "parentUUID": "d134ac2a-2132-486e-bc94-b818fdd25931",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "595e7aa7-c00c-4e52-9141-0f06e99da6cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "02463994-eca1-40fa-8a22-2efd078e6a64",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "876c307f-0cc0-4c97-9769-b940227824be",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "113f5bf6-0a3d-40ad-be08-eb1bac6e18e6",
                  "parentUUID": "876c307f-0cc0-4c97-9769-b940227824be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "113f5bf6-0a3d-40ad-be08-eb1bac6e18e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ea21d480-e7be-44bc-97f3-e496fc4c7b38",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "65647140-5f35-4481-9119-48cc0923c261",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "79232a94-dada-4dc1-a029-fe5e8f14e0ed",
                  "parentUUID": "65647140-5f35-4481-9119-48cc0923c261",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79232a94-dada-4dc1-a029-fe5e8f14e0ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3cdf9f1e-77cc-4a6c-9523-fa4c7b1b38c4",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd996e24-6ad5-473e-8453-9221c20750d8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "42e2b808-0767-4954-b7af-9172a0ccb4d1",
                  "parentUUID": "bd996e24-6ad5-473e-8453-9221c20750d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42e2b808-0767-4954-b7af-9172a0ccb4d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cca8ab24-364d-4035-bb45-bc4675d0d655",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b574c2e6-1cb6-407b-b8a9-2c4d71818699",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9f26b256-0416-4125-8268-5ff7825d0fa0",
                  "parentUUID": "b574c2e6-1cb6-407b-b8a9-2c4d71818699",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f26b256-0416-4125-8268-5ff7825d0fa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "919bd028-9c77-4da6-bb19-7ebff8e9c84c",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "15a326e4-85ba-4633-a73d-682d2db4c776",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0eec1575-6fdd-43cc-8de7-dd1d58c2fb3a",
                  "parentUUID": "15a326e4-85ba-4633-a73d-682d2db4c776",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0eec1575-6fdd-43cc-8de7-dd1d58c2fb3a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6ff09c0d-fe06-49a9-998f-a66b99a7fe05",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "66b8692e-0815-4608-9b05-f9a84d0ca12a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "b1ee2f39-882f-4617-960f-e5dd91faacb8",
                  "parentUUID": "66b8692e-0815-4608-9b05-f9a84d0ca12a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b1ee2f39-882f-4617-960f-e5dd91faacb8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "da371bc2-3214-4f88-88e1-16a2bb149287",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b5124aaa-7f16-4d61-b51b-464b742b2cfc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "660c6788-8a07-4f5f-8102-57dc661fe28c",
                  "parentUUID": "b5124aaa-7f16-4d61-b51b-464b742b2cfc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "660c6788-8a07-4f5f-8102-57dc661fe28c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 173,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1a2041e2-66d1-40c5-bd57-d1844404a1e4",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b7e2f0d4-8aa7-48aa-95d1-5e44edcfd258",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 877,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f2254cca-113e-4e44-979a-b67c1dd436ad",
                  "parentUUID": "b7e2f0d4-8aa7-48aa-95d1-5e44edcfd258",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2254cca-113e-4e44-979a-b67c1dd436ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 877,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "04b9a663-8849-4ffd-8153-f4fe9edc43c9",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1cab192d-8b1c-457a-8c31-a995a7c95bbb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 95,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 12751, 'contactid': 9640, 'datasettype': 'esse et sunt ipsum exercitation', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 21450153 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "135d0b5d-6950-4603-b148-6f9988ab0346",
                  "parentUUID": "1cab192d-8b1c-457a-8c31-a995a7c95bbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "135d0b5d-6950-4603-b148-6f9988ab0346"
              ],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a87e3e71-f598-42dc-864e-3330cb202419",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4693ff8a-a064-4cfc-a2ac-a944eb6fa7c6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 741,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "440803a7-9f2a-4017-a794-2fead3b699e8",
                  "parentUUID": "4693ff8a-a064-4cfc-a2ac-a944eb6fa7c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "440803a7-9f2a-4017-a794-2fead3b699e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 741,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1608698c-d025-44ed-bf1e-ddc65b36e966",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "44a3fc22-283a-41fc-a88f-005916e59d8c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'in consequat nisi sit', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8c0b5e9e-d2f4-41d8-ac50-85e1a5c68389",
                  "parentUUID": "44a3fc22-283a-41fc-a88f-005916e59d8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c0b5e9e-d2f4-41d8-ac50-85e1a5c68389"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2a5db7a4-0c06-49e8-846e-8a86bf03d26a",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b39fe9e-524c-49a1-8fae-d525faf6c4e8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'qs': { 'table': 'ullamco proident aliqua dolore' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5fc04762-5851-469e-9ff5-a2c2ddec3cce",
                  "parentUUID": "6b39fe9e-524c-49a1-8fae-d525faf6c4e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fc04762-5851-469e-9ff5-a2c2ddec3cce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "75f34a4b-5942-40ef-b24c-e479ae0838d4",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9dc17276-34cb-4223-a77f-3a0fbd629c66",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 1407,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2eca1b13-8f11-4c1d-92c8-6da401f61993",
                  "parentUUID": "9dc17276-34cb-4223-a77f-3a0fbd629c66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2eca1b13-8f11-4c1d-92c8-6da401f61993"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1407,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5e0bb851-c2d3-40b1-b605-69d35240acef",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "18817ef7-0234-4c7f-b2b5-a42fd5ab7e50",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/7565', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "89dee90f-a4c9-4bb8-ac70-2701f7edd1ce",
                  "parentUUID": "18817ef7-0234-4c7f-b2b5-a42fd5ab7e50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89dee90f-a4c9-4bb8-ac70-2701f7edd1ce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 128,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b401a422-7874-4e3d-8b3b-c194766323aa",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2325f5c5-5322-462c-b346-cde3d1d36bc1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 3923, 'gpname': 'velit labore quis enim', 'rank': 3, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f6827127-f1d9-401a-a80a-45e85134db70",
                  "parentUUID": "2325f5c5-5322-462c-b346-cde3d1d36bc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6827127-f1d9-401a-a80a-45e85134db70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5d1d0d0d-a477-4ffb-a2ff-42fde1643a55",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "697a15dd-e5c6-4953-b5e1-40e66f82136a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1043,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/3896/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0dcebf59-f569-4592-aff1-784e10e72884",
                  "parentUUID": "697a15dd-e5c6-4953-b5e1-40e66f82136a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dcebf59-f569-4592-aff1-784e10e72884"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1043,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cf930b75-b4b9-4fcb-98d3-c366d5bf09c9",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f1b97de4-c78e-4bee-afec-1cc2011d1bb1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/6692/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "73d0597a-a897-444c-a2ce-ddb8116346c7",
                  "parentUUID": "f1b97de4-c78e-4bee-afec-1cc2011d1bb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "73d0597a-a897-444c-a2ce-ddb8116346c7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8b822308-9643-4c3f-8297-fbf55fb42a82",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3a0b66e2-a5e8-49e8-8a48-a4fa620764bf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "28bddbd2-6cfd-4f00-b3a8-7b2c58046bd8",
                  "parentUUID": "3a0b66e2-a5e8-49e8-8a48-a4fa620764bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28bddbd2-6cfd-4f00-b3a8-7b2c58046bd8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c97e8e12-c457-4c2f-bbfb-ee90fbea6f25",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1fc9c8c8-2961-4aa4-98e4-f3b8ce05f9cd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 147,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'dolor do sint nostrud', 'taxonid': 1619, 'siteid': 27688, 'sitename': 'in culpa', 'datasettype': 'mollit et est nulla Duis', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 15983267, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d7a1ecde-1bb7-4f0a-a3cf-e2634765e56e",
                  "parentUUID": "1fc9c8c8-2961-4aa4-98e4-f3b8ce05f9cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7a1ecde-1bb7-4f0a-a3cf-e2634765e56e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 147,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "92565b56-1d1a-4aec-a9fe-ca4febbccf28",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1ed5e3f8-7c70-4660-90e5-3e9227df8dcd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8088b1a8-cf09-47ec-9d93-471b0d79eb16",
                  "parentUUID": "1ed5e3f8-7c70-4660-90e5-3e9227df8dcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8088b1a8-cf09-47ec-9d93-471b0d79eb16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8a753aab-e78b-42cd-97ad-1e3319fa61f2",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "03131026-a3e8-4506-b7d0-5cf758707db0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'voluptate esse et est', 'taxonid': 22302, 'siteid': 23028, 'sitename': 'occaecat', 'datasettype': 'est Excepteur consequat nulla', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 19940883, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "16cc1cef-7ff0-4ff8-8342-d1d018e42cf6",
                  "parentUUID": "03131026-a3e8-4506-b7d0-5cf758707db0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16cc1cef-7ff0-4ff8-8342-d1d018e42cf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "939495c7-d000-407e-9c45-939e083ec313",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9454b45d-041f-4ce7-82a1-81f5849ecd44",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fd4b502f-bd11-424b-9d4f-16686c99ffa3",
                  "parentUUID": "9454b45d-041f-4ce7-82a1-81f5849ecd44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd4b502f-bd11-424b-9d4f-16686c99ffa3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a2aab78c-f284-44b8-b795-c74bc2aa01ed",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a0eb2bd-d4bc-4a9c-adbc-97f795a86baf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 10100, 'datasetid': 4590158, 'siteid': 17877, 'familyname': 'laborum', 'pubtype': 'Legacy', 'year': 2074, 'search': 'commodo ipsum', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "74460150-2776-4599-aed7-173fd3d1b780",
                  "parentUUID": "6a0eb2bd-d4bc-4a9c-adbc-97f795a86baf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74460150-2776-4599-aed7-173fd3d1b780"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "96d7d047-93e4-4b7c-9ed9-bfbb8f37b2a8",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a01774f1-0a56-45bf-bfc6-c6c9e78ab516",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/1611', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "545eda51-48d6-4e4b-a2cb-89baf7b582c5",
                  "parentUUID": "a01774f1-0a56-45bf-bfc6-c6c9e78ab516",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "545eda51-48d6-4e4b-a2cb-89baf7b582c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f1c09346-2a62-4b7a-a0fa-dba27c94c1bc",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "05671cb4-3bcd-45e8-9153-29b2f0e888b8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 2772, 'sitename': 'dolore commodo', 'altmax': 100, 'altmin': 10, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "3fe3e6b8-16d7-47b8-b0bb-a3a32fa45b5d",
                  "parentUUID": "05671cb4-3bcd-45e8-9153-29b2f0e888b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3fe3e6b8-16d7-47b8-b0bb-a3a32fa45b5d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "75ac706d-68cf-4ade-b663-fa82ed2bae35",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f19192ff-8b46-413f-9050-2b27a51a6aa4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 288,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "78b1fba7-d2d6-496e-834a-725d8a2535be",
                  "parentUUID": "f19192ff-8b46-413f-9050-2b27a51a6aa4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78b1fba7-d2d6-496e-834a-725d8a2535be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 288,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9086d343-9852-4bfc-90fe-55f1567ba0dd",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c8c6885-30b0-41fd-ac1f-5135667d3c8d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/4081/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "36a7e937-ff9c-450f-9273-0d14f95b6b9b",
                  "parentUUID": "3c8c6885-30b0-41fd-ac1f-5135667d3c8d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36a7e937-ff9c-450f-9273-0d14f95b6b9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8de60b79-b86e-4b58-9c96-18f39b555997",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7b6aa249-ac50-4981-ab55-401e4076235b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 901,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fe5c7fea-1e3e-48da-bd25-5e2a2141e3bf",
                  "parentUUID": "7b6aa249-ac50-4981-ab55-401e4076235b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe5c7fea-1e3e-48da-bd25-5e2a2141e3bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 901,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6a987dcd-a134-4ec6-8aa2-5313dc6a17dd",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a25f0009-4299-4823-b1ac-75b2f2f71bd7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 885,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4b56dc88-ed26-4b2c-a55d-0107879688fc",
                  "parentUUID": "a25f0009-4299-4823-b1ac-75b2f2f71bd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b56dc88-ed26-4b2c-a55d-0107879688fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 885,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5bde9459-6b3d-48f2-b9eb-c50e89b6c70b",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a5fc5e97-d0cb-4ddb-8995-33d398f63d2c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/8165/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7a6b5000-98d8-418d-a9a3-0e30525b2f13",
                  "parentUUID": "a5fc5e97-d0cb-4ddb-8995-33d398f63d2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a6b5000-98d8-418d-a9a3-0e30525b2f13"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "db206c06-3a8b-448c-86aa-750ce4c433a0",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1629d7a5-e88d-4416-b5b2-b25b5f46bd85",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "d0b74407-2b85-40ed-a412-c69715927d5e",
                  "parentUUID": "1629d7a5-e88d-4416-b5b2-b25b5f46bd85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d0b74407-2b85-40ed-a412-c69715927d5e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "84e33e79-0a56-4db7-93d1-cc03f0cdfd47",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aea9c6d7-9109-4b42-9328-cc145120ac09",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 245,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7b88aee0-f429-452c-b7b1-459a263813a2",
                  "parentUUID": "aea9c6d7-9109-4b42-9328-cc145120ac09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b88aee0-f429-452c-b7b1-459a263813a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 245,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "87df0ac3-2330-4a22-941c-064d3cd4c872",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cb3b5024-0d86-474c-bbbb-7389a76ddf0a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 298,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "34e7d6f1-6b48-4e0b-936e-5f5a1d2220c3",
                  "parentUUID": "cb3b5024-0d86-474c-bbbb-7389a76ddf0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34e7d6f1-6b48-4e0b-936e-5f5a1d2220c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 298,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c2301238-0b2d-4a5d-8588-a1c80de684a7",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a6cae320-f0f1-45da-8a14-6de99d6eb3e1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 5177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "32735c4a-f5c5-4796-8df0-62232f33415f",
                  "parentUUID": "a6cae320-f0f1-45da-8a14-6de99d6eb3e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32735c4a-f5c5-4796-8df0-62232f33415f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5177,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aba0efa2-0ddf-4b88-9dad-04c8c8163fdd",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "62c69e87-5676-4dfd-a102-7f40d4785919",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'minim Lorem consequat', 'datasetid': 51102826, 'siteid': 3071 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5ccf3ef4-c527-4f33-920c-1f20bc8593cb",
                  "parentUUID": "62c69e87-5676-4dfd-a102-7f40d4785919",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ccf3ef4-c527-4f33-920c-1f20bc8593cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 139,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6d1aa814-55fb-47e0-bc86-5bd3d6777583",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dbda0888-806e-4bea-80c7-836de32b24f5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/7336/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "512dde69-ac5f-4791-a2b2-a51bde1d74e8",
                  "parentUUID": "dbda0888-806e-4bea-80c7-836de32b24f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "512dde69-ac5f-4791-a2b2-a51bde1d74e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 132,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2e2393d5-24d1-4c28-bcf9-e9c22079c1c5",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "22876f9c-4b40-4f7c-9ba8-233b5072e65b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/2631', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e9cab233-870c-40ed-bbf8-9eedffc900de",
                  "parentUUID": "22876f9c-4b40-4f7c-9ba8-233b5072e65b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9cab233-870c-40ed-bbf8-9eedffc900de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "929420d7-ef0f-45c4-92c9-eccd7cf479b5",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7e6c347d-e5bf-4a8d-bbee-10897e307cb5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d5a1446e-520f-4e1c-b1b6-78aa7dccfcf6",
                  "parentUUID": "7e6c347d-e5bf-4a8d-bbee-10897e307cb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5a1446e-520f-4e1c-b1b6-78aa7dccfcf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f210f385-3243-4fd0-9472-05278c721b02",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "144e473d-8e26-43a6-8091-d7a467a30dff",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a14f3b61-bce1-4791-8dfe-a88126009300",
                  "parentUUID": "144e473d-8e26-43a6-8091-d7a467a30dff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a14f3b61-bce1-4791-8dfe-a88126009300"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}