{
  "stats": {
    "suites": 205,
    "tests": 202,
    "passes": 187,
    "pending": 0,
    "failures": 15,
    "start": "2022-10-07T03:52:20.962Z",
    "end": "2022-10-07T03:57:31.955Z",
    "duration": 310993,
    "testsRegistered": 202,
    "passPercent": 92.57425742574257,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5af5eace-3f67-4039-85fb-dced76216db6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "a2131528-1937-4c18-ba7d-27e372f5e21f",
          "parentUUID": "5af5eace-3f67-4039-85fb-dced76216db6",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "01a569cd-847d-4ea5-bb2c-1aee0ed7bb43",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 1131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "b888fa92-4255-4149-be8d-646ce6a8122e",
              "parentUUID": "01a569cd-847d-4ea5-bb2c-1aee0ed7bb43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b888fa92-4255-4149-be8d-646ce6a8122e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1131,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "067a3b62-faa4-4943-bf86-c765f8664313",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "0f8106d1-1314-48e4-be00-0515904e2c87",
              "parentUUID": "067a3b62-faa4-4943-bf86-c765f8664313",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "4e42bf7b-0f0f-4310-80d9-d7a822d161bd",
              "parentUUID": "067a3b62-faa4-4943-bf86-c765f8664313",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "3b739f35-c2ca-4e18-8899-eef7d27a74f0",
              "parentUUID": "067a3b62-faa4-4943-bf86-c765f8664313",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "90424de8-1d6c-45c3-ab54-fb5915da383f",
              "parentUUID": "067a3b62-faa4-4943-bf86-c765f8664313",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "341d1b61-d986-422a-a00c-c42d87d283da",
              "parentUUID": "067a3b62-faa4-4943-bf86-c765f8664313",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "95af7082-12ec-494e-9e58-4aab0f42e458",
              "parentUUID": "067a3b62-faa4-4943-bf86-c765f8664313",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "4fd4814e-975c-4825-aeed-521c8d3e3591",
              "parentUUID": "067a3b62-faa4-4943-bf86-c765f8664313",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "4c3dc9e8-f4a1-47b5-89fa-a6a40ac8bde4",
              "parentUUID": "067a3b62-faa4-4943-bf86-c765f8664313",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f8106d1-1314-48e4-be00-0515904e2c87",
            "4e42bf7b-0f0f-4310-80d9-d7a822d161bd",
            "3b739f35-c2ca-4e18-8899-eef7d27a74f0",
            "90424de8-1d6c-45c3-ab54-fb5915da383f",
            "341d1b61-d986-422a-a00c-c42d87d283da",
            "95af7082-12ec-494e-9e58-4aab0f42e458",
            "4fd4814e-975c-4825-aeed-521c8d3e3591",
            "4c3dc9e8-f4a1-47b5-89fa-a6a40ac8bde4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 774,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "52d20ba4-9080-440e-98c8-50f256ae7d27",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]['site']['datasets'][0]).includes('datasetid');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "eef544fb-de67-4fc6-95fb-db8378b04835",
              "parentUUID": "52d20ba4-9080-440e-98c8-50f256ae7d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 824,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "0acbd8d3-0e4c-4116-9a7d-3ba489373c33",
              "parentUUID": "52d20ba4-9080-440e-98c8-50f256ae7d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 754,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ff6a5252-18ed-47fe-889e-3e9630c8cd44",
              "parentUUID": "52d20ba4-9080-440e-98c8-50f256ae7d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 878,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "29cece4d-9141-4974-bd1c-ad9900733e18",
              "parentUUID": "52d20ba4-9080-440e-98c8-50f256ae7d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "0063cd49-d395-4e82-8a41-421cdd02c960",
              "parentUUID": "52d20ba4-9080-440e-98c8-50f256ae7d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 1245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b207528a-8385-49ba-a15c-6c226dce8a6e",
              "parentUUID": "52d20ba4-9080-440e-98c8-50f256ae7d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a337eb99-52ea-4443-a933-42e0f1af713b",
              "parentUUID": "52d20ba4-9080-440e-98c8-50f256ae7d27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eef544fb-de67-4fc6-95fb-db8378b04835",
            "0acbd8d3-0e4c-4116-9a7d-3ba489373c33",
            "ff6a5252-18ed-47fe-889e-3e9630c8cd44",
            "29cece4d-9141-4974-bd1c-ad9900733e18",
            "0063cd49-d395-4e82-8a41-421cdd02c960",
            "b207528a-8385-49ba-a15c-6c226dce8a6e",
            "a337eb99-52ea-4443-a933-42e0f1af713b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "cd2ba3c9-b49a-4596-9d64-64d6c319e3d6",
          "title": "Tests for Explorer App Services",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
          "file": "/test/explorerCalls.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c265832d-de4d-4938-acfd-acaee3852862",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
              "file": "/test/explorerCalls.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for TaxaGroupTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaGroupTypes",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaGroupTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9181399e-ab52-48ec-80b3-71660a1e1567",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomyTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomyTypes",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomyTypes', {\n  'qs': {\n    taphonomicSystemId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "10635b84-58e7-41cc-8abc-b8d561300339",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomySystems",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomySystems",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomySystems', {\n  'qs': {\n    datasetTypeId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "91e2e169-316e-4c8e-851a-9c0ce79c265f",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for ElementTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for ElementTypes",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/ElementTypes', {\n  'qs': {\n    taxagroupid: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8d443435-5014-4e49-9725-bc244699fc81",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaxaInDatasets (a slow service)",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaInDatasets (a slow service)",
                  "timedOut": true,
                  "duration": 8005,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "Error: Timeout of 8000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js)",
                    "estack": "Error: Timeout of 8000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "235a1d60-9fa1-438e-a822-6477808be67b",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for collectionTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for collectionTypes",
                  "timedOut": false,
                  "duration": 408,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "099635ee-ec69-42da-823c-705965f1e8ac",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for keywords",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for keywords",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9a9890c8-bf08-4401-90d3-3000bb13f3b4",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for authorpis",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for authorpis",
                  "timedOut": false,
                  "duration": 1148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "366e44a1-b44a-476d-9dc1-24befc3a6b3d",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DepositionalEnvironments",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DepositionalEnvironments",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DepositionalEnvironments', {\n  'qs': { idProperty: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "99dc6c30-73e8-4c82-bf82-9751553498cb",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Search",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Search",
                  "timedOut": false,
                  "duration": 2707,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Search', {\n  'qs': { search: '{\"taxa\":null,\"time\":null,\"space\":null,\"metadata\":null,\"datasetTypeId\":\"21\"}',\n    'time': true }\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "db48b996-f675-47f1-9a55-d2b937f6bfff",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DatasetTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DatasetTypes",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "42ad8b31-4bd3-43b5-b70a-13eda98eab56",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for RelativeAges",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for RelativeAges",
                  "timedOut": false,
                  "duration": 271,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/RelativeAges', {\n  'qs': { agescaleid: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8b6a9ddd-bb65-4fcf-a862-5348a3d93bbc",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Geochronologies",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Geochronologies",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Geochronologies', {\n  'qs': { datasetId: 1001 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c34a8f32-ad83-455f-abbc-be73c75e368e",
                  "parentUUID": "c265832d-de4d-4938-acfd-acaee3852862",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9181399e-ab52-48ec-80b3-71660a1e1567",
                "10635b84-58e7-41cc-8abc-b8d561300339",
                "91e2e169-316e-4c8e-851a-9c0ce79c265f",
                "8d443435-5014-4e49-9725-bc244699fc81",
                "099635ee-ec69-42da-823c-705965f1e8ac",
                "9a9890c8-bf08-4401-90d3-3000bb13f3b4",
                "366e44a1-b44a-476d-9dc1-24befc3a6b3d",
                "99dc6c30-73e8-4c82-bf82-9751553498cb",
                "db48b996-f675-47f1-9a55-d2b937f6bfff",
                "42ad8b31-4bd3-43b5-b70a-13eda98eab56",
                "8b6a9ddd-bb65-4fcf-a862-5348a3d93bbc",
                "c34a8f32-ad83-455f-abbc-be73c75e368e"
              ],
              "failures": [
                "235a1d60-9fa1-438e-a822-6477808be67b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13344,
              "root": false,
              "rootEmpty": false,
              "_timeout": 8000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 8000
        },
        {
          "uuid": "e9ee0d56-01cc-428c-9f32-8fe8116c07b8",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "e6b7688d-38b8-4836-aa32-b2f9d4f761b9",
              "parentUUID": "e9ee0d56-01cc-428c-9f32-8fe8116c07b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "d876be3c-703d-44c9-8d60-409243bf7518",
              "parentUUID": "e9ee0d56-01cc-428c-9f32-8fe8116c07b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "77650385-afc1-468c-a041-dc205d00ebd1",
              "parentUUID": "e9ee0d56-01cc-428c-9f32-8fe8116c07b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "e56f6c5c-c362-476e-9196-40d927de66e2",
              "parentUUID": "e9ee0d56-01cc-428c-9f32-8fe8116c07b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6b7688d-38b8-4836-aa32-b2f9d4f761b9",
            "d876be3c-703d-44c9-8d60-409243bf7518",
            "77650385-afc1-468c-a041-dc205d00ebd1",
            "e56f6c5c-c362-476e-9196-40d927de66e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 291,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4057f673-46a5-4e2f-a3a2-2867f673af64",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "1d189a15-3bf4-4ea0-9f8a-156c80b1f54d",
              "parentUUID": "4057f673-46a5-4e2f-a3a2-2867f673af64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d189a15-3bf4-4ea0-9f8a-156c80b1f54d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "fc63677d-91c1-4ba0-9c82-4f475692273a",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 8930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "bfb9d851-bcac-463a-9eef-69db37ff7960",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 6682,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a222c2a5-5656-408c-9c13-ba84e737e7c3",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 2148,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "af629ee7-ae21-4c13-bc7e-0048a4200bcf",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "a5e5da50-dc3c-4a6a-a6b5-700cbdc30b58",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "5ef3a673-1f10-4a95-9028-0f0f1b4060b0",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "faa76998-c390-48eb-a202-92d201e6b265",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "8b6ffeb1-c4e5-49c8-a691-8cbfe118671c",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "21033be8-06b2-4ca6-9cf2-b71c269a588d",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "bc2e1e08-5257-4ec8-9b95-35798f69b9bc",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 295,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f78e14f4-a451-4a76-b956-8e2401ddc7c0",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 275,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "3cbb92c6-1123-4915-a934-df851a4735de",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 244,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "79cb10fd-649f-4a21-a85a-458f6a0e9c6c",
              "parentUUID": "e24f5c9b-5758-42ba-918a-4d83d76ffb78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc63677d-91c1-4ba0-9c82-4f475692273a",
            "bfb9d851-bcac-463a-9eef-69db37ff7960",
            "a222c2a5-5656-408c-9c13-ba84e737e7c3",
            "af629ee7-ae21-4c13-bc7e-0048a4200bcf",
            "a5e5da50-dc3c-4a6a-a6b5-700cbdc30b58",
            "5ef3a673-1f10-4a95-9028-0f0f1b4060b0",
            "faa76998-c390-48eb-a202-92d201e6b265",
            "8b6ffeb1-c4e5-49c8-a691-8cbfe118671c",
            "21033be8-06b2-4ca6-9cf2-b71c269a588d",
            "bc2e1e08-5257-4ec8-9b95-35798f69b9bc",
            "f78e14f4-a451-4a76-b956-8e2401ddc7c0",
            "3cbb92c6-1123-4915-a934-df851a4735de",
            "79cb10fd-649f-4a21-a85a-458f6a0e9c6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19313,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "dafda0a4-b66d-46d6-a283-01e5bc8ecc3c",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b7cd52a4-35b1-4f41-9756-46de3b5e20a2",
              "parentUUID": "dafda0a4-b66d-46d6-a283-01e5bc8ecc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "3a7993f4-145b-465a-b162-56e942d83064",
              "parentUUID": "dafda0a4-b66d-46d6-a283-01e5bc8ecc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f36c3c09-123a-49b5-952d-4d62b585f74a",
              "parentUUID": "dafda0a4-b66d-46d6-a283-01e5bc8ecc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ae6c5b16-d6bd-4d45-95e5-608a3bc45d4a",
              "parentUUID": "dafda0a4-b66d-46d6-a283-01e5bc8ecc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b27fbae9-80cd-4d14-93ce-1cfe7e6a16ab",
              "parentUUID": "dafda0a4-b66d-46d6-a283-01e5bc8ecc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "8c2c944f-6aac-4cdd-9682-d828304cfe3c",
              "parentUUID": "dafda0a4-b66d-46d6-a283-01e5bc8ecc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6ce6e9af-a342-4249-87c3-e0f2efa61385",
              "parentUUID": "dafda0a4-b66d-46d6-a283-01e5bc8ecc3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7cd52a4-35b1-4f41-9756-46de3b5e20a2",
            "3a7993f4-145b-465a-b162-56e942d83064",
            "f36c3c09-123a-49b5-952d-4d62b585f74a",
            "ae6c5b16-d6bd-4d45-95e5-608a3bc45d4a",
            "b27fbae9-80cd-4d14-93ce-1cfe7e6a16ab",
            "8c2c944f-6aac-4cdd-9682-d828304cfe3c",
            "6ce6e9af-a342-4249-87c3-e0f2efa61385"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 691,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "de9200be-0d08-4154-900d-f764a54738e2",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c3447c8e-07ea-4a50-8617-606bee0d6b2a",
              "parentUUID": "de9200be-0d08-4154-900d-f764a54738e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3447c8e-07ea-4a50-8617-606bee0d6b2a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1c7af25a-93a9-43bb-b337-699688930800",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9af28dc8-de35-43c1-a0b0-a90a2673d923",
              "parentUUID": "1c7af25a-93a9-43bb-b337-699688930800",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9af28dc8-de35-43c1-a0b0-a90a2673d923"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "532a3bd3-aa20-4b40-b55a-f1318f0a5842",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cdf4ee4c-97f3-451c-b510-60babbf8f9ac",
              "parentUUID": "532a3bd3-aa20-4b40-b55a-f1318f0a5842",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cdf4ee4c-97f3-451c-b510-60babbf8f9ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e3dad647-33fd-4cd6-90f6-747714000f53",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7c15fcf5-172f-48c1-96a4-49022823ddbc",
              "parentUUID": "e3dad647-33fd-4cd6-90f6-747714000f53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c15fcf5-172f-48c1-96a4-49022823ddbc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e66a7ed3-11e4-47fc-b302-5ee7851d93e1",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 624,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7ae42c92-2b2d-4d37-8f4e-77b32f7fa00e",
              "parentUUID": "e66a7ed3-11e4-47fc-b302-5ee7851d93e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ae42c92-2b2d-4d37-8f4e-77b32f7fa00e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 624,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e8627b6b-c08d-45e5-aca5-89edfe8fe893",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 697,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3faaadb3-f2cc-4b4b-a111-8ebd6d82f343",
              "parentUUID": "e8627b6b-c08d-45e5-aca5-89edfe8fe893",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3faaadb3-f2cc-4b4b-a111-8ebd6d82f343"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 697,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "61b35823-b2c1-4f93-8185-91b81b83d393",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 341,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "4b8e960f-f9ee-452d-bc19-1b16849ee335",
              "parentUUID": "61b35823-b2c1-4f93-8185-91b81b83d393",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4b8e960f-f9ee-452d-bc19-1b16849ee335"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 341,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bdc15218-5784-44e3-9328-e04c44b1945f",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fe5ff498-c60e-4443-8247-d4f245d6b804",
              "parentUUID": "bdc15218-5784-44e3-9328-e04c44b1945f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe5ff498-c60e-4443-8247-d4f245d6b804"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee3cca89-c5f5-4ed2-9bfb-be338c69f317",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "78251b5d-880f-4554-97f3-334f38ee3ea8",
              "parentUUID": "ee3cca89-c5f5-4ed2-9bfb-be338c69f317",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78251b5d-880f-4554-97f3-334f38ee3ea8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 151,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "343834f3-1edb-4573-b5db-ec6b09ac378c",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ecd2d0b9-2920-45dd-84aa-80bf34bc56c5",
              "parentUUID": "343834f3-1edb-4573-b5db-ec6b09ac378c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecd2d0b9-2920-45dd-84aa-80bf34bc56c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 122,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "98159c92-4579-4f5c-9fba-5ef906a78fff",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "863d649d-8675-4ac4-b125-9d09c0253f1d",
              "parentUUID": "98159c92-4579-4f5c-9fba-5ef906a78fff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "863d649d-8675-4ac4-b125-9d09c0253f1d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 218,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4cc97c87-c58a-4ea2-91a4-fea697ac6645",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 879,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9092ed31-ae3e-4581-b038-8b35d383829c",
              "parentUUID": "4cc97c87-c58a-4ea2-91a4-fea697ac6645",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9092ed31-ae3e-4581-b038-8b35d383829c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 879,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4afa7dad-8e59-4244-bb49-3165963c7730",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5322d4a0-c71a-41ac-91f1-15edad69bbaf",
              "parentUUID": "4afa7dad-8e59-4244-bb49-3165963c7730",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5322d4a0-c71a-41ac-91f1-15edad69bbaf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b41c16f0-6f18-4f35-a793-59d17028e2a1",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a8a80b48-4844-4fa4-bf15-3ef2b2322045",
              "parentUUID": "b41c16f0-6f18-4f35-a793-59d17028e2a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8a80b48-4844-4fa4-bf15-3ef2b2322045"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 141,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "04a573e2-5026-4c69-90bd-0072c1f516e5",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1b31824b-bbbe-4390-97bc-d105f8336941",
              "parentUUID": "04a573e2-5026-4c69-90bd-0072c1f516e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b31824b-bbbe-4390-97bc-d105f8336941"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7a6988eb-4c87-4dc0-9ddf-cfb691e4a3ab",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5f80ca83-bcf6-494b-b325-aff19191acb8",
              "parentUUID": "7a6988eb-4c87-4dc0-9ddf-cfb691e4a3ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f80ca83-bcf6-494b-b325-aff19191acb8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "954ba9d3-dc8c-462e-8a24-dc654cb269f5",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f1e39baf-3ede-4fdf-8cdb-f04e0cbf46d6",
              "parentUUID": "954ba9d3-dc8c-462e-8a24-dc654cb269f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1e39baf-3ede-4fdf-8cdb-f04e0cbf46d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2e2bcbc1-bc5b-4610-818a-dfb434601a8c",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 193,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ec1aac67-a213-4a84-a2c2-48030449f740",
              "parentUUID": "2e2bcbc1-bc5b-4610-818a-dfb434601a8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec1aac67-a213-4a84-a2c2-48030449f740"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 193,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a04b7242-1729-4ea4-b262-b271cf1fc61f",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 111345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "14004e0e-5aa2-4b72-a8e2-4d6d1d7abd48",
              "parentUUID": "a04b7242-1729-4ea4-b262-b271cf1fc61f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14004e0e-5aa2-4b72-a8e2-4d6d1d7abd48"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111345,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "47e1db76-149c-4e8c-9c30-b93b839a5b70",
          "title": "GET /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronologies/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 486,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "832da68f-5638-438b-a3d3-56b34bcb7b6a",
              "parentUUID": "47e1db76-149c-4e8c-9c30-b93b839a5b70",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "832da68f-5638-438b-a3d3-56b34bcb7b6a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 486,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a0856fb4-dfa4-4393-8f24-183d75eb5a0a",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 138,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: data.result[0].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[0].contactstatus should be integer, data.result[0].fax should be string, data.result[0].notes should be string, data.result[0].suffix should be string, data.result[0].url should be string, data.result[1].address should be string, data.result[1].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[1].contactstatus should be integer, data.result[1].phone should be string, data.result[1].fax should be string, data.result[1].notes should be string, data.result[1].suffix should be string, data.result[1].title should be string, data.result[1].url should be string, data.result[2].address should be string, data.result[2].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[2].contactstatus should be integer, data.result[2].phone should be string, data.result[2].fax should be string, data.result[2].notes should be string, data.result[2].suffix should be string, data.result[2].title should be string, data.result[2].url should be string, data.result[3].address should be string, data.result[3].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[3].contactstatus should be integer, data.result[3].phone should be string, data.result[3].fax should be string, data.result[3].notes should be string, data.result[3].suffix should be string, data.result[3].title should be string, data.result[3].url should be string, data.result[4].address should be string, data.result[4].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[4].contactstatus should be integer, data.result[4].phone should be string, data.result[4].fax should be string, data.result[4].notes should be string, data.result[4].suffix should be string, data.result[4].title should be string, data.result[4].url should be string, data.result[5].address should be string, data.result[5].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[5].contactstatus should be integer, data.result[5].phone should be string, data.result[5].fax should be string, data.result[5].notes should be string, data.result[5].suffix should be string, data.result[5].title should be string, data.result[5].url should be string, data.result[6].address should be string, data.result[6].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[6].contactstatus should be integer, data.result[6].phone should be string, data.result[6].fax should be string, data.result[6].notes should be string, data.result[6].suffix should be string, data.result[6].title should be string, data.result[6].url should be string, data.result[7].address should be string, data.result[7].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[7].contactstatus should be integer, data.result[7].phone should be string, data.result[7].fax should be string, data.result[7].notes should be string, data.result[7].suffix should be string, data.result[7].title should be string, data.result[7].url should be string, data.result[8].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[8].contactstatus should be integer, data.result[8].phone should be string, data.result[8].fax should be string, data.result[8].notes should be string, data.result[8].suffix should be string, data.result[8].title should be string, data.result[8].url should be string, data.result[9].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[9].contactstatus should be integer, data.result[9].phone should be string, data.result[9].fax should be string, data.result[9].notes should be string, data.result[9].suffix should be string, data.result[9].url should be string, data.result[10].address should be string, data.result[10].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[10].contactstatus should be integer, data.result[10].phone should be string, data.result[10].fax should be string, data.result[10].notes should be string, data.result[10].suffix should be string, data.result[10].title should be string, data.result[10].url should be string, data.result[11].address should be string, data.result[11].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[11].contactstatus should be integer, data.result[11].phone should be string, data.result[11].fax should be string, data.result[11].notes should be string, data.result[11].suffix should be string, data.result[11].url should be string, data.result[12].address should be string, data.result[12].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[12].contactstatus should be integer, data.result[12].phone should be string, data.result[12].fax should be string, data.result[12].notes should be string, data.result[12].suffix should be string, data.result[12].title should be string, data.result[12].url should be string, data.result[13].address should be string, data.result[13].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[13].contactstatus should be integer, data.result[13].phone should be string, data.result[13].fax should be string, data.result[13].notes should be string, data.result[13].suffix should be string, data.result[13].title should be string, data.result[13].url should be string, data.result[14].address should be string, data.result[14].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[14].contactstatus should be integer, data.result[14].phone should be string, data.result[14].fax should be string, data.result[14].notes should be string, data.result[14].suffix should be string, data.result[14].title should be string, data.result[14].url should be string, data.result[15].address should be string, data.result[15].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[15].contactstatus should be integer, data.result[15].phone should be string, data.result[15].fax should be string, data.result[15].notes should be string, data.result[15].suffix should be string, data.result[15].url should be string, data.result[16].address should be string, data.result[16].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[16].contactstatus should be integer, data.result[16].phone should be string, data.result[16].fax should be string, data.result[16].notes should be string, data.result[16].suffix should be string, data.result[16].title should be string, data.result[16].url should be string, data.result[17].address should be string, data.result[17].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[17].contactstatus should be integer, data.result[17].phone should be string, data.result[17].fax should be string, data.result[17].notes should be string, data.result[17].suffix should be string, data.result[17].title should be string, data.result[17].url should be string, data.result[18].address should be string, data.result[18].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[18].contactstatus should be integer, data.result[18].phone should be string, data.result[18].fax should be string, data.result[18].notes should be string, data.result[18].suffix should be string, data.result[18].title should be string, data.result[18].url should be string, data.result[19].address should be string, data.result[19].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[19].contactstatus should be integer, data.result[19].phone should be string, data.result[19].fax should be string, data.result[19].notes should be string, data.result[19].suffix should be string, data.result[19].title should be string, data.result[19].url should be string, data.result[20].address should be string, data.result[20].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[20].contactstatus should be integer, data.result[20].phone should be string, data.result[20].fax should be string, data.result[20].notes should be string, data.result[20].suffix should be string, data.result[20].title should be string, data.result[20].url should be string, data.result[21].address should be string, data.result[21].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[21].contactstatus should be integer, data.result[21].phone should be string, data.result[21].fax should be string, data.result[21].notes should be string, data.result[21].suffix should be string, data.result[21].title should be string, data.result[21].url should be string, data.result[22].address should be string, data.result[22].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[22].contactstatus should be integer, data.result[22].phone should be string, data.result[22].fax should be string, data.result[22].notes should be string, data.result[22].suffix should be string, data.result[22].title should be string, data.result[22].url should be string, data.result[23].address should be string, data.result[23].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[23].contactstatus should be integer, data.result[23].phone should be string, data.result[23].fax should be string, data.result[23].notes should be string, data.result[23].suffix should be string, data.result[23].title should be string, data.result[23].url should be string, data.result[24].address should be string, data.result[24].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[24].contactstatus should be integer, data.result[24].phone should be string, data.result[24].fax should be string, data.result[24].notes should be string, data.result[24].suffix should be string, data.result[24].title should be string, data.result[24].url should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: 25,\n        offset: 0\n      },\n      result: [\n        {\n          contactid: 251,\n          aliasid: 251,\n          contactname: 'Schoenweter, James',\n          contactstatusid: 1,\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          aliasid: 2848,\n          contactname: 'Parry, W. J.',\n          contactstatusid: 7,\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          aliasid: 3565,\n          contactname: 'Marvan, P.',\n          contactstatusid: 7,\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          aliasid: 2026,\n          contactname: 'Pinsof, J. D.',\n          contactstatusid: 7,\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          aliasid: 10295,\n          contactname: 'Cambon, Geneviève',\n          contactstatusid: 7,\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-04-12T16:07:37.000Z',\n          recdatemodified: '2018-04-12T16:07:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          aliasid: 2024,\n          contactname: 'Bell, G. L.',\n          contactstatusid: 7,\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          aliasid: 12752,\n          contactname: 'Zhou, Shanfu',\n          contactstatusid: 7,\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-11-05T04:45:38.000Z',\n          recdatemodified: '2018-11-05T04:45:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          aliasid: 17928,\n          contactname: 'Räsänen, Satu',\n          contactstatusid: 7,\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-01-30T16:45:55.000Z',\n          recdatemodified: '2022-01-30T16:45:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          aliasid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          contactstatusid: 1,\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          aliasid: 7247,\n          contactname: 'Andersson, Sofia',\n          contactstatusid: 1,\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          recdatecreated: '2015-05-25T00:15:50.000Z',\n          recdatemodified: '2015-05-25T00:15:51.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 18149,\n          aliasid: 18149,\n          contactname: 'Labeyrie, Laurent',\n          contactstatusid: 7,\n          familyname: 'Labeyrie',\n          leadinginitials: 'L.',\n          givennames: 'Laurent',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-05T21:03:20.000Z',\n          recdatemodified: '2022-04-05T21:03:21.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16703,\n          aliasid: 16703,\n          contactname: 'Irion, Georg',\n          contactstatusid: 6,\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-12-01T21:24:29.000Z',\n          recdatemodified: '2020-12-01T21:24:31.000Z',\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          aliasid: 2961,\n          contactname: 'Ruff, B.',\n          contactstatusid: 7,\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          aliasid: 16633,\n          contactname: 'Castro, H.',\n          contactstatusid: 7,\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-11-18T01:55:19.000Z',\n          recdatemodified: '2020-11-18T01:55:20.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          aliasid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          contactstatusid: 2,\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-10-18T03:58:42.000Z',\n          recdatemodified: '2017-10-18T03:58:42.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          aliasid: 1101,\n          contactname: 'Iversen, J.',\n          contactstatusid: 2,\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          aliasid: 599,\n          contactname: 'Farrington, A.',\n          contactstatusid: 7,\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          aliasid: 11460,\n          contactname: 'Waldrop, J. S.',\n          contactstatusid: 7,\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-06-08T08:33:33.000Z',\n          recdatemodified: '2018-06-08T08:33:34.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          aliasid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          contactstatusid: 1,\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-05-15T22:39:25.000Z',\n          recdatemodified: '2017-05-15T22:39:26.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          aliasid: 1789,\n          contactname: 'Bade, M. J.',\n          contactstatusid: 7,\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          aliasid: 2769,\n          contactname: 'Carraway, L. N.',\n          contactstatusid: 7,\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          aliasid: 7564,\n          contactname: 'Santos, F. R.',\n          contactstatusid: 7,\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2016-02-12T12:11:11.000Z',\n          recdatemodified: '2016-02-12T12:11:12.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          aliasid: 2247,\n          contactname: 'Fortsch, D. E.',\n          contactstatusid: 7,\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 18160,\n          aliasid: 18160,\n          contactname: 'Andruleit, Harald',\n          contactstatusid: 7,\n          familyname: 'Andruleit',\n          leadinginitials: 'H.',\n          givennames: 'Harald',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-07T01:14:54.000Z',\n          recdatemodified: '2022-04-07T01:14:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          aliasid: 4083,\n          contactname: 'Hudon, C.',\n          contactstatusid: 7,\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'contact'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: data.result[0].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[0].contactstatus should be integer, data.result[0].fax should be string, data.result[0].notes should be string, data.result[0].suffix should be string, data.result[0].url should be string, data.result[1].address should be string, data.result[1].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[1].contactstatus should be integer, data.result[1].phone should be string, data.result[1].fax should be string, data.result[1].notes should be string, data.result[1].suffix should be string, data.result[1].title should be string, data.result[1].url should be string, data.result[2].address should be string, data.result[2].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[2].contactstatus should be integer, data.result[2].phone should be string, data.result[2].fax should be string, data.result[2].notes should be string, data.result[2].suffix should be string, data.result[2].title should be string, data.result[2].url should be string, data.result[3].address should be string, data.result[3].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[3].contactstatus should be integer, data.result[3].phone should be string, data.result[3].fax should be string, data.result[3].notes should be string, data.result[3].suffix should be string, data.result[3].title should be string, data.result[3].url should be string, data.result[4].address should be string, data.result[4].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[4].contactstatus should be integer, data.result[4].phone should be string, data.result[4].fax should be string, data.result[4].notes should be string, data.result[4].suffix should be string, data.result[4].title should be string, data.result[4].url should be string, data.result[5].address should be string, data.result[5].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[5].contactstatus should be integer, data.result[5].phone should be string, data.result[5].fax should be string, data.result[5].notes should be string, data.result[5].suffix should be string, data.result[5].title should be string, data.result[5].url should be string, data.result[6].address should be string, data.result[6].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[6].contactstatus should be integer, data.result[6].phone should be string, data.result[6].fax should be string, data.result[6].notes should be string, data.result[6].suffix should be string, data.result[6].title should be string, data.result[6].url should be string, data.result[7].address should be string, data.result[7].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[7].contactstatus should be integer, data.result[7].phone should be string, data.result[7].fax should be string, data.result[7].notes should be string, data.result[7].suffix should be string, data.result[7].title should be string, data.result[7].url should be string, data.result[8].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[8].contactstatus should be integer, data.result[8].phone should be string, data.result[8].fax should be string, data.result[8].notes should be string, data.result[8].suffix should be string, data.result[8].title should be string, data.result[8].url should be string, data.result[9].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[9].contactstatus should be integer, data.result[9].phone should be string, data.result[9].fax should be string, data.result[9].notes should be string, data.result[9].suffix should be string, data.result[9].url should be string, data.result[10].address should be string, data.result[10].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[10].contactstatus should be integer, data.result[10].phone should be string, data.result[10].fax should be string, data.result[10].notes should be string, data.result[10].suffix should be string, data.result[10].title should be string, data.result[10].url should be string, data.result[11].address should be string, data.result[11].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[11].contactstatus should be integer, data.result[11].phone should be string, data.result[11].fax should be string, data.result[11].notes should be string, data.result[11].suffix should be string, data.result[11].url should be string, data.result[12].address should be string, data.result[12].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[12].contactstatus should be integer, data.result[12].phone should be string, data.result[12].fax should be string, data.result[12].notes should be string, data.result[12].suffix should be string, data.result[12].title should be string, data.result[12].url should be string, data.result[13].address should be string, data.result[13].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[13].contactstatus should be integer, data.result[13].phone should be string, data.result[13].fax should be string, data.result[13].notes should be string, data.result[13].suffix should be string, data.result[13].title should be string, data.result[13].url should be string, data.result[14].address should be string, data.result[14].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[14].contactstatus should be integer, data.result[14].phone should be string, data.result[14].fax should be string, data.result[14].notes should be string, data.result[14].suffix should be string, data.result[14].title should be string, data.result[14].url should be string, data.result[15].address should be string, data.result[15].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[15].contactstatus should be integer, data.result[15].phone should be string, data.result[15].fax should be string, data.result[15].notes should be string, data.result[15].suffix should be string, data.result[15].url should be string, data.result[16].address should be string, data.result[16].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[16].contactstatus should be integer, data.result[16].phone should be string, data.result[16].fax should be string, data.result[16].notes should be string, data.result[16].suffix should be string, data.result[16].title should be string, data.result[16].url should be string, data.result[17].address should be string, data.result[17].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[17].contactstatus should be integer, data.result[17].phone should be string, data.result[17].fax should be string, data.result[17].notes should be string, data.result[17].suffix should be string, data.result[17].title should be string, data.result[17].url should be string, data.result[18].address should be string, data.result[18].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[18].contactstatus should be integer, data.result[18].phone should be string, data.result[18].fax should be string, data.result[18].notes should be string, data.result[18].suffix should be string, data.result[18].title should be string, data.result[18].url should be string, data.result[19].address should be string, data.result[19].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[19].contactstatus should be integer, data.result[19].phone should be string, data.result[19].fax should be string, data.result[19].notes should be string, data.result[19].suffix should be string, data.result[19].title should be string, data.result[19].url should be string, data.result[20].address should be string, data.result[20].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[20].contactstatus should be integer, data.result[20].phone should be string, data.result[20].fax should be string, data.result[20].notes should be string, data.result[20].suffix should be string, data.result[20].title should be string, data.result[20].url should be string, data.result[21].address should be string, data.result[21].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[21].contactstatus should be integer, data.result[21].phone should be string, data.result[21].fax should be string, data.result[21].notes should be string, data.result[21].suffix should be string, data.result[21].title should be string, data.result[21].url should be string, data.result[22].address should be string, data.result[22].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[22].contactstatus should be integer, data.result[22].phone should be string, data.result[22].fax should be string, data.result[22].notes should be string, data.result[22].suffix should be string, data.result[22].title should be string, data.result[22].url should be string, data.result[23].address should be string, data.result[23].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[23].contactstatus should be integer, data.result[23].phone should be string, data.result[23].fax should be string, data.result[23].notes should be string, data.result[23].suffix should be string, data.result[23].title should be string, data.result[23].url should be string, data.result[24].address should be string, data.result[24].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[24].contactstatus should be integer, data.result[24].phone should be string, data.result[24].fax should be string, data.result[24].notes should be string, data.result[24].suffix should be string, data.result[24].title should be string, data.result[24].url should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: 25,\n        offset: 0\n      },\n      result: [\n        {\n          contactid: 251,\n          aliasid: 251,\n          contactname: 'Schoenweter, James',\n          contactstatusid: 1,\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          aliasid: 2848,\n          contactname: 'Parry, W. J.',\n          contactstatusid: 7,\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          aliasid: 3565,\n          contactname: 'Marvan, P.',\n          contactstatusid: 7,\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          aliasid: 2026,\n          contactname: 'Pinsof, J. D.',\n          contactstatusid: 7,\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          aliasid: 10295,\n          contactname: 'Cambon, Geneviève',\n          contactstatusid: 7,\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-04-12T16:07:37.000Z',\n          recdatemodified: '2018-04-12T16:07:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          aliasid: 2024,\n          contactname: 'Bell, G. L.',\n          contactstatusid: 7,\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          aliasid: 12752,\n          contactname: 'Zhou, Shanfu',\n          contactstatusid: 7,\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-11-05T04:45:38.000Z',\n          recdatemodified: '2018-11-05T04:45:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          aliasid: 17928,\n          contactname: 'Räsänen, Satu',\n          contactstatusid: 7,\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-01-30T16:45:55.000Z',\n          recdatemodified: '2022-01-30T16:45:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          aliasid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          contactstatusid: 1,\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          aliasid: 7247,\n          contactname: 'Andersson, Sofia',\n          contactstatusid: 1,\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          recdatecreated: '2015-05-25T00:15:50.000Z',\n          recdatemodified: '2015-05-25T00:15:51.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 18149,\n          aliasid: 18149,\n          contactname: 'Labeyrie, Laurent',\n          contactstatusid: 7,\n          familyname: 'Labeyrie',\n          leadinginitials: 'L.',\n          givennames: 'Laurent',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-05T21:03:20.000Z',\n          recdatemodified: '2022-04-05T21:03:21.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16703,\n          aliasid: 16703,\n          contactname: 'Irion, Georg',\n          contactstatusid: 6,\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-12-01T21:24:29.000Z',\n          recdatemodified: '2020-12-01T21:24:31.000Z',\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          aliasid: 2961,\n          contactname: 'Ruff, B.',\n          contactstatusid: 7,\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          aliasid: 16633,\n          contactname: 'Castro, H.',\n          contactstatusid: 7,\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-11-18T01:55:19.000Z',\n          recdatemodified: '2020-11-18T01:55:20.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          aliasid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          contactstatusid: 2,\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-10-18T03:58:42.000Z',\n          recdatemodified: '2017-10-18T03:58:42.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          aliasid: 1101,\n          contactname: 'Iversen, J.',\n          contactstatusid: 2,\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          aliasid: 599,\n          contactname: 'Farrington, A.',\n          contactstatusid: 7,\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          aliasid: 11460,\n          contactname: 'Waldrop, J. S.',\n          contactstatusid: 7,\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-06-08T08:33:33.000Z',\n          recdatemodified: '2018-06-08T08:33:34.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          aliasid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          contactstatusid: 1,\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-05-15T22:39:25.000Z',\n          recdatemodified: '2017-05-15T22:39:26.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          aliasid: 1789,\n          contactname: 'Bade, M. J.',\n          contactstatusid: 7,\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          aliasid: 2769,\n          contactname: 'Carraway, L. N.',\n          contactstatusid: 7,\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          aliasid: 7564,\n          contactname: 'Santos, F. R.',\n          contactstatusid: 7,\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2016-02-12T12:11:11.000Z',\n          recdatemodified: '2016-02-12T12:11:12.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          aliasid: 2247,\n          contactname: 'Fortsch, D. E.',\n          contactstatusid: 7,\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 18160,\n          aliasid: 18160,\n          contactname: 'Andruleit, Harald',\n          contactstatusid: 7,\n          familyname: 'Andruleit',\n          leadinginitials: 'H.',\n          givennames: 'Harald',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-07T01:14:54.000Z',\n          recdatemodified: '2022-04-07T01:14:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          aliasid: 4083,\n          contactname: 'Hudon, C.',\n          contactstatusid: 7,\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'contact'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "91376031-e4dc-4e8c-a3fc-ca2715ebc18b",
              "parentUUID": "a0856fb4-dfa4-4393-8f24-183d75eb5a0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "91376031-e4dc-4e8c-a3fc-ca2715ebc18b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dfaea93d-cc96-4bc5-9682-e2ea462e19cb",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 123,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        aliasid: 1,\n        contactname: 'International Organization for Standardization',\n        contactstatusid: 4,\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        recdatecreated: '2013-09-30T21:02:35.000Z',\n        recdatemodified: '2013-09-30T21:02:35.000Z',\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        aliasid: 1,\n        contactname: 'International Organization for Standardization',\n        contactstatusid: 4,\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        recdatecreated: '2013-09-30T21:02:35.000Z',\n        recdatemodified: '2013-09-30T21:02:35.000Z',\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f8e01c27-1620-4197-998d-282093551a05",
              "parentUUID": "dfaea93d-cc96-4bc5-9682-e2ea462e19cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f8e01c27-1620-4197-998d-282093551a05"
          ],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "24e8b203-c198-42e3-a9c9-3ce84643e2c7",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 343,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "655d594e-aa64-46dd-887e-bd5e7ddd9d07",
              "parentUUID": "24e8b203-c198-42e3-a9c9-3ce84643e2c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "655d594e-aa64-46dd-887e-bd5e7ddd9d07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 343,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "323cff42-9081-4c46-adfa-68baab6cb43e",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fa850e90-1799-41e1-934b-3e41bcb81e07",
              "parentUUID": "323cff42-9081-4c46-adfa-68baab6cb43e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa850e90-1799-41e1-934b-3e41bcb81e07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3512,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "467c05c9-bcc5-448d-ab2f-36af3dad8be9",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 97,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5921b784-1246-4d6b-8e24-dcf0a03c2725",
              "parentUUID": "467c05c9-bcc5-448d-ab2f-36af3dad8be9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5921b784-1246-4d6b-8e24-dcf0a03c2725"
          ],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "716e8483-7612-439c-a381-0d34cdd9fb65",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 891,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9c27be4d-fbc8-4c54-8581-ad0aee05b94c",
              "parentUUID": "716e8483-7612-439c-a381-0d34cdd9fb65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c27be4d-fbc8-4c54-8581-ad0aee05b94c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 891,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6f028a33-ff64-4729-a23f-0fe4185d02f6",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bcb423d8-030b-47f7-bd4f-c8eabab47f7f",
              "parentUUID": "6f028a33-ff64-4729-a23f-0fe4185d02f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bcb423d8-030b-47f7-bd4f-c8eabab47f7f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "72b2a388-c120-4409-bf7e-ebfb147e6196",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5a6ae59d-1d39-49fb-8242-abc8a8a9f581",
              "parentUUID": "72b2a388-c120-4409-bf7e-ebfb147e6196",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a6ae59d-1d39-49fb-8242-abc8a8a9f581"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fb144c51-7cfd-4ded-bd15-3de98426bbc8",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "029ab786-80b3-429f-8bf4-98b2846a61e1",
              "parentUUID": "fb144c51-7cfd-4ded-bd15-3de98426bbc8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "029ab786-80b3-429f-8bf4-98b2846a61e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1466f2be-dce8-4b52-8ce4-22fc02d767e6",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5c797f82-de9b-4701-8697-ede6fa10665e",
              "parentUUID": "1466f2be-dce8-4b52-8ce4-22fc02d767e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c797f82-de9b-4701-8697-ede6fa10665e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4eaa4acc-91e5-4295-b9b3-eb8ed54ce284",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1c38c44f-db9b-4a8e-9c11-f317ead2ee5e",
              "parentUUID": "4eaa4acc-91e5-4295-b9b3-eb8ed54ce284",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c38c44f-db9b-4a8e-9c11-f317ead2ee5e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4091e6f3-d1a9-443e-8889-93e8879b84b3",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "17596e91-301a-4e23-96bd-9bb8ced64f3b",
              "parentUUID": "4091e6f3-d1a9-443e-8889-93e8879b84b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17596e91-301a-4e23-96bd-9bb8ced64f3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f115023e-362f-438b-bba1-7bebfd7f1a53",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 111,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0f535bd4-2e3f-434f-9011-4aea7a5a0788",
              "parentUUID": "f115023e-362f-438b-bba1-7bebfd7f1a53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0f535bd4-2e3f-434f-9011-4aea7a5a0788"
          ],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6d69fbc6-6b3c-449f-a943-7e8e0cddf587",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 132,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5c3a9009-62ef-4157-9328-3b1cef42d3df",
              "parentUUID": "6d69fbc6-6b3c-449f-a943-7e8e0cddf587",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5c3a9009-62ef-4157-9328-3b1cef42d3df"
          ],
          "pending": [],
          "skipped": [],
          "duration": 132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d5de46d2-0ff8-401f-b27e-1d24424379b6",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 774,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a3765e2b-6c8f-434f-9adb-04e8f3c0b8ff",
              "parentUUID": "d5de46d2-0ff8-401f-b27e-1d24424379b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a3765e2b-6c8f-434f-9adb-04e8f3c0b8ff"
          ],
          "pending": [],
          "skipped": [],
          "duration": 774,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fbd62c29-ef77-462f-930e-152b68ebe89e",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 116,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'taxonpaths' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'variableunits' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'samples' },\n      { tablename: 'datasetpis' },\n      { tablename: 'datasetpublications' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'contacts' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'data' },\n      { tablename: 'taxa' },\n      { tablename: 'chronologies' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'collectiontypes' },\n      { tablename: 'collectionunits' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'datasetdatabases' },\n      { tablename: 'datasetdoi' },\n      { tablename: 'datasets' },\n      { tablename: 'datasettypes' },\n      { tablename: 'sites' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'aggregatedatasets' },\n      { tablename: 'aggregateordertypes' },\n      { tablename: 'aggregatesampleages' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'analysisunitaltdepths' },\n      { tablename: 'analysisunitaltdepthscales' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'analysisunits' },\n      { tablename: 'calibrationcurves' },\n      { tablename: 'calibrationprograms' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'chroncontrols' },\n      { tablename: 'chroncontrolscal14c' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'dataprocessors' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'datasettaxonnotes' },\n      { tablename: 'datasetvariables' },\n      { tablename: 'datataxonnotes' },\n      { tablename: 'depagents' },\n      { tablename: 'depagenttypes' },\n      { tablename: 'depenvttypes' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'eventtypes' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'faciestypes' },\n      { tablename: 'formtaxa' },\n      { tablename: 'fractiondated' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'geochronology' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'geopaths' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'taxonpaths' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'variableunits' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'samples' },\n      { tablename: 'datasetpis' },\n      { tablename: 'datasetpublications' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'contacts' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'data' },\n      { tablename: 'taxa' },\n      { tablename: 'chronologies' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'collectiontypes' },\n      { tablename: 'collectionunits' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'datasetdatabases' },\n      { tablename: 'datasetdoi' },\n      { tablename: 'datasets' },\n      { tablename: 'datasettypes' },\n      { tablename: 'sites' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'aggregatedatasets' },\n      { tablename: 'aggregateordertypes' },\n      { tablename: 'aggregatesampleages' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'analysisunitaltdepths' },\n      { tablename: 'analysisunitaltdepthscales' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'analysisunits' },\n      { tablename: 'calibrationcurves' },\n      { tablename: 'calibrationprograms' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'chroncontrols' },\n      { tablename: 'chroncontrolscal14c' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'dataprocessors' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'datasettaxonnotes' },\n      { tablename: 'datasetvariables' },\n      { tablename: 'datataxonnotes' },\n      { tablename: 'depagents' },\n      { tablename: 'depagenttypes' },\n      { tablename: 'depenvttypes' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'eventtypes' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'faciestypes' },\n      { tablename: 'formtaxa' },\n      { tablename: 'fractiondated' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'geochronology' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'geopaths' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "337d5d39-0484-40b5-88b0-1b2958472b1d",
              "parentUUID": "fbd62c29-ef77-462f-930e-152b68ebe89e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "337d5d39-0484-40b5-88b0-1b2958472b1d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "90a2a8eb-2b07-480e-b231-0ee223e9eda2",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'taxonpaths' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'variableunits' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'samples' },\n      { tablename: 'datasetpis' },\n      { tablename: 'datasetpublications' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'contacts' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'data' },\n      { tablename: 'taxa' },\n      { tablename: 'chronologies' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'collectiontypes' },\n      { tablename: 'collectionunits' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'datasetdatabases' },\n      { tablename: 'datasetdoi' },\n      { tablename: 'datasets' },\n      { tablename: 'datasettypes' },\n      { tablename: 'sites' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'aggregatedatasets' },\n      { tablename: 'aggregateordertypes' },\n      { tablename: 'aggregatesampleages' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'analysisunitaltdepths' },\n      { tablename: 'analysisunitaltdepthscales' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'analysisunits' },\n      { tablename: 'calibrationcurves' },\n      { tablename: 'calibrationprograms' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'chroncontrols' },\n      { tablename: 'chroncontrolscal14c' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'dataprocessors' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'datasettaxonnotes' },\n      { tablename: 'datasetvariables' },\n      { tablename: 'datataxonnotes' },\n      { tablename: 'depagents' },\n      { tablename: 'depagenttypes' },\n      { tablename: 'depenvttypes' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'eventtypes' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'faciestypes' },\n      { tablename: 'formtaxa' },\n      { tablename: 'fractiondated' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'geochronology' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'geopaths' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'taxonpaths' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'variableunits' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'samples' },\n      { tablename: 'datasetpis' },\n      { tablename: 'datasetpublications' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'contacts' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'data' },\n      { tablename: 'taxa' },\n      { tablename: 'chronologies' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'collectiontypes' },\n      { tablename: 'collectionunits' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'datasetdatabases' },\n      { tablename: 'datasetdoi' },\n      { tablename: 'datasets' },\n      { tablename: 'datasettypes' },\n      { tablename: 'sites' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'aggregatedatasets' },\n      { tablename: 'aggregateordertypes' },\n      { tablename: 'aggregatesampleages' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'analysisunitaltdepths' },\n      { tablename: 'analysisunitaltdepthscales' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'analysisunits' },\n      { tablename: 'calibrationcurves' },\n      { tablename: 'calibrationprograms' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'chroncontrols' },\n      { tablename: 'chroncontrolscal14c' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'dataprocessors' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'datasettaxonnotes' },\n      { tablename: 'datasetvariables' },\n      { tablename: 'datataxonnotes' },\n      { tablename: 'depagents' },\n      { tablename: 'depagenttypes' },\n      { tablename: 'depenvttypes' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'eventtypes' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'faciestypes' },\n      { tablename: 'formtaxa' },\n      { tablename: 'fractiondated' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'geochronology' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'geopaths' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4f105fc1-415a-4a78-b0c6-65a36bdf7e8b",
              "parentUUID": "90a2a8eb-2b07-480e-b231-0ee223e9eda2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4f105fc1-415a-4a78-b0c6-65a36bdf7e8b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5ed47a77-24fd-41a9-b9ef-f32e4a079754",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 978,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f98cf2dc-34e8-4e78-9ee2-f1fced691095",
              "parentUUID": "5ed47a77-24fd-41a9-b9ef-f32e4a079754",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f98cf2dc-34e8-4e78-9ee2-f1fced691095"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 978,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "069dc3ad-ee5c-469f-a930-65a2320e7167",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "553b3326-11b0-4805-9daf-738455715d11",
              "parentUUID": "069dc3ad-ee5c-469f-a930-65a2320e7167",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "553b3326-11b0-4805-9daf-738455715d11"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 173,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2a752eb3-bfc2-413d-8cb9-61402ee866de",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 24,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c77b12b7-3ed5-4cc1-9ebb-dcc71dc9b115",
              "parentUUID": "2a752eb3-bfc2-413d-8cb9-61402ee866de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c77b12b7-3ed5-4cc1-9ebb-dcc71dc9b115"
          ],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7bc81f1a-b130-4a82-b105-ff41d97243c2",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3618242a-8bf8-4e92-9d65-0f22d5ecaf39",
              "parentUUID": "7bc81f1a-b130-4a82-b105-ff41d97243c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3618242a-8bf8-4e92-9d65-0f22d5ecaf39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cbf3af21-a03a-40d9-9b0f-af096022a871",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 977,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6e2fc724-7bc5-4d72-b3a5-1c9324cf48e3",
              "parentUUID": "cbf3af21-a03a-40d9-9b0f-af096022a871",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6e2fc724-7bc5-4d72-b3a5-1c9324cf48e3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 977,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bdc3f0dc-fa2c-40ae-9d12-8843989be482",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5774b8fe-4464-4d76-b5be-a48e2d32b9eb",
              "parentUUID": "bdc3f0dc-fa2c-40ae-9d12-8843989be482",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5774b8fe-4464-4d76-b5be-a48e2d32b9eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 99,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fa3a6d55-5cb2-4e03-b84b-fa0889091fbe",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 211,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "02276007-f367-4424-a249-1ad81695bce3",
              "parentUUID": "fa3a6d55-5cb2-4e03-b84b-fa0889091fbe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "02276007-f367-4424-a249-1ad81695bce3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 211,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d74247db-f7f1-4ca6-9fca-bacec7917e76",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "344c0ea3-e70a-497b-a1d6-581cdbf16cdb",
              "parentUUID": "d74247db-f7f1-4ca6-9fca-bacec7917e76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "344c0ea3-e70a-497b-a1d6-581cdbf16cdb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "42a61036-37be-4e0b-b4fb-6775296928dc",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c7a17901-fa1e-44f9-84a8-5ef4e8c6d172",
              "parentUUID": "42a61036-37be-4e0b-b4fb-6775296928dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7a17901-fa1e-44f9-84a8-5ef4e8c6d172"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4889208e-78ef-491b-b0d2-679131e9446a",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "366ed859-017e-47d2-a694-29728d49aa28",
              "parentUUID": "4889208e-78ef-491b-b0d2-679131e9446a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "366ed859-017e-47d2-a694-29728d49aa28"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "658454c3-0f42-41ed-8e72-85397ba2b16d",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 745,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a47e7cf2-235a-46ef-bb9e-bda5f2fe5148",
              "parentUUID": "658454c3-0f42-41ed-8e72-85397ba2b16d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a47e7cf2-235a-46ef-bb9e-bda5f2fe5148"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 745,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0c53a0e8-04f3-489e-947e-a62ee42a3561",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ddde7b09-bbe0-40cc-8365-fbc8c08b14cb",
              "parentUUID": "0c53a0e8-04f3-489e-947e-a62ee42a3561",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ddde7b09-bbe0-40cc-8365-fbc8c08b14cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 115,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "04926c12-1e4d-4ebd-bbb0-ada87d705d6e",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 364,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e0f48609-fa0a-4541-8b46-2ceef103e2f3",
              "parentUUID": "04926c12-1e4d-4ebd-bbb0-ada87d705d6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0f48609-fa0a-4541-8b46-2ceef103e2f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 364,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8ca7a2c8-2ef4-47df-817b-ed9b90b73fb1",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "588d309a-fa66-460e-b86a-9d471cf52699",
              "parentUUID": "8ca7a2c8-2ef4-47df-817b-ed9b90b73fb1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "588d309a-fa66-460e-b86a-9d471cf52699"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "530931a6-6212-4ed7-86f6-d868d0fca8fc",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0221b059-4394-42af-accb-2a3ec8930a85",
              "parentUUID": "530931a6-6212-4ed7-86f6-d868d0fca8fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0221b059-4394-42af-accb-2a3ec8930a85"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "15e9107c-480a-40aa-8dc3-248fef686d59",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "4c9b86b1-8885-4d0c-9edb-9119854f3a8f",
              "parentUUID": "15e9107c-480a-40aa-8dc3-248fef686d59",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c9b86b1-8885-4d0c-9edb-9119854f3a8f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 113,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a4557f0d-a271-4549-a4a9-3c975e19e2f0",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 821,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f317c323-c024-4b1f-abcd-889f333f5885",
              "parentUUID": "a4557f0d-a271-4549-a4a9-3c975e19e2f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f317c323-c024-4b1f-abcd-889f333f5885"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 821,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "23cb089d-5dc1-44d9-b185-3368f9e6e6ed",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 773,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3eea2c27-0f2e-4674-93ad-9f11d88ae44f",
              "parentUUID": "23cb089d-5dc1-44d9-b185-3368f9e6e6ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3eea2c27-0f2e-4674-93ad-9f11d88ae44f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 773,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8ea135b2-cb56-4513-be1e-b9015a259cc3",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bbf14b12-1dd3-4f88-92c8-c500ebbb9603",
              "parentUUID": "8ea135b2-cb56-4513-be1e-b9015a259cc3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbf14b12-1dd3-4f88-92c8-c500ebbb9603"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9f88817d-99b6-4ead-be92-49bee21a0035",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 333,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fdd89015-fd46-47af-b67f-014ccb81a38c",
              "parentUUID": "9f88817d-99b6-4ead-be92-49bee21a0035",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fdd89015-fd46-47af-b67f-014ccb81a38c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 333,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "486cb165-be28-4c84-a2d5-7c4946de1100",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "8c4efc45-62f5-4ae6-8768-9f6fab0d2a95",
              "parentUUID": "486cb165-be28-4c84-a2d5-7c4946de1100",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c4efc45-62f5-4ae6-8768-9f6fab0d2a95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 234,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fd8df039-8871-431e-b75e-959b0c31f19b",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5858,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "70fa1690-2c2c-40c1-90f0-2303c18b4731",
              "parentUUID": "fd8df039-8871-431e-b75e-959b0c31f19b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70fa1690-2c2c-40c1-90f0-2303c18b4731"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5858,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "71623114-0327-4b13-bde4-7f4d5060975f",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 316,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bac28964-35e0-45a8-ad53-26161e419980",
              "parentUUID": "71623114-0327-4b13-bde4-7f4d5060975f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bac28964-35e0-45a8-ad53-26161e419980"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 316,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "136bba06-ffe2-4c58-a35d-5caca2587ae1",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "958ad10c-ae57-4b87-934e-6512b7e84607",
              "parentUUID": "136bba06-ffe2-4c58-a35d-5caca2587ae1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "958ad10c-ae57-4b87-934e-6512b7e84607"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 106,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4b295382-cd66-4920-9074-0e77db588a7f",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98677,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9f1647cc-be33-46ff-a84d-8dc8a941ffcf",
              "parentUUID": "4b295382-cd66-4920-9074-0e77db588a7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f1647cc-be33-46ff-a84d-8dc8a941ffcf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98677,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a24c77ec-dda3-4b1a-a297-08c66a6a666b",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5a41a462-0829-4dfe-b56c-2bd214f4d7ac",
              "parentUUID": "a24c77ec-dda3-4b1a-a297-08c66a6a666b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5a41a462-0829-4dfe-b56c-2bd214f4d7ac"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0b5b8d92-5836-48a3-9b64-cfeca3ddffd0",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 456,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c9bdd1cb-c37d-4ea4-ad7a-fdaf372401fe",
              "parentUUID": "0b5b8d92-5836-48a3-9b64-cfeca3ddffd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9bdd1cb-c37d-4ea4-ad7a-fdaf372401fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 456,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0e1ba9ff-cbdc-4fcd-b683-2b3a48306c4a",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "29a90503-2b91-4a31-922f-de578683dd7e",
              "parentUUID": "0e1ba9ff-cbdc-4fcd-b683-2b3a48306c4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 756,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "7ed1d116-6db7-4c8c-9310-e13f67df01a0",
              "parentUUID": "0e1ba9ff-cbdc-4fcd-b683-2b3a48306c4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "373dd13f-887f-443d-8a45-626845731e2e",
              "parentUUID": "0e1ba9ff-cbdc-4fcd-b683-2b3a48306c4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "cdb8c4c4-4801-49d8-9140-7fd0a7647f52",
              "parentUUID": "0e1ba9ff-cbdc-4fcd-b683-2b3a48306c4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 289,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "125d386c-5b2a-4e13-8d36-dbf844b8fe30",
              "parentUUID": "0e1ba9ff-cbdc-4fcd-b683-2b3a48306c4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29a90503-2b91-4a31-922f-de578683dd7e",
            "7ed1d116-6db7-4c8c-9310-e13f67df01a0",
            "373dd13f-887f-443d-8a45-626845731e2e",
            "cdb8c4c4-4801-49d8-9140-7fd0a7647f52",
            "125d386c-5b2a-4e13-8d36-dbf844b8fe30"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1245,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "51519038-0d2a-4c68-82c7-1e568d63d2eb",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 550,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "5a9281c2-23c8-4729-a4e1-fcf521c4c8e5",
              "parentUUID": "51519038-0d2a-4c68-82c7-1e568d63d2eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "35423721-c30c-45ff-9f1b-39e216415673",
              "parentUUID": "51519038-0d2a-4c68-82c7-1e568d63d2eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 7745,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6d2a8e7a-cce9-43a0-8286-8fd847785b95",
              "parentUUID": "51519038-0d2a-4c68-82c7-1e568d63d2eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a9281c2-23c8-4729-a4e1-fcf521c4c8e5",
            "35423721-c30c-45ff-9f1b-39e216415673",
            "6d2a8e7a-cce9-43a0-8286-8fd847785b95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9562,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "0ef45d84-e674-4b35-a032-fd15ca92cf19",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 470,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "27e0a0b5-052d-4def-8427-0513e9ffeeff",
              "parentUUID": "0ef45d84-e674-4b35-a032-fd15ca92cf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c42fab78-fa46-4f2b-b95b-89da3bbd8442",
              "parentUUID": "0ef45d84-e674-4b35-a032-fd15ca92cf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1068,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "d17a5a7f-3860-4af1-88d9-cd4a335ff508",
              "parentUUID": "0ef45d84-e674-4b35-a032-fd15ca92cf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c12aba13-c710-418d-8a7f-060950ad166f",
              "parentUUID": "0ef45d84-e674-4b35-a032-fd15ca92cf19",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27e0a0b5-052d-4def-8427-0513e9ffeeff",
            "c42fab78-fa46-4f2b-b95b-89da3bbd8442",
            "d17a5a7f-3860-4af1-88d9-cd4a335ff508",
            "c12aba13-c710-418d-8a7f-060950ad166f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2792,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "16dd996a-49a1-4be4-8f65-a60dce552d20",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query returns the first 25 taxa.",
              "fullTitle": "Get taxon data: An empty query returns the first 25 taxa.",
              "timedOut": false,
              "duration": 343,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(200, done);",
              "err": {},
              "uuid": "a8fe8bff-4081-43b4-8e7e-db6afcf11a8c",
              "parentUUID": "16dd996a-49a1-4be4-8f65-a60dce552d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 12);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "67c926c8-76ef-4dc1-a868-55c16b9bdf82",
              "parentUUID": "16dd996a-49a1-4be4-8f65-a60dce552d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "c6328fd0-fe3b-4c5b-9729-bf01aba9e27f",
              "parentUUID": "16dd996a-49a1-4be4-8f65-a60dce552d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "ebe4d027-1f89-49b7-b7be-1f05710af723",
              "parentUUID": "16dd996a-49a1-4be4-8f65-a60dce552d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "f9e431f9-36dd-44aa-865c-06da5e65cd01",
              "parentUUID": "16dd996a-49a1-4be4-8f65-a60dce552d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 158,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "ddcabdb3-2b4b-49b0-8362-de9f5896ac47",
              "parentUUID": "16dd996a-49a1-4be4-8f65-a60dce552d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 25);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "68836475-8955-47ce-b0bc-141286ea6a8a",
              "parentUUID": "16dd996a-49a1-4be4-8f65-a60dce552d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 30);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "123d863f-3bf8-4b68-b0dc-e49f4977e5dc",
              "parentUUID": "16dd996a-49a1-4be4-8f65-a60dce552d20",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8fe8bff-4081-43b4-8e7e-db6afcf11a8c",
            "67c926c8-76ef-4dc1-a868-55c16b9bdf82",
            "c6328fd0-fe3b-4c5b-9729-bf01aba9e27f",
            "ebe4d027-1f89-49b7-b7be-1f05710af723",
            "f9e431f9-36dd-44aa-865c-06da5e65cd01",
            "ddcabdb3-2b4b-49b0-8362-de9f5896ac47",
            "68836475-8955-47ce-b0bc-141286ea6a8a",
            "123d863f-3bf8-4b68-b0dc-e49f4977e5dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1566,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5f53f1c2-d592-4051-9f26-6a678f19fad8",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "27a9070b-0c30-432d-bebf-ec3914255346",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "929d3e72-77a1-4490-bba1-8019f73a7ca6",
                  "parentUUID": "27a9070b-0c30-432d-bebf-ec3914255346",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "929d3e72-77a1-4490-bba1-8019f73a7ca6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e38c8b3c-1c73-4ae7-88f3-e69c99c5d90c",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "490e6d34-962d-4ba5-b0a9-2c97bc6161e1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8f1f7f21-4705-4ec7-acb0-cb4fdd3d4c8b",
                  "parentUUID": "490e6d34-962d-4ba5-b0a9-2c97bc6161e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f1f7f21-4705-4ec7-acb0-cb4fdd3d4c8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "64f8113b-dd6e-4127-9e18-12d7e910dfd0",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ebfd56a8-f06b-4a06-8876-7c435859d8eb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c4f850c1-c2bc-499e-9742-466fbbf4bc4d",
                  "parentUUID": "ebfd56a8-f06b-4a06-8876-7c435859d8eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4f850c1-c2bc-499e-9742-466fbbf4bc4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1638bcea-51e0-4841-bdf5-4a23635fc898",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f4972017-e6d6-4e4c-81e1-bfc5ae9a0f32",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/-86330474', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c14f0aca-486b-4125-a531-6184674d0a27",
                  "parentUUID": "f4972017-e6d6-4e4c-81e1-bfc5ae9a0f32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c14f0aca-486b-4125-a531-6184674d0a27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "122d8166-d73f-4f1e-bdcb-e2ca2bd59c0a",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ec777593-5b0c-4ea7-a6bc-b63b307e2579",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 708,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "23475ecf-bf05-4cf7-a79f-560b0dc66fcc",
                  "parentUUID": "ec777593-5b0c-4ea7-a6bc-b63b307e2579",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23475ecf-bf05-4cf7-a79f-560b0dc66fcc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 708,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "45ae1b43-3e58-4963-9600-dd8197559a33",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "369e8491-de39-417f-abf5-0615cfb08e1c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 824,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e136e5af-bd89-4ee1-bb0f-0cc8f3bf87ca",
                  "parentUUID": "369e8491-de39-417f-abf5-0615cfb08e1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e136e5af-bd89-4ee1-bb0f-0cc8f3bf87ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 824,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "57dbd2b3-2217-414f-90f1-464c6cd372fe",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "47549788-f7a6-43b9-ab5d-2ab1bbadf078",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 7774, 'gpname': 'qui laboris nulla deserunt', 'rank': 2, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6c70b2a1-83ae-4afe-9a14-406b89c6f256",
                  "parentUUID": "47549788-f7a6-43b9-ab5d-2ab1bbadf078",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c70b2a1-83ae-4afe-9a14-406b89c6f256"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 130,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c5eee4dc-ddea-41a5-abb3-fa137bbe8205",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3f9ddf5c-2ad7-4f3c-9c0b-a79c8356b3f8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/6769', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0df515b2-724a-467c-8b20-0d1eaf86da5b",
                  "parentUUID": "3f9ddf5c-2ad7-4f3c-9c0b-a79c8356b3f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0df515b2-724a-467c-8b20-0d1eaf86da5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f927595a-0baa-4343-a1e2-52efda3b155c",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "63fec663-89ae-4226-aa44-dc4c60ea05a0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "baacdcff-d878-421d-86d5-1ca4c8b6a2da",
                  "parentUUID": "63fec663-89ae-4226-aa44-dc4c60ea05a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "baacdcff-d878-421d-86d5-1ca4c8b6a2da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0e4d051b-2ceb-4871-a41d-e65ab5e9be1e",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e4aa4552-82a3-4ea7-87f8-a72fd0f48544",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e7fd15bb-c538-4dff-9a9e-5bd655eeae05",
                  "parentUUID": "e4aa4552-82a3-4ea7-87f8-a72fd0f48544",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7fd15bb-c538-4dff-9a9e-5bd655eeae05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e3fc5a00-c73b-4d3d-a5c1-308b075ce443",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1c4e56dd-1db9-4279-997b-bda1bb7e05de",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4c1d5f78-26ad-4e87-9abb-473c2a1b4a6d",
                  "parentUUID": "1c4e56dd-1db9-4279-997b-bda1bb7e05de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c1d5f78-26ad-4e87-9abb-473c2a1b4a6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "06189543-552b-4a50-a7d0-4d94ff8e3a5d",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b8f74487-f3d2-432f-83b0-950cd7fda256",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7ea9ebc1-d7de-4e90-8e36-0c58fcefeaef",
                  "parentUUID": "b8f74487-f3d2-432f-83b0-950cd7fda256",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ea9ebc1-d7de-4e90-8e36-0c58fcefeaef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "19464222-3dd7-4c40-824b-0b14233d722e",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3d45c21f-5795-45e4-a08c-6cef634e0738",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d1e70a24-6297-4b52-a68c-6fa7a662b4da",
                  "parentUUID": "3d45c21f-5795-45e4-a08c-6cef634e0738",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1e70a24-6297-4b52-a68c-6fa7a662b4da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0faa9e40-cfc1-41eb-bacd-e719919227e3",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2603fe87-a78f-47ee-b3a6-8ca55d22aba7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "993672a6-2886-4533-84a7-1d21b00010f8",
                  "parentUUID": "2603fe87-a78f-47ee-b3a6-8ca55d22aba7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "993672a6-2886-4533-84a7-1d21b00010f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "af03d544-b6e8-43d6-a82d-248b5dfc623a",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ce2c4854-7e91-4344-87cb-90bcc75290c5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "45ffb451-d167-4145-9143-7cadf7dac278",
                  "parentUUID": "ce2c4854-7e91-4344-87cb-90bcc75290c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45ffb451-d167-4145-9143-7cadf7dac278"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4e760d31-8e0f-4a2e-bf13-1ee9d0eec212",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dd5f06f2-f0a5-4673-93d7-b991286280b9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9ce2ebb2-f62b-4267-8e7a-ae1ca4f6f1ca",
                  "parentUUID": "dd5f06f2-f0a5-4673-93d7-b991286280b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ce2ebb2-f62b-4267-8e7a-ae1ca4f6f1ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c30a9b56-62eb-4ee5-98fc-b9f79350b8b3",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c18bb80f-de54-42b8-87d7-066911ddcac8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 12 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "124556e1-89f3-485e-b578-b513165545d7",
                  "parentUUID": "c18bb80f-de54-42b8-87d7-066911ddcac8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "124556e1-89f3-485e-b578-b513165545d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fd113ca6-6589-438d-ab26-43114891e5e5",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "799136b4-e152-412d-9b18-65cd4f7b2bad",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6d5ddef6-25b3-4f99-9c9e-7f62635ea438",
                  "parentUUID": "799136b4-e152-412d-9b18-65cd4f7b2bad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d5ddef6-25b3-4f99-9c9e-7f62635ea438"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "24c9ec16-0275-4029-8128-fb8ccd7ee4b3",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bc1a4dcb-7656-46ac-8824-9ef92e632753",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0ed503cd-868c-4e61-86d6-f98a239fa809",
                  "parentUUID": "bc1a4dcb-7656-46ac-8824-9ef92e632753",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ed503cd-868c-4e61-86d6-f98a239fa809"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 61,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eb8a4e36-c852-4ff0-a15c-008059c2909b",
          "title": "tests for /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
          "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16c7f356-55bf-445a-925d-155759cb67dc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
              "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronologies/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 135,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronologies/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7c813cf6-86b5-446f-b516-ceb5c3b5cf75",
                  "parentUUID": "16c7f356-55bf-445a-925d-155759cb67dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c813cf6-86b5-446f-b516-ceb5c3b5cf75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 135,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f8a92360-312f-4413-8e8f-38c122cb59fc",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "41dd008a-6723-4c77-a87d-a9b0091181f4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 15197, 'familyname': 'elit occaecat sit', 'contactname': 'proident laborum Duis mollit adipisicing', 'contactstatus': 'deceased', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "08ce8f93-110a-49c1-8875-3b6707c502d3",
                  "parentUUID": "41dd008a-6723-4c77-a87d-a9b0091181f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08ce8f93-110a-49c1-8875-3b6707c502d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f49c3d70-97b7-4202-a2b2-e2fd2af8c3f6",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3ebab6db-7bf6-4bc6-9264-2ab84cfbd01a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 329,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/6285/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "68972033-8eec-4255-a559-c580ea7678bd",
                  "parentUUID": "3ebab6db-7bf6-4bc6-9264-2ab84cfbd01a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68972033-8eec-4255-a559-c580ea7678bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 329,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "90cd7bd7-2eb7-40ac-a876-274906c92646",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e4485b4a-0993-4831-a4eb-73037c144cd5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4f92e703-841b-474c-8014-7cd562de3440",
                  "parentUUID": "e4485b4a-0993-4831-a4eb-73037c144cd5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f92e703-841b-474c-8014-7cd562de3440"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8a8223f9-93eb-410c-9c95-f96f327c8532",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fe259040-d9a3-4a0a-83fc-bff22df584a6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Faunal Isotope Database' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "5f303e21-4162-4c58-81f3-dd3223fd7481",
                  "parentUUID": "fe259040-d9a3-4a0a-83fc-bff22df584a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5f303e21-4162-4c58-81f3-dd3223fd7481"
              ],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3a033eac-3838-4cb0-9a6a-700cff10b4da",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f64dee8d-25ec-40a7-8c20-6464be4fbe12",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 754,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'datasetid': 95697467, 'siteid': 28998, 'contactid': 3527, 'datasettype': 'ad veniam nisi aliqua', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'gpid': 7588, 'ageyoung': 1000, 'ageold': 10000, 'ageof': 14773757, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "178f1ec2-f590-434f-8e42-27255bfbba31",
                  "parentUUID": "f64dee8d-25ec-40a7-8c20-6464be4fbe12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "178f1ec2-f590-434f-8e42-27255bfbba31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 754,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2a44c1a5-b3d9-417a-918b-1f5a2aff5f0f",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "386853a6-d771-4f16-a8fb-a98bc42b7599",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4a206edb-fc72-4e5c-8fc5-4d62f6089ebb",
                  "parentUUID": "386853a6-d771-4f16-a8fb-a98bc42b7599",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a206edb-fc72-4e5c-8fc5-4d62f6089ebb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 130,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "71b7b90f-a055-4663-a63c-b44c3a127ff0",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d308271f-fab0-4bcb-9f61-802b1b478bf0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fbd87ea7-1721-4e9e-8e28-ae52506fb1a8",
                  "parentUUID": "d308271f-fab0-4bcb-9f61-802b1b478bf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbd87ea7-1721-4e9e-8e28-ae52506fb1a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "38c8b18e-1bdd-40b9-919c-e95fad4f9bd4",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c5eaff20-4f1a-4b8d-8e18-e8ffbd38ffee",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "67106da0-c23d-4494-9394-421e3d622a35",
                  "parentUUID": "c5eaff20-4f1a-4b8d-8e18-e8ffbd38ffee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67106da0-c23d-4494-9394-421e3d622a35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "64e18e75-1474-4443-9aa2-0b5ca7f783de",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1e5c3ed6-ac03-499a-84e3-08dcae8c5a7e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c9b73ceb-246b-4cdf-9c6a-262b61fd2618",
                  "parentUUID": "1e5c3ed6-ac03-499a-84e3-08dcae8c5a7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9b73ceb-246b-4cdf-9c6a-262b61fd2618"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ce9bdc9e-63de-401b-9a7d-665ac2ba18c7",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8c02d327-affe-4359-80e8-e4b10173b82e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/7900/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0942c676-dec8-4abd-9f9a-83054e845528",
                  "parentUUID": "8c02d327-affe-4359-80e8-e4b10173b82e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0942c676-dec8-4abd-9f9a-83054e845528"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5c2fe94e-0cf9-46a0-afcc-8816ce2a99f5",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "158e0273-5145-4779-9ba1-667a85372af4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a758ba1f-d156-4041-a298-f8902b5713a1",
                  "parentUUID": "158e0273-5145-4779-9ba1-667a85372af4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a758ba1f-d156-4041-a298-f8902b5713a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aaaf8c2f-3774-4902-aa9e-1faf0e20620f",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c43f5c7-d6d7-467b-8953-951df6001b25",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/4106/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4db58a86-4345-4c58-937a-999adcc900f8",
                  "parentUUID": "0c43f5c7-d6d7-467b-8953-951df6001b25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4db58a86-4345-4c58-937a-999adcc900f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 169,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1de9b775-5ab7-4a7e-ad70-42028bd8d050",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "96950651-f5e8-4723-afb8-830c11a2e87f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 749,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a2050bfa-8804-4f51-bcca-3b303eda56f0",
                  "parentUUID": "96950651-f5e8-4723-afb8-830c11a2e87f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2050bfa-8804-4f51-bcca-3b303eda56f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 749,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "77047c9e-0404-4f4e-8a53-593994ea271e",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "72c09cc1-d36a-495a-82c9-401c892523fa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 97,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 29584, 'contactid': 14225, 'datasettype': 'pariatur ex', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 10852427 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "f08a8bc3-5481-43cf-9638-b0126f47054d",
                  "parentUUID": "72c09cc1-d36a-495a-82c9-401c892523fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f08a8bc3-5481-43cf-9638-b0126f47054d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "76edbe70-6d83-43f4-94c3-5f7ae45d2a8f",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c49573a6-c35b-4e3a-bb00-2f15a232ef6a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 772,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/5362', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "526884e0-b6c4-4a52-a44f-e31ee87132cb",
                  "parentUUID": "c49573a6-c35b-4e3a-bb00-2f15a232ef6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "526884e0-b6c4-4a52-a44f-e31ee87132cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 772,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0744e407-4601-4728-87fb-afde87dce87c",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9e504cbd-4065-4678-ba61-1d7ee3b43201",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'est commodo sunt', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0dea14da-9040-4acb-b358-f71d48e80eb9",
                  "parentUUID": "9e504cbd-4065-4678-ba61-1d7ee3b43201",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dea14da-9040-4acb-b358-f71d48e80eb9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e065ba67-8cdb-4d39-8c59-469bbb75d223",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "03aaeb7a-e9ee-47c7-8c69-c668bd097b3f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'qs': { 'table': 'et Ut dolor laboris ea' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "35cd46c1-5ceb-4741-889f-265ffc9c6b38",
                  "parentUUID": "03aaeb7a-e9ee-47c7-8c69-c668bd097b3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35cd46c1-5ceb-4741-889f-265ffc9c6b38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2ce88939-a517-4812-945f-8468c5629835",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a078948f-5e75-4018-b498-a648a8414dc4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 1330,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1ad2d3bf-a83b-4b4e-9db9-f51627a89f9d",
                  "parentUUID": "a078948f-5e75-4018-b498-a648a8414dc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ad2d3bf-a83b-4b4e-9db9-f51627a89f9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1330,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1bc7b091-16c8-427b-90ca-76834419ab2a",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6a91ad9-8061-4f27-8063-7022481d9253",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 287,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3f30dd16-3df5-4707-bd1c-6684045595ab",
                  "parentUUID": "e6a91ad9-8061-4f27-8063-7022481d9253",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f30dd16-3df5-4707-bd1c-6684045595ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 287,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aa6930a9-53c1-4225-8997-67d7ecd48825",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0d8d71e-91ea-426a-b467-10a20eb66191",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 10809, 'gpname': 'cillum commodo aute', 'rank': 2, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c89e9438-6d05-4c3f-900c-c9f3cb1fd44a",
                  "parentUUID": "a0d8d71e-91ea-426a-b467-10a20eb66191",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c89e9438-6d05-4c3f-900c-c9f3cb1fd44a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cee14d5f-1a8a-4914-964c-4892ad93affe",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "65ee8581-2c1a-49f1-a645-d28241a872ba",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 754,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/2964/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "01915f26-1381-4b23-848c-c52ef7fd529f",
                  "parentUUID": "65ee8581-2c1a-49f1-a645-d28241a872ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01915f26-1381-4b23-848c-c52ef7fd529f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 754,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "88d2faa2-f0ba-4b27-912a-b4251405160b",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7fc6bdb1-b63c-4f5e-afd2-39f3c4022857",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/4536/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "129dcc46-49fa-4917-87ec-dffe9e4d39eb",
                  "parentUUID": "7fc6bdb1-b63c-4f5e-afd2-39f3c4022857",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "129dcc46-49fa-4917-87ec-dffe9e4d39eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4e9d3e16-5c89-408e-9129-7447fda9f83f",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "213c7304-1333-4a28-be15-0d750ef39639",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/6303', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "01181d29-641c-447f-b079-c177798cd8ed",
                  "parentUUID": "213c7304-1333-4a28-be15-0d750ef39639",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01181d29-641c-447f-b079-c177798cd8ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d907c4ac-1f30-40fb-b3f8-b9a02152c7ba",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6311370d-b6d4-4327-91a9-f617698b285c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'eiusmod dolor cupidatat et', 'taxonid': 646, 'siteid': 24217, 'sitename': 'do deserunt cupidatat sit', 'datasettype': 'nostrud esse', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 483838, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "70db2cd3-43cf-4a60-aa76-39dabbb72398",
                  "parentUUID": "6311370d-b6d4-4327-91a9-f617698b285c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70db2cd3-43cf-4a60-aa76-39dabbb72398"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 144,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ac78efb1-81ff-4fb2-b20c-84988c329e10",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d509f7a3-01e3-4fc1-8c7c-ebeba44866d4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "bf112239-1c52-4819-b6b9-3ed763db356e",
                  "parentUUID": "d509f7a3-01e3-4fc1-8c7c-ebeba44866d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf112239-1c52-4819-b6b9-3ed763db356e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bb18cc86-d34b-4eac-abdb-f2d08c062cec",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a8339b24-b2a8-4b6b-ab17-c4da9ba414de",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'irure', 'taxonid': 33065, 'siteid': 22808, 'sitename': 'officia tempor', 'datasettype': 'nisi', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 15723757, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6d8b3b89-7ea4-4c07-9f0f-a87041325441",
                  "parentUUID": "a8339b24-b2a8-4b6b-ab17-c4da9ba414de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d8b3b89-7ea4-4c07-9f0f-a87041325441"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bf114ede-e585-440f-a3c2-c6b30b2a6f82",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e0a3ae11-f4a3-4081-886e-8393f3f034f6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "77b63cf1-b3f7-47f0-9276-f140c8af5e89",
                  "parentUUID": "e0a3ae11-f4a3-4081-886e-8393f3f034f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77b63cf1-b3f7-47f0-9276-f140c8af5e89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "393f8be6-f74d-4e21-bf9f-06dd8e88cb9f",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c5fca88-6763-4d1e-81f9-93371d153441",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 19190, 'datasetid': 42304597, 'siteid': 18454, 'familyname': 'anim reprehenderit officia pariatur', 'pubtype': 'Other Authored', 'year': 1814, 'search': 'nisi adipisicing est cillum', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "aba8203b-7227-4568-8771-ac5f0f0e9168",
                  "parentUUID": "3c5fca88-6763-4d1e-81f9-93371d153441",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aba8203b-7227-4568-8771-ac5f0f0e9168"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "568cfc22-d115-45c5-8dde-ba4cc0f23f7a",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "950f904e-99ca-4c9a-a1cb-43a865656a85",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/9981', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "215011c4-75e7-4375-85f8-5a9d54512b22",
                  "parentUUID": "950f904e-99ca-4c9a-a1cb-43a865656a85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "215011c4-75e7-4375-85f8-5a9d54512b22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "50408d11-12c5-4676-ab94-b4fcb2633683",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "298b1850-6bd2-4f75-8e1c-04313b912f2c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 231,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 7504, 'sitename': 'nulla', 'altmax': 100, 'altmin': 10, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d264b948-74ca-48f2-a75b-34466319e6f7",
                  "parentUUID": "298b1850-6bd2-4f75-8e1c-04313b912f2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d264b948-74ca-48f2-a75b-34466319e6f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 231,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cafab49f-8ac8-4cc3-bb46-da2762c6d7b0",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6e7d5d73-b515-458f-89f2-e7084fcad4c6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 155,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/4987/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "261635d8-a082-4f8a-898e-6f9ca5cfac35",
                  "parentUUID": "6e7d5d73-b515-458f-89f2-e7084fcad4c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "261635d8-a082-4f8a-898e-6f9ca5cfac35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 155,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f5e98668-5361-491d-8de5-f33222fc6fe0",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "219d2b92-30db-4ee3-933d-e716eac957f7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d5d3b469-71e6-4b1d-8408-f2192692ccda",
                  "parentUUID": "219d2b92-30db-4ee3-933d-e716eac957f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5d3b469-71e6-4b1d-8408-f2192692ccda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ad3829a9-1eef-4887-9fe2-2299bf30bc6d",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "03c46e02-d34a-4f8a-bc43-b82bfc3a314c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 872,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "74dafa94-2af6-4a8e-848b-5af75622ff0d",
                  "parentUUID": "03c46e02-d34a-4f8a-bc43-b82bfc3a314c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74dafa94-2af6-4a8e-848b-5af75622ff0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 872,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fe156428-ad4b-4371-88e2-d7bcfdbeedec",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "467e735b-d36e-4e10-91d0-52124fae1f6b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 778,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/5696/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2c82e8de-ecf4-48a0-a8da-f9a7afc87aca",
                  "parentUUID": "467e735b-d36e-4e10-91d0-52124fae1f6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c82e8de-ecf4-48a0-a8da-f9a7afc87aca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 778,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1955d653-e75f-4a7d-a7d1-8cec0d1a3067",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c1104d0c-0bd0-4650-87c5-f06f33311341",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "41d3eab2-3c32-4721-92d4-3d8a2c2c40d5",
                  "parentUUID": "c1104d0c-0bd0-4650-87c5-f06f33311341",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41d3eab2-3c32-4721-92d4-3d8a2c2c40d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b9293883-5cfb-444b-9b88-0703a1588cfe",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bccb25e7-f521-4714-885c-6722f686d507",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8df63e80-d628-4be1-9642-915345fab896",
                  "parentUUID": "bccb25e7-f521-4714-885c-6722f686d507",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8df63e80-d628-4be1-9642-915345fab896"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7199362b-0dc4-4e7e-9213-3442683cefbd",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3da6fb2b-da1f-4ddd-8eeb-294bb568418c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 284,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f2c9f63d-13d5-46e8-b9d7-3e86140068ad",
                  "parentUUID": "3da6fb2b-da1f-4ddd-8eeb-294bb568418c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2c9f63d-13d5-46e8-b9d7-3e86140068ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 284,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7e7050ab-acc6-4d13-b009-ac8623174977",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "96e7215d-b75b-4025-8da7-f85df241ebed",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 225,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f00e032f-38a8-45f0-9b74-ffab2f120f48",
                  "parentUUID": "96e7215d-b75b-4025-8da7-f85df241ebed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f00e032f-38a8-45f0-9b74-ffab2f120f48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 225,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5a068923-6f18-4e84-8773-77fb0bf0d6dd",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a4ade869-ffc7-4e88-991c-f5dd03b42e0c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 5349,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "73d26c51-bbaa-4a6e-a7ed-e8790e55be3b",
                  "parentUUID": "a4ade869-ffc7-4e88-991c-f5dd03b42e0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73d26c51-bbaa-4a6e-a7ed-e8790e55be3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5349,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7113f15e-a05f-4b06-9263-a2511ba3c5db",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "67bbbb7d-7251-44db-b375-586c15dcc619",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'incididunt Lorem anim exercitation', 'datasetid': 19011072, 'siteid': 3730 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "73a6220d-6c56-4c54-8ec9-ec070bf17be0",
                  "parentUUID": "67bbbb7d-7251-44db-b375-586c15dcc619",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73a6220d-6c56-4c54-8ec9-ec070bf17be0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 132,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "796a4c8b-6c8e-4a98-8f5a-09d4dc7048de",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0acd2d8-15d0-4a8d-ba2f-0681b454b2fd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 1000,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "dd043a61-cdb0-481f-9307-c2b88c901f1a",
                  "parentUUID": "d0acd2d8-15d0-4a8d-ba2f-0681b454b2fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd043a61-cdb0-481f-9307-c2b88c901f1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1000,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "31c17709-96b2-4fda-b00b-4d2a8f63509b",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "19635e85-e204-4612-bd42-ed06a8bdfc89",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/7561', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1c1aacd3-c9e5-4a55-8b9e-5568ce99ddec",
                  "parentUUID": "19635e85-e204-4612-bd42-ed06a8bdfc89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c1aacd3-c9e5-4a55-8b9e-5568ce99ddec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "60cb9124-59c7-43c6-bbdf-622cd8f8a79a",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "944bcd3d-7597-4945-9a61-3d78ad182820",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8e7f2606-9a94-4524-b0cc-8b5b78e6544d",
                  "parentUUID": "944bcd3d-7597-4945-9a61-3d78ad182820",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e7f2606-9a94-4524-b0cc-8b5b78e6544d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d415eb73-be64-43df-aa41-fa6ce470b3dd",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1cafb56e-53d4-45d3-9e82-769cc6d41148",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ce0ac17c-74bd-4142-855f-6cadf4f20201",
                  "parentUUID": "1cafb56e-53d4-45d3-9e82-769cc6d41148",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce0ac17c-74bd-4142-855f-6cadf4f20201"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}