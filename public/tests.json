{
  "stats": {
    "suites": 211,
    "tests": 206,
    "passes": 102,
    "pending": 0,
    "failures": 104,
    "start": "2022-02-25T22:56:01.622Z",
    "end": "2022-02-25T22:59:34.357Z",
    "duration": 212735,
    "testsRegistered": 206,
    "passPercent": 49.51456310679612,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "be818e0e-cc76-4578-bd57-0f6ac4e627da",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "e22e515d-7169-4a8e-bf34-35cb92e43a71",
          "parentUUID": "be818e0e-cc76-4578-bd57-0f6ac4e627da",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "d49c978b-9595-4ed2-9fc2-3e65cc4e50f0",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 2065,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "c6494cdb-ca09-40ea-a1de-90c671a181e9",
              "parentUUID": "d49c978b-9595-4ed2-9fc2-3e65cc4e50f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6494cdb-ca09-40ea-a1de-90c671a181e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2065,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "fe6de18f-8692-40e3-9f78-43cef885894c",
              "parentUUID": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 197,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "3c842935-3774-478a-9f1c-0535e3fe5e08",
              "parentUUID": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "e9ef45b3-43ad-457b-85c0-1b05a3c4af9c",
              "parentUUID": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "33348161-6d0c-4378-a366-0a4e6b461d7c",
              "parentUUID": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "5a2efa13-bf56-4cc7-804b-c9c10b00ffdc",
              "parentUUID": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "b24301ac-bc94-4f83-98be-7c0ca23678f6",
              "parentUUID": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "9103417d-407d-4744-89cf-cca10802660f",
              "parentUUID": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "e419b6af-78d3-4d70-9e34-e72ec55de9bd",
              "parentUUID": "758ef4c4-cc68-41f9-a27c-7475440d45a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe6de18f-8692-40e3-9f78-43cef885894c",
            "3c842935-3774-478a-9f1c-0535e3fe5e08",
            "e9ef45b3-43ad-457b-85c0-1b05a3c4af9c",
            "33348161-6d0c-4378-a366-0a4e6b461d7c",
            "5a2efa13-bf56-4cc7-804b-c9c10b00ffdc",
            "b24301ac-bc94-4f83-98be-7c0ca23678f6",
            "9103417d-407d-4744-89cf-cca10802660f",
            "e419b6af-78d3-4d70-9e34-e72ec55de9bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b661bf51-fbae-4f53-aceb-378100db9918",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]['site']['datasets'][0]).includes('datasetid');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "7af65168-708e-4c27-8b7e-87c78b52505f",
              "parentUUID": "b661bf51-fbae-4f53-aceb-378100db9918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 818,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a32420ef-d46f-4fb6-9bb7-5b6d74bb3d3c",
              "parentUUID": "b661bf51-fbae-4f53-aceb-378100db9918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "129dd494-56bd-4385-b5e1-7dc398b771d6",
              "parentUUID": "b661bf51-fbae-4f53-aceb-378100db9918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 1159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "728108c7-53df-4e51-bf0a-518ec089db75",
              "parentUUID": "b661bf51-fbae-4f53-aceb-378100db9918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "54e4c771-e299-40c2-a94b-b7e2b1442ee8",
              "parentUUID": "b661bf51-fbae-4f53-aceb-378100db9918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 2021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "021a43c0-a938-49b4-b7c1-d07bf29e054d",
              "parentUUID": "b661bf51-fbae-4f53-aceb-378100db9918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "38d2d110-eb89-4ed9-bc5c-afc4546c766b",
              "parentUUID": "b661bf51-fbae-4f53-aceb-378100db9918",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7af65168-708e-4c27-8b7e-87c78b52505f",
            "a32420ef-d46f-4fb6-9bb7-5b6d74bb3d3c",
            "129dd494-56bd-4385-b5e1-7dc398b771d6",
            "728108c7-53df-4e51-bf0a-518ec089db75",
            "54e4c771-e299-40c2-a94b-b7e2b1442ee8",
            "021a43c0-a938-49b4-b7c1-d07bf29e054d",
            "38d2d110-eb89-4ed9-bc5c-afc4546c766b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7778,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "e43d5a07-1e15-4f4e-9ac2-eb539ff2b21a",
          "title": "Tests for Explorer App Services",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
          "file": "/test/explorerCalls.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "072805ee-2449-448b-9361-327f0e7575d6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
              "file": "/test/explorerCalls.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for TaxaGroupTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaGroupTypes",
                  "timedOut": false,
                  "duration": 410,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaGroupTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2fe309b8-536f-45ce-a8bc-ebadfd75b40b",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomyTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomyTypes",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomyTypes', {\n  'qs': {\n    taphonomicSystemId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "273883bc-9d83-4587-b0df-9ff18d30e280",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomySystems",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomySystems",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomySystems', {\n  'qs': {\n    datasetTypeId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2700dd85-2998-44e8-8414-2376847704a8",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for ElementTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for ElementTypes",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/ElementTypes', {\n  'qs': {\n    taxagroupid: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "244cce14-d92a-4008-ac68-db941f667213",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaxaInDatasets",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaInDatasets",
                  "timedOut": false,
                  "duration": 14495,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e3ef0f58-528f-4ecc-af62-bc9623564f83",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for collectionTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for collectionTypes",
                  "timedOut": false,
                  "duration": 264,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "21ddbc47-98cd-42b4-83cd-7a434b8d73f8",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for keywords",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for keywords",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "15df3e81-8322-4765-b5aa-7a8db6373604",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for authorpis",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for authorpis",
                  "timedOut": false,
                  "duration": 430,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a59e53e3-3c71-4974-94d3-012cb6c64371",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DepositionalEnvironments",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DepositionalEnvironments",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DepositionalEnvironments', {\n  'qs': { idProperty: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4a92fd1d-ae25-4854-9509-a8fe8eff448f",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Search",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Search",
                  "timedOut": false,
                  "duration": 19,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Search', {\n  'qs': { search: encodeURI('{\"metadata\":{\"siteName\":\"Marion%\"}}'),\n    'time': true }\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "df48c0c4-8cc8-4f39-94cc-250509480af9",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DatasetTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DatasetTypes",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "bffcfa81-5758-4178-8731-faa5b323f24a",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for RelativeAges",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for RelativeAges",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/RelativeAges', {\n  'qs': { agescaleid: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "576bc20d-838e-4910-9204-8091116d6b91",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Geochronologies",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Geochronologies",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Geochronologies', {\n  'qs': { datasetId: 1001 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9e0404db-09a1-48e3-8301-372e42291e56",
                  "parentUUID": "072805ee-2449-448b-9361-327f0e7575d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fe309b8-536f-45ce-a8bc-ebadfd75b40b",
                "273883bc-9d83-4587-b0df-9ff18d30e280",
                "2700dd85-2998-44e8-8414-2376847704a8",
                "244cce14-d92a-4008-ac68-db941f667213",
                "e3ef0f58-528f-4ecc-af62-bc9623564f83",
                "21ddbc47-98cd-42b4-83cd-7a434b8d73f8",
                "15df3e81-8322-4765-b5aa-7a8db6373604",
                "a59e53e3-3c71-4974-94d3-012cb6c64371",
                "4a92fd1d-ae25-4854-9509-a8fe8eff448f",
                "bffcfa81-5758-4178-8731-faa5b323f24a",
                "576bc20d-838e-4910-9204-8091116d6b91",
                "9e0404db-09a1-48e3-8301-372e42291e56"
              ],
              "failures": [
                "df48c0c4-8cc8-4f39-94cc-250509480af9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 16289,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f57ce333-e616-4a41-8428-cb0e35bcd23d",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "4e770f25-9823-4268-960f-98fc3444d16c",
              "parentUUID": "f57ce333-e616-4a41-8428-cb0e35bcd23d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "002920a0-0dec-44c0-97fc-3e024ea14560",
              "parentUUID": "f57ce333-e616-4a41-8428-cb0e35bcd23d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "0db58cf3-f90f-43a5-99df-aaedfe5bdf4b",
              "parentUUID": "f57ce333-e616-4a41-8428-cb0e35bcd23d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "c91c29af-edd5-4c10-8966-f4fd35c60cbb",
              "parentUUID": "f57ce333-e616-4a41-8428-cb0e35bcd23d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e770f25-9823-4268-960f-98fc3444d16c",
            "002920a0-0dec-44c0-97fc-3e024ea14560",
            "0db58cf3-f90f-43a5-99df-aaedfe5bdf4b",
            "c91c29af-edd5-4c10-8966-f4fd35c60cbb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 286,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e9f447ac-974d-4a5a-ab4c-a7c3afb4b9a8",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "cbc35eaa-f645-43f8-977d-f4af5670dccf",
              "parentUUID": "e9f447ac-974d-4a5a-ab4c-a7c3afb4b9a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbc35eaa-f645-43f8-977d-f4af5670dccf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "481eca0c-649d-4cb6-b047-21c3d3385aec",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "d94544f3-eb9e-4456-b314-1c415dbacecb",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 6037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "48e7b40d-e027-44c6-9bb2-9ba4614c6e7d",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 6931,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "762e1287-4533-400d-b30a-f0c883f12d7b",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 810,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "94ea279c-2895-4c02-b1cd-4dad36ad8160",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "9156d293-8f1f-43a0-9ac1-2d03ec05942f",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "e97a28fd-53d0-41de-8a0b-b6aad62c5171",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "7d536bd6-b804-43c6-9f90-07c732163fb2",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "08b721a2-f348-4a8c-a4e4-ec068bbf7940",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ad941ff9-9072-4214-8963-d68a384d61f1",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "871fab5d-903a-4569-91c0-938d8f9a1082",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b116d070-2a80-4b31-8c49-b219e8adc303",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a0efbe79-e8e8-4b36-a03c-971098c0fbeb",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 225,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "252d1ad6-f0d1-4fab-aa68-93105f01d1c0",
              "parentUUID": "481eca0c-649d-4cb6-b047-21c3d3385aec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d94544f3-eb9e-4456-b314-1c415dbacecb",
            "48e7b40d-e027-44c6-9bb2-9ba4614c6e7d",
            "762e1287-4533-400d-b30a-f0c883f12d7b",
            "94ea279c-2895-4c02-b1cd-4dad36ad8160",
            "9156d293-8f1f-43a0-9ac1-2d03ec05942f",
            "e97a28fd-53d0-41de-8a0b-b6aad62c5171",
            "7d536bd6-b804-43c6-9f90-07c732163fb2",
            "08b721a2-f348-4a8c-a4e4-ec068bbf7940",
            "ad941ff9-9072-4214-8963-d68a384d61f1",
            "871fab5d-903a-4569-91c0-938d8f9a1082",
            "b116d070-2a80-4b31-8c49-b219e8adc303",
            "a0efbe79-e8e8-4b36-a03c-971098c0fbeb",
            "252d1ad6-f0d1-4fab-aa68-93105f01d1c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "75265214-6577-478a-ae91-10ea828ec500",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 369,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a95d30a5-5a4c-491a-947f-6ff5585d9d54",
              "parentUUID": "75265214-6577-478a-ae91-10ea828ec500",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f19f90cf-e0a2-4050-af1c-4a7aa349d488",
              "parentUUID": "75265214-6577-478a-ae91-10ea828ec500",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "82d28786-fc7f-498f-a142-1ac108993013",
              "parentUUID": "75265214-6577-478a-ae91-10ea828ec500",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "bb691e24-d967-46e6-a861-81efa9117d02",
              "parentUUID": "75265214-6577-478a-ae91-10ea828ec500",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "463b8851-a745-4093-af8c-94ea85f8cc89",
              "parentUUID": "75265214-6577-478a-ae91-10ea828ec500",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b0ef206d-214a-4d9a-8d88-8134beb6f861",
              "parentUUID": "75265214-6577-478a-ae91-10ea828ec500",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a1be51f4-0fa5-4cc7-9728-f1d934e53fd1",
              "parentUUID": "75265214-6577-478a-ae91-10ea828ec500",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a95d30a5-5a4c-491a-947f-6ff5585d9d54",
            "f19f90cf-e0a2-4050-af1c-4a7aa349d488",
            "82d28786-fc7f-498f-a142-1ac108993013",
            "bb691e24-d967-46e6-a861-81efa9117d02",
            "463b8851-a745-4093-af8c-94ea85f8cc89",
            "b0ef206d-214a-4d9a-8d88-8134beb6f861",
            "a1be51f4-0fa5-4cc7-9728-f1d934e53fd1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1594,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "53b8fbc0-9c0b-43c8-8b94-90f72ef423ea",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "31d652f7-35e5-4764-a825-a63b11a5dfa1",
              "parentUUID": "53b8fbc0-9c0b-43c8-8b94-90f72ef423ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31d652f7-35e5-4764-a825-a63b11a5dfa1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 58,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0b6c4c4d-cd77-4b6f-a76f-d206bd7cf3f4",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "6f6b2572-92a8-41dc-a163-942ddfcccbe3",
              "parentUUID": "0b6c4c4d-cd77-4b6f-a76f-d206bd7cf3f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f6b2572-92a8-41dc-a163-942ddfcccbe3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bbadd755-4cfa-498a-8353-9d0a4b3fbede",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "242802c7-cbc0-46f6-93c7-745f8e9c45bf",
              "parentUUID": "bbadd755-4cfa-498a-8353-9d0a4b3fbede",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "242802c7-cbc0-46f6-93c7-745f8e9c45bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b2c9b15f-3b64-4efc-a009-b602d691c073",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 271,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b6c77e62-af27-4bc4-937a-0a5e90a6f630",
              "parentUUID": "b2c9b15f-3b64-4efc-a009-b602d691c073",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6c77e62-af27-4bc4-937a-0a5e90a6f630"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 271,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2053933d-e1ce-4a76-802f-c8ef9e3f83a4",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 798,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7129e4f3-a58c-462b-b1c6-6df5310ddb85",
              "parentUUID": "2053933d-e1ce-4a76-802f-c8ef9e3f83a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7129e4f3-a58c-462b-b1c6-6df5310ddb85"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 798,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f6515f57-29ee-42fa-9243-a6ac0f301355",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "950caf9f-54f4-4c1c-95f8-09d3e461abae",
              "parentUUID": "f6515f57-29ee-42fa-9243-a6ac0f301355",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "950caf9f-54f4-4c1c-95f8-09d3e461abae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1269,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ad9cf859-5ef2-440b-b939-a51bb6a3ffbd",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7db46cf4-3f76-4fc1-a870-b3a60ceb9315",
              "parentUUID": "ad9cf859-5ef2-440b-b939-a51bb6a3ffbd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7db46cf4-3f76-4fc1-a870-b3a60ceb9315"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 380,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4efe332c-6004-4cd5-8f99-9e9bea94b80e",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2d4ce237-6f45-4b87-9f00-30f254aa4a84",
              "parentUUID": "4efe332c-6004-4cd5-8f99-9e9bea94b80e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d4ce237-6f45-4b87-9f00-30f254aa4a84"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 212,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e899006a-0d7d-40fb-b8e8-fcf58711edc1",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e60a88f2-d851-47ca-93dc-0be8680c8e66",
              "parentUUID": "e899006a-0d7d-40fb-b8e8-fcf58711edc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e60a88f2-d851-47ca-93dc-0be8680c8e66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ae322242-fc96-4ba1-9dff-19b3bd14e52e",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f93a66b5-2372-49f2-a6fb-f00fedbc603b",
              "parentUUID": "ae322242-fc96-4ba1-9dff-19b3bd14e52e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f93a66b5-2372-49f2-a6fb-f00fedbc603b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f09ffe6f-ebc4-4b98-8a4d-6102fb2cf992",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3f7ba2f7-c7a4-4bae-b884-bf27f666dc9d",
              "parentUUID": "f09ffe6f-ebc4-4b98-8a4d-6102fb2cf992",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f7ba2f7-c7a4-4bae-b884-bf27f666dc9d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "169b20d1-1a5b-43f2-9a55-ba2ac45b05ee",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 825,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9aa125ab-5b81-4286-8c23-f3b7d9067392",
              "parentUUID": "169b20d1-1a5b-43f2-9a55-ba2ac45b05ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9aa125ab-5b81-4286-8c23-f3b7d9067392"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 825,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4af5d8ac-4386-4d1e-858c-68fd77d9c679",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f35fc42f-77fa-4e0d-b558-00752ac9d0c9",
              "parentUUID": "4af5d8ac-4386-4d1e-858c-68fd77d9c679",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f35fc42f-77fa-4e0d-b558-00752ac9d0c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 90,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7278cc3d-ae46-4849-8173-65c252f56eef",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5d418b0f-a268-4f68-a312-c54daa2c0c5a",
              "parentUUID": "7278cc3d-ae46-4849-8173-65c252f56eef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d418b0f-a268-4f68-a312-c54daa2c0c5a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0ff4d004-097b-4504-a852-340af32fc525",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f1b923b4-051b-4ba3-a1c3-ea426c0489c5",
              "parentUUID": "0ff4d004-097b-4504-a852-340af32fc525",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1b923b4-051b-4ba3-a1c3-ea426c0489c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0df71bd0-61cd-415a-835a-03fdb6799a86",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cee5acd1-197d-449b-98b9-5400fb03336e",
              "parentUUID": "0df71bd0-61cd-415a-835a-03fdb6799a86",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cee5acd1-197d-449b-98b9-5400fb03336e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "84b0915c-470a-4cbc-b55c-accd03225e0f",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3c37faf8-8fd7-4611-82cb-77458464c1cd",
              "parentUUID": "84b0915c-470a-4cbc-b55c-accd03225e0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c37faf8-8fd7-4611-82cb-77458464c1cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "79574a1c-d728-4280-940a-118ef9636f0e",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 853,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c40ad0b6-29d2-41ed-bdde-6fda2e4d2672",
              "parentUUID": "79574a1c-d728-4280-940a-118ef9636f0e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c40ad0b6-29d2-41ed-bdde-6fda2e4d2672"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 853,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "04b46ae4-4006-4aca-9bfe-c63696504f45",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 116538,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "25308670-9f7d-4cc1-8aaf-4d21649b9ee8",
              "parentUUID": "04b46ae4-4006-4aca-9bfe-c63696504f45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "25308670-9f7d-4cc1-8aaf-4d21649b9ee8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 116538,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2cdbd80b-a614-477c-bf7c-d1c9d371f0e4",
          "title": "GET /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronologies/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 440,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "6b9e5e59-c222-426c-a21e-c8a44c921298",
              "parentUUID": "2cdbd80b-a614-477c-bf7c-d1c9d371f0e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b9e5e59-c222-426c-a21e-c8a44c921298"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 440,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "11ba5086-d8c8-4e1f-a04f-04b6572c72ac",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 172,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: null,\n        offset: null\n      },\n      result: [\n        {\n          contactid: 251,\n          aliasid: 251,\n          contactname: 'Schoenweter, James',\n          contactstatusid: 1,\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          aliasid: 2848,\n          contactname: 'Parry, W. J.',\n          contactstatusid: 7,\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          aliasid: 3565,\n          contactname: 'Marvan, P.',\n          contactstatusid: 7,\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          aliasid: 2026,\n          contactname: 'Pinsof, J. D.',\n          contactstatusid: 7,\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          aliasid: 10295,\n          contactname: 'Cambon, Geneviève',\n          contactstatusid: 7,\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-04-12T16:07:37.000Z',\n          recdatemodified: '2018-04-12T16:07:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          aliasid: 2024,\n          contactname: 'Bell, G. L.',\n          contactstatusid: 7,\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          aliasid: 12752,\n          contactname: 'Zhou, Shanfu',\n          contactstatusid: 7,\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-11-05T04:45:38.000Z',\n          recdatemodified: '2018-11-05T04:45:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          aliasid: 17928,\n          contactname: 'Räsänen, Satu',\n          contactstatusid: 7,\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-01-30T16:45:55.000Z',\n          recdatemodified: '2022-01-30T16:45:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          aliasid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          contactstatusid: 1,\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          aliasid: 7247,\n          contactname: 'Andersson, Sofia',\n          contactstatusid: 1,\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          recdatecreated: '2015-05-25T00:15:50.000Z',\n          recdatemodified: '2015-05-25T00:15:51.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 16703,\n          aliasid: 16703,\n          contactname: 'Irion, Georg',\n          contactstatusid: 6,\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-12-01T21:24:29.000Z',\n          recdatemodified: '2020-12-01T21:24:31.000Z',\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          aliasid: 2961,\n          contactname: 'Ruff, B.',\n          contactstatusid: 7,\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          aliasid: 16633,\n          contactname: 'Castro, H.',\n          contactstatusid: 7,\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-11-18T01:55:19.000Z',\n          recdatemodified: '2020-11-18T01:55:20.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          aliasid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          contactstatusid: 2,\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-10-18T03:58:42.000Z',\n          recdatemodified: '2017-10-18T03:58:42.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          aliasid: 1101,\n          contactname: 'Iversen, J.',\n          contactstatusid: 2,\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          aliasid: 599,\n          contactname: 'Farrington, A.',\n          contactstatusid: 7,\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          aliasid: 11460,\n          contactname: 'Waldrop, J. S.',\n          contactstatusid: 7,\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-06-08T08:33:33.000Z',\n          recdatemodified: '2018-06-08T08:33:34.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          aliasid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          contactstatusid: 1,\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-05-15T22:39:25.000Z',\n          recdatemodified: '2017-05-15T22:39:26.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          aliasid: 1789,\n          contactname: 'Bade, M. J.',\n          contactstatusid: 7,\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          aliasid: 2769,\n          contactname: 'Carraway, L. N.',\n          contactstatusid: 7,\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          aliasid: 7564,\n          contactname: 'Santos, F. R.',\n          contactstatusid: 7,\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2016-02-12T12:11:11.000Z',\n          recdatemodified: '2016-02-12T12:11:12.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          aliasid: 2247,\n          contactname: 'Fortsch, D. E.',\n          contactstatusid: 7,\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          aliasid: 4083,\n          contactname: 'Hudon, C.',\n          contactstatusid: 7,\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4321,\n          aliasid: 4321,\n          contactname: 'Wheatley, Patrick V.',\n          contactstatusid: 1,\n          familyname: 'Wheatley',\n          leadinginitials: 'P.V.',\n          givennames: 'Patrick V.',\n          suffix: null,\n          title: 'Dr.',\n          phone: '+1-510-486-4241',\n          fax: null,\n          email: 'pvwheatley@lbl.gov',\n          url: 'http://pvwheatley.wheatleyempire.com/',\n          address: 'Center for Isotope Geochemistry\\r\\n' +\n            'Lawrence Berkeley National Lab\\r\\n' +\n            'Berkeley, CA 94720\\r\\n' +\n            'USA',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 17116,\n          aliasid: 17116,\n          contactname: 'Scheifler, Nahuel',\n          contactstatusid: 1,\n          familyname: 'Scheifler',\n          leadinginitials: 'N.',\n          givennames: 'Nahuel',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Facultad de Ciencias Sociales\\r\\n' +\n            'Universidad Nacional del Centro de la Provincia de Buenos Aires\\r\\n' +\n            'Avenue Del Valle 5737\\r\\n' +\n            '7400 Olavarría\\r\\n' +\n            'Argentina.',\n          notes: null,\n          recdatecreated: '2021-03-31T17:48:49.000Z',\n          recdatemodified: '2021-03-31T17:59:29.000Z',\n          contactstatus: 'active'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/contactresponse' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'contact'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: null,\n        offset: null\n      },\n      result: [\n        {\n          contactid: 251,\n          aliasid: 251,\n          contactname: 'Schoenweter, James',\n          contactstatusid: 1,\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          aliasid: 2848,\n          contactname: 'Parry, W. J.',\n          contactstatusid: 7,\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          aliasid: 3565,\n          contactname: 'Marvan, P.',\n          contactstatusid: 7,\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          aliasid: 2026,\n          contactname: 'Pinsof, J. D.',\n          contactstatusid: 7,\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          aliasid: 10295,\n          contactname: 'Cambon, Geneviève',\n          contactstatusid: 7,\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-04-12T16:07:37.000Z',\n          recdatemodified: '2018-04-12T16:07:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          aliasid: 2024,\n          contactname: 'Bell, G. L.',\n          contactstatusid: 7,\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          aliasid: 12752,\n          contactname: 'Zhou, Shanfu',\n          contactstatusid: 7,\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-11-05T04:45:38.000Z',\n          recdatemodified: '2018-11-05T04:45:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          aliasid: 17928,\n          contactname: 'Räsänen, Satu',\n          contactstatusid: 7,\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-01-30T16:45:55.000Z',\n          recdatemodified: '2022-01-30T16:45:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          aliasid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          contactstatusid: 1,\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          aliasid: 7247,\n          contactname: 'Andersson, Sofia',\n          contactstatusid: 1,\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          recdatecreated: '2015-05-25T00:15:50.000Z',\n          recdatemodified: '2015-05-25T00:15:51.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 16703,\n          aliasid: 16703,\n          contactname: 'Irion, Georg',\n          contactstatusid: 6,\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-12-01T21:24:29.000Z',\n          recdatemodified: '2020-12-01T21:24:31.000Z',\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          aliasid: 2961,\n          contactname: 'Ruff, B.',\n          contactstatusid: 7,\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          aliasid: 16633,\n          contactname: 'Castro, H.',\n          contactstatusid: 7,\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-11-18T01:55:19.000Z',\n          recdatemodified: '2020-11-18T01:55:20.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          aliasid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          contactstatusid: 2,\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-10-18T03:58:42.000Z',\n          recdatemodified: '2017-10-18T03:58:42.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          aliasid: 1101,\n          contactname: 'Iversen, J.',\n          contactstatusid: 2,\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          aliasid: 599,\n          contactname: 'Farrington, A.',\n          contactstatusid: 7,\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          aliasid: 11460,\n          contactname: 'Waldrop, J. S.',\n          contactstatusid: 7,\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-06-08T08:33:33.000Z',\n          recdatemodified: '2018-06-08T08:33:34.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          aliasid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          contactstatusid: 1,\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-05-15T22:39:25.000Z',\n          recdatemodified: '2017-05-15T22:39:26.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          aliasid: 1789,\n          contactname: 'Bade, M. J.',\n          contactstatusid: 7,\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          aliasid: 2769,\n          contactname: 'Carraway, L. N.',\n          contactstatusid: 7,\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          aliasid: 7564,\n          contactname: 'Santos, F. R.',\n          contactstatusid: 7,\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2016-02-12T12:11:11.000Z',\n          recdatemodified: '2016-02-12T12:11:12.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          aliasid: 2247,\n          contactname: 'Fortsch, D. E.',\n          contactstatusid: 7,\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          aliasid: 4083,\n          contactname: 'Hudon, C.',\n          contactstatusid: 7,\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4321,\n          aliasid: 4321,\n          contactname: 'Wheatley, Patrick V.',\n          contactstatusid: 1,\n          familyname: 'Wheatley',\n          leadinginitials: 'P.V.',\n          givennames: 'Patrick V.',\n          suffix: null,\n          title: 'Dr.',\n          phone: '+1-510-486-4241',\n          fax: null,\n          email: 'pvwheatley@lbl.gov',\n          url: 'http://pvwheatley.wheatleyempire.com/',\n          address: 'Center for Isotope Geochemistry\\r\\n' +\n            'Lawrence Berkeley National Lab\\r\\n' +\n            'Berkeley, CA 94720\\r\\n' +\n            'USA',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 17116,\n          aliasid: 17116,\n          contactname: 'Scheifler, Nahuel',\n          contactstatusid: 1,\n          familyname: 'Scheifler',\n          leadinginitials: 'N.',\n          givennames: 'Nahuel',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Facultad de Ciencias Sociales\\r\\n' +\n            'Universidad Nacional del Centro de la Provincia de Buenos Aires\\r\\n' +\n            'Avenue Del Valle 5737\\r\\n' +\n            '7400 Olavarría\\r\\n' +\n            'Argentina.',\n          notes: null,\n          recdatecreated: '2021-03-31T17:48:49.000Z',\n          recdatemodified: '2021-03-31T17:59:29.000Z',\n          contactstatus: 'active'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/contactresponse' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'contact'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "d8580401-3023-489e-ab14-3666d278d815",
              "parentUUID": "11ba5086-d8c8-4e1f-a04f-04b6572c72ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d8580401-3023-489e-ab14-3666d278d815"
          ],
          "pending": [],
          "skipped": [],
          "duration": 172,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f8e014ae-315d-492c-b4aa-cf5a495dbfa0",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 115,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        aliasid: 1,\n        contactname: 'International Organization for Standardization',\n        contactstatusid: 4,\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        recdatecreated: '2013-09-30T21:02:35.000Z',\n        recdatemodified: '2013-09-30T21:02:35.000Z',\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        aliasid: 1,\n        contactname: 'International Organization for Standardization',\n        contactstatusid: 4,\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        recdatecreated: '2013-09-30T21:02:35.000Z',\n        recdatemodified: '2013-09-30T21:02:35.000Z',\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "37695939-8c61-4c8a-8f86-13eaffee9163",
              "parentUUID": "f8e014ae-315d-492c-b4aa-cf5a495dbfa0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "37695939-8c61-4c8a-8f86-13eaffee9163"
          ],
          "pending": [],
          "skipped": [],
          "duration": 115,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e10a1df6-5fcd-4315-941f-06af1561b1e7",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9ba59a3c-1412-4458-86b5-a1ef44f9080f",
              "parentUUID": "e10a1df6-5fcd-4315-941f-06af1561b1e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ba59a3c-1412-4458-86b5-a1ef44f9080f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 224,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eae69303-d22b-4e31-85be-8aedd77410fc",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3703,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c90066d2-8b4d-446b-b779-d8fa99eb4c3e",
              "parentUUID": "eae69303-d22b-4e31-85be-8aedd77410fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c90066d2-8b4d-446b-b779-d8fa99eb4c3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3703,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9d84d239-5bcc-4619-b618-8fc2776cb9b5",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1013,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'Datasets'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'Datasets'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "f83c121f-26c6-4d0f-8ffd-3c373be58493",
              "parentUUID": "9d84d239-5bcc-4619-b618-8fc2776cb9b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f83c121f-26c6-4d0f-8ffd-3c373be58493"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1013,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cd749bf1-f2aa-4583-bf69-de0556516ce6",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 824,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5b6ed655-6fea-48d2-813d-a2c97608137f",
              "parentUUID": "cd749bf1-f2aa-4583-bf69-de0556516ce6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b6ed655-6fea-48d2-813d-a2c97608137f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 824,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b5daf681-95f3-41b0-9814-5288372df3cc",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 197,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bfe7cc3f-28c1-4f45-a81a-be8cf6da7b92",
              "parentUUID": "b5daf681-95f3-41b0-9814-5288372df3cc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bfe7cc3f-28c1-4f45-a81a-be8cf6da7b92"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 197,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1556a308-60ce-42dd-8eaa-ab3c58b8d1db",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "22598900-287a-42df-ab83-d3b6d0fbd60d",
              "parentUUID": "1556a308-60ce-42dd-8eaa-ab3c58b8d1db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22598900-287a-42df-ab83-d3b6d0fbd60d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "59329603-2965-4bf8-ac6b-afe2ebc43b8e",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9fdb77e7-ed39-4717-b43b-b23bbadb04cd",
              "parentUUID": "59329603-2965-4bf8-ac6b-afe2ebc43b8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9fdb77e7-ed39-4717-b43b-b23bbadb04cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e54bde62-650b-4299-8984-dcb2588b1cbc",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "303bab40-894e-418f-a43d-64ca8c8f2f28",
              "parentUUID": "e54bde62-650b-4299-8984-dcb2588b1cbc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "303bab40-894e-418f-a43d-64ca8c8f2f28"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9ae93a77-06c9-4f42-82a1-94ab8071284b",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bdd4c231-8bb5-4f12-8683-f12e094f0260",
              "parentUUID": "9ae93a77-06c9-4f42-82a1-94ab8071284b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdd4c231-8bb5-4f12-8683-f12e094f0260"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 154,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "999c6c49-2c7d-4423-ad6c-9d4329925771",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 526,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "268cb8e5-2612-41d7-bd78-cf9d32d963bb",
              "parentUUID": "999c6c49-2c7d-4423-ad6c-9d4329925771",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "268cb8e5-2612-41d7-bd78-cf9d32d963bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 526,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0a880c02-783c-4b5f-9b8f-327ef7c9ebcd",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 156,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "d9361741-2f1b-470e-a8d6-1d6a3d4a198a",
              "parentUUID": "0a880c02-783c-4b5f-9b8f-327ef7c9ebcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d9361741-2f1b-470e-a8d6-1d6a3d4a198a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 156,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "69fb2e6a-2296-4444-bd09-b04f1955dec2",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d3d0cd97-35dd-4c89-b3ac-acc01585cd8e",
              "parentUUID": "69fb2e6a-2296-4444-bd09-b04f1955dec2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3d0cd97-35dd-4c89-b3ac-acc01585cd8e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2319,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c1a29a86-9fab-464f-89b2-8f1244ed841d",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 818,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "05d96385-3957-4e3c-91e2-a77c6738f12c",
              "parentUUID": "c1a29a86-9fab-464f-89b2-8f1244ed841d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "05d96385-3957-4e3c-91e2-a77c6738f12c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 818,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "48a281a7-f13b-45e0-ad7f-e418953bff83",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 200,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'datasettypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'sites' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'lithostrat' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'fractiondated' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'lithology' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'isostandards' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isostratdata' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimens' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'agetypes' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'publications' },\n      { tablename: 'chronologies' },\n      { tablename: 'collectionunits' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'analysisunits' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'contacts' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeages' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'tephras' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'sitestemp' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'depagents' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'specimendates' },\n      { tablename: 'relativechronology' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'datasettypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'sites' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'lithostrat' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'fractiondated' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'lithology' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'isostandards' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isostratdata' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimens' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'agetypes' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'publications' },\n      { tablename: 'chronologies' },\n      { tablename: 'collectionunits' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'analysisunits' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'contacts' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeages' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'tephras' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'sitestemp' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'depagents' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'specimendates' },\n      { tablename: 'relativechronology' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "3c63fbea-dec4-4870-b455-e41382861f4d",
              "parentUUID": "48a281a7-f13b-45e0-ad7f-e418953bff83",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3c63fbea-dec4-4870-b455-e41382861f4d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 200,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a1c02090-adfd-4b75-a0bb-cf1fa21b0023",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 207,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'datasettypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'sites' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'lithostrat' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'fractiondated' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'lithology' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'isostandards' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isostratdata' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimens' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'agetypes' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'publications' },\n      { tablename: 'chronologies' },\n      { tablename: 'collectionunits' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'analysisunits' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'contacts' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeages' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'tephras' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'sitestemp' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'depagents' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'specimendates' },\n      { tablename: 'relativechronology' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'datasettypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'sites' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'lithostrat' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'fractiondated' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'lithology' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'isostandards' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isostratdata' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimens' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'agetypes' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'publications' },\n      { tablename: 'chronologies' },\n      { tablename: 'collectionunits' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'analysisunits' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'contacts' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeages' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'tephras' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'sitestemp' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'depagents' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'specimendates' },\n      { tablename: 'relativechronology' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "32aa2237-3e4f-45be-a245-0e58e377ff6f",
              "parentUUID": "a1c02090-adfd-4b75-a0bb-cf1fa21b0023",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "32aa2237-3e4f-45be-a245-0e58e377ff6f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 207,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b205b1f0-a658-487c-8624-a04650c849d9",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 825,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5bf038e1-4aa5-4f13-bac5-f0a31de5db33",
              "parentUUID": "b205b1f0-a658-487c-8624-a04650c849d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5bf038e1-4aa5-4f13-bac5-f0a31de5db33"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 825,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2b5a224a-d56b-4f88-bd64-01175f01e3e6",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "af16d463-c903-449e-a321-074cd338c7ee",
              "parentUUID": "2b5a224a-d56b-4f88-bd64-01175f01e3e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af16d463-c903-449e-a321-074cd338c7ee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 202,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f6bb326d-05a2-4433-b12d-be94bf5fc4f0",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "d5b02f00-e84d-4863-a14a-a6f38f33bc63",
              "parentUUID": "f6bb326d-05a2-4433-b12d-be94bf5fc4f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d5b02f00-e84d-4863-a14a-a6f38f33bc63"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "787cf8f4-6655-4519-97d8-4f440f32f68b",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "991c2e8a-27bf-4ad1-9bed-e0ac848a9760",
              "parentUUID": "787cf8f4-6655-4519-97d8-4f440f32f68b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "991c2e8a-27bf-4ad1-9bed-e0ac848a9760"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 186,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3eb643bf-8ce9-4cb4-bd81-5846a026a4be",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "b659ae59-6ad5-4217-b7ec-851855bc7f01",
              "parentUUID": "3eb643bf-8ce9-4cb4-bd81-5846a026a4be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b659ae59-6ad5-4217-b7ec-851855bc7f01"
          ],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9a62ef28-a8c4-4ed0-9f0d-8c0836a80fec",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 371,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f4816f6b-6819-4628-bbe8-1db1b42d7be1",
              "parentUUID": "9a62ef28-a8c4-4ed0-9f0d-8c0836a80fec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f4816f6b-6819-4628-bbe8-1db1b42d7be1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 371,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3c8307a2-6048-4b6a-b5b3-82ece5705456",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1052,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "eb72db8e-52ba-4a36-b393-7b8a61b8e72e",
              "parentUUID": "3c8307a2-6048-4b6a-b5b3-82ece5705456",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "eb72db8e-52ba-4a36-b393-7b8a61b8e72e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1052,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7d6a2dab-f9eb-41c2-b2c5-c0e513529087",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "82021d98-d79a-496b-a695-6d721ac0a355",
              "parentUUID": "7d6a2dab-f9eb-41c2-b2c5-c0e513529087",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82021d98-d79a-496b-a695-6d721ac0a355"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "379d95c7-bad6-4dbb-ba0c-a5d79824ed97",
          "title": "GET /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "09065dc1-504a-4493-8443-333200ee1daf",
              "parentUUID": "379d95c7-bad6-4dbb-ba0c-a5d79824ed97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "09065dc1-504a-4493-8443-333200ee1daf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "20bf65cb-bf7b-4c87-9408-8c72f97779f7",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "17eaa5a9-adc7-4f4c-93fc-32d293466abb",
              "parentUUID": "20bf65cb-bf7b-4c87-9408-8c72f97779f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17eaa5a9-adc7-4f4c-93fc-32d293466abb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1a900e70-0469-4885-9f0a-338a1cda2b6f",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7005c37a-3bc9-414d-bc37-4f53977a018b",
              "parentUUID": "1a900e70-0469-4885-9f0a-338a1cda2b6f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7005c37a-3bc9-414d-bc37-4f53977a018b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "55d13cbd-c423-4c06-9419-d58f229aed05",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "4e7701c7-44ce-42bd-bee0-15bd14af3493",
              "parentUUID": "55d13cbd-c423-4c06-9419-d58f229aed05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4e7701c7-44ce-42bd-bee0-15bd14af3493"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "803b10c2-1e31-4e4c-bc3d-6d89dfaf4a8d",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b033be17-1cbd-4844-9f0d-74d53936b256",
              "parentUUID": "803b10c2-1e31-4e4c-bc3d-6d89dfaf4a8d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b033be17-1cbd-4844-9f0d-74d53936b256"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c62c5d15-bd7f-4960-afb4-6ae3353b0b37",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 698,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "201cc796-7f94-4a23-b98a-cbf8dae9328a",
              "parentUUID": "c62c5d15-bd7f-4960-afb4-6ae3353b0b37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "201cc796-7f94-4a23-b98a-cbf8dae9328a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 698,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "61ed17d3-1d03-41f1-bf22-288bb018daff",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0792f493-32a2-4400-bbdc-2d69e902997c",
              "parentUUID": "61ed17d3-1d03-41f1-bf22-288bb018daff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0792f493-32a2-4400-bbdc-2d69e902997c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "527f530b-4fea-47c7-a32c-5b8a8988967a",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "6fba0059-a891-4912-b2cd-d060807591ed",
              "parentUUID": "527f530b-4fea-47c7-a32c-5b8a8988967a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fba0059-a891-4912-b2cd-d060807591ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "10a917f5-fc37-47a7-a281-48c2eebe7afe",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "15797da0-27fd-4f0a-b43a-ff5aaef90b35",
              "parentUUID": "10a917f5-fc37-47a7-a281-48c2eebe7afe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15797da0-27fd-4f0a-b43a-ff5aaef90b35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a9d874dc-b9dd-4384-ba18-99c67064562c",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "532e5633-163c-4c42-bf3e-7046f6960579",
              "parentUUID": "a9d874dc-b9dd-4384-ba18-99c67064562c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "532e5633-163c-4c42-bf3e-7046f6960579"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c3331bd1-80a5-414d-b0b3-110fcda9d786",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 805,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b8183b53-857c-4930-9310-766e60bda325",
              "parentUUID": "c3331bd1-80a5-414d-b0b3-110fcda9d786",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8183b53-857c-4930-9310-766e60bda325"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 805,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c7512226-2da6-419c-8576-44b711c2783e",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3cce6335-972a-49f7-9982-589f39e9c42b",
              "parentUUID": "c7512226-2da6-419c-8576-44b711c2783e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3cce6335-972a-49f7-9982-589f39e9c42b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 99,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "88aa6b65-8ebb-4b71-be5b-aaf2b2509cc3",
          "title": "GET /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a48aa285-bb93-4eed-ac3f-bfb486f27f89",
              "parentUUID": "88aa6b65-8ebb-4b71-be5b-aaf2b2509cc3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a48aa285-bb93-4eed-ac3f-bfb486f27f89"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c4f1dbad-7669-412b-bd9a-e639b183b7be",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 394,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1e086e26-bc4c-4762-b4bd-e0d8033ba2a5",
              "parentUUID": "c4f1dbad-7669-412b-bd9a-e639b183b7be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e086e26-bc4c-4762-b4bd-e0d8033ba2a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 394,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c3ee33ce-4b89-4068-8475-29a8e33b22a9",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 241,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "96e9048a-0464-4a14-a218-6fa6bb2a72f4",
              "parentUUID": "c3ee33ce-4b89-4068-8475-29a8e33b22a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96e9048a-0464-4a14-a218-6fa6bb2a72f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 241,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "32c88c78-5ed6-4aaa-a521-794f32986766",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5817,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7b0a3958-eb15-4c88-b037-b493d057cb3d",
              "parentUUID": "32c88c78-5ed6-4aaa-a521-794f32986766",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b0a3958-eb15-4c88-b037-b493d057cb3d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5817,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b96f059d-7d6c-4f06-a796-60e8c8f879c7",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 277,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7f077896-1989-492a-8247-528277a713a8",
              "parentUUID": "b96f059d-7d6c-4f06-a796-60e8c8f879c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f077896-1989-492a-8247-528277a713a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 277,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f8ded3b7-8566-496d-aa8b-64a4ff76449e",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0c321391-e982-407c-b9df-e1a87ea14604",
              "parentUUID": "f8ded3b7-8566-496d-aa8b-64a4ff76449e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c321391-e982-407c-b9df-e1a87ea14604"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3b93ac4e-40f8-4174-8e1a-256dd80a95d3",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 21272,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: socket hang up",
                "estack": "Error: socket hang up\n    at connResetException (internal/errors.js:639:14)\n    at Socket.socketOnEnd (_http_client.js:499:23)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "49206625-54f0-4939-a03f-5f41381ca02e",
              "parentUUID": "3b93ac4e-40f8-4174-8e1a-256dd80a95d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "49206625-54f0-4939-a03f-5f41381ca02e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 21272,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "da884a26-afb8-4290-81f4-d31aa386dd56",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "f49fbb35-330e-4b31-ae90-ce36330fe5c0",
              "parentUUID": "da884a26-afb8-4290-81f4-d31aa386dd56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f49fbb35-330e-4b31-ae90-ce36330fe5c0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d48d0af4-ff5c-491d-ae58-97c3fc52cd61",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "a50925d5-b891-4587-9006-a735ab2c5498",
              "parentUUID": "d48d0af4-ff5c-491d-ae58-97c3fc52cd61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a50925d5-b891-4587-9006-a735ab2c5498"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4adfe998-112c-49c6-aad5-e7252a12d440",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "3c65a772-2f63-4e80-8784-5ae948d154b6",
              "parentUUID": "4adfe998-112c-49c6-aad5-e7252a12d440",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "1192b7a1-b75f-4a98-ad9c-6a914c80500d",
              "parentUUID": "4adfe998-112c-49c6-aad5-e7252a12d440",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "c320fbbd-f0eb-465a-974f-f4d634d07c81",
              "parentUUID": "4adfe998-112c-49c6-aad5-e7252a12d440",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "0f687322-15e2-4270-a3e8-4126e253ed01",
              "parentUUID": "4adfe998-112c-49c6-aad5-e7252a12d440",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "07fcdb0f-44c2-470e-8fe2-aeeb19386bf3",
              "parentUUID": "4adfe998-112c-49c6-aad5-e7252a12d440",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3c65a772-2f63-4e80-8784-5ae948d154b6",
            "1192b7a1-b75f-4a98-ad9c-6a914c80500d",
            "c320fbbd-f0eb-465a-974f-f4d634d07c81",
            "0f687322-15e2-4270-a3e8-4126e253ed01",
            "07fcdb0f-44c2-470e-8fe2-aeeb19386bf3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5cc29b26-c472-499c-ae4c-a911276f021b",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f5916a65-a3bb-4a5d-97f8-7124a723b80f",
              "parentUUID": "5cc29b26-c472-499c-ae4c-a911276f021b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "40edd808-835c-44e9-9127-532dbf278d7b",
              "parentUUID": "5cc29b26-c472-499c-ae4c-a911276f021b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "72a3755e-e26d-4e7d-b869-b07567d44903",
              "parentUUID": "5cc29b26-c472-499c-ae4c-a911276f021b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f5916a65-a3bb-4a5d-97f8-7124a723b80f",
            "40edd808-835c-44e9-9127-532dbf278d7b",
            "72a3755e-e26d-4e7d-b869-b07567d44903"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "0403f14c-bdb0-4359-ba56-fa120fcaae18",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f5400668-88b6-488e-ae41-bab58eaa472a",
              "parentUUID": "0403f14c-bdb0-4359-ba56-fa120fcaae18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "4ad58b85-e41f-404b-9ed4-715a79aa4dd9",
              "parentUUID": "0403f14c-bdb0-4359-ba56-fa120fcaae18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "94e5ff5f-02f1-4e17-a1c1-3f0522188ff2",
              "parentUUID": "0403f14c-bdb0-4359-ba56-fa120fcaae18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "98423f9b-0921-4bc6-a44c-a82bf0afd436",
              "parentUUID": "0403f14c-bdb0-4359-ba56-fa120fcaae18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f5400668-88b6-488e-ae41-bab58eaa472a",
            "4ad58b85-e41f-404b-9ed4-715a79aa4dd9",
            "94e5ff5f-02f1-4e17-a1c1-3f0522188ff2",
            "98423f9b-0921-4bc6-a44c-a82bf0afd436"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "92eef706-c058-450d-9cd3-c64816d19e6b",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "993ce5e4-b442-43f5-9efd-623120491fa6",
              "parentUUID": "92eef706-c058-450d-9cd3-c64816d19e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:26:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "edcb8a06-5acb-4e51-b56a-d5ce12f9c46a",
              "parentUUID": "92eef706-c058-450d-9cd3-c64816d19e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:35:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "bccd0e47-333a-4070-85a5-814ced9d6b49",
              "parentUUID": "92eef706-c058-450d-9cd3-c64816d19e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:44:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "795468e5-8cf8-4188-a2d0-26773923f961",
              "parentUUID": "92eef706-c058-450d-9cd3-c64816d19e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:53:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "1cb20013-d934-4d85-82c0-1d0f270848e1",
              "parentUUID": "92eef706-c058-450d-9cd3-c64816d19e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:62:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "97b69ede-e671-4af1-a379-189203b29fd5",
              "parentUUID": "92eef706-c058-450d-9cd3-c64816d19e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:71:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "1037446e-6660-4136-a318-ace3ebbfe802",
              "parentUUID": "92eef706-c058-450d-9cd3-c64816d19e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:80:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "d5995a7e-4586-42b8-9df7-3af98413776e",
              "parentUUID": "92eef706-c058-450d-9cd3-c64816d19e6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "993ce5e4-b442-43f5-9efd-623120491fa6",
            "edcb8a06-5acb-4e51-b56a-d5ce12f9c46a",
            "bccd0e47-333a-4070-85a5-814ced9d6b49",
            "795468e5-8cf8-4188-a2d0-26773923f961",
            "1cb20013-d934-4d85-82c0-1d0f270848e1",
            "97b69ede-e671-4af1-a379-189203b29fd5",
            "1037446e-6660-4136-a318-ace3ebbfe802",
            "d5995a7e-4586-42b8-9df7-3af98413776e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "67401ac2-fdad-4239-91be-586d9df75fb8",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1af180f8-b42e-4fc4-b9f3-4c6f671f03a1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "fda4865c-d07e-4331-a31e-7a7c97583c39",
                  "parentUUID": "1af180f8-b42e-4fc4-b9f3-4c6f671f03a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fda4865c-d07e-4331-a31e-7a7c97583c39"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a671d702-4035-47ec-b458-05e8a741e7b1",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "91b0f22f-66c3-4c2a-accf-19938de86c89",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "579c6d08-f44b-479f-8736-43b2c8a09d51",
                  "parentUUID": "91b0f22f-66c3-4c2a-accf-19938de86c89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "579c6d08-f44b-479f-8736-43b2c8a09d51"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b1d5aef4-4da4-4b60-9da7-1f80c08ad2d9",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "002cc8eb-d3e9-47ba-b5d4-2628233c9922",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "13b8a4fb-89c4-4e46-a4db-d93652586d70",
                  "parentUUID": "002cc8eb-d3e9-47ba-b5d4-2628233c9922",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "13b8a4fb-89c4-4e46-a4db-d93652586d70"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e9a9fa6a-1e51-4859-b215-982efc1431ec",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1313edee-4e47-4bae-8b41-0105d0f27f11",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/-26599269', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "5a8a1ad0-f5d9-4f33-8da2-d60416b5d6f1",
                  "parentUUID": "1313edee-4e47-4bae-8b41-0105d0f27f11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5a8a1ad0-f5d9-4f33-8da2-d60416b5d6f1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fb9bac0a-244a-4e92-9259-e918826e247b",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e5be307c-a8c5-414d-a5f0-ba3c93e77ccf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "13bad739-2365-4be2-b255-400b15617fc0",
                  "parentUUID": "e5be307c-a8c5-414d-a5f0-ba3c93e77ccf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "13bad739-2365-4be2-b255-400b15617fc0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ac998e68-8cb8-449c-a7f7-ba2089d29913",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "18701890-7dd2-4ad8-a6c1-74f94222250b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "af13d536-4f06-4fac-b65b-1fa09666c095",
                  "parentUUID": "18701890-7dd2-4ad8-a6c1-74f94222250b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "af13d536-4f06-4fac-b65b-1fa09666c095"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9d28cd4d-c838-4610-a244-8b4a06d021ab",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "53493b9f-0380-49ed-b790-2891859c84eb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 9256, 'gpname': 'tempor dolore esse reprehenderit', 'rank': 3, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "f8716eec-8489-4433-947a-eaaa7a30c32c",
                  "parentUUID": "53493b9f-0380-49ed-b790-2891859c84eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f8716eec-8489-4433-947a-eaaa7a30c32c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "52fc399d-9f9f-41b2-9676-ed8f94b0cfe5",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14ec277c-5d88-4595-9a24-30df0101b37d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/8557', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "de28c120-97b8-419d-b7de-ec0cca179ef6",
                  "parentUUID": "14ec277c-5d88-4595-9a24-30df0101b37d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "de28c120-97b8-419d-b7de-ec0cca179ef6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "392db129-69f6-4a36-9e61-5a0d93f6a9de",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "169df858-f0f7-42a6-a041-20b330b83ecf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "f71b5768-f589-4230-8935-bf29078534c5",
                  "parentUUID": "169df858-f0f7-42a6-a041-20b330b83ecf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f71b5768-f589-4230-8935-bf29078534c5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f8a67258-9934-473b-b7f3-41036421d3da",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aef38ce9-2307-4c2c-aa25-2ec979313aa6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/894', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "d8bbb19e-5032-4828-9565-b5aaf17d970c",
                  "parentUUID": "aef38ce9-2307-4c2c-aa25-2ec979313aa6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d8bbb19e-5032-4828-9565-b5aaf17d970c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "75d29aac-0e19-437d-b509-b8f89b43a2a2",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "826eaa30-2e6b-44ee-9bf4-a0030921b0d9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "6f392902-2222-4bd6-b475-62973690d905",
                  "parentUUID": "826eaa30-2e6b-44ee-9bf4-a0030921b0d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6f392902-2222-4bd6-b475-62973690d905"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c0c8012d-4e28-4d2f-bc0d-59e0c0dc13f4",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d4a33e8a-58a7-46b9-a741-48dba3e58039",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "2f879f49-7cf8-4aae-a77f-0caa20f98fdb",
                  "parentUUID": "d4a33e8a-58a7-46b9-a741-48dba3e58039",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2f879f49-7cf8-4aae-a77f-0caa20f98fdb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ebe6eeee-eb90-419e-8e25-1ec1aed31f0b",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9e538e6e-c209-4ae5-8acf-2b5a01230bad",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "4e61aaf3-dc29-4f43-997e-25b8287a6647",
                  "parentUUID": "9e538e6e-c209-4ae5-8acf-2b5a01230bad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4e61aaf3-dc29-4f43-997e-25b8287a6647"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1c27242e-ae35-4e22-8305-3ce3cba26c29",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2330c981-c73a-4cd8-9b1e-ecfb9f50f597",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "b5f71857-547a-4b73-a41d-3dfb4c1475ec",
                  "parentUUID": "2330c981-c73a-4cd8-9b1e-ecfb9f50f597",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b5f71857-547a-4b73-a41d-3dfb4c1475ec"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c1ee9b21-ea16-4f6d-b6ca-1efac483ca65",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0ab6357d-cb2f-46ec-8c54-2275631ef922",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "ea057002-0025-4ca8-a157-97cc8b2b7d1d",
                  "parentUUID": "0ab6357d-cb2f-46ec-8c54-2275631ef922",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ea057002-0025-4ca8-a157-97cc8b2b7d1d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "205568dc-bd38-49dd-bc12-34157bdffdc3",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f93428a3-8819-43a8-88dc-6235d090a139",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "573c0710-74a8-4f2e-b14e-b976569622a4",
                  "parentUUID": "f93428a3-8819-43a8-88dc-6235d090a139",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "573c0710-74a8-4f2e-b14e-b976569622a4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a4aa3075-6096-4bdf-934d-bf9b6a13645c",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a448b3ac-19da-4341-8e87-d8f5d95c4381",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 25 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "b7444247-5268-4dff-a73d-1b6e200f7669",
                  "parentUUID": "a448b3ac-19da-4341-8e87-d8f5d95c4381",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b7444247-5268-4dff-a73d-1b6e200f7669"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "59a2fa07-758a-4f81-889c-ad16211ad1c8",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2a72b600-c43f-495e-add0-43d6f76df079",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "a6b4e863-c05c-4bb0-a1b0-e04f01a5693f",
                  "parentUUID": "2a72b600-c43f-495e-add0-43d6f76df079",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a6b4e863-c05c-4bb0-a1b0-e04f01a5693f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d89f2f1e-a807-487f-9b8a-9152d3d4d3af",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9cd946ac-e172-419c-9046-b641deb67cf1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "14ea6504-5969-4842-af96-ab21d9f41875",
                  "parentUUID": "9cd946ac-e172-419c-9046-b641deb67cf1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "14ea6504-5969-4842-af96-ab21d9f41875"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b1025fe1-27a6-468b-9752-a1c46cec3686",
          "title": "tests for /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
          "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bf16dc62-acae-4e30-9eee-aa2be3c3ec1a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
              "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronologies/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronologies/3962', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "93fc7070-9a4a-4e2d-8b4d-94aa734c4e92",
                  "parentUUID": "bf16dc62-acae-4e30-9eee-aa2be3c3ec1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "93fc7070-9a4a-4e2d-8b4d-94aa734c4e92"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7f0f0c83-3361-4d75-8d36-cf90b4298a55",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2df4ec03-2494-4e07-9f5f-589b3fb35b6e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 15206, 'familyname': 'aute id cillum', 'contactname': 'tempor', 'contactstatus': 'retired', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "84e82792-b544-40cb-873d-b22082fbb0bb",
                  "parentUUID": "2df4ec03-2494-4e07-9f5f-589b3fb35b6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "84e82792-b544-40cb-873d-b22082fbb0bb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c1faf6bb-23ad-4e89-ad34-ccf9ff1c1a78",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7205ccf4-024f-4d87-aa9e-94f98d1d1776",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "b972bb71-802a-4ae0-86ea-2912c4047513",
                  "parentUUID": "7205ccf4-024f-4d87-aa9e-94f98d1d1776",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b972bb71-802a-4ae0-86ea-2912c4047513"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9088d8e6-bfd9-4234-ab44-c76172b4bd1a",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "047cba86-22fe-4fd3-b99b-1737edca273d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "ccb01bdd-d19c-4261-acdd-2701cc022708",
                  "parentUUID": "047cba86-22fe-4fd3-b99b-1737edca273d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ccb01bdd-d19c-4261-acdd-2701cc022708"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8a6bc6f4-b0d2-47cb-ad5d-071aa4a6496f",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0185ac1e-1804-4c84-ba94-2833f4b8c010",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Faunal Isotope Database' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "74c24607-e4e9-4ad3-9859-fd219525741f",
                  "parentUUID": "0185ac1e-1804-4c84-ba94-2833f4b8c010",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "74c24607-e4e9-4ad3-9859-fd219525741f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "625905d6-290a-4d89-9754-be741b8b3e0b",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "02376bd2-a9f6-4947-92ea-b6da5246614d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 17621, 'contactid': 19480, 'datasettype': 'in aliquip nisi officia', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 11462529, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "babe507c-f763-46c9-97f7-a934582b7b03",
                  "parentUUID": "02376bd2-a9f6-4947-92ea-b6da5246614d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "babe507c-f763-46c9-97f7-a934582b7b03"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "45a060b3-39a2-4dc5-8311-f4b9d20af1d8",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a7fee753-bcd0-4cb7-bbba-914087236f84",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "804fa2e8-df4b-4fb6-af71-a8b1bccef733",
                  "parentUUID": "a7fee753-bcd0-4cb7-bbba-914087236f84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "804fa2e8-df4b-4fb6-af71-a8b1bccef733"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "522c0896-7e9a-4160-951e-47073f04aae1",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "49022866-e686-405b-a5e5-fd816f38901c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "d9872202-7c99-4884-8fc2-cc90cf300ed1",
                  "parentUUID": "49022866-e686-405b-a5e5-fd816f38901c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d9872202-7c99-4884-8fc2-cc90cf300ed1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "59cadbbb-e788-47d8-9ad0-8a7911439231",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab079681-b6b8-4a41-a9ce-3aca31620e98",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "d6f8d96d-480c-4e5b-b73e-6fef8db5cd56",
                  "parentUUID": "ab079681-b6b8-4a41-a9ce-3aca31620e98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d6f8d96d-480c-4e5b-b73e-6fef8db5cd56"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "782c15f8-4c24-4fff-9205-b36a1fe57d8a",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "676de064-df93-4e40-a824-370e39caf609",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "1251c7a5-a2f4-43fd-9f51-d900065e2352",
                  "parentUUID": "676de064-df93-4e40-a824-370e39caf609",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1251c7a5-a2f4-43fd-9f51-d900065e2352"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f0296540-52e7-4c52-9e55-5888750ea28c",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30f2ea46-1f0d-4962-bca6-9ac628ea39fa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "785c5bbf-2ca8-4d76-a05f-cfb795dac7e0",
                  "parentUUID": "30f2ea46-1f0d-4962-bca6-9ac628ea39fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "785c5bbf-2ca8-4d76-a05f-cfb795dac7e0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "199cef54-f9f4-46da-9165-8b4cb77813ea",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1f1ea829-cc0e-4305-a404-f18b112d8fba",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "374daff7-96b9-4fa0-81d2-80c9669a6484",
                  "parentUUID": "1f1ea829-cc0e-4305-a404-f18b112d8fba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "374daff7-96b9-4fa0-81d2-80c9669a6484"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "69a736dc-6b10-4253-b998-f7fa20c5d170",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cb7dfb45-6136-426a-8388-4fcf4e8edb0b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "eb914992-9ded-4efa-9bb9-cb5cbf067f7e",
                  "parentUUID": "cb7dfb45-6136-426a-8388-4fcf4e8edb0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "eb914992-9ded-4efa-9bb9-cb5cbf067f7e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f012be62-4014-4410-973f-9ea1a2ec8e17",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ed34b242-79b8-4b46-9b03-7e59ff8d8524",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "28c6efec-c139-4d29-ae73-aeb0ba649f36",
                  "parentUUID": "ed34b242-79b8-4b46-9b03-7e59ff8d8524",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "28c6efec-c139-4d29-ae73-aeb0ba649f36"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0cd35097-3f3c-4662-8207-6e89bbd63d41",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f66a2e75-b4c6-45ef-ab0d-413079d2826d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 19432, 'contactid': 4370, 'datasettype': 'exercitation labore', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 4613356 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "08d5538a-8ce4-4db0-a8ae-749f98f84b87",
                  "parentUUID": "f66a2e75-b4c6-45ef-ab0d-413079d2826d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "08d5538a-8ce4-4db0-a8ae-749f98f84b87"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8be1a60c-574c-4936-ba79-789cfea4842d",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "82784787-bbe2-401a-97f7-3c372a218da4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/9193', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "661bbe2c-36f6-4011-b29a-5099b74e7e00",
                  "parentUUID": "82784787-bbe2-401a-97f7-3c372a218da4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "661bbe2c-36f6-4011-b29a-5099b74e7e00"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6fc69d5e-d1e2-44a4-a976-f3e26d60bbf9",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cbbd4257-caec-4489-8bfe-2e2220a5ec40",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'id ullamco dolore', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "f976ade0-a652-4985-8278-aa45d7c9e2b5",
                  "parentUUID": "cbbd4257-caec-4489-8bfe-2e2220a5ec40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f976ade0-a652-4985-8278-aa45d7c9e2b5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0c54c768-e88a-4526-9384-c101fc9f2a66",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a008e774-9324-4f86-8e38-16e801ab76ec",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'qs': { 'table': 'fugiat irure nulla Lorem dolore' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "12d48ce7-1894-4f4a-8c0a-8ed0f1c745dc",
                  "parentUUID": "a008e774-9324-4f86-8e38-16e801ab76ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "12d48ce7-1894-4f4a-8c0a-8ed0f1c745dc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "20f8f6b0-075b-45e7-8d44-9d825b59a7bb",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "573733a3-b014-42b3-ba30-9a96a3405312",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "216d47db-e6ea-4c29-858a-4f3d3d6839eb",
                  "parentUUID": "573733a3-b014-42b3-ba30-9a96a3405312",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "216d47db-e6ea-4c29-858a-4f3d3d6839eb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "14a0a2c4-bd25-45dd-9c95-f10d862db5e6",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9b237af3-307f-4be1-9bd1-6279bd622c05",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "7a0adea3-ac88-47d4-8a49-23eeab23119d",
                  "parentUUID": "9b237af3-307f-4be1-9bd1-6279bd622c05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7a0adea3-ac88-47d4-8a49-23eeab23119d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "64bad538-18e1-4f86-95fb-7f40f0235230",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dc420bab-50cf-4c96-8b93-f25268fe638a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 7356, 'gpname': 'dolore reprehenderit dolor voluptate eiusmod', 'rank': 3, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "627d9a77-a4cc-41e9-9cbc-8a73ce6384cc",
                  "parentUUID": "dc420bab-50cf-4c96-8b93-f25268fe638a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "627d9a77-a4cc-41e9-9cbc-8a73ce6384cc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "63e0b4b3-b060-4091-b604-fd4a8be2f7af",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "50afa849-2950-497d-a300-d03398ff27b1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/9308/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "ac74942d-94cd-49eb-b68d-01133f982d13",
                  "parentUUID": "50afa849-2950-497d-a300-d03398ff27b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ac74942d-94cd-49eb-b68d-01133f982d13"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "14a23cf4-2204-4674-a66e-c8be8ccafd08",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7dfec05d-a3f9-4737-b0a1-3c5c61efeb22",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/712/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "da614c17-44af-4ef0-aae4-bd6e623bf16d",
                  "parentUUID": "7dfec05d-a3f9-4737-b0a1-3c5c61efeb22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "da614c17-44af-4ef0-aae4-bd6e623bf16d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4a54d37c-6684-43f7-ace6-8668bf22e8a9",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3565a854-b786-4cf1-ad73-d0b3dd553f2d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/7998', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "2daaf820-0722-40ae-ae0d-266099e03a80",
                  "parentUUID": "3565a854-b786-4cf1-ad73-d0b3dd553f2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2daaf820-0722-40ae-ae0d-266099e03a80"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6aca22e0-9afc-4ef7-a525-9453c2461686",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b2b3b554-df0d-4aac-a919-604f50f6fb65",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'qui ipsum', 'taxonid': 41281, 'siteid': 24649, 'sitename': 'dolore', 'datasettype': 'ex', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 13298176, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "156bbc55-e6f6-4898-866f-fe3f64b7b1b9",
                  "parentUUID": "b2b3b554-df0d-4aac-a919-604f50f6fb65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "156bbc55-e6f6-4898-866f-fe3f64b7b1b9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "02b337a0-6f51-4ad0-b480-589be257f289",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "126b7349-6fb3-4bb5-b7b6-99b57e184e8d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "e5827a32-266e-4dc3-a0d6-a6569d3b6439",
                  "parentUUID": "126b7349-6fb3-4bb5-b7b6-99b57e184e8d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e5827a32-266e-4dc3-a0d6-a6569d3b6439"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "375c5378-b8f9-4d8c-a1b1-0d269a6e9334",
          "title": "tests for /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
          "file": "/test/v2.0-data-oxcal-calibrate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ede97e97-c426-432c-8172-284b2d8be0be",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
              "file": "/test/v2.0-data-oxcal-calibrate-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "dcc1c59a-93c4-42b5-a728-812c2cd28f22",
                  "parentUUID": "ede97e97-c426-432c-8172-284b2d8be0be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "dcc1c59a-93c4-42b5-a728-812c2cd28f22"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e90ad761-d1e2-44ab-9b61-2eaf73a27459",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d788baa8-5f2c-41ca-b381-6345f50ef217",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'aute minim mollit ipsum', 'taxonid': 20082, 'siteid': 20177, 'sitename': 'dolor labore dolore', 'datasettype': 'nisi officia ullamco', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 826794, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "52e24257-44be-4ea5-af44-6ea974b31da2",
                  "parentUUID": "d788baa8-5f2c-41ca-b381-6345f50ef217",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "52e24257-44be-4ea5-af44-6ea974b31da2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "105d425f-7edc-42b9-b692-4ac940c27e64",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a2aa6f5e-7e47-4c7b-9824-d4314b0ff321",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "29ccfa84-5424-407c-8eb5-4461e8535518",
                  "parentUUID": "a2aa6f5e-7e47-4c7b-9824-d4314b0ff321",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "29ccfa84-5424-407c-8eb5-4461e8535518"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "21f2ceb1-548e-4b40-a67c-57516eb90c06",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a20ad8df-e951-4402-a6c2-9af86c797d7c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 4420, 'datasetid': 7582211, 'siteid': 26779, 'familyname': 'veniam minim', 'pubtype': 'Other Authored', 'year': 1795, 'search': 'sint cillum dolor', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "9d17de3f-5ba5-4b12-9a3a-85533a86c5ca",
                  "parentUUID": "a20ad8df-e951-4402-a6c2-9af86c797d7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9d17de3f-5ba5-4b12-9a3a-85533a86c5ca"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "023d472a-4487-48bc-9692-1dda356250e3",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "25da6b9e-b4fa-4891-80a0-86d3330928bb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/{publicationid}', {\n  'qs': { 'publicationid': 15661 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "7e1d3dda-3a0a-465c-a0c2-5e996cd01f9a",
                  "parentUUID": "25da6b9e-b4fa-4891-80a0-86d3330928bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7e1d3dda-3a0a-465c-a0c2-5e996cd01f9a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ed604651-932f-4be0-9f3b-f8365cb59f60",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7c997867-0139-4af4-b32e-5fb41ff664b0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 4745, 'sitename': 'sit', 'altmax': 100, 'altmin': 10, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "6d1fe6bd-0095-498c-8ee8-2749a0a19685",
                  "parentUUID": "7c997867-0139-4af4-b32e-5fb41ff664b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6d1fe6bd-0095-498c-8ee8-2749a0a19685"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1f21975d-9992-4e69-b626-16c29c5afd42",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fa392edc-9c7f-487a-863c-fc49bc1ab1ed",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/3155/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "b06fe4bd-fc35-4907-8e8f-80529f636b99",
                  "parentUUID": "fa392edc-9c7f-487a-863c-fc49bc1ab1ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b06fe4bd-fc35-4907-8e8f-80529f636b99"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "086c7e3a-b0e5-463f-aad8-8fb9ec952b6e",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0433679e-4667-4f81-b5a3-44f46bbd5a65",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "e85e5052-4efe-4f66-9f93-78cd5c59e47e",
                  "parentUUID": "0433679e-4667-4f81-b5a3-44f46bbd5a65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e85e5052-4efe-4f66-9f93-78cd5c59e47e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d3c2c5f7-0ce8-47a3-a26b-129d152c4763",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "09a5baa5-7097-4325-8205-7081417f3a10",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "9cc98135-0462-42d5-9548-25092a5c8af6",
                  "parentUUID": "09a5baa5-7097-4325-8205-7081417f3a10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9cc98135-0462-42d5-9548-25092a5c8af6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6864f24f-7135-4ce9-b5a8-a973715bd3d9",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "815777df-c288-42dd-8200-18141ac334ba",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "f3417cc9-6eb6-4779-a844-ea5848bafee6",
                  "parentUUID": "815777df-c288-42dd-8200-18141ac334ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f3417cc9-6eb6-4779-a844-ea5848bafee6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b217034c-8c3e-479a-8af1-3b9104c61203",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "544899a8-4a39-4f48-bbc0-04c17322699d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "d3720d63-da0a-4894-84ea-e451f989565e",
                  "parentUUID": "544899a8-4a39-4f48-bbc0-04c17322699d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d3720d63-da0a-4894-84ea-e451f989565e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1a579906-7db3-4d30-892d-ee900fdfa98a",
          "title": "tests for /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "388d4c0e-bcbf-451b-a168-4da90cbe4338",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "9fa83656-3a09-4452-98b0-2152278b0d2d",
                  "parentUUID": "388d4c0e-bcbf-451b-a168-4da90cbe4338",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9fa83656-3a09-4452-98b0-2152278b0d2d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eecd29ca-8239-4fb2-bc56-2eb4cadc9016",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "98868f1b-bc80-4f11-b25c-92694fd89db5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "23ebdfa2-813b-4373-a0d0-54e6fdc78644",
                  "parentUUID": "98868f1b-bc80-4f11-b25c-92694fd89db5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "23ebdfa2-813b-4373-a0d0-54e6fdc78644"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e143a8ce-ccfd-4bb5-95f0-2165520326a2",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "247cf235-95fb-4016-b9ff-5e67e8786cd9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "ac2ced5c-640e-4b4b-9b7a-3e6bf4b74f88",
                  "parentUUID": "247cf235-95fb-4016-b9ff-5e67e8786cd9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ac2ced5c-640e-4b4b-9b7a-3e6bf4b74f88"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b3ecda48-9193-4231-9afb-8871abb6b669",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fc9ab3e7-92d9-44f9-b3af-202567a451f4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "70ac1c5b-ebb9-48c1-ab36-c31aec269526",
                  "parentUUID": "fc9ab3e7-92d9-44f9-b3af-202567a451f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "70ac1c5b-ebb9-48c1-ab36-c31aec269526"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6cd770c9-ba41-4216-b4d4-252897f533e0",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a19b2900-7ef2-4fd1-9e1e-1a085b457746",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "118596b5-5bc3-4aac-b30a-88753178b5ed",
                  "parentUUID": "a19b2900-7ef2-4fd1-9e1e-1a085b457746",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "118596b5-5bc3-4aac-b30a-88753178b5ed"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0a803c2d-239b-420a-8b9f-5abb973f8a5b",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "76334c77-1b15-4f6b-895e-3e5dc223ba8c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'Lorem commodo deserunt consequat dolor', 'datasetid': 44817314, 'siteid': 28196 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "2fb5b64f-1a56-47fe-b056-8bf2577a698f",
                  "parentUUID": "76334c77-1b15-4f6b-895e-3e5dc223ba8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2fb5b64f-1a56-47fe-b056-8bf2577a698f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c19399db-f20a-4914-a084-defd2365f152",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9520a5fb-979b-440f-b3cd-3bfcc6b64fd0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "12e6cc88-7902-4170-917a-3f430f1547b4",
                  "parentUUID": "9520a5fb-979b-440f-b3cd-3bfcc6b64fd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "12e6cc88-7902-4170-917a-3f430f1547b4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6c067347-6849-448a-aac8-88b0765821e7",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "67adbcd9-46ee-4326-b027-1e991bfeda21",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "bfe80a8f-0fd3-4893-af16-f0496f5ed674",
                  "parentUUID": "67adbcd9-46ee-4326-b027-1e991bfeda21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bfe80a8f-0fd3-4893-af16-f0496f5ed674"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6ef9bdd1-360e-48e4-ad45-08cb5a751882",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16a8a32b-7aec-40df-9097-67a881b28fc8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "4720f6c0-d209-4672-9c4b-a09b96bd054d",
                  "parentUUID": "16a8a32b-7aec-40df-9097-67a881b28fc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4720f6c0-d209-4672-9c4b-a09b96bd054d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "574d66e0-6ea2-480f-97fd-880cc9ffb7f5",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "de1a7cf2-a22b-463b-9a48-aaf63e76f362",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "bd3e204f-e2a4-4e46-a664-2fda6f165a97",
                  "parentUUID": "de1a7cf2-a22b-463b-9a48-aaf63e76f362",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bd3e204f-e2a4-4e46-a664-2fda6f165a97"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}