{
  "stats": {
    "suites": 199,
    "tests": 198,
    "passes": 41,
    "pending": 0,
    "failures": 157,
    "start": "2023-09-01T18:48:44.055Z",
    "end": "2023-09-01T18:48:57.378Z",
    "duration": 13323,
    "testsRegistered": 198,
    "passPercent": 20.707070707070706,
    "pendingPercent": 0,
    "other": 156,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ae876195-addd-4137-b7a9-04a979e11b78",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "77a33feb-69c9-4f70-8e9c-dd2e83351438",
          "parentUUID": "ae876195-addd-4137-b7a9-04a979e11b78",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "ced9e697-15a0-4848-a1ae-7cb27288f0fc",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js:29:33\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "1b764fc9-2b66-4d1b-8707-91a1946db3bf",
              "parentUUID": "ced9e697-15a0-4848-a1ae-7cb27288f0fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1b764fc9-2b66-4d1b-8707-91a1946db3bf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 25);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js:32:42)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "b63c302e-0067-48fd-91d9-a63beb75cfe8",
              "parentUUID": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js:42:41)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "3cba3c0e-d1bd-4a4b-8420-9b1669e18803",
              "parentUUID": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 25);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js:52:42)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "65852d68-b654-44f8-b058-3b52453158e5",
              "parentUUID": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 30);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js:62:42)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c7fc8a44-2f0a-4ebd-87c3-97a7857d4bf7",
              "parentUUID": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js:72:41)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a4d907fb-e1f4-4cee-a9ec-7a960d4db58f",
              "parentUUID": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js:82:42)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "8c70bb28-aba8-4cc4-bacd-80e071d83651",
              "parentUUID": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "e573a24c-ad41-47fe-8cfd-2794d7f85199",
              "parentUUID": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot convert undefined or null to object",
                "estack": "TypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js:103:35)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "f8cddc9a-95c2-4a61-ac68-d47c65a863ae",
              "parentUUID": "4f1940d3-3e50-4207-a74c-3fcb55662b36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e573a24c-ad41-47fe-8cfd-2794d7f85199"
          ],
          "failures": [
            "b63c302e-0067-48fd-91d9-a63beb75cfe8",
            "3cba3c0e-d1bd-4a4b-8420-9b1669e18803",
            "65852d68-b654-44f8-b058-3b52453158e5",
            "c7fc8a44-2f0a-4ebd-87c3-97a7857d4bf7",
            "a4d907fb-e1f4-4cee-a9ec-7a960d4db58f",
            "8c70bb28-aba8-4cc4-bacd-80e071d83651",
            "f8cddc9a-95c2-4a61-ac68-d47c65a863ae"
          ],
          "pending": [],
          "skipped": [],
          "duration": 52,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ddaaf3a3-b485-4a2d-b2ae-a07da3fd6904",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]['site']['datasets'][0]).includes('datasetid');\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/datasets.js:26:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "35b240dc-90be-4e33-9ab2-e41483cb234e",
              "parentUUID": "ddaaf3a3-b485-4a2d-b2ae-a07da3fd6904",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/datasets.js:40:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "671745d2-c8b5-426e-8fff-01d7845b4c1d",
              "parentUUID": "ddaaf3a3-b485-4a2d-b2ae-a07da3fd6904",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/datasets.js:51:32\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "8916f323-ce47-41d8-a41c-b9490adc24e9",
              "parentUUID": "ddaaf3a3-b485-4a2d-b2ae-a07da3fd6904",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot convert undefined or null to object",
                "estack": "TypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at /home/simon/Documents/Neotoma/api_nodetest/test/datasets.js:65:23\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "e419d470-cbd1-4b97-a7ae-f701be23da6a",
              "parentUUID": "ddaaf3a3-b485-4a2d-b2ae-a07da3fd6904",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot convert undefined or null to object",
                "estack": "TypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at /home/simon/Documents/Neotoma/api_nodetest/test/datasets.js:74:23\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a7b9f3a0-828f-4b91-b777-d82c974de9d9",
              "parentUUID": "ddaaf3a3-b485-4a2d-b2ae-a07da3fd6904",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot convert undefined or null to object",
                "estack": "TypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at /home/simon/Documents/Neotoma/api_nodetest/test/datasets.js:84:23\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5ba433ae-23aa-41ea-8101-9e387ecf4a30",
              "parentUUID": "ddaaf3a3-b485-4a2d-b2ae-a07da3fd6904",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/datasets.js:95:46\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "2b6f7a78-3703-4805-ac24-c52d82b74bb9",
              "parentUUID": "ddaaf3a3-b485-4a2d-b2ae-a07da3fd6904",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "35b240dc-90be-4e33-9ab2-e41483cb234e",
            "671745d2-c8b5-426e-8fff-01d7845b4c1d",
            "8916f323-ce47-41d8-a41c-b9490adc24e9",
            "e419d470-cbd1-4b97-a7ae-f701be23da6a",
            "a7b9f3a0-828f-4b91-b777-d82c974de9d9",
            "5ba433ae-23aa-41ea-8101-9e387ecf4a30",
            "2b6f7a78-3703-4805-ac24-c52d82b74bb9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 43,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "d47ee2dd-0d0b-4380-b57b-92267d50be15",
          "title": "Tests for Explorer App Services",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
          "file": "/test/explorerCalls.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
              "file": "/test/explorerCalls.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for TaxaGroupTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaGroupTypes",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaGroupTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5c5951de-c69b-4455-b564-a19700e60879",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomyTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomyTypes",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomyTypes', {\n  'qs': {\n    taphonomicSystemId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "86d7cf33-6e39-45c7-bd9e-b45ab4d31c6b",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomySystems",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomySystems",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomySystems', {\n  'qs': {\n    datasetTypeId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ee4a3edb-d430-4f3c-af17-a27db762ddc8",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for ElementTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for ElementTypes",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/ElementTypes', {\n  'qs': {\n    taxagroupid: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f3d4bb22-ddf0-4cb2-92c1-43d8d3c101f7",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaxaInDatasets (a slow service)",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaInDatasets (a slow service)",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7e03004c-478d-4d93-bc3b-be5cf91a620a",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for collectionTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for collectionTypes",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fa0bf575-f26b-4fe2-84d6-1943e498c1c9",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for keywords",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for keywords",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "40fe69c3-aa6a-4e42-a4be-a197cc80012e",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for authorpis",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for authorpis",
                  "timedOut": false,
                  "duration": 245,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "91ee0174-9177-4e6d-bc12-0ee388a33b2b",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DepositionalEnvironments",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DepositionalEnvironments",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DepositionalEnvironments', {\n  'qs': { idProperty: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7080ac2e-c102-4c89-a703-ce422e823487",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Search",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Search",
                  "timedOut": false,
                  "duration": 9,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Search', {\n  'qs': { search: '{\"taxa\":null,\"time\":null,\"space\":null,\"metadata\":null,\"datasetTypeId\":\"21\"}',\n    'time': true }\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "b97a4c4d-766e-4216-b55a-30abca3495d5",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DatasetTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DatasetTypes",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "93afd971-0270-4778-a623-d66269b46171",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for RelativeAges",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for RelativeAges",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/RelativeAges', {\n  'qs': { agescaleid: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d2056e44-ba9d-4fcf-be59-f5a24ae34a01",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Geochronologies",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Geochronologies",
                  "timedOut": false,
                  "duration": 11,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Geochronologies', {\n  'qs': { datasetId: 1001 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "33978f0d-6067-4d4a-ae69-6584fe0b54a8",
                  "parentUUID": "7a14bb08-1ee4-46f6-ab7a-f076839c8acb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c5951de-c69b-4455-b564-a19700e60879",
                "86d7cf33-6e39-45c7-bd9e-b45ab4d31c6b",
                "ee4a3edb-d430-4f3c-af17-a27db762ddc8",
                "f3d4bb22-ddf0-4cb2-92c1-43d8d3c101f7",
                "7e03004c-478d-4d93-bc3b-be5cf91a620a",
                "fa0bf575-f26b-4fe2-84d6-1943e498c1c9",
                "40fe69c3-aa6a-4e42-a4be-a197cc80012e",
                "91ee0174-9177-4e6d-bc12-0ee388a33b2b",
                "7080ac2e-c102-4c89-a703-ce422e823487",
                "93afd971-0270-4778-a623-d66269b46171",
                "d2056e44-ba9d-4fcf-be59-f5a24ae34a01"
              ],
              "failures": [
                "b97a4c4d-766e-4216-b55a-30abca3495d5",
                "33978f0d-6067-4d4a-ae69-6584fe0b54a8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1830,
              "root": false,
              "rootEmpty": false,
              "_timeout": 12000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 12000
        },
        {
          "uuid": "ac92ae8b-0df7-4ff1-9f40-66662b0028e5",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query returns a valid response.",
              "fullTitle": "Get geopolitical data: An empty query returns a valid response.",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(200, done);",
              "err": {
                "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:268:12)\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "923d2384-9341-4236-a311-017e44a2bbaf",
              "parentUUID": "ac92ae8b-0df7-4ff1-9f40-66662b0028e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js:34:36)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "25465567-89c9-4dc5-968d-97e3f20ddfd3",
              "parentUUID": "ac92ae8b-0df7-4ff1-9f40-66662b0028e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js:43:36)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ff816414-a669-48fe-b96b-3d14d97dbff0",
              "parentUUID": "ac92ae8b-0df7-4ff1-9f40-66662b0028e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js:52:35)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "962355c1-dafa-452f-91cb-62f44248cde5",
              "parentUUID": "ac92ae8b-0df7-4ff1-9f40-66662b0028e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "923d2384-9341-4236-a311-017e44a2bbaf",
            "25465567-89c9-4dc5-968d-97e3f20ddfd3",
            "ff816414-a669-48fe-b96b-3d14d97dbff0",
            "962355c1-dafa-452f-91cb-62f44248cde5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bb29ffda-3a0b-4260-91ff-cba80c6adff2",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "64deeefd-b939-4a57-9c98-15650fe88233",
              "parentUUID": "bb29ffda-3a0b-4260-91ff-cba80c6adff2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64deeefd-b939-4a57-9c98-15650fe88233"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "36b00238-a171-41e7-a459-966cf3559ad0",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:28:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ed8bf3df-95cf-42f4-8c84-c7257fdf3d09",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:40:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "40f4ec06-207f-48ed-ad15-47b68140e7d7",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:50:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "0e75d2ab-e194-4883-b413-682e4e4d97e0",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:59:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "50cd0a8c-3773-4288-a46c-bd085e11e606",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "3118584b-b1a6-41ae-9c5c-2b2530cb13b5",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "4acdd4c3-e929-4bc5-b3be-9a04fce47283",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:268:12)\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "9d8f811b-4836-4994-aba4-ce701772ff58",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:91:37\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "9c3bd58c-c6c2-4faa-9b39-b61b9a61679f",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:104:31\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "7cee427b-acc6-49e9-b1db-fd58e3968baf",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:113:31\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "7abc5976-7538-48ee-98e8-68262d9b8541",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:124:37\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "b1f29b33-3926-4029-8772-6db0cfe00650",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:139:37\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "2ec44af1-2498-4832-a409-24dc8ced855b",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js:152:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ba5361b9-6771-405d-9efb-06e752028719",
              "parentUUID": "36b00238-a171-41e7-a459-966cf3559ad0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3118584b-b1a6-41ae-9c5c-2b2530cb13b5",
            "4acdd4c3-e929-4bc5-b3be-9a04fce47283"
          ],
          "failures": [
            "ed8bf3df-95cf-42f4-8c84-c7257fdf3d09",
            "40f4ec06-207f-48ed-ad15-47b68140e7d7",
            "0e75d2ab-e194-4883-b413-682e4e4d97e0",
            "50cd0a8c-3773-4288-a46c-bd085e11e606",
            "9d8f811b-4836-4994-aba4-ce701772ff58",
            "9c3bd58c-c6c2-4faa-9b39-b61b9a61679f",
            "7cee427b-acc6-49e9-b1db-fd58e3968baf",
            "7abc5976-7538-48ee-98e8-68262d9b8541",
            "b1f29b33-3926-4029-8772-6db0cfe00650",
            "2ec44af1-2498-4832-a409-24dc8ced855b",
            "ba5361b9-6771-405d-9efb-06e752028719"
          ],
          "pending": [],
          "skipped": [],
          "duration": 76,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b6efa40a-ef6b-4315-8693-d38b733edb21",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publication.publicationid === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:28:29\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "8e780006-be97-4208-9f7c-73e41afa78aa",
              "parentUUID": "b6efa40a-ef6b-4315-8693-d38b733edb21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'map')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'map')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:37:30\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ae4d33df-5a06-4638-aa42-20c962235fd3",
              "parentUUID": "b6efa40a-ef6b-4315-8693-d38b733edb21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'result')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'result')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:46:30\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6111d54d-4f8e-4244-b5f5-0c7bdeaeee0d",
              "parentUUID": "b6efa40a-ef6b-4315-8693-d38b733edb21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'result')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'result')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:55:30\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "385a4af1-6f74-40a4-8e6e-01d9fe2373d1",
              "parentUUID": "b6efa40a-ef6b-4315-8693-d38b733edb21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:64:30\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "db516408-6476-42a5-a937-3ba8a5ff2866",
              "parentUUID": "b6efa40a-ef6b-4315-8693-d38b733edb21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'map')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'map')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:77:45\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ee3d1389-cfc0-4775-905b-0fc3c01d697a",
              "parentUUID": "b6efa40a-ef6b-4315-8693-d38b733edb21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'map')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'map')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:91:48\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "69fcd902-9b23-4cc5-9ca9-5dafac0494f4",
              "parentUUID": "b6efa40a-ef6b-4315-8693-d38b733edb21",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8e780006-be97-4208-9f7c-73e41afa78aa",
            "ae4d33df-5a06-4638-aa42-20c962235fd3",
            "6111d54d-4f8e-4244-b5f5-0c7bdeaeee0d",
            "385a4af1-6f74-40a4-8e6e-01d9fe2373d1",
            "db516408-6476-42a5-a937-3ba8a5ff2866",
            "ee3d1389-cfc0-4775-905b-0fc3c01d697a",
            "69fcd902-9b23-4cc5-9ca9-5dafac0494f4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 41,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "2cea5382-3eac-467a-a6a4-a44144d49103",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "94c21637-6edd-4dac-89c9-d241c57af575",
              "parentUUID": "2cea5382-3eac-467a-a6a4-a44144d49103",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94c21637-6edd-4dac-89c9-d241c57af575"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7ee9e45a-5b3f-4636-9464-f9ae4707c480",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 831,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cac2e81f-182a-4ab1-bcf9-1dc1de7f4f6e",
              "parentUUID": "7ee9e45a-5b3f-4636-9464-f9ae4707c480",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cac2e81f-182a-4ab1-bcf9-1dc1de7f4f6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 831,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "38bf5106-3837-4162-8f62-570f368def22",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a00aae88-efaa-4f75-b1cd-34954c7e6e75",
              "parentUUID": "38bf5106-3837-4162-8f62-570f368def22",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a00aae88-efaa-4f75-b1cd-34954c7e6e75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 77,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee8d0fa5-f186-4a6c-9cd6-ce619b76d0f4",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "72510544-6e3d-48bd-88cc-e5db9ce3f91a",
              "parentUUID": "ee8d0fa5-f186-4a6c-9cd6-ce619b76d0f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "72510544-6e3d-48bd-88cc-e5db9ce3f91a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "69817b36-890e-47b3-a115-7c0799748f5b",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "3435e8f4-131d-4a3e-af6c-4df7ac943f71",
              "parentUUID": "69817b36-890e-47b3-a115-7c0799748f5b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3435e8f4-131d-4a3e-af6c-4df7ac943f71"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "59f8e294-65cf-495c-a384-ed1408a6dc0e",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 197,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2858b335-aa68-4cbb-9c53-0df05509dfc5",
              "parentUUID": "59f8e294-65cf-495c-a384-ed1408a6dc0e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2858b335-aa68-4cbb-9c53-0df05509dfc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 197,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0cdd461d-57c9-4e36-9805-09553d151d40",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "bb710b07-b9b4-4a1c-a904-54bef7b02319",
              "parentUUID": "0cdd461d-57c9-4e36-9805-09553d151d40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bb710b07-b9b4-4a1c-a904-54bef7b02319"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d86a7110-2d97-47d7-86ab-97d271b046ea",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "4781fab9-b24c-4017-8e6f-9c3c1047601f",
              "parentUUID": "d86a7110-2d97-47d7-86ab-97d271b046ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4781fab9-b24c-4017-8e6f-9c3c1047601f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "37b2291d-5d04-4d6e-8d02-5c3446bf7491",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "aebb449a-5d03-4768-a6f0-88bb494e9bc8",
              "parentUUID": "37b2291d-5d04-4d6e-8d02-5c3446bf7491",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "aebb449a-5d03-4768-a6f0-88bb494e9bc8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "864a4132-d10b-4cc7-9cd2-8ade61b1b752",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "662a40a8-d8fc-44bf-8284-69ccbfddbb31",
              "parentUUID": "864a4132-d10b-4cc7-9cd2-8ade61b1b752",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "662a40a8-d8fc-44bf-8284-69ccbfddbb31"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "846fe4c3-3ae5-49da-a40b-df88fb3a9f8e",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a9355d55-4677-453a-a430-81ed108cb176",
              "parentUUID": "846fe4c3-3ae5-49da-a40b-df88fb3a9f8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a9355d55-4677-453a-a430-81ed108cb176"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b18fbfda-cd89-4a2f-b2ef-7f8f99f420e4",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fd26da5e-678c-49a0-9cec-2424f2152379",
              "parentUUID": "b18fbfda-cd89-4a2f-b2ef-7f8f99f420e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd26da5e-678c-49a0-9cec-2424f2152379"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 201,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4d2aea59-1c2b-428e-8cfb-dff9e7069857",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2d11b8ac-649c-4a0c-bdca-dc4bd50eaff3",
              "parentUUID": "4d2aea59-1c2b-428e-8cfb-dff9e7069857",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d11b8ac-649c-4a0c-bdca-dc4bd50eaff3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 90,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "133a1329-ca08-4311-9342-146a5a8ec0a5",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a517318d-06e0-4abc-b7fd-9a575bf209ed",
              "parentUUID": "133a1329-ca08-4311-9342-146a5a8ec0a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a517318d-06e0-4abc-b7fd-9a575bf209ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 119,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "44d46bf0-ad99-453c-b524-82b1cfec1db6",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d90e4b09-ced9-4d59-bfc0-066a4790ef39",
              "parentUUID": "44d46bf0-ad99-453c-b524-82b1cfec1db6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d90e4b09-ced9-4d59-bfc0-066a4790ef39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 154,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "441d912d-7bc9-4e8d-8b13-2aad3a018cb2",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cd77ce6d-463c-4f90-bb48-47b6f50e3854",
              "parentUUID": "441d912d-7bc9-4e8d-8b13-2aad3a018cb2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd77ce6d-463c-4f90-bb48-47b6f50e3854"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7f924655-59e5-414b-9600-6387a6dcfd1f",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a7f66858-b1b3-4ba2-be94-a7769942874d",
              "parentUUID": "7f924655-59e5-414b-9600-6387a6dcfd1f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7f66858-b1b3-4ba2-be94-a7769942874d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b8bab744-9b85-4747-961b-b967b9f08bab",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 260,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0507b817-47a2-49f5-ac46-ac7412499efd",
              "parentUUID": "b8bab744-9b85-4747-961b-b967b9f08bab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0507b817-47a2-49f5-ac46-ac7412499efd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 260,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "662ccaa3-9324-42bf-ba81-23cbb179554c",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 778,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "96560c89-bf1b-4fb3-a865-c44d0af686ae",
              "parentUUID": "662ccaa3-9324-42bf-ba81-23cbb179554c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96560c89-bf1b-4fb3-a865-c44d0af686ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 778,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "73677338-8c2d-44b9-9542-82c1eb906999",
          "title": "GET /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronologies/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "942f26d8-b4b9-4da3-953e-658c51c33c1b",
              "parentUUID": "73677338-8c2d-44b9-9542-82c1eb906999",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "942f26d8-b4b9-4da3-953e-658c51c33c1b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a182cbf4-9d71-4c6d-af86-30af1e1ce345",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "95fdfbe6-bdb6-4c6a-b451-ab9af3131e26",
              "parentUUID": "a182cbf4-9d71-4c6d-af86-30af1e1ce345",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "95fdfbe6-bdb6-4c6a-b451-ab9af3131e26"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "03c5fa46-9f86-4d83-8f7b-7ccf9702e3ca",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "1abd84fc-41d6-4ddc-8312-8bd963191788",
              "parentUUID": "03c5fa46-9f86-4d83-8f7b-7ccf9702e3ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1abd84fc-41d6-4ddc-8312-8bd963191788"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7e21c741-15be-4269-a77a-7e3dc07f6471",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "f3bca9e7-f704-4163-99ea-d94abfef5d66",
              "parentUUID": "7e21c741-15be-4269-a77a-7e3dc07f6471",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f3bca9e7-f704-4163-99ea-d94abfef5d66"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "51ce65a9-4e5a-4ffe-ab59-f834bd34b570",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "0bb84990-f71c-4579-a803-00bd7e98db26",
              "parentUUID": "51ce65a9-4e5a-4ffe-ab59-f834bd34b570",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0bb84990-f71c-4579-a803-00bd7e98db26"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4d83451c-de3f-4839-a69f-1388c45529f2",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "9a1e7689-3920-4e94-acaf-eb6199f7f057",
              "parentUUID": "4d83451c-de3f-4839-a69f-1388c45529f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9a1e7689-3920-4e94-acaf-eb6199f7f057"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ff70bdaa-443e-420f-bfb1-0e23db705e79",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6fe1a573-f9db-4a00-96dc-4f1a70ad1dda",
              "parentUUID": "ff70bdaa-443e-420f-bfb1-0e23db705e79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6fe1a573-f9db-4a00-96dc-4f1a70ad1dda"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "34da7769-23a3-47a7-a13f-7e6ab6df938c",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "3613daa4-9a99-4930-8a44-ba0e51527ff8",
              "parentUUID": "34da7769-23a3-47a7-a13f-7e6ab6df938c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3613daa4-9a99-4930-8a44-ba0e51527ff8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "99c3949a-e698-463b-97d3-f8a8de72a668",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "926363cc-6ad6-4c3f-ae60-cd3c6f428720",
              "parentUUID": "99c3949a-e698-463b-97d3-f8a8de72a668",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "926363cc-6ad6-4c3f-ae60-cd3c6f428720"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b66f178f-0706-4f22-ab06-11c644d367e2",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "55e6b3bb-1439-47d4-a66e-0da35c5f8b47",
              "parentUUID": "b66f178f-0706-4f22-ab06-11c644d367e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "55e6b3bb-1439-47d4-a66e-0da35c5f8b47"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "07c0c7c1-fe05-45a8-9049-c3dda8e8b004",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "dcd3f3fc-59dd-4c97-9d4f-20240d2dcc94",
              "parentUUID": "07c0c7c1-fe05-45a8-9049-c3dda8e8b004",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dcd3f3fc-59dd-4c97-9d4f-20240d2dcc94"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "211d91c6-9c9c-49ca-8d6b-db65b212d9bd",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5c7ed800-fab4-42a5-8cd3-7f84cc87bb3e",
              "parentUUID": "211d91c6-9c9c-49ca-8d6b-db65b212d9bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5c7ed800-fab4-42a5-8cd3-7f84cc87bb3e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee7ce1ca-d60a-4c19-8e0f-ff73bc4f1fa8",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "90470fe7-4632-49e6-afe6-94e3e2150ddb",
              "parentUUID": "ee7ce1ca-d60a-4c19-8e0f-ff73bc4f1fa8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "90470fe7-4632-49e6-afe6-94e3e2150ddb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "28590f4b-d2ba-406e-986f-0935326a1bf4",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "fe7730f3-454d-4cd5-a31f-b7a4de7bf015",
              "parentUUID": "28590f4b-d2ba-406e-986f-0935326a1bf4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "fe7730f3-454d-4cd5-a31f-b7a4de7bf015"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d354dd63-03f5-4361-88f6-3e3e69fdbdc2",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "319c1728-15ac-4943-82aa-de9157e498a2",
              "parentUUID": "d354dd63-03f5-4361-88f6-3e3e69fdbdc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "319c1728-15ac-4943-82aa-de9157e498a2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6834b46e-6eea-4962-bb74-9c96dfcf6f44",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "33faeaeb-6254-4116-ba64-d64b2590a9b5",
              "parentUUID": "6834b46e-6eea-4962-bb74-9c96dfcf6f44",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "33faeaeb-6254-4116-ba64-d64b2590a9b5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3cf57c5b-ff41-44d7-945d-53a630cbf63b",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "705559e4-1c6f-46a8-b5ad-1a9d7cdd9e1b",
              "parentUUID": "3cf57c5b-ff41-44d7-945d-53a630cbf63b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "705559e4-1c6f-46a8-b5ad-1a9d7cdd9e1b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "05bc8b17-9748-4f3a-b4ed-d9fa6987de0a",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "137677c0-2fb0-426d-9c04-5e572e0191b9",
              "parentUUID": "05bc8b17-9748-4f3a-b4ed-d9fa6987de0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "137677c0-2fb0-426d-9c04-5e572e0191b9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2bde8c6b-459e-4c17-b1f3-e17204207cdf",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6c5a81ab-a543-47c9-bdb1-b073aa39274a",
              "parentUUID": "2bde8c6b-459e-4c17-b1f3-e17204207cdf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6c5a81ab-a543-47c9-bdb1-b073aa39274a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8ccd1b04-c3a1-48fa-a17c-f03aac5e025e",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "d4c6ac2a-66cc-478f-a30c-84b5cbdeeef2",
              "parentUUID": "8ccd1b04-c3a1-48fa-a17c-f03aac5e025e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d4c6ac2a-66cc-478f-a30c-84b5cbdeeef2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "badce400-876d-43e2-bd9b-9b3720c80574",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "1ecd56b1-41bd-428d-b152-8113b3fa28f6",
              "parentUUID": "badce400-876d-43e2-bd9b-9b3720c80574",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1ecd56b1-41bd-428d-b152-8113b3fa28f6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5fed719f-193b-4b1f-8c52-535f5afbe582",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "657279a7-467d-4b30-85e3-d96916f2533b",
              "parentUUID": "5fed719f-193b-4b1f-8c52-535f5afbe582",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "657279a7-467d-4b30-85e3-d96916f2533b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dcb1a6b0-accc-4a8e-b9ec-4748acd225c8",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "3822166a-a088-49b8-aa99-6effe73c39bb",
              "parentUUID": "dcb1a6b0-accc-4a8e-b9ec-4748acd225c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3822166a-a088-49b8-aa99-6effe73c39bb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3f5efd15-c5f3-4591-be8d-66b532bdc771",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "f571e99a-2e30-4078-a374-5e7d5e0d4147",
              "parentUUID": "3f5efd15-c5f3-4591-be8d-66b532bdc771",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f571e99a-2e30-4078-a374-5e7d5e0d4147"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "327cf942-09ba-46ac-aac8-112375259459",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "69c98073-09e6-4adc-91d3-e64600d49230",
              "parentUUID": "327cf942-09ba-46ac-aac8-112375259459",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "69c98073-09e6-4adc-91d3-e64600d49230"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5838d5f0-5539-40d9-a490-eaf12710ca77",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "4aed4c9a-bbfc-4e4c-b868-bd0ba90746f6",
              "parentUUID": "5838d5f0-5539-40d9-a490-eaf12710ca77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4aed4c9a-bbfc-4e4c-b868-bd0ba90746f6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "130776bc-84c5-4ce8-9207-f61eb6ed6772",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "970e657e-90ca-467a-95a2-8a0a28cddb50",
              "parentUUID": "130776bc-84c5-4ce8-9207-f61eb6ed6772",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "970e657e-90ca-467a-95a2-8a0a28cddb50"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "114380a2-9987-4634-bfa6-908663777f5c",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "d750e23c-9e2b-49d8-bf27-ebccdfbd8ccb",
              "parentUUID": "114380a2-9987-4634-bfa6-908663777f5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d750e23c-9e2b-49d8-bf27-ebccdfbd8ccb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1350be29-c8d2-4707-a667-1d6681b69e89",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c1ee6b35-162e-44b5-978f-8cc1423dee17",
              "parentUUID": "1350be29-c8d2-4707-a667-1d6681b69e89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c1ee6b35-162e-44b5-978f-8cc1423dee17"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aef9c1a0-4e96-41db-b723-0c78b238750d",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c7003e30-0248-44cf-9e38-e038b0351f4c",
              "parentUUID": "aef9c1a0-4e96-41db-b723-0c78b238750d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c7003e30-0248-44cf-9e38-e038b0351f4c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1311f723-4131-4e12-b4be-78982bf1f241",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "da229619-94a7-4c03-9792-a9f6429fb530",
              "parentUUID": "1311f723-4131-4e12-b4be-78982bf1f241",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "da229619-94a7-4c03-9792-a9f6429fb530"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4317be19-d551-40b8-967a-834313b6725b",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "dbbbff33-ea4d-4af7-8ced-f33a7d396770",
              "parentUUID": "4317be19-d551-40b8-967a-834313b6725b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dbbbff33-ea4d-4af7-8ced-f33a7d396770"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0715091b-8b8f-4e6f-896a-b911158c0f00",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "8993f0c9-17ca-4669-90c9-65177c3e4378",
              "parentUUID": "0715091b-8b8f-4e6f-896a-b911158c0f00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8993f0c9-17ca-4669-90c9-65177c3e4378"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b419e134-7b46-4ef3-af02-3358c5fa4164",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "caf36c62-c2ce-4c41-af1a-652377759664",
              "parentUUID": "b419e134-7b46-4ef3-af02-3358c5fa4164",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "caf36c62-c2ce-4c41-af1a-652377759664"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cc312d70-5e36-4282-a966-b3c18d31bfbf",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "b3167b1b-f48b-42e8-9045-2a11ee4fce58",
              "parentUUID": "cc312d70-5e36-4282-a966-b3c18d31bfbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b3167b1b-f48b-42e8-9045-2a11ee4fce58"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a3bc0f23-74f8-4499-bcb5-aedf6e30c6fa",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6b821d92-72c2-4c36-b2f5-f82a6e3a5ca5",
              "parentUUID": "a3bc0f23-74f8-4499-bcb5-aedf6e30c6fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6b821d92-72c2-4c36-b2f5-f82a6e3a5ca5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "19f1a44a-a17e-4b8b-be7b-6e9a9f06b7d1",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "afbdf81e-82dd-4c10-bce8-e7e4f7a064da",
              "parentUUID": "19f1a44a-a17e-4b8b-be7b-6e9a9f06b7d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "afbdf81e-82dd-4c10-bce8-e7e4f7a064da"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e5167871-7957-4e34-9819-88d507060f62",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6f351d3b-e83e-4c18-9c14-d27065cf73c9",
              "parentUUID": "e5167871-7957-4e34-9819-88d507060f62",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6f351d3b-e83e-4c18-9c14-d27065cf73c9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "94a63359-b197-455a-96b5-516143bb6528",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5337b13f-f9dd-4e40-a7ea-03d2ae3d57d9",
              "parentUUID": "94a63359-b197-455a-96b5-516143bb6528",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5337b13f-f9dd-4e40-a7ea-03d2ae3d57d9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "00983ebe-6519-47cc-b7b2-9005eb1ad866",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "7b9d25a0-8fe3-4b35-b36d-434b26911151",
              "parentUUID": "00983ebe-6519-47cc-b7b2-9005eb1ad866",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7b9d25a0-8fe3-4b35-b36d-434b26911151"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "91e6ce62-ec6d-4160-b512-77f1d63c6506",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5b48c010-d875-4e3c-8663-9d4e4abb2e10",
              "parentUUID": "91e6ce62-ec6d-4160-b512-77f1d63c6506",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5b48c010-d875-4e3c-8663-9d4e4abb2e10"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "189843a9-bf5f-453d-9d68-79727c305401",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "18f120e5-bed9-4369-b3c0-acb78ca0ed8f",
              "parentUUID": "189843a9-bf5f-453d-9d68-79727c305401",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "18f120e5-bed9-4369-b3c0-acb78ca0ed8f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dc77ffd9-782c-4d55-98dd-e40d23e062a5",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/createError.js:16:15)\n    at settle (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/lib/adapters/http.js:269:11)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "63fadc71-49dd-43ef-b218-b189910c4a72",
              "parentUUID": "dc77ffd9-782c-4d55-98dd-e40d23e062a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "63fadc71-49dd-43ef-b218-b189910c4a72"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c1a5c1b5-613d-48ba-a56e-0cd6427e2939",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/sites.js:30:32)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "0076efc5-0735-456c-8184-4891b3fc9eb6",
              "parentUUID": "c1a5c1b5-613d-48ba-a56e-0cd6427e2939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/sites.js:40:44)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6ae7615c-30db-4b10-b0ff-c128800583d7",
              "parentUUID": "c1a5c1b5-613d-48ba-a56e-0cd6427e2939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "6a7bf689-38e3-427b-88e4-a5e673d0a7e4",
              "parentUUID": "c1a5c1b5-613d-48ba-a56e-0cd6427e2939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "edde88a6-fabf-4b68-aa02-8092bd8d6457",
              "parentUUID": "c1a5c1b5-613d-48ba-a56e-0cd6427e2939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/sites.js:77:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "01959775-9867-4d9a-a5dd-fdea571a6504",
              "parentUUID": "c1a5c1b5-613d-48ba-a56e-0cd6427e2939",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a7bf689-38e3-427b-88e4-a5e673d0a7e4",
            "edde88a6-fabf-4b68-aa02-8092bd8d6457"
          ],
          "failures": [
            "0076efc5-0735-456c-8184-4891b3fc9eb6",
            "6ae7615c-30db-4b10-b0ff-c128800583d7",
            "01959775-9867-4d9a-a5dd-fdea571a6504"
          ],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "943cec12-d9d3-4141-a470-17bb12bb9c74",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:28:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c488e9c6-09c7-4e06-b3e3-88ab23b505c5",
              "parentUUID": "943cec12-d9d3-4141-a470-17bb12bb9c74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:39:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "e62f06ae-746f-42a3-b101-b0b65ded4076",
              "parentUUID": "943cec12-d9d3-4141-a470-17bb12bb9c74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:50:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "8b3977a6-c5e8-486d-b518-49944ae04576",
              "parentUUID": "943cec12-d9d3-4141-a470-17bb12bb9c74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c488e9c6-09c7-4e06-b3e3-88ab23b505c5",
            "e62f06ae-746f-42a3-b101-b0b65ded4076",
            "8b3977a6-c5e8-486d-b518-49944ae04576"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a6a297d5-9b64-4ba9-83e8-28209fd1983c",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:66:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "1414b578-3a5d-4796-ab90-c178c7123bd3",
              "parentUUID": "a6a297d5-9b64-4ba9-83e8-28209fd1983c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:77:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "3ecfd115-e941-4334-bc06-3c8c12a359c8",
              "parentUUID": "a6a297d5-9b64-4ba9-83e8-28209fd1983c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:88:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c1fd2e9b-4959-4620-8078-ee092d59b45a",
              "parentUUID": "a6a297d5-9b64-4ba9-83e8-28209fd1983c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at /home/simon/Documents/Neotoma/api_nodetest/test/spatial.js:99:44\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "26523767-a2cb-453d-a26f-d8e1ff5b9e8f",
              "parentUUID": "a6a297d5-9b64-4ba9-83e8-28209fd1983c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1414b578-3a5d-4796-ab90-c178c7123bd3",
            "3ecfd115-e941-4334-bc06-3c8c12a359c8",
            "c1fd2e9b-4959-4620-8078-ee092d59b45a",
            "26523767-a2cb-453d-a26f-d8e1ff5b9e8f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query returns the first 25 taxa.",
              "fullTitle": "Get taxon data: An empty query returns the first 25 taxa.",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(200, done);",
              "err": {
                "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:268:12)\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a94dcf25-d149-4420-904f-f1770d5d559f",
              "parentUUID": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 12);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:32:41)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "93c592b9-06ba-49f5-bbb7-b9e54c505760",
              "parentUUID": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:44:41)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "842516a6-0e3a-4206-94c8-6c8e30b9b255",
              "parentUUID": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:56:41)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "4fb51b66-98e9-4728-a64a-fc10d670fdee",
              "parentUUID": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:68:41)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "fafa4af3-801c-49ed-b090-60c39713782b",
              "parentUUID": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:80:41)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "805f9945-d763-49c6-bf43-d9ae25813124",
              "parentUUID": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 25);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:92:42)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "37ede6d9-5334-43a0-a14a-3f2e62166440",
              "parentUUID": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 30);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:104:42)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at Stream.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at Stream.emit (node:events:514:28)\n    at Unzip.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/unzip.js:55:12)\n    at Unzip.emit (node:events:514:28)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "76586084-5754-4533-928a-34a7e30f1b7a",
              "parentUUID": "4d2ea324-c662-4826-88fc-6a35cea0d5f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a94dcf25-d149-4420-904f-f1770d5d559f",
            "93c592b9-06ba-49f5-bbb7-b9e54c505760",
            "842516a6-0e3a-4206-94c8-6c8e30b9b255",
            "4fb51b66-98e9-4728-a64a-fc10d670fdee",
            "fafa4af3-801c-49ed-b090-60c39713782b",
            "805f9945-d763-49c6-bf43-d9ae25813124",
            "37ede6d9-5334-43a0-a14a-3f2e62166440",
            "76586084-5754-4533-928a-34a7e30f1b7a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 43,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "830b6d5b-7d9c-4949-8a1e-3f46c113f336",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "83bcf6fd-bf96-4b9c-8efc-ffe25c474368",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "47313716-71c9-4b60-b5f3-a5c06d7cc088",
                  "parentUUID": "83bcf6fd-bf96-4b9c-8efc-ffe25c474368",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47313716-71c9-4b60-b5f3-a5c06d7cc088"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 62,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d2a0eccc-2b85-4f78-b00a-018df7040c17",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7d699743-3ffd-4b9f-9e70-15397df8799b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 803,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e9f77a9c-4846-4e72-a433-8a2bed803838",
                  "parentUUID": "7d699743-3ffd-4b9f-9e70-15397df8799b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9f77a9c-4846-4e72-a433-8a2bed803838"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 803,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d8cc8b2c-7f82-4c96-8f0b-3790d66d7b97",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ae06c12f-1dc7-4298-8632-f82c7f67b667",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d67cfcb6-9ab3-4804-ae48-7729586d8eb0",
                  "parentUUID": "ae06c12f-1dc7-4298-8632-f82c7f67b667",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d67cfcb6-9ab3-4804-ae48-7729586d8eb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 72,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6b5ebb73-c1ba-44ec-bd01-adac2565bae3",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "94ee7630-dde5-4c7e-bbd0-72f4a84f5234",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "fef57856-7aea-4865-acd3-c31b23d2e2b6",
                  "parentUUID": "94ee7630-dde5-4c7e-bbd0-72f4a84f5234",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fef57856-7aea-4865-acd3-c31b23d2e2b6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2fc09658-7755-4e42-8be4-ed8986274cd6",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fa12e0ef-959a-4731-bb7e-aa4a6f9615fc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "67040abe-ece8-4092-82c8-fe56adc538f9",
                  "parentUUID": "fa12e0ef-959a-4731-bb7e-aa4a6f9615fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "67040abe-ece8-4092-82c8-fe56adc538f9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "66452538-f0f8-4fac-a4b2-159ac2bb6325",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bf0ea102-6e6c-44a4-80a8-6376227b012a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "359956b8-e66c-44cc-acf2-ac8232925806",
                  "parentUUID": "bf0ea102-6e6c-44a4-80a8-6376227b012a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "359956b8-e66c-44cc-acf2-ac8232925806"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7459622f-4be9-44b2-b021-28ff89357e6c",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36004fd0-b327-4479-a2ce-2ee58eb90ded",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 756, 'gpname': 'Canada', 'rank': 1, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "0e8cf720-2fb3-4287-a6b0-06581117f670",
                  "parentUUID": "36004fd0-b327-4479-a2ce-2ee58eb90ded",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0e8cf720-2fb3-4287-a6b0-06581117f670"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e894ce7d-4958-47bf-bf3f-f88f4ec960fc",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aa38fb78-0c8c-4660-aefb-b2b889280ed4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/9482', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "05d1bdb9-0a17-441b-9aa8-ae4af8391051",
                  "parentUUID": "aa38fb78-0c8c-4660-aefb-b2b889280ed4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "05d1bdb9-0a17-441b-9aa8-ae4af8391051"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a1ca5aaa-aa8c-4239-b2bc-0c0be569a339",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b3d72ff5-98f4-4025-889a-47f90fb54cb4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "d8c2e93d-400b-4416-8465-22d6107bb136",
                  "parentUUID": "b3d72ff5-98f4-4025-889a-47f90fb54cb4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d8c2e93d-400b-4416-8465-22d6107bb136"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "efe11e2c-f7c6-441b-aec5-6cee8f3f480d",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6e694958-837c-455c-bf92-e0c92d4cd6f6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "5fcadbc5-befb-43d5-8381-f23e64df8be6",
                  "parentUUID": "6e694958-837c-455c-bf92-e0c92d4cd6f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5fcadbc5-befb-43d5-8381-f23e64df8be6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1500a35f-37c8-483b-a2d2-ce4f991db37b",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "08a4744b-20a5-4d40-ae17-e42ab2061a07",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "4700a444-0335-4e40-8a81-6bcbf0278809",
                  "parentUUID": "08a4744b-20a5-4d40-ae17-e42ab2061a07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4700a444-0335-4e40-8a81-6bcbf0278809"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "99625b0f-dfa0-481c-851e-116176a867e0",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cf6acf40-a3f6-4acc-b095-a87f8fd7801b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6ddf9c52-d75a-4b83-a5c5-8497fca2d919",
                  "parentUUID": "cf6acf40-a3f6-4acc-b095-a87f8fd7801b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ddf9c52-d75a-4b83-a5c5-8497fca2d919"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 188,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "73a35ae7-7b3c-4170-b708-3440c3316b22",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fd7ef0d2-b396-4734-9a61-40a3cdca05fd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "86a1f30d-bfd4-4f6f-8046-c3c3c1f88e91",
                  "parentUUID": "fd7ef0d2-b396-4734-9a61-40a3cdca05fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86a1f30d-bfd4-4f6f-8046-c3c3c1f88e91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "28551ee6-e1e3-41f6-8eb3-f7e58dbea4ad",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "09e38dbc-7fd0-4f35-80ab-578fbf3960ff",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 301,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c6bd0fcd-3def-4f43-953e-802366293bf9",
                  "parentUUID": "09e38dbc-7fd0-4f35-80ab-578fbf3960ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6bd0fcd-3def-4f43-953e-802366293bf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 301,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "12949fc1-b16c-45af-9e15-bbc9d1605c2b",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7eb6e019-8350-45e1-8638-dd8e57ff9714",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 305,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d9a3fa00-addf-4059-986b-9d32fdda1ea2",
                  "parentUUID": "7eb6e019-8350-45e1-8638-dd8e57ff9714",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9a3fa00-addf-4059-986b-9d32fdda1ea2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 305,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "81e9128a-a76f-4f49-8075-7bebceafa718",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a635d362-7dae-41a3-8d9d-34349a0f866f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 255,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "40a1dd56-f584-45fd-9a5a-a737fec9d5a5",
                  "parentUUID": "a635d362-7dae-41a3-8d9d-34349a0f866f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40a1dd56-f584-45fd-9a5a-a737fec9d5a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 255,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "179bbd9e-1a32-4d93-9ba5-6626c2d7f734",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c902add1-d8bb-41d2-88cb-d23f0aaf9d58",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 9 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "59130731-18e6-4b8f-80a1-6dd3434ba01b",
                  "parentUUID": "c902add1-d8bb-41d2-88cb-d23f0aaf9d58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59130731-18e6-4b8f-80a1-6dd3434ba01b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 144,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3cf55b65-306f-494c-9efe-93b5ee775647",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac41df77-914c-47ba-96ce-059e8bfb1314",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 199,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "44c8746f-d14c-4275-a9ce-360989043c7e",
                  "parentUUID": "ac41df77-914c-47ba-96ce-059e8bfb1314",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44c8746f-d14c-4275-a9ce-360989043c7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 199,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "130a29c4-ddbd-4a06-9b42-4c1918812cc1",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e7c154b6-0533-46e6-a039-ba4745b89321",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 1439,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8b4deacb-8151-4773-bd28-a7d79bea8e21",
                  "parentUUID": "e7c154b6-0533-46e6-a039-ba4745b89321",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b4deacb-8151-4773-bd28-a7d79bea8e21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1439,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0ba2c201-0ae9-43c1-b6c4-fd5d31b4e7cf",
          "title": "tests for /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
          "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cc365a8e-a7d6-4d72-85c7-13894502464a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
              "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronologies/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronologies/8532', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "948c9b12-11d0-4ce5-b343-634ef96c55c7",
                  "parentUUID": "cc365a8e-a7d6-4d72-85c7-13894502464a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "948c9b12-11d0-4ce5-b343-634ef96c55c7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eb793d1a-2d3a-4730-a737-920e4fa91b6b",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0af2a824-cec3-42ee-b7a8-80dec347ce04",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 6855, 'familyname': 'commodo amet', 'contactname': 'dolore nisi', 'contactstatus': 'extant', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "76b55998-1b1f-440e-a18f-b4011bd275b7",
                  "parentUUID": "0af2a824-cec3-42ee-b7a8-80dec347ce04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "76b55998-1b1f-440e-a18f-b4011bd275b7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "335ba05b-ae54-4922-b521-bd74ccb1990a",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7e7046f2-f72b-4818-82a1-595b22f9b611",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/9626/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "50d9fe86-ab46-4a2d-ba66-5c4d917533a5",
                  "parentUUID": "7e7046f2-f72b-4818-82a1-595b22f9b611",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "50d9fe86-ab46-4a2d-ba66-5c4d917533a5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "303e34a6-bdb9-44a2-b033-77c939a30e61",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2666fa0d-1e54-4a1f-9649-4cf375a17385",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "83761a90-9aa9-4742-9a6c-3b052c433b57",
                  "parentUUID": "2666fa0d-1e54-4a1f-9649-4cf375a17385",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "83761a90-9aa9-4742-9a6c-3b052c433b57"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ca1aeb19-b988-4ac4-b022-c5a6c6dbfdbc",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "15029d60-984d-43c1-b36e-1fa6c1440b5c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Chinese Pollen Database' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "f2b11eaf-d39e-487e-8243-54f0061928c3",
                  "parentUUID": "15029d60-984d-43c1-b36e-1fa6c1440b5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f2b11eaf-d39e-487e-8243-54f0061928c3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "64c0a9e2-d5ca-4bae-a175-76b8bc7371b2",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a6f655a-7e98-47fd-a060-7775ee908454",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'sitename': 'incididunt consequat fugiat nulla', 'database': 'Chinese Pollen Database', 'datasettype': 'insect', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'siteid': 27100, 'datasetid': 853985, 'doi': '10O2481/Q0W2102', 'gpid': 756, 'keyword': 'modern', 'contactid': 8492, 'taxa': 'officia reprehenderit sint', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 8901755, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "a27fa4d9-0608-4743-b3ce-9da66600fd48",
                  "parentUUID": "8a6f655a-7e98-47fd-a060-7775ee908454",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a27fa4d9-0608-4743-b3ce-9da66600fd48"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "26cf9bd7-6218-40e2-be76-772a309a3891",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dccb4ba0-2562-4bd3-a4ab-b5be0fe471ff",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/4237/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "ea26b14b-3e12-45ed-957b-97a8908de343",
                  "parentUUID": "dccb4ba0-2562-4bd3-a4ab-b5be0fe471ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ea26b14b-3e12-45ed-957b-97a8908de343"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c3e112f0-be0d-48f8-8d7f-1209c51b3477",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f4ae35e0-3794-4599-976d-daa9dc45381d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "e785e39b-0765-4df0-a25d-2a820b4b4683",
                  "parentUUID": "f4ae35e0-3794-4599-976d-daa9dc45381d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e785e39b-0765-4df0-a25d-2a820b4b4683"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "778e9fd1-415c-407e-892a-ef898a42e9e5",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8badfe30-ea9b-4bf6-bf0d-029009973b63",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "c604f5d3-f3e3-41c1-aac2-2329ff069eb4",
                  "parentUUID": "8badfe30-ea9b-4bf6-bf0d-029009973b63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c604f5d3-f3e3-41c1-aac2-2329ff069eb4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "488fb474-866f-4c50-960d-9362f6e2ab82",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "40e72c4a-574e-4c3f-9012-043a1c20ba58",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/7316/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "fff7eb0b-4531-45bf-bfd3-907d8571492b",
                  "parentUUID": "40e72c4a-574e-4c3f-9012-043a1c20ba58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fff7eb0b-4531-45bf-bfd3-907d8571492b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a6e73d03-f4bb-4539-a49a-335576c3d8a8",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0dd0c81-d281-4aa9-bf99-9d3b97ee77da",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "13fa4f2c-a5c7-4d05-bb9e-5871d70c8597",
                  "parentUUID": "d0dd0c81-d281-4aa9-bf99-9d3b97ee77da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "13fa4f2c-a5c7-4d05-bb9e-5871d70c8597"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "135858b2-43cf-4cfe-8d70-64795bb8ca4c",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "26be3fdb-51fc-4442-91b5-042fa6b9586a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "dcf4af7a-1c11-417c-8929-daa404d8e865",
                  "parentUUID": "26be3fdb-51fc-4442-91b5-042fa6b9586a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "dcf4af7a-1c11-417c-8929-daa404d8e865"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fd8752af-5571-42f9-b4a6-b0ac4b2a22bf",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "32abc6e1-e66f-474d-87a6-0a3b09fb0fda",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "8a64f751-d639-4857-ae17-01d85b07c159",
                  "parentUUID": "32abc6e1-e66f-474d-87a6-0a3b09fb0fda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8a64f751-d639-4857-ae17-01d85b07c159"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1519caf3-1a26-41a2-8410-3f900ef31ea1",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "23e90713-9022-402e-9e56-45d8b0eb465c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "3c19b306-5de6-4501-bb1e-4145dcacbc89",
                  "parentUUID": "23e90713-9022-402e-9e56-45d8b0eb465c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3c19b306-5de6-4501-bb1e-4145dcacbc89"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "febd29fe-9617-4100-b68e-3eafb04bc23a",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0d8e7726-1446-4e56-a9d2-7fdb09b89b07",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 719, 'contactid': 7582, 'datasettype': 'vertebrate fauna', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 1045234 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "1addd697-fce0-4840-8417-f6cc304db6db",
                  "parentUUID": "0d8e7726-1446-4e56-a9d2-7fdb09b89b07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1addd697-fce0-4840-8417-f6cc304db6db"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "219071e4-deff-4bf3-95a8-020bcadfe58a",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "084b58b2-9af2-438d-8249-09771075f20f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "72a26357-20cb-4494-a0c6-dc3f29fd4efe",
                  "parentUUID": "084b58b2-9af2-438d-8249-09771075f20f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "72a26357-20cb-4494-a0c6-dc3f29fd4efe"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ed619fee-a3de-42b3-b70b-9f3fe8979256",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "43ce858b-8758-4f29-ac92-cd1248dce989",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'et', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "2b15bdb8-7fb0-4998-966d-d21a4a1f31fd",
                  "parentUUID": "43ce858b-8758-4f29-ac92-cd1248dce989",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2b15bdb8-7fb0-4998-966d-d21a4a1f31fd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "08d6695b-4a43-4755-9de9-1b11c02b7e1f",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "078053f1-0d76-4f10-ad18-78966f64e132",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/ex', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "0ee98067-0e1f-46d1-b39c-114afb785e01",
                  "parentUUID": "078053f1-0d76-4f10-ad18-78966f64e132",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0ee98067-0e1f-46d1-b39c-114afb785e01"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d929eeba-c066-4b23-886b-13cad2b43449",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e35415fb-8b75-4756-a49a-6c4f3a908c16",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "1d538db6-0278-4645-89ae-798ed13d4545",
                  "parentUUID": "e35415fb-8b75-4756-a49a-6c4f3a908c16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1d538db6-0278-4645-89ae-798ed13d4545"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3aeb072d-bf4f-4b9c-9334-bd32341cc755",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "84e65ede-3eae-4d7d-84c9-4098c176f672",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "780f90be-795f-4b27-8f83-f76d1e343f5b",
                  "parentUUID": "84e65ede-3eae-4d7d-84c9-4098c176f672",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "780f90be-795f-4b27-8f83-f76d1e343f5b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6bc84b53-733a-4b4c-8493-e35ac651f3c1",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "17f709db-d679-4903-bb5d-fe1f5ba42906",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 756, 'gpname': 'Canada', 'rank': 4, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "5adf09b2-0641-40e2-9e13-d0fb61fef98f",
                  "parentUUID": "17f709db-d679-4903-bb5d-fe1f5ba42906",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5adf09b2-0641-40e2-9e13-d0fb61fef98f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2397d4a1-a7ae-48cb-932d-af55fe5e4b98",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fc094552-e045-43c1-b3af-73cef7ba4ea9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/3925/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "5a87bf27-5d3f-4de3-ba69-8c0f47b73e44",
                  "parentUUID": "fc094552-e045-43c1-b3af-73cef7ba4ea9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5a87bf27-5d3f-4de3-ba69-8c0f47b73e44"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "20b5116f-93a1-471f-a43d-a0b140ffa969",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2729b560-4dba-42f1-829c-cbf451334861",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/9582/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "02145eda-e75d-4c45-9342-958575a4ccf0",
                  "parentUUID": "2729b560-4dba-42f1-829c-cbf451334861",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "02145eda-e75d-4c45-9342-958575a4ccf0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e6f7a952-8758-497f-98c2-16e4ae777d69",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4136ecc2-69f1-4bbd-a107-ab2e5258461f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/4249', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "40838adf-137a-4f97-b152-779a569359c2",
                  "parentUUID": "4136ecc2-69f1-4bbd-a107-ab2e5258461f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "40838adf-137a-4f97-b152-779a569359c2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7095756e-ad22-4a30-8208-30e5995c6c71",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b12128d5-94ab-42b8-a5c3-5671ae92ebfb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'aliqua', 'taxonid': 4038, 'siteid': 23026, 'sitename': 'quis Duis', 'datasettype': 'physical sedimentology', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 23087092, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "b76cc4e1-9b40-4dec-be33-ad655e2908a8",
                  "parentUUID": "b12128d5-94ab-42b8-a5c3-5671ae92ebfb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b76cc4e1-9b40-4dec-be33-ad655e2908a8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d36eb59c-4abd-4922-a850-f2834614ccf0",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "88dfad07-f20c-493e-81ba-12cb3b7a4068",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "d1a42543-ba36-4326-aba8-24a6232b9aaa",
                  "parentUUID": "88dfad07-f20c-493e-81ba-12cb3b7a4068",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d1a42543-ba36-4326-aba8-24a6232b9aaa"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e0fee052-2535-4fe1-8713-3e12d59905ca",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "363d3311-f6be-4eb8-9fa4-6893be551165",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'id in laborum elit', 'taxonid': 798, 'siteid': 24119, 'sitename': 'culpa quis ea sed', 'datasettype': 'biomarker', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 5522348, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "406728db-e808-4722-aa3c-0d3a04cecad5",
                  "parentUUID": "363d3311-f6be-4eb8-9fa4-6893be551165",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "406728db-e808-4722-aa3c-0d3a04cecad5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "288827d5-e45e-4ea0-b953-107e5d46cb98",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3cf5c359-71f2-47e2-bc10-54d4569cccab",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "93211b7e-22b9-4771-8d60-0df8b0a17230",
                  "parentUUID": "3cf5c359-71f2-47e2-bc10-54d4569cccab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "93211b7e-22b9-4771-8d60-0df8b0a17230"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2f05ac71-6bff-4c06-9f53-7b861c0fb250",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fcd28ad3-4fdb-4744-947f-db100e76f491",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 10909, 'datasetid': 99593405, 'siteid': 3025, 'familyname': 'ex consectetur et esse', 'pubtype': 'Undergraduate thesis', 'year': 1693, 'search': 'dolore est', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "ac0c2eac-5dc5-4f7d-a21c-4c2c003a6045",
                  "parentUUID": "fcd28ad3-4fdb-4744-947f-db100e76f491",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ac0c2eac-5dc5-4f7d-a21c-4c2c003a6045"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "76c6d73d-69db-4cca-acd7-31c4f4f610e3",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "532e3185-beba-4070-b3c3-f30bdb97ba28",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/2780', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "7d54f17c-df6b-44b2-8f96-6bd0763ce374",
                  "parentUUID": "532e3185-beba-4070-b3c3-f30bdb97ba28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7d54f17c-df6b-44b2-8f96-6bd0763ce374"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4518b7da-23b6-4816-9fec-eed81df9ec81",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "35686e05-273d-42c5-8909-b588cae925b6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'sitename': 'aute Lorem', 'database': 'African Pollen Database', 'datasettype': 'X-ray fluorescence (XRF)', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'siteid': 15479, 'datasetid': 81605490, 'doi': '10`211565/MR-VD', 'gpid': 756, 'keyword': 'beyond radiocarbon', 'contactid': 16386, 'taxa': 'qui non', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 11546807, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "00ed15fe-4f93-4be6-929a-a5f1d253b208",
                  "parentUUID": "35686e05-273d-42c5-8909-b588cae925b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "00ed15fe-4f93-4be6-929a-a5f1d253b208"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "106d4951-b6fb-4fa9-bdf9-2eb797c3b755",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a8dfc222-4c8c-44f5-b229-0556a9d9deaa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/5407/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "7087c56b-7ffd-4dfb-a1db-52bb69b46f13",
                  "parentUUID": "a8dfc222-4c8c-44f5-b229-0556a9d9deaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7087c56b-7ffd-4dfb-a1db-52bb69b46f13"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "332ad869-a90f-497f-9d67-c122f1769956",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e3d40e53-5426-4fef-acd9-d4ab98307127",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/3467/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "d04edd83-b466-4cdb-822d-d82d7735e581",
                  "parentUUID": "e3d40e53-5426-4fef-acd9-d4ab98307127",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d04edd83-b466-4cdb-822d-d82d7735e581"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "70281a5e-50b5-4de3-b357-99ebcb29c134",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3263e299-9114-4b7d-8a66-6df5d6c378a1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1298/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "8005734c-3ee2-4d93-ac6e-f5904b2981d7",
                  "parentUUID": "3263e299-9114-4b7d-8a66-6df5d6c378a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8005734c-3ee2-4d93-ac6e-f5904b2981d7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c057626b-a267-4aa2-a010-f3c0332980ee",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c3761231-5d01-4157-b843-132cc356555b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "b25f3185-81cd-448b-83ee-cf81a601a9ae",
                  "parentUUID": "c3761231-5d01-4157-b843-132cc356555b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b25f3185-81cd-448b-83ee-cf81a601a9ae"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3fd1c92e-1eba-48eb-9b95-fa456fcdc4b9",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dfc30df3-d8fe-4d1e-90a8-8100d6d4593f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "21fe4715-7e01-49fd-aa55-a3b2fbd42d88",
                  "parentUUID": "dfc30df3-d8fe-4d1e-90a8-8100d6d4593f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "21fe4715-7e01-49fd-aa55-a3b2fbd42d88"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "55b380f0-3a16-4466-b258-ad8281ebb4a6",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad30e515-d000-48c1-bd71-3b1bd21a263d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "2cf2e3bd-7657-4f15-b55a-ec6ed565d8fd",
                  "parentUUID": "ad30e515-d000-48c1-bd71-3b1bd21a263d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2cf2e3bd-7657-4f15-b55a-ec6ed565d8fd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "28e62988-57b8-416a-8089-fe756e714ffc",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4bc2c500-5b96-48f9-9f6e-1f7f5561df1f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "8af3445e-83aa-40fb-a203-bc4627846c6b",
                  "parentUUID": "4bc2c500-5b96-48f9-9f6e-1f7f5561df1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8af3445e-83aa-40fb-a203-bc4627846c6b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9482a10d-4db8-41af-955f-d81e8b58316e",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b378f199-f127-4b1a-8da9-f21ba402c223",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "66ba0229-37c2-41c3-aeef-925f468ebc51",
                  "parentUUID": "b378f199-f127-4b1a-8da9-f21ba402c223",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "66ba0229-37c2-41c3-aeef-925f468ebc51"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f37821dc-593f-44b2-95f5-08736ca7a15a",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "78578ff9-2124-4040-830e-eb532c68b07a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "c825f781-9f6f-41a5-a323-c576b2b46d63",
                  "parentUUID": "78578ff9-2124-4040-830e-eb532c68b07a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c825f781-9f6f-41a5-a323-c576b2b46d63"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "82ae9e01-31b9-4dc1-b5cc-ecb3e7b17c9e",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "40beeb28-5e6a-4aad-b313-ce523950e507",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'dolor Ut dolor cillum', 'taxongroup': 'aute irure', 'ecolgroup': 'sint in ut ea proident', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "a50180e3-fed2-43a9-aa8c-27cc6815bae4",
                  "parentUUID": "40beeb28-5e6a-4aad-b313-ce523950e507",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a50180e3-fed2-43a9-aa8c-27cc6815bae4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dd55a332-f2b7-4edb-bc01-b89d6d2a9be3",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "74721879-b1a3-4d17-a156-deaa3298cdb6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/1479/occurrences', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "5c206550-ecfa-4446-89cb-b2c9fa4e113c",
                  "parentUUID": "74721879-b1a3-4d17-a156-deaa3298cdb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5c206550-ecfa-4446-89cb-b2c9fa4e113c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "231b2e7c-704b-41bf-83bf-cf5970a167a1",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c4014103-92fd-4342-89de-14ae5586814c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "ae14027a-da7d-4429-b0bd-90c8abc95be7",
                  "parentUUID": "c4014103-92fd-4342-89de-14ae5586814c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ae14027a-da7d-4429-b0bd-90c8abc95be7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}