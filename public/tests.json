{
  "stats": {
    "suites": 209,
    "tests": 194,
    "passes": 0,
    "pending": 0,
    "failures": 194,
    "start": "2021-10-21T18:08:45.419Z",
    "end": "2021-10-21T18:08:45.854Z",
    "duration": 435,
    "testsRegistered": 194,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d266dd3d-29c6-48ad-b488-e9300ca54117",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [
      {
        "title": "\"after each\" hook in \"{root}\"",
        "fullTitle": "\"after each\" hook in \"{root}\"",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
        "err": {},
        "isRoot": true,
        "uuid": "2f63a877-c6c2-4065-ac02-c273de4cc456",
        "isHook": true,
        "skipped": false
      }
    ],
    "tests": [],
    "suites": [
      {
        "uuid": "e4a2153b-f338-4e32-8527-57e86eb58a30",
        "title": "Get chronology data by datasetid:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
        "file": "/test/chronologies.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "A call to two datasets returns two datasets of data:",
            "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
            "timedOut": false,
            "duration": 9,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "2f60f239-00fc-4d8b-9af2-b9355779aaab",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "2f60f239-00fc-4d8b-9af2-b9355779aaab"
        ],
        "pending": [],
        "skipped": [],
        "duration": 9,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "d0dcf2c7-1ebf-4221-a3ce-97e41c1e4b25",
        "title": "Get contact data:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
        "file": "/test/contacts.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "An empty query redirects to the api documentation.",
            "fullTitle": "Get contact data: An empty query redirects to the api documentation.",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/')\n  .set('Accept', 'application/json')\n  .expect(302)\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "905d8def-1c17-40b0-be55-959793b643dd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The default limit of 25 should be reached for contact data:",
            "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "8c6d398e-75d6-487b-a86f-0ef51d84bf57",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The example in the swagger should return an object:",
            "fullTitle": "Get contact data: The example in the swagger should return an object:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "ae8553b6-fbb7-4025-b67e-52bddc197d3d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Contact queries should be case insensitive:",
            "fullTitle": "Get contact data: Contact queries should be case insensitive:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "64d7c5a5-48af-4e56-81c7-c5c095a8ebab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Changing the limit should change the number of contacts retrieved:",
            "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "377a0cf3-841c-48dd-a71f-a74f55bbdcfe",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A single contact (12) should be returned.",
            "fullTitle": "Get contact data: A single contact (12) should be returned.",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "c7106bfe-bf2a-4c8b-af93-db9b7f97872d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "All contacts from datasets should be returned.",
            "fullTitle": "Get contact data: All contacts from datasets should be returned.",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "1279fa67-e790-4fc4-a231-236f9c55db4d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The length of returned contacts should be equivalent to the number of datasets.",
            "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "9c910913-81e9-4cc1-ad2e-524191da7aa5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The length of returned contacts should be equivalent to the number of sites.",
            "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "66bf22b1-5cd0-4c1b-b274-ed3a166b0a02",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "905d8def-1c17-40b0-be55-959793b643dd",
          "8c6d398e-75d6-487b-a86f-0ef51d84bf57",
          "ae8553b6-fbb7-4025-b67e-52bddc197d3d",
          "64d7c5a5-48af-4e56-81c7-c5c095a8ebab",
          "377a0cf3-841c-48dd-a71f-a74f55bbdcfe",
          "c7106bfe-bf2a-4c8b-af93-db9b7f97872d",
          "1279fa67-e790-4fc4-a231-236f9c55db4d",
          "9c910913-81e9-4cc1-ad2e-524191da7aa5",
          "66bf22b1-5cd0-4c1b-b274-ed3a166b0a02"
        ],
        "pending": [],
        "skipped": [],
        "duration": 9,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "6a1c11e5-ce9a-4c2d-b76d-5170fb4b6658",
        "title": "Get datasets any number of ways:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
        "file": "/test/datasets.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Asking for the datasets associated with Lake Tulane work:",
            "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site', 'dataset');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "46df1be5-129b-4033-97a0-0f75ae8254da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset by singular id & return same id:",
            "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "04e7c314-9c24-4ccc-ae84-0bfe7f30e998",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset from siteid gives us siteids back and datasets:",
            "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "8095512e-d5f4-4f02-a9b4-37a240be04b5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset by comma separated ids & return same ids:",
            "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "72f54532-9bb1-427f-ac4f-7182a4de3907",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Returns all key elements of the object:",
            "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "8f6f2f30-c5bd-4f06-a321-424534601cc0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Limits work:",
            "fullTitle": "Get datasets any number of ways: Limits work:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "8e2b9130-d077-465e-a531-5b877b539754",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Works with age validation:",
            "fullTitle": "Get datasets any number of ways: Works with age validation:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "3238a423-4456-4cdd-9465-302e06b61b79",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "46df1be5-129b-4033-97a0-0f75ae8254da",
          "04e7c314-9c24-4ccc-ae84-0bfe7f30e998",
          "8095512e-d5f4-4f02-a9b4-37a240be04b5",
          "72f54532-9bb1-427f-ac4f-7182a4de3907",
          "8f6f2f30-c5bd-4f06-a321-424534601cc0",
          "8e2b9130-d077-465e-a531-5b877b539754",
          "3238a423-4456-4cdd-9465-302e06b61b79"
        ],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 50000
      },
      {
        "uuid": "c6538ea1-5a6f-43b1-9914-99864598e98c",
        "title": "Get geopolitical data:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
        "file": "/test/geopolitical.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "An empty query redirects to the api documentation.",
            "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "ab7fb46b-312d-43d6-9805-9a303cc54371",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The default limit of 25 should be reached for country level data:",
            "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/geopolitical.js:28:38)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "45ab767a-5ab5-4532-b755-0331977182ae",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Changing the limit should change the number of countries retrieved:",
            "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/geopolitical.js:37:38)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "91668e26-5695-4508-8cf2-b5f555171c45",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A single geopolitical unit (12) should be returned.",
            "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/geopolitical.js:46:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "c25363cc-863e-4ae0-8532-b015f29c73b5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "ab7fb46b-312d-43d6-9805-9a303cc54371",
          "45ab767a-5ab5-4532-b755-0331977182ae",
          "91668e26-5695-4508-8cf2-b5f555171c45",
          "c25363cc-863e-4ae0-8532-b015f29c73b5"
        ],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "790b8499-84a5-49b1-8597-0218ae4dc5c0",
        "title": "Any path goes to the api documentation:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
        "file": "/test/neotoma_test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "`api-docs` redirects to the api documentation.",
            "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "bdc6be48-777c-47a7-ae0b-611bf700d8a9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "bdc6be48-777c-47a7-ae0b-611bf700d8a9"
        ],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "628f7dca-42af-4ccf-b658-bcdb6815fc1c",
        "title": "Get occurrence data any number of ways:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
        "file": "/test/occurrence.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get occurrence by singular id & return same id:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "74c29107-2db7-4481-875e-24488d3c25ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get the Flyover test call:",
            "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "e3da6fbd-12b8-4498-aab7-eb6a9a225191",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Failing Canis test works:",
            "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "1af59452-ed28-4723-a8be-4afd24769d5d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrence by taxon:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "c551a095-9527-4f8e-9f88-550d6fd363c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Break occurrences by flipping altitudes:",
            "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "c65f7a66-7567-4a81-ba24-c94d12d94141",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Break occurrences by flipping ages:",
            "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "9ee20abb-b750-480d-a195-995e1e6d391f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Occurrences filter by age:",
            "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "be0a85b1-8739-4468-b551-4f8173743e69",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences with comma separated fields:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "a7a2db1f-5f74-4876-828d-d35a48447e30",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences with comma separated taxa:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "3f09c29c-2b5d-4aa9-b748-598e3806e9a7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get hierarchical occurrences with comma separated taxa:",
            "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "cb2607d1-db17-4e53-a434-d64d3454c449",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences returns lower taxa:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "b7c51576-89a8-4785-bec7-e2d5a98fe2ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences with mammals and lower taxa works:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "99d06cbc-615b-4b37-9b9f-da8856b73ef3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences using taxon and age bounds:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "61edeb7c-2c7d-4017-a7fa-ef3380af3c49",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "74c29107-2db7-4481-875e-24488d3c25ee",
          "e3da6fbd-12b8-4498-aab7-eb6a9a225191",
          "1af59452-ed28-4723-a8be-4afd24769d5d",
          "c551a095-9527-4f8e-9f88-550d6fd363c7",
          "c65f7a66-7567-4a81-ba24-c94d12d94141",
          "9ee20abb-b750-480d-a195-995e1e6d391f",
          "be0a85b1-8739-4468-b551-4f8173743e69",
          "a7a2db1f-5f74-4876-828d-d35a48447e30",
          "3f09c29c-2b5d-4aa9-b748-598e3806e9a7",
          "cb2607d1-db17-4e53-a434-d64d3454c449",
          "b7c51576-89a8-4785-bec7-e2d5a98fe2ee",
          "99d06cbc-615b-4b37-9b9f-da8856b73ef3",
          "61edeb7c-2c7d-4017-a7fa-ef3380af3c49"
        ],
        "pending": [],
        "skipped": [],
        "duration": 12,
        "root": false,
        "rootEmpty": false,
        "_timeout": 30000
      },
      {
        "uuid": "914890fb-f634-4e2d-ad30-7de5b796a63a",
        "title": "Get publication data any number of ways:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
        "file": "/test/publications.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get publication by singular id & return same id:",
            "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "fe870fd9-eba3-479f-8e6c-d44ba5cb6fd2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by comma sepatarated ids:",
            "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "64476990-7884-4bdb-8881-497a8b611729",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by querying author:",
            "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "d5104fe7-bb05-49a0-bc72-7d0e71ce429e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publications using pubs with missing links:",
            "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "73cee092-2837-4231-889f-cfdf15b1f750",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by site id:",
            "fullTitle": "Get publication data any number of ways: Get publication by site id:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "384accc2-1cb8-4d14-a343-336fd23b7632",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by site id finds pubs for all sites:",
            "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "98be353d-9dee-4011-ae83-0e0054c16962",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by dataset id finds pubs for all datasets:",
            "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "e5929422-27b1-4b8c-9032-69b0f5f3b89a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "fe870fd9-eba3-479f-8e6c-d44ba5cb6fd2",
          "64476990-7884-4bdb-8881-497a8b611729",
          "d5104fe7-bb05-49a0-bc72-7d0e71ce429e",
          "73cee092-2837-4231-889f-cfdf15b1f750",
          "384accc2-1cb8-4d14-a343-336fd23b7632",
          "98be353d-9dee-4011-ae83-0e0054c16962",
          "e5929422-27b1-4b8c-9032-69b0f5f3b89a"
        ],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      },
      {
        "uuid": "d0b851ff-099f-40fe-9282-2d960bc458f1",
        "title": "GET /v1.5/apps/DatasetTypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 6,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "a5f34ae7-646e-4421-977d-21e53e559db2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "a5f34ae7-646e-4421-977d-21e53e559db2"
        ],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5bb028ea-2ef3-475c-b0d7-b85863f10577",
        "title": "GET /v1.5/apps/TaxaInDatasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "d7586fdb-fbe8-449f-a6b7-7c7fd119fec4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "d7586fdb-fbe8-449f-a6b7-7c7fd119fec4"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "de8ceaa5-60a9-4cd1-a254-3dd0ba8d8863",
        "title": "GET /v1.5/apps/collectionTypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "2978f674-5d89-4509-b534-d508aeb9eec9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "2978f674-5d89-4509-b534-d508aeb9eec9"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "58cafcdb-543b-46b4-ab80-5f75fdb22c92",
        "title": "GET /v1.5/data/contacts/{contactid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "467a7d96-3026-46de-aa12-5e693d8711d8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "467a7d96-3026-46de-aa12-5e693d8711d8"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "051d1fb7-b377-40dc-9666-cbff6b63982f",
        "title": "GET /v1.5/data/datasets/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "f5b89b37-6ba2-4125-99b5-444c9ea6d49f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "f5b89b37-6ba2-4125-99b5-444c9ea6d49f"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cb54d4fb-f2a4-456a-bbb9-df9e043bad23",
        "title": "GET /v1.5/data/downloads/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "6363fdcb-050a-478c-a9ba-db7639a66a57",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "6363fdcb-050a-478c-a9ba-db7639a66a57"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f9bb6dd5-26db-4d51-96dc-31ff5f448cd7",
        "title": "GET /v1.5/data/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "de2e7e8f-2ede-4504-ab35-711a761db090",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "de2e7e8f-2ede-4504-ab35-711a761db090"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9faaaa1f-67aa-4d94-b16c-316a8ec9146b",
        "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "87c9882a-6a77-41af-aea2-95247858ffa3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "87c9882a-6a77-41af-aea2-95247858ffa3"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "265e4a8c-2e14-47e9-9a95-6dcdc94d3db2",
        "title": "GET /v1.5/data/occurrence/{occurrenceid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "6dd93362-439f-4b22-8427-70dfbcbba573",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "6dd93362-439f-4b22-8427-70dfbcbba573"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "bf74440e-efd2-44d3-9ae8-8ee702e04809",
        "title": "GET /v1.5/data/sites/{siteid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "6e6944d9-ad7f-44df-aa90-8bb5e3bc6dec",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "6e6944d9-ad7f-44df-aa90-8bb5e3bc6dec"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e2083d6a-3966-4e52-a975-2bac5c2a4f59",
        "title": "GET /v1.5/dbtables/{table}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "fe0e3b4f-fde3-4771-bd10-32cfa1842d0f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "fe0e3b4f-fde3-4771-bd10-32cfa1842d0f"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "04416f69-2d9e-4e2f-82eb-1fbc5d044621",
        "title": "GET /v2.0/apps/authorpis",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "686f99bf-8a75-4275-a9bb-23348c8d6b50",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "686f99bf-8a75-4275-a9bb-23348c8d6b50"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e76de636-3476-492f-982d-6f22513e155b",
        "title": "GET /v2.0/apps/collectiontypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "8914319b-682a-4e58-bbaf-72f3a4e0973a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "8914319b-682a-4e58-bbaf-72f3a4e0973a"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b8fb9324-b904-469a-b3fd-4847552951b5",
        "title": "GET /v2.0/apps/datasettypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "b59062c7-171d-47a8-80b2-58ca893446da",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "b59062c7-171d-47a8-80b2-58ca893446da"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "bbc44f43-1250-4be9-b272-edd56a73aab3",
        "title": "GET /v2.0/apps/depositionalenvironments/root",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "404bb813-4134-419e-b0ef-39a888a62a8b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "404bb813-4134-419e-b0ef-39a888a62a8b"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0429da4d-d5a3-426e-9c94-eb49b8fb01ad",
        "title": "GET /v2.0/apps/keywords",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "1dd2c78e-368b-46fd-9b7e-b3a4f88ac5f7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "1dd2c78e-368b-46fd-9b7e-b3a4f88ac5f7"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6ff8a118-375a-429f-a934-b8d6f256602c",
        "title": "GET /v2.0/apps/taphonomysystems",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "acb6bd7b-3995-454f-92de-1ce043848f1b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "acb6bd7b-3995-454f-92de-1ce043848f1b"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "92d922c1-ac82-4535-a60d-0aedf921b4a0",
        "title": "GET /v2.0/apps/taxagrouptypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "70c342e4-7866-4e0a-b44b-b20a9646aa04",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "70c342e4-7866-4e0a-b44b-b20a9646aa04"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6aa8c6ab-dbbc-4601-ac7e-936cdda90359",
        "title": "GET /v2.0/apps/taxaindatasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 3,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "158516bc-eee3-4357-adba-4b2f27ab9108",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "158516bc-eee3-4357-adba-4b2f27ab9108"
        ],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3be919e8-0383-4211-85b7-3a3a747f7d1d",
        "title": "GET /v2.0/data/chronology/{chronid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/chronology/{chronid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "e2f48c6e-f045-4c44-bd7e-794bada07ed0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "e2f48c6e-f045-4c44-bd7e-794bada07ed0"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0e790cc1-c173-4b67-883b-1e4936fc5394",
        "title": "GET /v2.0/data/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "b766ce37-3119-406d-b0ca-aa7878fef7be",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "b766ce37-3119-406d-b0ca-aa7878fef7be"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d8670a67-4689-46cd-9a80-f3613657d815",
        "title": "GET /v2.0/data/contacts/{contactid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "23ced706-a549-4811-9179-b50c07853de7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "23ced706-a549-4811-9179-b50c07853de7"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ce4e2aa2-6f6c-4df0-88a3-7d0cddd07d29",
        "title": "GET /v2.0/data/contacts/{contactid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "45cfcc6a-f8fd-4550-ab68-f945154c4716",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "45cfcc6a-f8fd-4550-ab68-f945154c4716"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f4ffecae-af86-465b-9347-448ea9ebfb71",
        "title": "GET /v2.0/data/datasets_elc/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "69ba2353-f9ee-440b-8a1c-4405dc7c1751",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "69ba2353-f9ee-440b-8a1c-4405dc7c1751"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "421f9136-d5e1-4da2-867a-67e8a174585e",
        "title": "GET /v2.0/data/datasets_elc",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "d2fe0c98-3907-43cf-942a-0ba1efaf09f6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "d2fe0c98-3907-43cf-942a-0ba1efaf09f6"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8762ae6b-22ee-4e6e-9b7a-d47c446ddf6d",
        "title": "GET /v2.0/data/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "359e72d1-47ac-4187-ab53-1b26fbd696c0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "359e72d1-47ac-4187-ab53-1b26fbd696c0"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7eb54096-95d8-457d-aaf3-3bd22b944433",
        "title": "GET /v2.0/data/datasets/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "ce274549-d6be-4819-9c7a-52458de7ee11",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "ce274549-d6be-4819-9c7a-52458de7ee11"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "aa4d48a6-d17e-4ad3-a7d3-ae75ac78fd5c",
        "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "d2fd50ad-a82d-4d17-ad28-c82ba7c2b51f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "d2fd50ad-a82d-4d17-ad28-c82ba7c2b51f"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6fd7a346-7c8b-4a75-b336-4700f38152e3",
        "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "1b9b0d33-3daa-4b38-958b-ca19ffbba4de",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "1b9b0d33-3daa-4b38-958b-ca19ffbba4de"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a562cf57-d250-42a5-b2a5-d59b62324d5b",
        "title": "GET /v2.0/data/datasets/{datasetid}/doi",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "43d7e4f5-0200-4249-a50c-d80991221256",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "43d7e4f5-0200-4249-a50c-d80991221256"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "93e0a547-bcd1-4b2c-9395-958e50a763c1",
        "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "841a6a5a-c732-402b-b86f-dbedd3d17488",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "841a6a5a-c732-402b-b86f-dbedd3d17488"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "24211012-cdb0-4d26-95f0-9542e5676533",
        "title": "GET /v2.0/data/datasets/{datasetid}/publications",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "35f0be09-0781-442d-b37e-20e8f3921950",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "35f0be09-0781-442d-b37e-20e8f3921950"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ea08e776-1956-476c-94b3-a62b319eac65",
        "title": "GET /v2.0/data/datasets/{datasetid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "733dbd3f-9a9c-4f1c-88cf-276cac59b34e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "733dbd3f-9a9c-4f1c-88cf-276cac59b34e"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "610204ec-31f9-4a39-a948-8e786254036f",
        "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "3af5776d-cb68-4cf7-98bf-0a5a3f014117",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "3af5776d-cb68-4cf7-98bf-0a5a3f014117"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2d23f48e-63be-4b06-accc-176ca716c496",
        "title": "GET /v2.0/data/datasets/db",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "1e6d53e4-1e80-4cc6-ab0b-1feced5106a8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "1e6d53e4-1e80-4cc6-ab0b-1feced5106a8"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "4b08ca84-f81f-4118-9147-47fc9f24757b",
        "title": "GET /v2.0/data/dbtables",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "ea8214b6-8d03-4e16-ba02-dc7369bca01e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "ea8214b6-8d03-4e16-ba02-dc7369bca01e"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5339338a-b8fc-44b3-80f1-9b705a90da28",
        "title": "GET /v2.0/data/dbtables/{table}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "027d5de5-b6b7-435e-8ec2-ce847c950d32",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "027d5de5-b6b7-435e-8ec2-ce847c950d32"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "834392f7-0283-4d9e-b543-2c9c13d1b705",
        "title": "GET /v2.0/data/downloads/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "6e4f188d-fc2e-4013-a95e-5184cc6310ca",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "6e4f188d-fc2e-4013-a95e-5184cc6310ca"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3e9a8b4e-11d3-4496-8fc4-1d00e6124f59",
        "title": "GET /v2.0/data/frozen/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "ba080149-7aaf-4239-bc90-9d1076762e2c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "ba080149-7aaf-4239-bc90-9d1076762e2c"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ca0bef70-6717-4aed-8b68-445542b5c3ff",
        "title": "GET /v2.0/data/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "d2ce4128-f67c-4777-8397-93754ea8c474",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "d2ce4128-f67c-4777-8397-93754ea8c474"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "48770a91-fc1d-4d48-aa6e-fe7209fc6daa",
        "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "3edc75ff-4d7a-450e-823e-068363934cd5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "3edc75ff-4d7a-450e-823e-068363934cd5"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3e874987-db0d-49ba-aac3-bad71726a5d2",
        "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "cf0d8919-61c9-4a91-ac5e-2de5985378f4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "cf0d8919-61c9-4a91-ac5e-2de5985378f4"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "10e269c5-d7b0-48f2-b763-b4d13d0226d0",
        "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "bb2c8fbd-de4e-404f-824d-a2b01cfc0246",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "bb2c8fbd-de4e-404f-824d-a2b01cfc0246"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6bf6ff85-cc79-4143-b448-e31106742a40",
        "title": "GET /v2.0/data/occurrences",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "51ac9506-6796-4eb6-a4fe-0b47fba8ad43",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "51ac9506-6796-4eb6-a4fe-0b47fba8ad43"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b948da36-3949-4e6f-9f26-29bfb3c20efe",
        "title": "GET /v2.0/data/occurrences/{occurrenceid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "940a7ecd-aec8-4f77-bae8-6d4378ad691c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "940a7ecd-aec8-4f77-bae8-6d4378ad691c"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1c468bc4-8202-468e-8d40-cf83522abcd7",
        "title": "GET /v2.0/data/oxcal/calibrate",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "284b7d76-49e0-4c12-aa4e-68c2df6585f8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "284b7d76-49e0-4c12-aa4e-68c2df6585f8"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0b6e08fb-6327-43a5-a185-5f65ebf9d81a",
        "title": "GET /v2.0/data/pollen",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "5f9c3d17-0511-4667-8573-b983e4130137",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "5f9c3d17-0511-4667-8573-b983e4130137"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0d9b46cf-1396-4bd9-ab38-98db8631f8c9",
        "title": "GET /v2.0/data/pollen/{id}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "d0882708-66d1-414f-b11a-c83888a3b456",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "d0882708-66d1-414f-b11a-c83888a3b456"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "73588791-4bcf-40e1-b618-8bac7a8229f4",
        "title": "GET /v2.0/data/publications",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "ca090015-b058-4d30-814f-1bbb9c5938fd",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "ca090015-b058-4d30-814f-1bbb9c5938fd"
        ],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d6b81f7e-cd34-43e2-87ac-3b1b06009f2e",
        "title": "GET /v2.0/data/publications/{publicationid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "86eda692-9a6c-46ca-8cad-43976c74aae0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "86eda692-9a6c-46ca-8cad-43976c74aae0"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9b96598e-d9d8-4f2b-9811-6013b6e4338c",
        "title": "GET /v2.0/data/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "99a4f785-a362-4fe0-bb71-b4d47675fde6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "99a4f785-a362-4fe0-bb71-b4d47675fde6"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "40310f47-127e-4fa9-a792-6c7f7c741f94",
        "title": "GET /v2.0/data/sites/{siteid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "a3ea4334-5701-4a54-9e86-bbe15b69b76a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "a3ea4334-5701-4a54-9e86-bbe15b69b76a"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b3185317-0a01-474a-ad08-19992a229f05",
        "title": "GET /v2.0/data/sites/{siteid}/chronologies",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "fb5dbb9f-8935-4755-9c34-180b4f96a428",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "fb5dbb9f-8935-4755-9c34-180b4f96a428"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c0e1b0c6-574b-436d-ab25-945360ea3821",
        "title": "GET /v2.0/data/sites/{siteid}/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "b6f04419-e272-4a14-b692-0dee8575d69e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "b6f04419-e272-4a14-b692-0dee8575d69e"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "98f8c3f8-d1b8-4f63-8fb5-afa54dcd76b3",
        "title": "GET /v2.0/data/sites/{siteid}/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "1293a3a0-6557-4063-b2d1-4e2cd25c0391",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "1293a3a0-6557-4063-b2d1-4e2cd25c0391"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9b5b236e-2e72-4382-bbfb-50c1c593d42e",
        "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "b290053d-64bb-4538-9d67-0e7ffdd05c2e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "b290053d-64bb-4538-9d67-0e7ffdd05c2e"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c2775ec4-9347-4e67-b323-603814040e6a",
        "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "755dcf61-deaa-488d-9e45-029c8a7da1b0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "755dcf61-deaa-488d-9e45-029c8a7da1b0"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b0cc0c5c-75d3-452c-af7d-64e49b6d43f9",
        "title": "GET /v2.0/data/sites/{siteid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "a87abd33-b341-41e8-85a9-d767ccecbef4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "a87abd33-b341-41e8-85a9-d767ccecbef4"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "948db0ae-4d24-4b38-a79e-044ae93e820c",
        "title": "GET /v2.0/data/taxa",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "c4f8d787-8de5-46f3-b73c-7edaaa8e45a6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "c4f8d787-8de5-46f3-b73c-7edaaa8e45a6"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "522bd471-481f-4112-a300-fe407cf4cb1d",
        "title": "GET /v2.0/data/summary/dsdbmonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "3f916400-f0fd-47d4-bbfc-32ba9d86937b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "3f916400-f0fd-47d4-bbfc-32ba9d86937b"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2d7ed479-7183-4918-b7e2-2e009ccaf242",
        "title": "GET /v2.0/data/summary/dstypemonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "4f883d74-12eb-49f2-9068-b046d9dd5e3b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "4f883d74-12eb-49f2-9068-b046d9dd5e3b"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6367bd98-7544-422d-ab3c-4f637ffc74b2",
        "title": "GET /v2.0/data/summary/rawbymonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "35f44d48-2d66-4245-8962-4e9959e3184f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "35f44d48-2d66-4245-8962-4e9959e3184f"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8bde66d9-124a-4fd7-984f-6b2b4fb8e630",
        "title": "GET /v2.0/data/taxa/{taxonid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "d0777b7e-f60b-4957-9c4c-ee1a3dbb4267",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "d0777b7e-f60b-4957-9c4c-ee1a3dbb4267"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "54f59e16-b651-4693-ac77-2f8f9184d69e",
        "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "67cae836-9a27-41e8-af79-86ca22d77d79",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "67cae836-9a27-41e8-af79-86ca22d77d79"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "17eb8660-2ebe-4787-9f79-90e368d3de5b",
        "title": "GET /v2.0/dbtables/table",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "174dc41f-17ce-4cc3-baf9-5719e1e20d21",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "174dc41f-17ce-4cc3-baf9-5719e1e20d21"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2a64c11a-6b4e-4819-a1e2-a1f6d4c0d089",
        "title": "GET /v2.0/dbtables/tablenames",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
              "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)"
            },
            "isRoot": false,
            "uuid": "9ade67ed-9e2e-4d26-bca2-e28fa4ce5ac4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "9ade67ed-9e2e-4d26-bca2-e28fa4ce5ac4"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "62c23f95-0409-42a6-8dd6-4bc85ba553f0",
        "title": "Get site data any number of ways:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
        "file": "/test/sites.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get site by singular id & return same id:",
            "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "8d45b775-801d-484f-92ec-d5befa107e45",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get site by altitude:",
            "fullTitle": "Get site data any number of ways: Get site by altitude:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "63ec35be-e305-4d45-9771-6f37376a23a7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Break sites by flipping altitudes:",
            "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "68ddde0c-42a5-422c-9e1a-b50c29050067",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Break sites by passing invalid siteid:",
            "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "8b0e1738-f32b-4534-8d18-36e15f03f0cd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get site by contact information for multiple authors:",
            "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "895c6c0e-f9b3-4b31-bebd-1c4d0ace0cfe",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "8d45b775-801d-484f-92ec-d5befa107e45",
          "63ec35be-e305-4d45-9771-6f37376a23a7",
          "68ddde0c-42a5-422c-9e1a-b50c29050067",
          "8b0e1738-f32b-4534-8d18-36e15f03f0cd",
          "895c6c0e-f9b3-4b31-bebd-1c4d0ace0cfe"
        ],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "ce47fefd-ce59-4287-ad68-4c79a3ad237a",
        "title": "Get Neotoma data with geoJSON extents:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
        "file": "/test/spatial.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get occurrence data using a simple geoJSON:",
            "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "741b316a-9752-4b9b-a675-0d33964847d2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get site data using a simple geoJSON:",
            "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "6361345d-0e57-460e-a62b-2f1388f2fa52",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset data using a simple geoJSON:",
            "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "9f0882ae-ebb0-4d95-b4ec-cc496044e8e5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "741b316a-9752-4b9b-a675-0d33964847d2",
          "6361345d-0e57-460e-a62b-2f1388f2fa52",
          "9f0882ae-ebb0-4d95-b4ec-cc496044e8e5"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      },
      {
        "uuid": "f1693c2f-080f-45d9-8d58-7030a9d19eec",
        "title": "Get Neotoma data with WKT extents:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
        "file": "/test/spatial.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get occurrence data using a simple WKT:",
            "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "07323b03-a59f-4ff0-b90b-a9742e2b4fb0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get site data using a simple WKT:",
            "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "435ebb4d-6b39-46b9-8442-510020d450f7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset data using a simple WKT:",
            "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "e62708c8-5ac8-4bf5-8c4a-f0b00740a0f9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset data using a simple WKT:",
            "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "1f8f3c59-038b-4dd2-a25b-499437b7b7de",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "07323b03-a59f-4ff0-b90b-a9742e2b4fb0",
          "435ebb4d-6b39-46b9-8442-510020d450f7",
          "e62708c8-5ac8-4bf5-8c4a-f0b00740a0f9",
          "1f8f3c59-038b-4dd2-a25b-499437b7b7de"
        ],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      },
      {
        "uuid": "94169d09-af17-42de-9ecb-5d5c3461774b",
        "title": "Get taxon data:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
        "file": "/test/taxa.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "An empty query redirects to the api documentation.",
            "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "0527967c-29c8-4166-b269-ebb549d4f43f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A single taxon should be returned by id:",
            "fullTitle": "Get taxon data: A single taxon should be returned by id:",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:26:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "35240e4b-0a17-42f8-ad38-129e7a44ed28",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Taxon queries should be case insensitive:",
            "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:35:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "31d7a10c-f1cb-46fb-9470-9bfb002e9517",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Taxon queries should accept comma separated lists:",
            "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:44:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "603942f2-d0b8-4312-9376-c5cbf8a0f316",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Hierarchical taxon queries should accept comma separated lists:",
            "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:53:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "2272bda1-4cf1-40d7-9694-e0a8b4b3691e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Taxon queries should accept `*` as a wildcard:",
            "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:62:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "6f13f3f5-5bc2-4561-9bde-58c6fa1051ac",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The default limit of 25 should be reached for taxon data:",
            "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:71:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "1f1c3fb0-66f7-4d31-9342-72041e2d2fe3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Changing the limit should change the number of taxa retrieved:",
            "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
            "err": {
              "message": "TypeError: Cannot read property 'body' of undefined",
              "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:80:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "f9303214-218b-4bca-92a2-53d7c8459bbe",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "0527967c-29c8-4166-b269-ebb549d4f43f",
          "35240e4b-0a17-42f8-ad38-129e7a44ed28",
          "31d7a10c-f1cb-46fb-9470-9bfb002e9517",
          "603942f2-d0b8-4312-9376-c5cbf8a0f316",
          "2272bda1-4cf1-40d7-9694-e0a8b4b3691e",
          "6f13f3f5-5bc2-4561-9bde-58c6fa1051ac",
          "1f1c3fb0-66f7-4d31-9342-72041e2d2fe3",
          "f9303214-218b-4bca-92a2-53d7c8459bbe"
        ],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c6a65aa8-1f8b-47cc-ac80-b28a69d55817",
        "title": "tests for /v1.5/apps/DatasetTypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
        "file": "/test/v1.5-apps-DatasetTypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "96fc1e9d-4d1d-41d7-afe6-c9c6f7239103",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
            "file": "/test/v1.5-apps-DatasetTypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                "timedOut": false,
                "duration": 65,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "96fb6c0b-13db-4e33-8a1c-30a3fc646097",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "96fb6c0b-13db-4e33-8a1c-30a3fc646097"
            ],
            "pending": [],
            "skipped": [],
            "duration": 65,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8fc8a882-3b6c-4c1f-a8ae-6c4638a81295",
        "title": "tests for /v1.5/apps/TaxaInDatasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
        "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "44eee80d-fab0-421c-a8ea-ad621a11fc80",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
            "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                "timedOut": false,
                "duration": 5,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "f15f3084-3adb-4c47-9f34-5a83613a4909",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "f15f3084-3adb-4c47-9f34-5a83613a4909"
            ],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "94caea57-49b1-44ff-95c3-ff704afca8be",
        "title": "tests for /v1.5/apps/collectionTypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
        "file": "/test/v1.5-apps-collectionTypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6071c814-2cff-49a4-8545-ba21aa905a8a",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
            "file": "/test/v1.5-apps-collectionTypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "96fe2743-b235-41ac-b334-4a24e6eeb4b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "96fe2743-b235-41ac-b334-4a24e6eeb4b8"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "606d7617-1664-42de-9e7d-9d9b49d84bde",
        "title": "tests for /v1.5/data/contacts/{contactid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
        "file": "/test/v1.5-data-contacts-{contactid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3d318d5b-ec23-4955-b60f-cdcfa7a73d02",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
            "file": "/test/v1.5-data-contacts-{contactid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Contact\"",
                "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "6ea6c054-3c4d-4163-a7af-5c53462d454c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "6ea6c054-3c4d-4163-a7af-5c53462d454c"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5b98b5f2-435b-4fce-9695-b0584e67a2c8",
        "title": "tests for /v1.5/data/datasets/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
        "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cbe23b4a-09fd-494e-9dbf-2d36257d1192",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
            "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "75c5fb1d-d193-420f-ba10-4c815a45964f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "75c5fb1d-d193-420f-ba10-4c815a45964f"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "674a169a-e10a-4563-aa3c-6282fc022073",
        "title": "tests for /v1.5/data/downloads/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
        "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4de1e015-2e62-49ef-aeba-c5b6128b2be6",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
            "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned download object.\"",
                "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "26f464ba-31d0-42c5-9277-996bb54a5299",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "26f464ba-31d0-42c5-9277-996bb54a5299"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "78ca2895-f6fb-4fe4-b959-8d5aa36754c8",
        "title": "tests for /v1.5/data/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
        "file": "/test/v1.5-data-geopoliticalunits-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b13b609f-67dc-4d5f-891e-5b98ec1a5d84",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
            "file": "/test/v1.5-data-geopoliticalunits-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 4504, 'gpname': 'reprehenderit in laboris minim fugiat', 'rank': 3, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "9861d271-c328-4ff0-8a5b-31836a596ab4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "9861d271-c328-4ff0-8a5b-31836a596ab4"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "dfb91c09-8358-43b8-98a9-37681b645bd7",
        "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
        "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "56ecd9c0-19f9-412b-accb-aa99b79a99c4",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
            "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/7815', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "b8384eb0-b433-4427-ac59-e0333ef0005a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "b8384eb0-b433-4427-ac59-e0333ef0005a"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8c9fcb5d-88a1-44fb-a7d9-089edbfdc69f",
        "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
        "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "99de7ae7-5b94-40b6-a61b-22633dabef9d",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
            "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A single occurrence object.\"",
                "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "6c9a6617-32d4-4e5c-869d-f5be5d3ed9e4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "6c9a6617-32d4-4e5c-869d-f5be5d3ed9e4"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8c4804eb-a9bc-476d-84b9-aa65050f195e",
        "title": "tests for /v1.5/data/sites/{siteid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
        "file": "/test/v1.5-data-sites-{siteid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b74584dc-0b7a-4d3c-874a-601a40c7a32b",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
            "file": "/test/v1.5-data-sites-{siteid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of site elements.\"",
                "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "460e10c9-6b98-4ec4-95fb-4140f8896352",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "460e10c9-6b98-4ec4-95fb-4140f8896352"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "16fb5bf3-698c-4484-8467-ce0f88053bb7",
        "title": "tests for /v1.5/dbtables/{table}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
        "file": "/test/v1.5-dbtables-{table}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f265ab8c-f6b1-4d2f-8525-bca43a056d73",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
            "file": "/test/v1.5-dbtables-{table}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned table.\"",
                "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "84b97046-159c-4152-85e9-ad873bc7d5ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "84b97046-159c-4152-85e9-ad873bc7d5ef"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "798aa564-cb32-428c-806c-87c1aba1afeb",
        "title": "tests for /v2.0/apps/authorpis",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
        "file": "/test/v2.0-apps-authorpis-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f776df8e-2ebc-46d0-b7ff-35182d6a7a86",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
            "file": "/test/v2.0-apps-authorpis-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "bcdeaeba-837b-4973-9519-945c01461118",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "bcdeaeba-837b-4973-9519-945c01461118"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ad8c21b2-53ac-4294-9f68-90333ffef394",
        "title": "tests for /v2.0/apps/collectiontypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
        "file": "/test/v2.0-apps-collectiontypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4f2734af-6322-4551-a04e-967303123c16",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
            "file": "/test/v2.0-apps-collectiontypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "c4797df2-b0b9-4329-9280-ccdb2b7e2e9a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "c4797df2-b0b9-4329-9280-ccdb2b7e2e9a"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b837ea6a-7552-4338-ab23-8bef690be5ae",
        "title": "tests for /v2.0/apps/datasettypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
        "file": "/test/v2.0-apps-datasettypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b756c700-ccc0-43cd-865f-664876f5bf14",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
            "file": "/test/v2.0-apps-datasettypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "cdfd581e-2f1c-46f1-98f0-9c046f7858c8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "cdfd581e-2f1c-46f1-98f0-9c046f7858c8"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f0dac7dd-11ce-49b8-8f31-c29293bb673b",
        "title": "tests for /v2.0/apps/depositionalenvironments/root",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
        "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f3c2dd8f-7138-4781-8a17-295e295df504",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
            "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "cb7a4963-1dfd-4a52-b9a3-1d331e9e7ad3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "cb7a4963-1dfd-4a52-b9a3-1d331e9e7ad3"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "bdfd9ec1-81d6-4fb0-abc2-37d7ddc90375",
        "title": "tests for /v2.0/apps/keywords",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
        "file": "/test/v2.0-apps-keywords-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b99e8085-cc2f-41ef-a170-ed7dc9bab3ac",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
            "file": "/test/v2.0-apps-keywords-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "02087f6a-8d08-4090-93be-abbd6b0c915e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "02087f6a-8d08-4090-93be-abbd6b0c915e"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "163f0e10-553e-4b07-9186-1b201d9e353c",
        "title": "tests for /v2.0/apps/taphonomysystems",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
        "file": "/test/v2.0-apps-taphonomysystems-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "489569f2-a20b-4756-97da-979824892f8c",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
            "file": "/test/v2.0-apps-taphonomysystems-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 17 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "f2c2e782-fe75-4916-b06f-ed1eabc44474",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "f2c2e782-fe75-4916-b06f-ed1eabc44474"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e485247d-1c6b-4285-95e3-15ae3a570253",
        "title": "tests for /v2.0/apps/taxagrouptypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
        "file": "/test/v2.0-apps-taxagrouptypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b05a92cc-f01c-4b8d-aeb7-3961af1468d6",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
            "file": "/test/v2.0-apps-taxagrouptypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "f46c5519-9356-4946-95c6-5fbf3d211df2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "f46c5519-9356-4946-95c6-5fbf3d211df2"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "de7391b7-795b-4c30-b040-4d9f4d5cfc18",
        "title": "tests for /v2.0/apps/taxaindatasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
        "file": "/test/v2.0-apps-taxaindatasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "95f0f865-2e3a-486f-a238-86c34f555536",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
            "file": "/test/v2.0-apps-taxaindatasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "1c29590d-8529-4ae2-958a-57456f97011c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "1c29590d-8529-4ae2-958a-57456f97011c"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "192cdac0-96b8-4af2-81f5-7ee56e666679",
        "title": "tests for /v2.0/data/chronology/{chronid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
        "file": "/test/v2.0-data-chronology-{chronid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "61e6a6fd-6fe8-45ae-a3d0-eeff2f14ff8a",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
            "file": "/test/v2.0-data-chronology-{chronid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma chronology object.\"",
                "fullTitle": "tests for /v2.0/data/chronology/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronology/7047', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "6826f102-ca15-4d8a-949b-dbf40a105178",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "6826f102-ca15-4d8a-949b-dbf40a105178"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ec8347bd-b577-481e-a6b4-348cead8479b",
        "title": "tests for /v2.0/data/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
        "file": "/test/v2.0-data-contacts-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4deb3ed4-6f8c-4594-904b-0335ffaf707e",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
            "file": "/test/v2.0-data-contacts-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"contact\"",
                "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 5148, 'familyname': 'commodo ea veniam sit', 'contactname': 'aute anim', 'contactstatus': 'unknown', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "663583d2-27b6-40b4-8b69-73a0057ef752",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "663583d2-27b6-40b4-8b69-73a0057ef752"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d8796c5a-be25-4678-b60d-326322b36d5e",
        "title": "tests for /v2.0/data/contacts/{contactid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
        "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8efb3c31-8e9b-4fb7-94c2-5a54b22a0396",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
            "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma sites object.\"",
                "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "7a96a7c3-80c2-494c-b28d-e358e4dac8b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "7a96a7c3-80c2-494c-b28d-e358e4dac8b8"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b148b28c-ad7e-432f-8d80-991659139cd7",
        "title": "tests for /v2.0/data/contacts/{contactid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
        "file": "/test/v2.0-data-contacts-{contactid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9de797d1-f264-4e73-852e-c49183fe640a",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
            "file": "/test/v2.0-data-contacts-{contactid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma contacts object.\"",
                "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "818e410b-9839-4238-9fa7-b19f9d2b2522",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "818e410b-9839-4238-9fa7-b19f9d2b2522"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c48f1c83-1cb3-4256-be22-d78bc9b8bc74",
        "title": "tests for /v2.0/data/datasets/db",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
        "file": "/test/v2.0-data-datasets-db-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "15ada8ea-b7f7-4e81-bc41-7624cbcbb31f",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
            "file": "/test/v2.0-data-datasets-db-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Datasets\"",
                "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Neotoma Charcoal Data' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "f27a5660-fd4a-41d1-8b59-86b64296f21e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "f27a5660-fd4a-41d1-8b59-86b64296f21e"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d8efd32b-a72f-4302-8b68-4eadcc008c8c",
        "title": "tests for /v2.0/data/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
        "file": "/test/v2.0-data-datasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "50f5170d-8934-4537-a472-cf9176aabf02",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
            "file": "/test/v2.0-data-datasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 24280, 'contactid': 16100, 'datasettype': 'est dolor amet labore commodo', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 12633816 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "67e9c05b-efab-43da-b7eb-bf5f571295f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "67e9c05b-efab-43da-b7eb-bf5f571295f5"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a064ba48-6aa6-4319-bd16-d1be8d3a96d0",
        "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b45dc21f-076d-4f55-b994-fb869279b924",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"chronology\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "9ef65bd0-d93d-4cb0-82c7-afc5607b1f6a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "9ef65bd0-d93d-4cb0-82c7-afc5607b1f6a"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b94eabb8-b11f-45fd-b624-3365d4d30f98",
        "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "55ef3377-8ad4-47aa-8071-fa8cd7ee0fb3",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"contact\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "78be892d-7cbc-43f7-b04b-ca0321e63cb0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "78be892d-7cbc-43f7-b04b-ca0321e63cb0"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f477e004-e88f-4e5c-b7a2-e186f4da6750",
        "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9a5f0afa-4218-45bc-8bfb-20160a4e7b5f",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"DOI\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "a4d625b3-73fe-4857-b2e7-fc6c6642bb5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "a4d625b3-73fe-4857-b2e7-fc6c6642bb5e"
            ],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "4a335c0b-db8b-4d62-9e75-54f8ed052891",
        "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8c56ea4b-cc42-4f06-a2d7-573535f882c7",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Lithology\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "7d04f90b-93ea-42e3-96e6-791841d177ae",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "7d04f90b-93ea-42e3-96e6-791841d177ae"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d8a75d87-1715-4199-93a2-49eea1fe8f6a",
        "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "185094bf-759a-4cec-9dfe-ccb68f9d4aa1",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Publication\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "3a68116e-9ba2-4788-ab73-dcc9ac19698f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "3a68116e-9ba2-4788-ab73-dcc9ac19698f"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e96b24f8-2500-4b1d-a7d2-cf75af003d35",
        "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "15ebf918-e6e9-42ca-b5ba-ee3e09184b63",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Site\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/681/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "27eae46e-9a4f-4f31-8f72-310c4a213539",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "27eae46e-9a4f-4f31-8f72-310c4a213539"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c53d5d0c-8ddf-4bb7-8670-c36b7f2e1d8c",
        "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8cbed5e4-b143-431e-acea-bf645d6cbf91",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Taxa\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "43364316-aa60-497e-96e0-995be9560a02",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "43364316-aa60-497e-96e0-995be9560a02"
            ],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "05b3b718-97f1-4592-af1e-793a696d2068",
        "title": "tests for /v2.0/data/datasets/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f3d36bf5-9ddf-4c68-b505-e25fbe117acb",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "1f198212-df31-486b-8f68-60cc0daa4844",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "1f198212-df31-486b-8f68-60cc0daa4844"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "bb29b171-76e7-43e8-9fd3-1d3f88be064d",
        "title": "tests for /v2.0/data/datasets_elc",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
        "file": "/test/v2.0-data-datasets_elc-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3aec7413-a839-42ad-a9b8-797a8db659e1",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
            "file": "/test/v2.0-data-datasets_elc-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 10709, 'contactid': 15783, 'datasettype': 'consequat enim', 'altmin': 10, 'altmax': -287, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 16136556 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "d764f80a-ee46-4d11-993f-738ca9ec25a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "d764f80a-ee46-4d11-993f-738ca9ec25a7"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5a686dcd-b823-482a-bd42-5dd22ef2d060",
        "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
        "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c937bdce-7b34-4333-bbda-7f35e621e697",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
            "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "d75f339f-8a05-4e1b-b855-11d508d8b003",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "d75f339f-8a05-4e1b-b855-11d508d8b003"
            ],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "38d60e18-a25e-45c7-888e-9afd2226aee7",
        "title": "tests for /v2.0/data/dbtables",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
        "file": "/test/v2.0-data-dbtables-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "675d23c0-ab82-4617-af61-f68c2d845f16",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
            "file": "/test/v2.0-data-dbtables-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned table.\"",
                "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'quis', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "76565fcb-ff2e-4f20-909a-45ce67b931c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "76565fcb-ff2e-4f20-909a-45ce67b931c1"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c1c4dda7-3546-46ae-9c01-b90de55f767f",
        "title": "tests for /v2.0/data/dbtables/{table}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
        "file": "/test/v2.0-data-dbtables-{table}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "527572d4-e1a6-4e5f-ace1-500bf3a655a1",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
            "file": "/test/v2.0-data-dbtables-{table}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned table.\"",
                "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "d679355b-388d-4922-9ba3-255c2be0fdbc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "d679355b-388d-4922-9ba3-255c2be0fdbc"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6f20fb7c-4f0a-4762-9732-0ea93f961483",
        "title": "tests for /v2.0/data/downloads/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
        "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9473437d-af8e-418f-aff4-6e2c4746f0a4",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
            "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned download object.\"",
                "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/5531', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "bba458db-7ba9-48b6-9102-e8ef960b7655",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "bba458db-7ba9-48b6-9102-e8ef960b7655"
            ],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "edfb4d3f-d671-45a9-8e6c-89b414aa1acc",
        "title": "tests for /v2.0/data/frozen/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
        "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fb27f97f-188e-47d8-a961-3d1a1b4af80c",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
            "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned download object.\"",
                "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "0fde8605-982b-4070-a9c7-0a3c88a04444",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "0fde8605-982b-4070-a9c7-0a3c88a04444"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "baa25dad-3ca4-4d4a-ae96-fcb71b29a9be",
        "title": "tests for /v2.0/data/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
        "file": "/test/v2.0-data-geopoliticalunits-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9a4eb486-078e-4cd4-8358-4d4fba0062a9",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
            "file": "/test/v2.0-data-geopoliticalunits-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 1110, 'gpname': 'Excepteur ea id', 'rank': 3, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "d1bc9111-2564-487d-90a1-f093dd5125ed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "d1bc9111-2564-487d-90a1-f093dd5125ed"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "87d11d7a-3b26-404e-8491-5633133b0505",
        "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
        "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "537e9f2f-3da5-435e-9d4a-e071ebf68fa1",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
            "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/6919/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "e992c7ed-5036-4405-8a76-bdd6a3b2b3a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "e992c7ed-5036-4405-8a76-bdd6a3b2b3a7"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "eba7aa43-c75c-477f-b5e3-c67b5b559d2a",
        "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
        "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f0cc7acd-2e64-4b51-86fd-e7b1da54861e",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
            "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of sites.\"",
                "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/500/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "8c304408-4e00-4477-a435-b171e6d45c73",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "8c304408-4e00-4477-a435-b171e6d45c73"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "02e1eb04-b4b1-49a7-a64a-bee5ee593088",
        "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
        "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "131b19fe-6298-4ce8-ab52-8f5b47e25c8b",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
            "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/8860', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "161592c3-1d3b-4c67-96ba-55c06878f5ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "161592c3-1d3b-4c67-96ba-55c06878f5ac"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f6ef9a42-efba-4c41-9f0e-cb1cbb428db7",
        "title": "tests for /v2.0/data/occurrences",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
        "file": "/test/v2.0-data-occurrences-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d86bf824-8c25-419a-a7c3-1c9207791949",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
            "file": "/test/v2.0-data-occurrences-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"occurrence\"",
                "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'ea ad eiusmod voluptate', 'taxonid': 40543, 'siteid': 2699, 'sitename': 'culpa deserunt ipsum cupidatat in', 'datasettype': 'culpa est enim elit cupidatat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 9276421, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "7118badb-4a22-46ee-8df8-e1a7113ec509",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "7118badb-4a22-46ee-8df8-e1a7113ec509"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cecae659-cc64-4112-854c-c322b6359a1c",
        "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
        "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b8903a22-6f3b-4ed6-94b6-686251b59362",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
            "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"occurrence\"",
                "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "bb0e6b20-f2e6-48fb-b27f-b5367ac08a6a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "bb0e6b20-f2e6-48fb-b27f-b5367ac08a6a"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8fb93791-d502-48e3-a362-898fe2db284d",
        "title": "tests for /v2.0/data/oxcal/calibrate",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
        "file": "/test/v2.0-data-oxcal-calibrate-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "88602a48-7cfb-4b8a-b4ef-caebb81ae9fd",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
            "file": "/test/v2.0-data-oxcal-calibrate-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "70100dab-35ac-436a-a5cb-ad1275917a53",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "70100dab-35ac-436a-a5cb-ad1275917a53"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "242c7b3d-0ae1-4d82-8c70-0de87c2df35a",
        "title": "tests for /v2.0/data/pollen",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
        "file": "/test/v2.0-data-pollen-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "35dea79a-6428-4f04-8b4b-f748bd6780de",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
            "file": "/test/v2.0-data-pollen-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'esse Lorem reprehenderit dolore', 'taxonid': 12259, 'siteid': 5390, 'sitename': 'ut', 'datasettype': 'velit elit Excepteur consequat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 12604500, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "66fb60a1-8a7a-4908-a6f7-1ecbdf15db1a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "66fb60a1-8a7a-4908-a6f7-1ecbdf15db1a"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b0218a40-aeaf-4ae1-9444-a79c6d1ea4cb",
        "title": "tests for /v2.0/data/pollen/{id}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
        "file": "/test/v2.0-data-pollen-{id}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "eb4e6307-424b-4928-971d-63cacbde2502",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
            "file": "/test/v2.0-data-pollen-{id}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "037539aa-e6a1-4e63-9f2a-614f8b524e02",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "037539aa-e6a1-4e63-9f2a-614f8b524e02"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "81ee40e4-e268-43be-b367-47fd81beea72",
        "title": "tests for /v2.0/data/publications",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
        "file": "/test/v2.0-data-publications-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b9c008fe-35f5-4cae-a549-3dcd86bc2e7f",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
            "file": "/test/v2.0-data-publications-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of publications.\"",
                "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 19217, 'datasetid': 57863584, 'siteid': 17146, 'familyname': 'voluptate sunt sint nostrud', 'pubtype': 'Other Authored', 'year': 1588, 'search': 'Lorem', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "265bc8ac-eaef-4426-8ad8-6e34f8a34488",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "265bc8ac-eaef-4426-8ad8-6e34f8a34488"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "fa8847b2-afe4-4a7e-9c0b-75ebc8c02c01",
        "title": "tests for /v2.0/data/publications/{publicationid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
        "file": "/test/v2.0-data-publications-{publicationid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "525118d3-30fb-4c76-b0e0-367466cf127a",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
            "file": "/test/v2.0-data-publications-{publicationid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of publications.\"",
                "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                "timedOut": false,
                "duration": 4,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/{publicationid}', {\n  'qs': { 'publicationid': 5422 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "dd14ccdc-98b6-494f-a885-02433b8a24ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "dd14ccdc-98b6-494f-a885-02433b8a24ef"
            ],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3230ceae-a89d-4386-b3c7-89db73d4704e",
        "title": "tests for /v2.0/data/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
        "file": "/test/v2.0-data-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ef659c81-6fb5-44b4-ab87-127caec8c026",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
            "file": "/test/v2.0-data-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of sites.\"",
                "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 6666, 'sitename': 'proident Excepteur elit aliqua', 'altmax': 100, 'altmin': 10, 'loc': \"{3F'u~q}\", 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "8de10a08-84ba-42fd-8a42-49adc47f8c72",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "8de10a08-84ba-42fd-8a42-49adc47f8c72"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c661c4b2-fc5f-4c3c-b914-41865b85b350",
        "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b3a5b344-57eb-43f5-a969-3fbd0df00b4b",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"chronology\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                "timedOut": false,
                "duration": 4,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "146ec6c8-1931-463d-9099-27c0ea5c4523",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "146ec6c8-1931-463d-9099-27c0ea5c4523"
            ],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f01bd12c-01e8-4ee1-bd39-4fdd06a7d616",
        "title": "tests for /v2.0/data/sites/{siteid}/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "43c9e492-6a7e-47e8-80f2-678c667c370a",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"contact\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/6005/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "c8141e2f-1e3c-4d26-928d-7d4fb1749dd4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "c8141e2f-1e3c-4d26-928d-7d4fb1749dd4"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3574668c-4a3c-4951-b0b3-f5a6aa8e6a93",
        "title": "tests for /v2.0/data/sites/{siteid}/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c6cbcc60-86a1-421e-90f3-708f96d9e11d",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/8715/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "3c167d7c-a437-4c47-9b2b-22f8cacd356b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "3c167d7c-a437-4c47-9b2b-22f8cacd356b"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9a56ad14-5b91-4a12-989b-0d83298b6c51",
        "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8f474cd1-fd77-4427-9814-fefc80dec631",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "8ed57722-b2a1-471e-80da-507f209c1e81",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "8ed57722-b2a1-471e-80da-507f209c1e81"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0b63bb23-7f01-4e4c-a0de-714769161ce2",
        "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4a6d800a-cbb9-4b14-9223-b817c0cdc0c7",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "c38b43da-26a6-4fbc-9e18-fcbdfdab6742",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "c38b43da-26a6-4fbc-9e18-fcbdfdab6742"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "916ee8ba-0d51-4c6c-9f59-2bcd84015d15",
        "title": "tests for /v2.0/data/sites/{siteid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "34a68ca5-f85a-41bb-bb21-c32c2352c1d2",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of sites.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/sites tests for get should respond 200 for \"An array of sites.\"",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/8715/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "c762e299-217b-4303-afef-4919c1e35f00",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "c762e299-217b-4303-afef-4919c1e35f00"
            ],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c7d28c97-6246-4482-9ff2-66b13e29d1e2",
        "title": "tests for /v2.0/data/sites/{siteid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "373180bb-48bb-47e8-8f3c-d70536852e7a",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of sites.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/5513', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "9cae087f-7d08-4122-9f04-8967fa83b0c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "9cae087f-7d08-4122-9f04-8967fa83b0c6"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d7bb9769-9c27-4754-8f51-b35a2af24e64",
        "title": "tests for /v2.0/data/summary/dsdbmonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
        "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "24a1ebd3-916a-4d40-b7ad-9e94a2a365a8",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
            "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "6c27c108-37de-4038-9ef0-7d497453be3b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "6c27c108-37de-4038-9ef0-7d497453be3b"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cc4fd6d5-aae2-439b-bde8-9775952127e6",
        "title": "tests for /v2.0/data/summary/dstypemonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
        "file": "/test/v2.0-data-summary-dstypemonth-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ca917f08-6f05-43a1-8e3a-17880dae18fd",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
            "file": "/test/v2.0-data-summary-dstypemonth-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "808128eb-b9ea-4919-a1cc-b166ee9fc90e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "808128eb-b9ea-4919-a1cc-b166ee9fc90e"
            ],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b71e7c11-a4f5-407e-bef9-ec0933e842b5",
        "title": "tests for /v2.0/data/summary/rawbymonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
        "file": "/test/v2.0-data-summary-rawbymonth-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "17acb8a8-0ab3-409d-809b-76b646760fb2",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
            "file": "/test/v2.0-data-summary-rawbymonth-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "ef52d547-77c6-4102-b365-37fe146947e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "ef52d547-77c6-4102-b365-37fe146947e6"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b19582a7-c3b9-491b-a5c2-347238992d78",
        "title": "tests for /v2.0/data/taxa",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
        "file": "/test/v2.0-data-taxa-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e5de0eae-3ac3-4ed6-b963-1fedbe697599",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
            "file": "/test/v2.0-data-taxa-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A taxon or array of taxa.\"",
                "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'laboris commodo dolor', 'datasetid': 7001837, 'siteid': 801 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "da037ff4-d7e3-47d0-a9cb-bfb7427690d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "da037ff4-d7e3-47d0-a9cb-bfb7427690d5"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "bc9223c1-9e95-4a82-bbdb-d2596545d83a",
        "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
        "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a4a9af15-1b7d-45b4-84be-ffe89c31ef0d",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
            "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"occurrence\"",
                "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "89cd58cb-ddbb-4a51-9cac-adc460e5bd84",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "89cd58cb-ddbb-4a51-9cac-adc460e5bd84"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6ef45bf1-73d8-419d-b404-4bfc94ed37b9",
        "title": "tests for /v2.0/data/taxa/{taxonid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
        "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c65f45a4-0117-438d-ab15-a1c1f99f2101",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
            "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A taxon or array of taxa.\"",
                "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "014bf2c9-4150-459a-ac07-ec442a51e431",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "014bf2c9-4150-459a-ac07-ec442a51e431"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "130d4fea-93fc-4ef6-aa5f-df3cd09298fb",
        "title": "tests for /v2.0/dbtables/table",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
        "file": "/test/v2.0-dbtables-table-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "11be3bf9-5861-415f-ab44-d5345efb0dc3",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
            "file": "/test/v2.0-dbtables-table-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned table.\"",
                "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "4ccc733c-458f-4935-99e5-c6ccd5face76",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "4ccc733c-458f-4935-99e5-c6ccd5face76"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f61648d4-402c-41f3-bb28-45bc8a8285ef",
        "title": "tests for /v2.0/dbtables/tablenames",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
        "file": "/test/v2.0-dbtables-tablenames-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "be10447e-69dd-41a3-848b-a97899da257c",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
            "file": "/test/v2.0-dbtables-tablenames-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "TypeError: Cannot read property 'statusCode' of undefined",
                  "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)"
                },
                "isRoot": false,
                "uuid": "b988a1cd-2121-49bc-b418-30b5836c4596",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "b988a1cd-2121-49bc-b418-30b5836c4596"
            ],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 300000
  },
  "copyrightYear": 2021
}