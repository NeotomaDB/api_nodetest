{
  "stats": {
    "suites": 209,
    "tests": 194,
    "passes": 171,
    "pending": 0,
    "failures": 23,
    "start": "2021-10-15T19:21:06.515Z",
    "end": "2021-10-15T19:25:03.226Z",
    "duration": 236711,
    "testsRegistered": 194,
    "passPercent": 88.14432989690721,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "86d67d13-5ab9-442a-92e4-cfed5a9b0432",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "75e74cf5-f65d-4ca4-948c-8b12e800613b",
          "parentUUID": "86d67d13-5ab9-442a-92e4-cfed5a9b0432",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "199f1027-4148-454b-bf1d-847f4d3b5585",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 1547,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "30e215d6-2b96-41a6-99c1-3114fc802fab",
              "parentUUID": "199f1027-4148-454b-bf1d-847f4d3b5585",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "30e215d6-2b96-41a6-99c1-3114fc802fab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1547,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get contact data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/')\n  .set('Accept', 'application/json')\n  .expect(302)\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "c024b559-474f-4de7-968e-bc527d6a6703",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "40289a23-55af-4433-b04e-fdcea668e47b",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "7736a213-6bd5-4468-8bc0-590fe589e3a9",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "fb25c367-3c84-4ac7-ae9d-17760c997e08",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "112d140c-d36f-426f-a415-0dc2fc3113c2",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 200,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "1758345f-bda8-43bc-97d3-cfd9fd1a09d0",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "cf3bff5e-8c44-4eca-8ad1-6a8688519e00",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "94db826a-4c61-413e-b021-92e6393c06ca",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 200,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "7b6890ec-4dd3-4a82-ad6a-1f96092d66bc",
              "parentUUID": "f74c2f68-7ce6-473e-ab04-e994acc7b0b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c024b559-474f-4de7-968e-bc527d6a6703",
            "40289a23-55af-4433-b04e-fdcea668e47b",
            "7736a213-6bd5-4468-8bc0-590fe589e3a9",
            "fb25c367-3c84-4ac7-ae9d-17760c997e08",
            "112d140c-d36f-426f-a415-0dc2fc3113c2",
            "1758345f-bda8-43bc-97d3-cfd9fd1a09d0",
            "cf3bff5e-8c44-4eca-8ad1-6a8688519e00",
            "94db826a-4c61-413e-b021-92e6393c06ca",
            "7b6890ec-4dd3-4a82-ad6a-1f96092d66bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1408,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5c344154-cf33-4950-b356-6696e95a4dcd",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site', 'dataset');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ec6a14f8-3825-45da-ba69-0ecfed592afd",
              "parentUUID": "5c344154-cf33-4950-b356-6696e95a4dcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 709,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f98bb32e-27d2-4a43-b0c6-4e0a6986e541",
              "parentUUID": "5c344154-cf33-4950-b356-6696e95a4dcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "35ec082d-5cf0-4d38-91dc-6a0f18d87732",
              "parentUUID": "5c344154-cf33-4950-b356-6696e95a4dcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 1283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "d7cc39bb-060d-45bd-aa1e-569470af9d80",
              "parentUUID": "5c344154-cf33-4950-b356-6696e95a4dcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2857f974-a98a-4cea-b48d-3dce34fc1ed1",
              "parentUUID": "5c344154-cf33-4950-b356-6696e95a4dcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 1736,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ee3f5ff4-4eac-4795-8b0a-69d96d89e3bf",
              "parentUUID": "5c344154-cf33-4950-b356-6696e95a4dcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1764,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "4566f262-07c8-4160-a31f-517826b34963",
              "parentUUID": "5c344154-cf33-4950-b356-6696e95a4dcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec6a14f8-3825-45da-ba69-0ecfed592afd",
            "f98bb32e-27d2-4a43-b0c6-4e0a6986e541",
            "35ec082d-5cf0-4d38-91dc-6a0f18d87732",
            "d7cc39bb-060d-45bd-aa1e-569470af9d80",
            "2857f974-a98a-4cea-b48d-3dce34fc1ed1",
            "ee3f5ff4-4eac-4795-8b0a-69d96d89e3bf",
            "4566f262-07c8-4160-a31f-517826b34963"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7908,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "5ec43ca9-3af2-43c0-98a4-008f45182710",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "b5a5efb4-4c4a-4c0c-b3ad-cf59ab8d7315",
              "parentUUID": "5ec43ca9-3af2-43c0-98a4-008f45182710",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "01a83c67-3da2-4c24-918d-64d57a218fb7",
              "parentUUID": "5ec43ca9-3af2-43c0-98a4-008f45182710",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "d4fb2621-9963-4caf-80ca-0c8ff1800583",
              "parentUUID": "5ec43ca9-3af2-43c0-98a4-008f45182710",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "1ed64407-bfad-411b-9894-3071144ec63b",
              "parentUUID": "5ec43ca9-3af2-43c0-98a4-008f45182710",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5a5efb4-4c4a-4c0c-b3ad-cf59ab8d7315",
            "01a83c67-3da2-4c24-918d-64d57a218fb7",
            "d4fb2621-9963-4caf-80ca-0c8ff1800583",
            "1ed64407-bfad-411b-9894-3071144ec63b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 311,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e6f7a659-11aa-4cab-8d4b-f73978506e6f",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "75163c35-9541-4ef2-9443-f5f479e998ae",
              "parentUUID": "e6f7a659-11aa-4cab-8d4b-f73978506e6f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75163c35-9541-4ef2-9443-f5f479e998ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a58d2c39-571d-431e-bc50-659d897fbd03",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 5841,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "ca346c55-0b02-42e4-9c08-beed7ff901b2",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 7518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "bd43b915-6a0d-46a0-a209-4201f1bd4c41",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 2048,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "adafcd2e-d66e-463b-8a8b-cc372e534209",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "3fa6c903-43f6-469f-85f4-c1e648761382",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "e1ddb6f7-b732-4014-9bbe-0b7be5361550",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "375b0a22-7ec4-4fb6-87dd-8f46a8efa655",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 442,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6d8f7ffa-43f6-4003-94c4-e539bfbb2b80",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 200,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "829afc5c-8202-4749-8bbf-e3db3c39cde2",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "42d522ed-19f3-48be-a322-f0156ac208d6",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 3685,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c2d32c62-b6c6-4a81-bd94-3f3fc4fb3c4b",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 409,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "43b1ccfb-d20d-4a3d-92d1-26bd248e7676",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f58538ac-246a-49c7-8b76-8700111a3569",
              "parentUUID": "51ea7985-1b82-4209-9a94-5bbed4d9f6e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a58d2c39-571d-431e-bc50-659d897fbd03",
            "ca346c55-0b02-42e4-9c08-beed7ff901b2",
            "bd43b915-6a0d-46a0-a209-4201f1bd4c41",
            "adafcd2e-d66e-463b-8a8b-cc372e534209",
            "3fa6c903-43f6-469f-85f4-c1e648761382",
            "e1ddb6f7-b732-4014-9bbe-0b7be5361550",
            "375b0a22-7ec4-4fb6-87dd-8f46a8efa655",
            "6d8f7ffa-43f6-4003-94c4-e539bfbb2b80",
            "829afc5c-8202-4749-8bbf-e3db3c39cde2",
            "42d522ed-19f3-48be-a322-f0156ac208d6",
            "c2d32c62-b6c6-4a81-bd94-3f3fc4fb3c4b",
            "43b1ccfb-d20d-4a3d-92d1-26bd248e7676",
            "f58538ac-246a-49c7-8b76-8700111a3569"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21025,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "eb89101a-57d5-46a7-854a-cc0a4bfb43fa",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "8272f805-b01d-4568-b666-6c828fded624",
              "parentUUID": "eb89101a-57d5-46a7-854a-cc0a4bfb43fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "4961f263-b5a7-4834-84ee-efb5e5a27fd8",
              "parentUUID": "eb89101a-57d5-46a7-854a-cc0a4bfb43fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a18e16b1-196f-4296-82cf-a690d9462d95",
              "parentUUID": "eb89101a-57d5-46a7-854a-cc0a4bfb43fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "89691a0d-56c5-458f-b4a2-9a2ab07a3d84",
              "parentUUID": "eb89101a-57d5-46a7-854a-cc0a4bfb43fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "22e6f5b2-dac1-416f-8aa7-b18099d2a5ea",
              "parentUUID": "eb89101a-57d5-46a7-854a-cc0a4bfb43fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f41a95a0-295c-48bb-ab63-17ea16643175",
              "parentUUID": "eb89101a-57d5-46a7-854a-cc0a4bfb43fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2e9d12d7-5cab-4107-b418-f82a3173b6ce",
              "parentUUID": "eb89101a-57d5-46a7-854a-cc0a4bfb43fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8272f805-b01d-4568-b666-6c828fded624",
            "4961f263-b5a7-4834-84ee-efb5e5a27fd8",
            "a18e16b1-196f-4296-82cf-a690d9462d95",
            "89691a0d-56c5-458f-b4a2-9a2ab07a3d84",
            "22e6f5b2-dac1-416f-8aa7-b18099d2a5ea",
            "f41a95a0-295c-48bb-ab63-17ea16643175",
            "2e9d12d7-5cab-4107-b418-f82a3173b6ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 865,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "edd6e4af-9f5a-47f9-a864-b12e490bfc6c",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0eae4950-3828-4bfd-a851-aaac5b3da039",
              "parentUUID": "edd6e4af-9f5a-47f9-a864-b12e490bfc6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0eae4950-3828-4bfd-a851-aaac5b3da039"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 226,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c7393ae8-dbff-42c1-80f9-b808db38d9af",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 11794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b643e417-b56d-4205-8d68-837d4f2c0a36",
              "parentUUID": "c7393ae8-dbff-42c1-80f9-b808db38d9af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b643e417-b56d-4205-8d68-837d4f2c0a36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11794,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a2e80f02-4ffe-4f7b-9e7b-f5a4ee05058c",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fa391f9c-e27c-4ccf-b2e9-d0d56fbd002b",
              "parentUUID": "a2e80f02-4ffe-4f7b-9e7b-f5a4ee05058c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa391f9c-e27c-4ccf-b2e9-d0d56fbd002b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3dd00891-59e6-4f98-a781-a4bd23655e89",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "64ec88cc-b9af-469f-90c7-0e813d727e01",
              "parentUUID": "3dd00891-59e6-4f98-a781-a4bd23655e89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64ec88cc-b9af-469f-90c7-0e813d727e01"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 149,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "701daecd-028f-4e25-9b7a-1b34b6356b6a",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 791,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "acee20ff-ec19-444a-8b41-c9f224f4b0f7",
              "parentUUID": "701daecd-028f-4e25-9b7a-1b34b6356b6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "acee20ff-ec19-444a-8b41-c9f224f4b0f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 791,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "49e4fcd4-756a-4d6b-9d73-6b6847f9ff11",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 919,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7fae7147-192b-46e0-89d0-a1bd0414330d",
              "parentUUID": "49e4fcd4-756a-4d6b-9d73-6b6847f9ff11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7fae7147-192b-46e0-89d0-a1bd0414330d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 919,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6ae56d43-ce0b-45d9-b2d9-0f97b1c37d30",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e0d206e2-eeee-48ec-ba19-dc4e34454095",
              "parentUUID": "6ae56d43-ce0b-45d9-b2d9-0f97b1c37d30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0d206e2-eeee-48ec-ba19-dc4e34454095"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "67dab95b-d380-4baa-9331-3b2d4f36d12e",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0d92c005-0bf1-4b4b-bfc0-2b0ef8d4d464",
              "parentUUID": "67dab95b-d380-4baa-9331-3b2d4f36d12e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d92c005-0bf1-4b4b-bfc0-2b0ef8d4d464"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b1c7e97f-b21b-4941-bfb5-604129d97f42",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 197,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b38288bf-2c55-4c98-acef-b0a1da305f9f",
              "parentUUID": "b1c7e97f-b21b-4941-bfb5-604129d97f42",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b38288bf-2c55-4c98-acef-b0a1da305f9f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 197,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2a560636-a27f-423d-b92e-3ba214ad57f1",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2eef9a30-ed21-4eb2-8dbb-44d220fbc9b9",
              "parentUUID": "2a560636-a27f-423d-b92e-3ba214ad57f1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2eef9a30-ed21-4eb2-8dbb-44d220fbc9b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "310e1e4a-a552-4cf3-99ad-29505998c3f5",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2a3fef26-32ff-4a0b-ba8f-50a777d383b3",
              "parentUUID": "310e1e4a-a552-4cf3-99ad-29505998c3f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a3fef26-32ff-4a0b-ba8f-50a777d383b3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 178,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3a818612-e524-4296-8fb4-dd520dfd66ea",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 993,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b3e96dd1-4499-4ace-9183-020fb0882338",
              "parentUUID": "3a818612-e524-4296-8fb4-dd520dfd66ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3e96dd1-4499-4ace-9183-020fb0882338"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 993,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bb1d627b-ae7d-4424-8348-27bcc0e24ed2",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "286cec13-dd57-4569-9ae6-1d34049db56a",
              "parentUUID": "bb1d627b-ae7d-4424-8348-27bcc0e24ed2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "286cec13-dd57-4569-9ae6-1d34049db56a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 380,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4662fc3a-aee1-4748-a73c-0ac8e7b5ad5a",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "28ad55e5-5421-4280-8014-cc7b021b4938",
              "parentUUID": "4662fc3a-aee1-4748-a73c-0ac8e7b5ad5a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28ad55e5-5421-4280-8014-cc7b021b4938"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "527ffbc4-87c7-47f6-8178-d5ec6a68f184",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d0825848-05bf-4c4d-8eeb-39906bbb308c",
              "parentUUID": "527ffbc4-87c7-47f6-8178-d5ec6a68f184",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0825848-05bf-4c4d-8eeb-39906bbb308c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ac0ae61a-9de6-4f93-9fcd-c79c90288d30",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c55fd100-cb70-4986-9faf-8e1a3775725f",
              "parentUUID": "ac0ae61a-9de6-4f93-9fcd-c79c90288d30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c55fd100-cb70-4986-9faf-8e1a3775725f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e807b725-7e40-4565-9df8-a472a07954da",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "8c5fa804-369b-4872-9a0f-0a7fa42c62af",
              "parentUUID": "e807b725-7e40-4565-9df8-a472a07954da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c5fa804-369b-4872-9a0f-0a7fa42c62af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dae4365d-19ed-4b66-9f8f-8a10903c5228",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 389,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5dd3095b-efe1-4cb9-bf32-9a01881ef3ed",
              "parentUUID": "dae4365d-19ed-4b66-9f8f-8a10903c5228",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5dd3095b-efe1-4cb9-bf32-9a01881ef3ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 389,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b4da7ebe-d03e-4ab9-9203-397b730a52fc",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 93551,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0b5e311b-4857-4db5-909a-f6345b1b9d64",
              "parentUUID": "b4da7ebe-d03e-4ab9-9203-397b730a52fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0b5e311b-4857-4db5-909a-f6345b1b9d64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 93551,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e654759f-bbde-40df-9688-ec74a7864f7e",
          "title": "GET /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronology/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 44,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "ef4276e5-6c74-4e1c-b92f-06cb760cc563",
              "parentUUID": "e654759f-bbde-40df-9688-ec74a7864f7e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ef4276e5-6c74-4e1c-b92f-06cb760cc563"
          ],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e9e9211e-52f3-40c5-aa50-a6a3b7c41b84",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "3c683edd-d5c2-44cb-92f8-e512f3f0ed99",
              "parentUUID": "e9e9211e-52f3-40c5-aa50-a6a3b7c41b84",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3c683edd-d5c2-44cb-92f8-e512f3f0ed99"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bd860868-0729-4eeb-85c7-179894227c12",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 794,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d747b62a-b302-473a-8c6d-e5079083f1ef",
              "parentUUID": "bd860868-0729-4eeb-85c7-179894227c12",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d747b62a-b302-473a-8c6d-e5079083f1ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 794,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c811b47c-2bd2-43fd-9f23-161e15c61211",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2da57472-55bd-4a39-8718-4e7d8120742e",
              "parentUUID": "c811b47c-2bd2-43fd-9f23-161e15c61211",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2da57472-55bd-4a39-8718-4e7d8120742e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 218,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee87f1c1-ac1e-492b-bf28-f412fe0371ab",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 849,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "142c94c1-0426-4282-b276-34878a880407",
              "parentUUID": "ee87f1c1-ac1e-492b-bf28-f412fe0371ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "142c94c1-0426-4282-b276-34878a880407"
          ],
          "pending": [],
          "skipped": [],
          "duration": 849,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e9ad82c2-efb6-4c6e-a0a4-29bdc8a96322",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "30a414c5-34c8-4618-9774-2a869dbc0622",
              "parentUUID": "e9ad82c2-efb6-4c6e-a0a4-29bdc8a96322",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "30a414c5-34c8-4618-9774-2a869dbc0622"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1692,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "532c3233-65b6-4b0c-a1ab-d1f98c76d8d7",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 8206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cd7ff2d9-e678-46f9-8a5f-088fb005bf47",
              "parentUUID": "532c3233-65b6-4b0c-a1ab-d1f98c76d8d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd7ff2d9-e678-46f9-8a5f-088fb005bf47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8206,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ebab8376-41b1-484d-8edb-c0652cef1366",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 840,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "01732658-7bdc-4ea2-9359-615db4878b0d",
              "parentUUID": "ebab8376-41b1-484d-8edb-c0652cef1366",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "01732658-7bdc-4ea2-9359-615db4878b0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 840,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "92c11f6c-4b69-47a7-b612-8b94ecacbd84",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "554d8fa3-995a-426b-9443-d8aa9792528e",
              "parentUUID": "92c11f6c-4b69-47a7-b612-8b94ecacbd84",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "554d8fa3-995a-426b-9443-d8aa9792528e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 199,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4d6c7803-9e06-4054-a3bf-af432de54e3b",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9e62adf8-a320-4c2d-98e1-d7f5a2c6734d",
              "parentUUID": "4d6c7803-9e06-4054-a3bf-af432de54e3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e62adf8-a320-4c2d-98e1-d7f5a2c6734d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 199,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ddb43f17-f569-4fb9-b899-2520fb1e3eac",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "caa05389-862d-4e19-9d42-be2a89f815c6",
              "parentUUID": "ddb43f17-f569-4fb9-b899-2520fb1e3eac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "caa05389-862d-4e19-9d42-be2a89f815c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "61bafb5a-8475-4ae4-bc7e-c1763d7f2168",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f4693661-b1d4-47c9-82d7-bb388fb02e6b",
              "parentUUID": "61bafb5a-8475-4ae4-bc7e-c1763d7f2168",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4693661-b1d4-47c9-82d7-bb388fb02e6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "df09861d-78ce-497a-92d6-c79613de6df7",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 278,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "b32db0f4-e3ca-45c5-9213-c511a5208d02",
              "parentUUID": "df09861d-78ce-497a-92d6-c79613de6df7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b32db0f4-e3ca-45c5-9213-c511a5208d02"
          ],
          "pending": [],
          "skipped": [],
          "duration": 278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d1a08f21-3fe1-4dbe-b6d1-0bbd2685265c",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ad309b31-9e00-4652-be92-43b3e61e9da1",
              "parentUUID": "d1a08f21-3fe1-4dbe-b6d1-0bbd2685265c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad309b31-9e00-4652-be92-43b3e61e9da1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8bfcb93d-66fe-4d55-a5d7-b5cbb295fb10",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 212,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[0].ecolgroup should be array, data[0].status should be boolean, data[1].author should be string, data[1].ecolgroup should be array, data[1].publicationid should be integer, data[1].status should be boolean, data[2].ecolgroup should be array, data[2].status should be boolean, data[3].ecolgroup should be array, data[3].status should be boolean, data[4].ecolgroup should be array, data[4].status should be boolean, data[5].ecolgroup should be array, data[5].status should be boolean, data[6].ecolgroup should be array, data[6].status should be boolean, data[7].ecolgroup should be array, data[7].status should be boolean, data[8].ecolgroup should be array, data[8].status should be boolean, data[9].ecolgroup should be array, data[9].status should be boolean, data[10].ecolgroup should be array, data[10].status should be boolean, data[11].ecolgroup should be array, data[11].status should be boolean, data[12].ecolgroup should be array, data[12].status should be boolean, data[13].ecolgroup should be array, data[13].status should be boolean, data[14].author should be string, data[14].ecolgroup should be array, data[14].publicationid should be integer, data[14].status should be boolean, data[15].ecolgroup should be array, data[15].status should be boolean, data[16].author should be string, data[16].ecolgroup should be array, data[16].publicationid should be integer, data[16].status should be boolean, data[17].ecolgroup should be array, data[17].status should be boolean, data[18].ecolgroup should be array, data[18].status should be boolean, data[19].ecolgroup should be array, data[19].status should be boolean, data[20].ecolgroup should be array, data[20].status should be boolean, data[21].ecolgroup should be array, data[21].status should be boolean, data[22].ecolgroup should be array, data[22].status should be boolean, data[23].ecolgroup should be array, data[23].status should be boolean, data[24].ecolgroup should be array, data[24].status should be boolean, data[25].ecolgroup should be array, data[25].status should be boolean, data[26].ecolgroup should be array, data[26].status should be boolean, data[27].ecolgroup should be array, data[27].status should be boolean, data[28].ecolgroup should be array, data[28].status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[0].ecolgroup should be array, data[0].status should be boolean, data[1].author should be string, data[1].ecolgroup should be array, data[1].publicationid should be integer, data[1].status should be boolean, data[2].ecolgroup should be array, data[2].status should be boolean, data[3].ecolgroup should be array, data[3].status should be boolean, data[4].ecolgroup should be array, data[4].status should be boolean, data[5].ecolgroup should be array, data[5].status should be boolean, data[6].ecolgroup should be array, data[6].status should be boolean, data[7].ecolgroup should be array, data[7].status should be boolean, data[8].ecolgroup should be array, data[8].status should be boolean, data[9].ecolgroup should be array, data[9].status should be boolean, data[10].ecolgroup should be array, data[10].status should be boolean, data[11].ecolgroup should be array, data[11].status should be boolean, data[12].ecolgroup should be array, data[12].status should be boolean, data[13].ecolgroup should be array, data[13].status should be boolean, data[14].author should be string, data[14].ecolgroup should be array, data[14].publicationid should be integer, data[14].status should be boolean, data[15].ecolgroup should be array, data[15].status should be boolean, data[16].author should be string, data[16].ecolgroup should be array, data[16].publicationid should be integer, data[16].status should be boolean, data[17].ecolgroup should be array, data[17].status should be boolean, data[18].ecolgroup should be array, data[18].status should be boolean, data[19].ecolgroup should be array, data[19].status should be boolean, data[20].ecolgroup should be array, data[20].status should be boolean, data[21].ecolgroup should be array, data[21].status should be boolean, data[22].ecolgroup should be array, data[22].status should be boolean, data[23].ecolgroup should be array, data[23].status should be boolean, data[24].ecolgroup should be array, data[24].status should be boolean, data[25].ecolgroup should be array, data[25].status should be boolean, data[26].ecolgroup should be array, data[26].status should be boolean, data[27].ecolgroup should be array, data[27].status should be boolean, data[28].ecolgroup should be array, data[28].status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a2377075-c1bc-4db5-9fbb-38ed78de9c61",
              "parentUUID": "8bfcb93d-66fe-4d55-a5d7-b5cbb295fb10",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a2377075-c1bc-4db5-9fbb-38ed78de9c61"
          ],
          "pending": [],
          "skipped": [],
          "duration": 212,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fbbbd396-0fe0-4245-9f24-385b6e19b2d5",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "2aecb8c0-509c-443e-8721-80a6ad84eec5",
              "parentUUID": "fbbbd396-0fe0-4245-9f24-385b6e19b2d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2aecb8c0-509c-443e-8721-80a6ad84eec5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c0820800-147a-4e2b-868a-81e1d8f0e5b1",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 783,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "59543533-c4fc-422a-ad12-e4e3b520b71e",
              "parentUUID": "c0820800-147a-4e2b-868a-81e1d8f0e5b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59543533-c4fc-422a-ad12-e4e3b520b71e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 783,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6cc13d7e-e892-4d7f-9e35-5ba5b72713f6",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "52720aff-b529-4c7b-8ea3-629c507f8b9a",
              "parentUUID": "6cc13d7e-e892-4d7f-9e35-5ba5b72713f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "52720aff-b529-4c7b-8ea3-629c507f8b9a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 157,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "02baa7b0-e872-4d01-a594-7d6206307e09",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ac6e64f0-5d50-40c7-a586-8b52dc3f8a99",
              "parentUUID": "02baa7b0-e872-4d01-a594-7d6206307e09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ac6e64f0-5d50-40c7-a586-8b52dc3f8a99"
          ],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "76115c69-e19a-47e2-ac44-321d07e80d2e",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d3f74509-4279-49b2-85ec-4d9b42cf3361",
              "parentUUID": "76115c69-e19a-47e2-ac44-321d07e80d2e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3f74509-4279-49b2-85ec-4d9b42cf3361"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 219,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e9125391-df75-4142-bddc-b49c1186a289",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "88eb59de-9de0-469a-b73b-5638ae325aa8",
              "parentUUID": "e9125391-df75-4142-bddc-b49c1186a289",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "88eb59de-9de0-469a-b73b-5638ae325aa8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e16f61f7-fd3f-4e13-8e25-5fcc8a64ecd0",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5ae8927a-d1c6-41d0-82e5-913dc5692d3c",
              "parentUUID": "e16f61f7-fd3f-4e13-8e25-5fcc8a64ecd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ae8927a-d1c6-41d0-82e5-913dc5692d3c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 143,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3fe299b8-b671-45dc-9537-7b005ccd7e3e",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 206,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "dde6fe28-96b9-4e07-ac18-c718e6f51cbb",
              "parentUUID": "3fe299b8-b671-45dc-9537-7b005ccd7e3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dde6fe28-96b9-4e07-ac18-c718e6f51cbb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 206,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eba66601-862e-47ff-888e-16e0e0df3942",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1000df7e-d950-4462-a4d6-6d155b57e70c",
              "parentUUID": "eba66601-862e-47ff-888e-16e0e0df3942",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1000df7e-d950-4462-a4d6-6d155b57e70c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 199,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "87d16623-befe-472e-8aaf-a532137d34a5",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "6b52eea2-8411-4a08-a634-34616a4c1b08",
              "parentUUID": "87d16623-befe-472e-8aaf-a532137d34a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6b52eea2-8411-4a08-a634-34616a4c1b08"
          ],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e33c39a7-85b6-43bf-a457-4dba813f06ea",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "17a00a58-27b6-475a-8a97-670bdad30d77",
              "parentUUID": "e33c39a7-85b6-43bf-a457-4dba813f06ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17a00a58-27b6-475a-8a97-670bdad30d77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 196,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "04a548a3-567d-4fdc-97e1-de35e5e511cd",
          "title": "GET /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 22,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "a87ed661-297c-43ba-9bb7-e19ae9fa9099",
              "parentUUID": "04a548a3-567d-4fdc-97e1-de35e5e511cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a87ed661-297c-43ba-9bb7-e19ae9fa9099"
          ],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2710556e-f094-4970-9ad9-5fe99e08ba9e",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/pollen' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/pollenresponse\n\nres contained: { body: { status: 'success', query: {}, message: 'Retrieved pollen' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/pollen' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/pollenresponse' } }\n    },\n    description: 'A record of all pollen samples in time/space for a particular taxon.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/pollen' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/pollenresponse\n\nres contained: { body: { status: 'success', query: {}, message: 'Retrieved pollen' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/pollen' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/pollenresponse' } }\n    },\n    description: 'A record of all pollen samples in time/space for a particular taxon.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "42b2598d-3029-48f3-8e92-8ed274f48763",
              "parentUUID": "2710556e-f094-4970-9ad9-5fe99e08ba9e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "42b2598d-3029-48f3-8e92-8ed274f48763"
          ],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a57391ff-af8f-4315-8df2-24e24dc2f8d2",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/pollen/{id}' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/pollenresponse\n\nres contained: { body: { status: 'success', query: {}, message: 'Retrieved pollen' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/pollen/{id}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/pollenresponse' } }\n    },\n    description: 'A record of all pollen samples in time/space for a particular taxon.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/pollen/{id}' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/pollenresponse\n\nres contained: { body: { status: 'success', query: {}, message: 'Retrieved pollen' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/pollen/{id}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/pollenresponse' } }\n    },\n    description: 'A record of all pollen samples in time/space for a particular taxon.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "7517d090-c3dc-47b3-84d2-4a9a613a8d8b",
              "parentUUID": "a57391ff-af8f-4315-8df2-24e24dc2f8d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7517d090-c3dc-47b3-84d2-4a9a613a8d8b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "27be77aa-a810-44f8-b92d-6d4076bd728b",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "2c7f7b8a-b9dd-4960-9158-4301853c48ac",
              "parentUUID": "27be77aa-a810-44f8-b92d-6d4076bd728b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2c7f7b8a-b9dd-4960-9158-4301853c48ac"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d9e5e05a-1725-4ea1-835b-5808f4ce707f",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 375,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2e26ccae-6a20-4062-b120-b0ff438a7ba8",
              "parentUUID": "d9e5e05a-1725-4ea1-835b-5808f4ce707f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e26ccae-6a20-4062-b120-b0ff438a7ba8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 375,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1fdf842e-4008-4c0e-8153-5e21b77381d6",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "85f15957-2553-4843-916d-db49243b93f2",
              "parentUUID": "1fdf842e-4008-4c0e-8153-5e21b77381d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85f15957-2553-4843-916d-db49243b93f2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 407,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "71b12700-74a9-44ff-9e3d-f5bcb56e5481",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 211,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "16e55d91-531b-4c70-b5a1-ef80bf11aa07",
              "parentUUID": "71b12700-74a9-44ff-9e3d-f5bcb56e5481",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16e55d91-531b-4c70-b5a1-ef80bf11aa07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 211,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5032d50a-c793-4669-82b4-70349d3057d0",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "239c3502-4845-4309-885d-57adc92cb3a2",
              "parentUUID": "5032d50a-c793-4669-82b4-70349d3057d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "239c3502-4845-4309-885d-57adc92cb3a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cfaa4364-fc36-4f3a-b858-7902418778ff",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c9549c59-16a8-421d-8c7f-bcf09032fb83",
              "parentUUID": "cfaa4364-fc36-4f3a-b858-7902418778ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9549c59-16a8-421d-8c7f-bcf09032fb83"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 196,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d0bada2d-ad5d-44fe-a7e6-7308a6a99fa4",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bfb8f039-2465-4e32-bcd0-decb75078f3e",
              "parentUUID": "d0bada2d-ad5d-44fe-a7e6-7308a6a99fa4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bfb8f039-2465-4e32-bcd0-decb75078f3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1228,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e14a72a0-fffa-4030-9351-3a16b39828ef",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 819,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets_elc' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetelcresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          }\n        ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets_elc' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetelcresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets_elc' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetelcresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          }\n        ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets_elc' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetelcresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e269a7ec-9f8c-49f4-874c-7a9edbdbeff0",
              "parentUUID": "e14a72a0-fffa-4030-9351-3a16b39828ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e269a7ec-9f8c-49f4-874c-7a9edbdbeff0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 819,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d18a03c1-1491-4984-9c81-451e278df286",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "78485efb-a180-4d25-96d3-6da8e95e1258",
              "parentUUID": "d18a03c1-1491-4984-9c81-451e278df286",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78485efb-a180-4d25-96d3-6da8e95e1258"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e9aba0ad-63c4-44f7-8dc1-c51e79cd4ed1",
          "title": "GET /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "69e68120-8799-4a75-b079-d54e57eefbda",
              "parentUUID": "e9aba0ad-63c4-44f7-8dc1-c51e79cd4ed1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "69e68120-8799-4a75-b079-d54e57eefbda"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ff22b749-0c32-4144-bfcd-886433f26691",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a41ed8c8-392b-4498-867b-0fdf3f504d49",
              "parentUUID": "ff22b749-0c32-4144-bfcd-886433f26691",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a41ed8c8-392b-4498-867b-0fdf3f504d49"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b2eda684-156e-4f8e-b0a7-47114160425f",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 420,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c266e72b-b465-428d-a6b9-723139d79018",
              "parentUUID": "b2eda684-156e-4f8e-b0a7-47114160425f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c266e72b-b465-428d-a6b9-723139d79018"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 420,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8f3e8b1d-ba21-4105-841b-4ceb3af72451",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 365,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b3c4503b-cecc-4b32-9481-a1a2cc4d2942",
              "parentUUID": "8f3e8b1d-ba21-4105-841b-4ceb3af72451",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3c4503b-cecc-4b32-9481-a1a2cc4d2942"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 365,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6f23d625-28e8-4941-ab0c-d534ae4ce8f4",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4813,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "02ed839a-fdd6-4a32-b012-410f8da1b652",
              "parentUUID": "6f23d625-28e8-4941-ab0c-d534ae4ce8f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02ed839a-fdd6-4a32-b012-410f8da1b652"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4813,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0e38f2ec-695b-4e90-8a7f-c9211f336eb8",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "dd584181-0096-4240-a085-361971be8abf",
              "parentUUID": "0e38f2ec-695b-4e90-8a7f-c9211f336eb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd584181-0096-4240-a085-361971be8abf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e967af25-1dc4-40f3-8f85-744303887f02",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 35279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7b424685-76f5-4e20-b837-6a98c0f163c7",
              "parentUUID": "e967af25-1dc4-40f3-8f85-744303887f02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b424685-76f5-4e20-b837-6a98c0f163c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35279,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ffac3103-17ce-4751-a284-660fd72197a6",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ccb7e022-cadb-4428-a304-11cc3525df5c",
              "parentUUID": "ffac3103-17ce-4751-a284-660fd72197a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ccb7e022-cadb-4428-a304-11cc3525df5c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fd3f0cd8-b51c-483c-9ab5-9ef98ed3c222",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1047,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3caf512a-b3a8-4029-866f-83b1961439cb",
              "parentUUID": "fd3f0cd8-b51c-483c-9ab5-9ef98ed3c222",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3caf512a-b3a8-4029-866f-83b1961439cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1047,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d8b23159-eced-4adb-9ffd-2fc24cef23e3",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "22086188-815c-472a-bbb0-28e2f17de756",
              "parentUUID": "d8b23159-eced-4adb-9ffd-2fc24cef23e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "6b6227b9-e97a-4b19-bbc4-37153b62b64e",
              "parentUUID": "d8b23159-eced-4adb-9ffd-2fc24cef23e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "25aabaf9-59b6-4ea5-82ec-90d7250c39de",
              "parentUUID": "d8b23159-eced-4adb-9ffd-2fc24cef23e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "dd79ec74-0140-4429-930c-eedfcc4a5b2f",
              "parentUUID": "d8b23159-eced-4adb-9ffd-2fc24cef23e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 285,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "533f82a3-941e-4263-be78-b2be230008e8",
              "parentUUID": "d8b23159-eced-4adb-9ffd-2fc24cef23e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22086188-815c-472a-bbb0-28e2f17de756",
            "6b6227b9-e97a-4b19-bbc4-37153b62b64e",
            "25aabaf9-59b6-4ea5-82ec-90d7250c39de",
            "dd79ec74-0140-4429-930c-eedfcc4a5b2f",
            "533f82a3-941e-4263-be78-b2be230008e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 787,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "edef446d-f631-4cbc-ae4b-c7687eeec107",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 618,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "0fa0aeec-5eba-406d-836b-b1b69857f351",
              "parentUUID": "edef446d-f631-4cbc-ae4b-c7687eeec107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "cad32dee-1b93-4f79-9bf9-1ef6d02dcb56",
              "parentUUID": "edef446d-f631-4cbc-ae4b-c7687eeec107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "85a5cafb-511c-47cc-b881-1a3f6f3695a7",
              "parentUUID": "edef446d-f631-4cbc-ae4b-c7687eeec107",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0fa0aeec-5eba-406d-836b-b1b69857f351",
            "cad32dee-1b93-4f79-9bf9-1ef6d02dcb56",
            "85a5cafb-511c-47cc-b881-1a3f6f3695a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2580,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "0cd99a98-7036-4d56-b2d8-ffe531a40915",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 452,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "45115c1a-d6df-49aa-86af-bc26fc25790f",
              "parentUUID": "0cd99a98-7036-4d56-b2d8-ffe531a40915",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 367,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "80c9869e-116e-4dce-ae72-786aefd86c6f",
              "parentUUID": "0cd99a98-7036-4d56-b2d8-ffe531a40915",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1857,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b41b8582-b475-4f16-a5d3-96abdd09eb12",
              "parentUUID": "0cd99a98-7036-4d56-b2d8-ffe531a40915",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1464,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a2593ac5-4730-4428-8c9f-13892cb88dbb",
              "parentUUID": "0cd99a98-7036-4d56-b2d8-ffe531a40915",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45115c1a-d6df-49aa-86af-bc26fc25790f",
            "80c9869e-116e-4dce-ae72-786aefd86c6f",
            "b41b8582-b475-4f16-a5d3-96abdd09eb12",
            "a2593ac5-4730-4428-8c9f-13892cb88dbb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4c4dfb55-5970-48ba-856d-952714662490",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "191963b2-f94f-4bef-8de0-32476e62a3d9",
              "parentUUID": "4c4dfb55-5970-48ba-856d-952714662490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 367,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "fdf3de38-4adc-412f-a091-4e9287cc89f6",
              "parentUUID": "4c4dfb55-5970-48ba-856d-952714662490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "999acea0-99a1-4d23-84a7-a78e5b8dab7e",
              "parentUUID": "4c4dfb55-5970-48ba-856d-952714662490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "e8b6d54b-0691-44c8-9ce7-b7a015e82bef",
              "parentUUID": "4c4dfb55-5970-48ba-856d-952714662490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "0d905d3a-4fd6-4e69-90e4-6c757f1858e8",
              "parentUUID": "4c4dfb55-5970-48ba-856d-952714662490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "cb8443f8-83d7-415f-8924-1b03226d987b",
              "parentUUID": "4c4dfb55-5970-48ba-856d-952714662490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "646d9909-f742-4cc0-83af-93ea92d24efa",
              "parentUUID": "4c4dfb55-5970-48ba-856d-952714662490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "136f4649-7389-4f9d-b208-cd86348de355",
              "parentUUID": "4c4dfb55-5970-48ba-856d-952714662490",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "191963b2-f94f-4bef-8de0-32476e62a3d9",
            "fdf3de38-4adc-412f-a091-4e9287cc89f6",
            "999acea0-99a1-4d23-84a7-a78e5b8dab7e",
            "e8b6d54b-0691-44c8-9ce7-b7a015e82bef",
            "0d905d3a-4fd6-4e69-90e4-6c757f1858e8",
            "cb8443f8-83d7-415f-8924-1b03226d987b",
            "646d9909-f742-4cc0-83af-93ea92d24efa",
            "136f4649-7389-4f9d-b208-cd86348de355"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "da3e566d-51dc-4ae6-81f2-9bdb1fe8df95",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "867a4318-f5da-49a2-af8f-ebc26e6c78f2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "97e86c71-11c2-449f-941b-c007856646e7",
                  "parentUUID": "867a4318-f5da-49a2-af8f-ebc26e6c78f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97e86c71-11c2-449f-941b-c007856646e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "76bcad77-f763-4194-b0e9-6ad054e4b12d",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "938b6634-b456-4cad-8bdf-b394b2540660",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "61c98fb6-a46a-4d59-9876-ee5205a1c8cb",
                  "parentUUID": "938b6634-b456-4cad-8bdf-b394b2540660",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61c98fb6-a46a-4d59-9876-ee5205a1c8cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "40b6f4d2-596e-4215-9972-f0a047550223",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d2f5c708-6206-4cec-babd-376b534a8cd6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "805b9361-5962-493c-bcf2-763bc1060d3f",
                  "parentUUID": "d2f5c708-6206-4cec-babd-376b534a8cd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "805b9361-5962-493c-bcf2-763bc1060d3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3a4231a8-a6b4-4c0d-87cd-5d7e245e6a83",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f4461979-ad6f-4f15-a3eb-23e905d7896d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "09c612fa-ce8a-45df-966a-15e507e44862",
                  "parentUUID": "f4461979-ad6f-4f15-a3eb-23e905d7896d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09c612fa-ce8a-45df-966a-15e507e44862"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 152,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9e57a6c4-78d6-4f82-8aab-5bc73f595614",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c6c2b5f2-45db-468e-8469-1e7320b81111",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 612,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "352df3ea-7492-4c00-9513-9e04724d077e",
                  "parentUUID": "c6c2b5f2-45db-468e-8469-1e7320b81111",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "352df3ea-7492-4c00-9513-9e04724d077e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 612,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2b15bc27-45ec-457c-8512-7b2409cd317d",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90811fb6-5539-426e-91fc-19490f93dd80",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 1795,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "86e213af-9861-4e87-9707-b50a1a76c706",
                  "parentUUID": "90811fb6-5539-426e-91fc-19490f93dd80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86e213af-9861-4e87-9707-b50a1a76c706"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1795,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dc5eb284-e108-4d08-a627-dae3b7aed542",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "604ffc26-aba2-40d9-b566-1ec017c4d0b8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 201,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 4504, 'gpname': 'reprehenderit in laboris minim fugiat', 'rank': 3, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "73591558-0676-4917-bdc0-42cc5f26d90d",
                  "parentUUID": "604ffc26-aba2-40d9-b566-1ec017c4d0b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73591558-0676-4917-bdc0-42cc5f26d90d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 201,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "30ac6eb4-1601-4c00-b918-64df030a22e9",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ed6431d4-1b54-4f18-bd95-8e855f43a2ba",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 201,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/7815', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "047a461c-b28b-439c-a45f-f7ff4179726a",
                  "parentUUID": "ed6431d4-1b54-4f18-bd95-8e855f43a2ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "047a461c-b28b-439c-a45f-f7ff4179726a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 201,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c6aad807-9304-4e2b-9d20-85f24818f13f",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cbc5e343-acc8-4c1b-b2ee-9596df4b3a91",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 202,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "38f9f5c2-d47c-43a2-aec5-3cfaa0fd63cf",
                  "parentUUID": "cbc5e343-acc8-4c1b-b2ee-9596df4b3a91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38f9f5c2-d47c-43a2-aec5-3cfaa0fd63cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 202,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1a494162-de3f-4752-b9fa-3a8aba76e93c",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c1f295eb-2e03-4e9d-83df-5070053ccc47",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d55e7d49-c7b1-4c6a-b940-fe1512660519",
                  "parentUUID": "c1f295eb-2e03-4e9d-83df-5070053ccc47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d55e7d49-c7b1-4c6a-b940-fe1512660519"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 204,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8c470756-f5fa-4fa7-a510-3f75b5c3db1a",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5a6ddfbf-d5de-408b-a02f-96a7e2016240",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "16f8257f-47c4-40c6-adf5-601fd2129c23",
                  "parentUUID": "5a6ddfbf-d5de-408b-a02f-96a7e2016240",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16f8257f-47c4-40c6-adf5-601fd2129c23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 204,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0f8bdf37-caa8-41bd-831c-01f76928d669",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4b2592e4-b22a-445a-a77c-2658131ab4bc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5fba051e-8e5f-46e1-a283-3ae345114ff3",
                  "parentUUID": "4b2592e4-b22a-445a-a77c-2658131ab4bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fba051e-8e5f-46e1-a283-3ae345114ff3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "863319e9-e042-4932-9972-c6b93b0035ae",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c76e54d8-5563-41d4-86ce-0d1e5ecb23e8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9887ac63-7aaf-4580-8426-3f4d2b00d887",
                  "parentUUID": "c76e54d8-5563-41d4-86ce-0d1e5ecb23e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9887ac63-7aaf-4580-8426-3f4d2b00d887"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b440f676-1b37-4786-a3de-edd9439b35eb",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2320cf50-cc20-402d-a32e-fdd20f1c0d66",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "189125a6-8abc-4cc3-9134-600da0a957e2",
                  "parentUUID": "2320cf50-cc20-402d-a32e-fdd20f1c0d66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "189125a6-8abc-4cc3-9134-600da0a957e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7b89d58c-1d6e-4ab0-8431-6c8d6c7f0c0d",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d72b890a-c6e9-4136-af76-73aab72a7923",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a65df740-0dd3-4101-b028-65b50923ac89",
                  "parentUUID": "d72b890a-c6e9-4136-af76-73aab72a7923",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a65df740-0dd3-4101-b028-65b50923ac89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c7db6054-54ad-484c-a760-890590290931",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "45938c63-b06f-4fbd-9f8d-66b5b3a10ca5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1c682933-378e-4395-b631-0ffa2b028d6a",
                  "parentUUID": "45938c63-b06f-4fbd-9f8d-66b5b3a10ca5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c682933-378e-4395-b631-0ffa2b028d6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "af915810-f7de-4b91-bc19-f610aa1c2fc4",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "28f6c39a-314a-4343-8151-444c9fa9cbaf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 17 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7427b8e3-ca34-4d70-becb-450dd3050928",
                  "parentUUID": "28f6c39a-314a-4343-8151-444c9fa9cbaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7427b8e3-ca34-4d70-becb-450dd3050928"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 168,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "77b192e2-5d2e-4248-a6bc-335d947e1c63",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1f608f9c-acdd-423e-a510-1bf3e90b6976",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b36fa4a3-f2e9-4da3-9094-3f0c7f8ba907",
                  "parentUUID": "1f608f9c-acdd-423e-a510-1bf3e90b6976",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b36fa4a3-f2e9-4da3-9094-3f0c7f8ba907"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ea65b73f-2e19-4c34-aef7-804c64c369bb",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "54dc6294-18c6-488a-afd3-64ae84c9aa45",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2053308d-f545-40af-a77d-5f5ac99196ec",
                  "parentUUID": "54dc6294-18c6-488a-afd3-64ae84c9aa45",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2053308d-f545-40af-a77d-5f5ac99196ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f68ea6af-a277-4065-a558-fc01d36aee99",
          "title": "tests for /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
          "file": "/test/v2.0-data-chronology-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dbd7a0f8-75f4-400e-bd71-97be28c6908c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
              "file": "/test/v2.0-data-chronology-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronology/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronology/7047', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "861fafb7-2791-4657-ada6-7d31c46e88d2",
                  "parentUUID": "dbd7a0f8-75f4-400e-bd71-97be28c6908c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "861fafb7-2791-4657-ada6-7d31c46e88d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b03d7ee3-18ce-45ad-916d-8fa837c0ee6c",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b7ee1a37-bf72-4e74-abf2-e2226de73517",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 341,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 5148, 'familyname': 'commodo ea veniam sit', 'contactname': 'aute anim', 'contactstatus': 'unknown', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ab382dde-cda9-45e3-bd40-cb67f1c2f220",
                  "parentUUID": "b7ee1a37-bf72-4e74-abf2-e2226de73517",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab382dde-cda9-45e3-bd40-cb67f1c2f220"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 341,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ccb451a4-2424-4112-a524-767c028c2706",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3a22e36f-9a75-4302-b9b4-a6ae6116f660",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c4607629-957b-4b11-a9c6-e94cf6e6f5bb",
                  "parentUUID": "3a22e36f-9a75-4302-b9b4-a6ae6116f660",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4607629-957b-4b11-a9c6-e94cf6e6f5bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 204,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2f0d270f-0ca5-40cd-a6ca-d6f1db2e5a6b",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "32402c89-1767-4c59-b18c-75bc8e8b0b2a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "85a109a5-0f30-4677-af8b-13ceead3b89d",
                  "parentUUID": "32402c89-1767-4c59-b18c-75bc8e8b0b2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85a109a5-0f30-4677-af8b-13ceead3b89d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e1633879-7250-4236-b957-a02c1dfed883",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9228dd53-52f4-48a2-9bf5-b1551106a3e8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 1746,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Neotoma Charcoal Data' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "42f3cf95-a2a6-47c3-b54b-83ec990f08bf",
                  "parentUUID": "9228dd53-52f4-48a2-9bf5-b1551106a3e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42f3cf95-a2a6-47c3-b54b-83ec990f08bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1746,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2dec12bd-9a6d-4dc2-8a3a-0a0891f86464",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "482e4b2d-58cc-4a4f-babc-2ccbd016fbc6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 728,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 24280, 'contactid': 16100, 'datasettype': 'est dolor amet labore commodo', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 12633816 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d7a11676-0a9d-48e2-96b0-093a0f0d36e5",
                  "parentUUID": "482e4b2d-58cc-4a4f-babc-2ccbd016fbc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7a11676-0a9d-48e2-96b0-093a0f0d36e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 728,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "be86a7b9-bdc8-41b9-909d-084b5242ef2b",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1365ce11-1e0d-43ee-b195-c1b31775f273",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "15f6173b-9d86-43ae-9930-e41b600db67c",
                  "parentUUID": "1365ce11-1e0d-43ee-b195-c1b31775f273",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15f6173b-9d86-43ae-9930-e41b600db67c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 144,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ed9a8545-6e0e-466a-ba68-1e04a0266c45",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7738fbbc-dc34-484c-aa1b-521fea1590b3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "cf4fd05d-fa41-4308-a18a-94057a1ac3a0",
                  "parentUUID": "7738fbbc-dc34-484c-aa1b-521fea1590b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf4fd05d-fa41-4308-a18a-94057a1ac3a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 168,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7ef9491d-9d2c-4077-a0f6-72b8ae9a89f3",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "47e328c5-e27b-49b9-8f2b-b7ba3fa60b71",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "58497e96-fe89-46a2-94b4-ad702f128302",
                  "parentUUID": "47e328c5-e27b-49b9-8f2b-b7ba3fa60b71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58497e96-fe89-46a2-94b4-ad702f128302"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "00858b7b-eb31-4dba-a3d0-f57604ba81fd",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "83e0bc50-7b8b-4458-aacb-ec433cc54763",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d37b1c85-7cf6-4d87-af5d-266387cc7240",
                  "parentUUID": "83e0bc50-7b8b-4458-aacb-ec433cc54763",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d37b1c85-7cf6-4d87-af5d-266387cc7240"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f61bbf70-b835-4afc-aa13-27f582bc9955",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bf7d74eb-d5d8-4d2f-82e4-be64904c7ab4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1f004a68-94a6-44bc-81fd-15c804b429ea",
                  "parentUUID": "bf7d74eb-d5d8-4d2f-82e4-be64904c7ab4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f004a68-94a6-44bc-81fd-15c804b429ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bc624ac0-df2d-4a3e-83b1-2dead2fc231a",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1b7b91ea-57e8-4f41-a268-d539a4e126e2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/681/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6bddc4e5-cde8-4496-bb95-68bc7fb8c3db",
                  "parentUUID": "1b7b91ea-57e8-4f41-a268-d539a4e126e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bddc4e5-cde8-4496-bb95-68bc7fb8c3db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b8598f16-2333-4c57-a618-70496784f33e",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e3dbeee4-0d6b-4695-ac93-4caa044aa6c8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6d02a39f-6e5a-4426-b263-5c1ed86345dc",
                  "parentUUID": "e3dbeee4-0d6b-4695-ac93-4caa044aa6c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d02a39f-6e5a-4426-b263-5c1ed86345dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3bc3df05-67a3-441a-b55f-7c74fb74ff0d",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "016eb26c-27f5-4af3-b3d4-2ddb11b4ab32",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 858,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "01ec2f04-134f-4ee8-b295-65f0e3120661",
                  "parentUUID": "016eb26c-27f5-4af3-b3d4-2ddb11b4ab32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01ec2f04-134f-4ee8-b295-65f0e3120661"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 858,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cab64a60-3c9e-419c-8d62-11f9d644ce17",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b4ee58bc-191a-409a-8803-2ed81383b9be",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 10709, 'contactid': 15783, 'datasettype': 'consequat enim', 'altmin': 10, 'altmax': -287, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 16136556 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "975e9270-705b-4cdd-9f45-86cd66b9b260",
                  "parentUUID": "b4ee58bc-191a-409a-8803-2ed81383b9be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "975e9270-705b-4cdd-9f45-86cd66b9b260"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e659906a-3caf-405f-afa1-aa65a46a9550",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4f72d585-f1ec-4197-987d-732ae3a9dd04",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 1627,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fc3e3e25-a69a-4b79-867b-3c5f5dd080b1",
                  "parentUUID": "4f72d585-f1ec-4197-987d-732ae3a9dd04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc3e3e25-a69a-4b79-867b-3c5f5dd080b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1627,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6cf703ec-7210-44c1-b194-1e9b05722172",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5bfdb8ab-f1cb-496c-bbd7-21161b450813",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 205,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'quis', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "580b9fe0-613c-417a-9ffb-b28d69cdef22",
                  "parentUUID": "5bfdb8ab-f1cb-496c-bbd7-21161b450813",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "580b9fe0-613c-417a-9ffb-b28d69cdef22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 205,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c0179550-aba6-4769-8c4b-44e4e53cb0fe",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2c2e197d-b1b4-467b-b58d-afc7823e0b5f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9423ce87-7655-4f94-bf1a-f4527ce530be",
                  "parentUUID": "2c2e197d-b1b4-467b-b58d-afc7823e0b5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9423ce87-7655-4f94-bf1a-f4527ce530be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "40c725c6-d7cf-4a41-a403-c7ad1a19f05c",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5675c040-74e6-4d7a-a9e1-6590d2d1f3e7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/5531', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "d3f5373f-31b6-4f00-861e-cb3bf6464271",
                  "parentUUID": "5675c040-74e6-4d7a-a9e1-6590d2d1f3e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d3f5373f-31b6-4f00-861e-cb3bf6464271"
              ],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c2a54992-4069-4de2-9ebb-e41a24f504ca",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d81fb814-bf47-449d-8f9a-06e98caad7fa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 384,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2492838f-f5f2-4767-b4c0-f410cf85e767",
                  "parentUUID": "d81fb814-bf47-449d-8f9a-06e98caad7fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2492838f-f5f2-4767-b4c0-f410cf85e767"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 384,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fb24e2cf-0ed9-4158-b7c6-20c6fa32b74e",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f4894d1a-de40-453c-b554-5cac8f079ced",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 200,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 1110, 'gpname': 'Excepteur ea id', 'rank': 3, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4d735180-98ea-49cd-b983-ac1ea2850be7",
                  "parentUUID": "f4894d1a-de40-453c-b554-5cac8f079ced",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d735180-98ea-49cd-b983-ac1ea2850be7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 200,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "98f2d9d1-4b6d-4800-9972-b2e1c8dc3610",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90fe3450-1aa4-491a-b9ff-ea274da0ea04",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/6919/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c0b259f4-22c3-460b-b7cc-8e7cd7a2207f",
                  "parentUUID": "90fe3450-1aa4-491a-b9ff-ea274da0ea04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0b259f4-22c3-460b-b7cc-8e7cd7a2207f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0771b39a-2481-4283-9961-d66c50f0de4d",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "53d379ee-9a0e-45a7-a038-95860ad4da78",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/500/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "446dfc35-cc3e-4f56-854e-34806d9f17e4",
                  "parentUUID": "53d379ee-9a0e-45a7-a038-95860ad4da78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "446dfc35-cc3e-4f56-854e-34806d9f17e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b6cd982a-0a02-42ed-9da8-8202322eecb5",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "334057ef-8c85-461a-bf6b-114f9651aa88",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/8860', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "337c8dc5-8f9c-4b6d-bd40-f6f1793482c3",
                  "parentUUID": "334057ef-8c85-461a-bf6b-114f9651aa88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "337c8dc5-8f9c-4b6d-bd40-f6f1793482c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 204,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c648d13c-fa5d-4008-8fcc-2aab99a8c178",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "de92ed1e-9072-4a88-ba73-ced18a2ff7b9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 146,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'ea ad eiusmod voluptate', 'taxonid': 40543, 'siteid': 2699, 'sitename': 'culpa deserunt ipsum cupidatat in', 'datasettype': 'culpa est enim elit cupidatat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 9276421, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "cf3522d1-60f9-457c-9c5b-7ae9443ea9f4",
                  "parentUUID": "de92ed1e-9072-4a88-ba73-ced18a2ff7b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf3522d1-60f9-457c-9c5b-7ae9443ea9f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 146,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "89bc2a01-6015-43be-ae46-d40f63d445c5",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "725356d8-51b2-4571-98d0-104163750fc6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 256,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f4ea26a7-867c-499c-ad44-f2389cc19400",
                  "parentUUID": "725356d8-51b2-4571-98d0-104163750fc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4ea26a7-867c-499c-ad44-f2389cc19400"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 256,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d7faf90a-380d-4af9-8977-5d34d7b61623",
          "title": "tests for /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
          "file": "/test/v2.0-data-oxcal-calibrate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "62404fb0-8c95-472a-ac16-57aa5ed82f7a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
              "file": "/test/v2.0-data-oxcal-calibrate-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "7ca2566f-312a-4cf5-bc79-da875bcfdf50",
                  "parentUUID": "62404fb0-8c95-472a-ac16-57aa5ed82f7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7ca2566f-312a-4cf5-bc79-da875bcfdf50"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "935bb4bc-3ce2-4d5d-bfbf-ce0d329240b7",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3b0040e5-087e-442f-bd21-6d8c2f662b3f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'esse Lorem reprehenderit dolore', 'taxonid': 12259, 'siteid': 5390, 'sitename': 'ut', 'datasettype': 'velit elit Excepteur consequat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 12604500, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f74e9c0d-a9d1-4881-9206-36803e678f5f",
                  "parentUUID": "3b0040e5-087e-442f-bd21-6d8c2f662b3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f74e9c0d-a9d1-4881-9206-36803e678f5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eec95a10-8127-4ff6-8df6-f667760145a2",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c5d8baa7-5578-44c5-a435-2ec71835be50",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b113c06d-67d5-404e-bfc6-41512dd59356",
                  "parentUUID": "c5d8baa7-5578-44c5-a435-2ec71835be50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b113c06d-67d5-404e-bfc6-41512dd59356"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d65f50a6-2188-4279-9677-7cb5f7a1f88f",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "84cdb8c0-de79-4a88-95b6-74a0e31f4506",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 182,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 19217, 'datasetid': 57863584, 'siteid': 17146, 'familyname': 'voluptate sunt sint nostrud', 'pubtype': 'Other Authored', 'year': 1588, 'search': 'Lorem', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2551be88-3ac0-4da3-9a01-6a2774086fc2",
                  "parentUUID": "84cdb8c0-de79-4a88-95b6-74a0e31f4506",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2551be88-3ac0-4da3-9a01-6a2774086fc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 182,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5b58006d-006f-4aae-a039-2927982863b5",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "739c955e-e3ad-40ec-a9c6-41d041f56169",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 215,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/{publicationid}', {\n  'qs': { 'publicationid': 5422 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "dc6dea56-32c0-4663-a519-cf0840e7271c",
                  "parentUUID": "739c955e-e3ad-40ec-a9c6-41d041f56169",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "dc6dea56-32c0-4663-a519-cf0840e7271c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 215,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2a3e6e3b-d52b-4379-9671-40a3bba4d9cc",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "549bd91c-cb28-4ae8-bd0e-7efe07f2c851",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 200,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 6666, 'sitename': 'proident Excepteur elit aliqua', 'altmax': 100, 'altmin': 10, 'loc': \"{3F'u~q}\", 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "b931399a-f4b5-4c6e-9eb5-9bf893775267",
                  "parentUUID": "549bd91c-cb28-4ae8-bd0e-7efe07f2c851",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b931399a-f4b5-4c6e-9eb5-9bf893775267"
              ],
              "pending": [],
              "skipped": [],
              "duration": 200,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "953a819c-1bdd-4f77-b44f-7d56a30f096d",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d1d3c906-d367-4ef1-9a4e-4c9184fb54c4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "cf60630d-c7b0-4b88-a6ad-90fb49f534ca",
                  "parentUUID": "d1d3c906-d367-4ef1-9a4e-4c9184fb54c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf60630d-c7b0-4b88-a6ad-90fb49f534ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 195,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e687598c-30ed-4335-bb16-e861cdffae45",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4d463ac7-0240-4edb-9ada-327012702ef9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/6005/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9251ddda-0c92-4801-b153-69171e84db55",
                  "parentUUID": "4d463ac7-0240-4edb-9ada-327012702ef9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9251ddda-0c92-4801-b153-69171e84db55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "45e25b4a-4802-4045-9dd1-08f0e9568fec",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "954ca99b-ff6f-4a52-b8ce-a882a8b851b8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/8715/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "bfd5c7ca-38de-46e6-9d59-2ef7cacabb64",
                  "parentUUID": "954ca99b-ff6f-4a52-b8ce-a882a8b851b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfd5c7ca-38de-46e6-9d59-2ef7cacabb64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6b4bd81a-5436-4a5e-ab25-40df9fa9962d",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8e577c68-b78d-464d-93d5-ee2b77b4e389",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 872,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8007f6bd-6673-493c-bcf2-08645a850479",
                  "parentUUID": "8e577c68-b78d-464d-93d5-ee2b77b4e389",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8007f6bd-6673-493c-bcf2-08645a850479"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 872,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "97564186-4382-4cc3-a6f8-76a2924e0b06",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6ca6ceaa-ba95-43c0-bf6e-1f3b3bd3cd99",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8a7fc6b0-e2c6-4a70-ae96-ac2a85133984",
                  "parentUUID": "6ca6ceaa-ba95-43c0-bf6e-1f3b3bd3cd99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a7fc6b0-e2c6-4a70-ae96-ac2a85133984"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ec17aa61-3454-46ac-ae93-c1e85647f950",
          "title": "tests for /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c443fe96-97ae-499e-804d-8c9c428e4900",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/8715/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "740b47af-7ab0-49ae-8b70-6f0a22d59779",
                  "parentUUID": "c443fe96-97ae-499e-804d-8c9c428e4900",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "740b47af-7ab0-49ae-8b70-6f0a22d59779"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "77b81016-54a0-47fa-b6f3-2ab39cf44bb5",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "31c10a0c-2c24-467f-bd1f-e33fb16e138a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/5513', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1ae5af54-a0e5-40ac-ab80-fbd1b2047724",
                  "parentUUID": "31c10a0c-2c24-467f-bd1f-e33fb16e138a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ae5af54-a0e5-40ac-ab80-fbd1b2047724"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ad1d8404-fa92-40a7-acab-213acb799a13",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8d63fafa-88ca-4952-bf10-15ae3bc32e37",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 287,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "05b9bde8-b076-47a7-9344-e79f3014bd97",
                  "parentUUID": "8d63fafa-88ca-4952-bf10-15ae3bc32e37",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05b9bde8-b076-47a7-9344-e79f3014bd97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 287,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee1dc8c6-1606-4cb6-ac67-c23643610a27",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c5dc0133-716b-4fcd-8109-43f33f836c08",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 264,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8588aee8-45f3-4388-94d9-4398ef5df431",
                  "parentUUID": "c5dc0133-716b-4fcd-8109-43f33f836c08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8588aee8-45f3-4388-94d9-4398ef5df431"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 264,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aa6e9586-68e5-4870-895b-616f6a7a5729",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5cdb569a-a626-494d-b09d-be4b2bdea104",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 4697,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "60bad607-5881-439d-afee-1a03f8d66899",
                  "parentUUID": "5cdb569a-a626-494d-b09d-be4b2bdea104",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60bad607-5881-439d-afee-1a03f8d66899"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4697,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e0c23ac8-d910-4f81-b320-54e0de447eac",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b3dc121c-c36f-4aec-8a09-06288b349b7d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'laboris commodo dolor', 'datasetid': 7001837, 'siteid': 801 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1790ed71-8fbe-41e7-80f3-97bbaf5ee784",
                  "parentUUID": "b3dc121c-c36f-4aec-8a09-06288b349b7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1790ed71-8fbe-41e7-80f3-97bbaf5ee784"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a6bc1695-ec0f-484a-88a2-f2c0be25b279",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6197d22a-4ada-48bc-8349-2060b81c42de",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 1295,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f9740da6-1169-4bc2-9e66-ea5eccf1b2ce",
                  "parentUUID": "6197d22a-4ada-48bc-8349-2060b81c42de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9740da6-1169-4bc2-9e66-ea5eccf1b2ce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1295,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1c457cc1-5dbf-46ba-a21c-e9dabab281e7",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "957f3534-856b-4213-bd94-51b6838a1a1f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1dfb25e2-5e68-4067-a294-a43c50b716aa",
                  "parentUUID": "957f3534-856b-4213-bd94-51b6838a1a1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1dfb25e2-5e68-4067-a294-a43c50b716aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "be8ffa83-1edb-4e60-a064-3bdc4fcedbda",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "937938d4-7236-483b-8f45-ead40ec39f06",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f5c59ec8-cc54-4adf-9e07-2668b7985af0",
                  "parentUUID": "937938d4-7236-483b-8f45-ead40ec39f06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5c59ec8-cc54-4adf-9e07-2668b7985af0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2a4baa95-e41a-4490-aa34-52e2a03ff964",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6316831-fc32-4e72-aaf6-e28126e9e6a0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "859a1428-b9a5-4206-9d90-465d4c449891",
                  "parentUUID": "e6316831-fc32-4e72-aaf6-e28126e9e6a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "859a1428-b9a5-4206-9d90-465d4c449891"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}