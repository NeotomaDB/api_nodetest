{
  "stats": {
    "suites": 110,
    "tests": 128,
    "passes": 116,
    "pending": 0,
    "failures": 12,
    "start": "2021-08-16T22:48:40.414Z",
    "end": "2021-08-16T22:50:05.337Z",
    "duration": 84923,
    "testsRegistered": 128,
    "passPercent": 90.625,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "64ed0c4a-164d-4896-b479-90ff11270fa1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "a9b0c0cc-640e-4625-a9a8-46be7bfa6094",
          "parentUUID": "64ed0c4a-164d-4896-b479-90ff11270fa1",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "8d7639da-2358-4a0a-a36e-de166aa4d049",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "ca1cb579-5225-4a80-8432-293406112b36",
              "parentUUID": "8d7639da-2358-4a0a-a36e-de166aa4d049",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca1cb579-5225-4a80-8432-293406112b36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get contact data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/')\n  .set('Accept', 'application/json')\n  .expect(302)\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "e76e4e48-3a19-412a-84d4-e0c151cb99f5",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "67f43285-0b43-4e51-ab8d-a87531d482de",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "ee35b557-eb49-4bfa-ba95-3c923f62bd92",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "14db3c51-7d41-48af-a288-32f5ae2cccba",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "89ba845f-901b-433b-956c-c34a1cbe0af4",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "adb37fa2-c960-4df1-a602-3fe23f84fab7",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "650f5c1d-9b9d-4dcf-9ddb-ae745e0186de",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "518425d8-ec01-4044-b722-8843b1c3c23f",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "aa97f291-91f1-44a4-8a32-0c417611da0e",
              "parentUUID": "cc26ae2c-9a2c-4bed-8685-f239802f1b7e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e76e4e48-3a19-412a-84d4-e0c151cb99f5",
            "67f43285-0b43-4e51-ab8d-a87531d482de",
            "ee35b557-eb49-4bfa-ba95-3c923f62bd92",
            "14db3c51-7d41-48af-a288-32f5ae2cccba",
            "89ba845f-901b-433b-956c-c34a1cbe0af4",
            "adb37fa2-c960-4df1-a602-3fe23f84fab7",
            "650f5c1d-9b9d-4dcf-9ddb-ae745e0186de",
            "518425d8-ec01-4044-b722-8843b1c3c23f",
            "aa97f291-91f1-44a4-8a32-0c417611da0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7db14e64-1242-474b-be11-f147b9c58d3a",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site', 'dataset');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "5fb80da8-aded-45dd-b6a3-b98d73cdb22e",
              "parentUUID": "7db14e64-1242-474b-be11-f147b9c58d3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "e93cc002-d8bd-46e9-b0c6-c42f06be9b51",
              "parentUUID": "7db14e64-1242-474b-be11-f147b9c58d3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ccf54f73-f9c6-4756-a4ea-cc60b2e9801a",
              "parentUUID": "7db14e64-1242-474b-be11-f147b9c58d3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "569aa482-58a6-482f-a93a-3e7d8e3ed3f0",
              "parentUUID": "7db14e64-1242-474b-be11-f147b9c58d3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "9fb11655-a597-4a69-b6a0-22e128e838fe",
              "parentUUID": "7db14e64-1242-474b-be11-f147b9c58d3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "d8c09e10-2fd4-4f37-b227-3cb7adc0f900",
              "parentUUID": "7db14e64-1242-474b-be11-f147b9c58d3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "d98a2a7a-5ed8-43c4-80a8-d8ea720607f3",
              "parentUUID": "7db14e64-1242-474b-be11-f147b9c58d3a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5fb80da8-aded-45dd-b6a3-b98d73cdb22e",
            "e93cc002-d8bd-46e9-b0c6-c42f06be9b51",
            "ccf54f73-f9c6-4756-a4ea-cc60b2e9801a",
            "569aa482-58a6-482f-a93a-3e7d8e3ed3f0",
            "9fb11655-a597-4a69-b6a0-22e128e838fe",
            "d8c09e10-2fd4-4f37-b227-3cb7adc0f900",
            "d98a2a7a-5ed8-43c4-80a8-d8ea720607f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "1454b49f-9714-4099-8b04-6dd945cb981b",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "f90d6fd0-d11b-4cea-8248-2f63fe7dc0e9",
              "parentUUID": "1454b49f-9714-4099-8b04-6dd945cb981b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "6a75db40-38ca-4920-94b8-8824fb3efb76",
              "parentUUID": "1454b49f-9714-4099-8b04-6dd945cb981b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "1a70c51f-b1f8-4dec-a50c-780fe3bcb00f",
              "parentUUID": "1454b49f-9714-4099-8b04-6dd945cb981b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "de303a7b-c4cf-4d25-a4f2-bd61d4927737",
              "parentUUID": "1454b49f-9714-4099-8b04-6dd945cb981b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f90d6fd0-d11b-4cea-8248-2f63fe7dc0e9",
            "6a75db40-38ca-4920-94b8-8824fb3efb76",
            "1a70c51f-b1f8-4dec-a50c-780fe3bcb00f",
            "de303a7b-c4cf-4d25-a4f2-bd61d4927737"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6865415b-a40c-468b-a43f-cf7ff2b43d16",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "d38fa2c4-1ef0-44ee-a051-995dfedcd75c",
              "parentUUID": "6865415b-a40c-468b-a43f-cf7ff2b43d16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d38fa2c4-1ef0-44ee-a051-995dfedcd75c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "cd275075-38ef-47dc-8805-d5fd8a8c8531",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "efead675-66e0-40cf-9593-41de6c4d3bf2",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "1d9b1e8f-bccc-4f25-81dd-8dedcb453450",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "11f778f6-c00e-4086-9a48-e4336a75aa90",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "92a646e3-a720-4dcf-b8be-c11a5607b57f",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "6f1f2aff-b627-4911-a2a9-10a39b435243",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "3d0568c4-6a42-4b85-bf71-01738f7ea14c",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "324c51b7-3b9d-4f91-9f8a-48e985963140",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "58f9e66b-5890-4c43-a555-76a2b66c9841",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "cbf021d3-30db-458e-a27d-6dcb86e815bd",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 7011,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "88a738c3-324e-47e2-9c69-0a66bcec82d8",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "8098f388-dfaf-40af-9bb7-5b537d676f13",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b8ff8145-22f7-4cc1-bb7b-c955a46081d9",
              "parentUUID": "3c599a96-47a8-4265-a679-b9a6f10ae41e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd275075-38ef-47dc-8805-d5fd8a8c8531",
            "efead675-66e0-40cf-9593-41de6c4d3bf2",
            "1d9b1e8f-bccc-4f25-81dd-8dedcb453450",
            "11f778f6-c00e-4086-9a48-e4336a75aa90",
            "92a646e3-a720-4dcf-b8be-c11a5607b57f",
            "6f1f2aff-b627-4911-a2a9-10a39b435243",
            "3d0568c4-6a42-4b85-bf71-01738f7ea14c",
            "324c51b7-3b9d-4f91-9f8a-48e985963140",
            "58f9e66b-5890-4c43-a555-76a2b66c9841",
            "cbf021d3-30db-458e-a27d-6dcb86e815bd",
            "88a738c3-324e-47e2-9c69-0a66bcec82d8",
            "8098f388-dfaf-40af-9bb7-5b537d676f13",
            "b8ff8145-22f7-4cc1-bb7b-c955a46081d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7577,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b518e3b9-90a0-42e9-9b2e-b5236d5ed9e3",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "1d499c78-9172-4dce-bc2a-561fb7152ca4",
              "parentUUID": "b518e3b9-90a0-42e9-9b2e-b5236d5ed9e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "43b24494-e67f-441b-afc7-b184519471c2",
              "parentUUID": "b518e3b9-90a0-42e9-9b2e-b5236d5ed9e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f66cee8a-32d8-4bb0-b0cc-e4753296bec4",
              "parentUUID": "b518e3b9-90a0-42e9-9b2e-b5236d5ed9e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a76e822a-4a06-4159-8b6c-332e96996b4e",
              "parentUUID": "b518e3b9-90a0-42e9-9b2e-b5236d5ed9e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b54d2bbf-87f8-4667-9902-070d1c4d82ec",
              "parentUUID": "b518e3b9-90a0-42e9-9b2e-b5236d5ed9e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "03f08d93-4548-4173-a621-dd7592075929",
              "parentUUID": "b518e3b9-90a0-42e9-9b2e-b5236d5ed9e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "7bb6f5fe-6d50-4c4b-bce6-98df481ff39e",
              "parentUUID": "b518e3b9-90a0-42e9-9b2e-b5236d5ed9e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d499c78-9172-4dce-bc2a-561fb7152ca4",
            "43b24494-e67f-441b-afc7-b184519471c2",
            "f66cee8a-32d8-4bb0-b0cc-e4753296bec4",
            "a76e822a-4a06-4159-8b6c-332e96996b4e",
            "b54d2bbf-87f8-4667-9902-070d1c4d82ec",
            "03f08d93-4548-4173-a621-dd7592075929",
            "7bb6f5fe-6d50-4c4b-bce6-98df481ff39e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 616,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "69d5d3cd-b17b-4e85-a022-155a01741643",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 155,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9c6cd182-74a7-473b-9d50-b34b3d9da11f",
              "parentUUID": "69d5d3cd-b17b-4e85-a022-155a01741643",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c6cd182-74a7-473b-9d50-b34b3d9da11f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 155,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fdd7c6a8-ee8e-4153-aeba-de35ffb7734a",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 8778,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "13443567-be2e-43b5-9b58-49a8a62647e5",
              "parentUUID": "fdd7c6a8-ee8e-4153-aeba-de35ffb7734a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13443567-be2e-43b5-9b58-49a8a62647e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8778,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "333ac005-0068-44e5-b4e9-cf989fa2dd27",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "8bcf6f8d-7ec0-4e23-b759-4d25406e9d06",
              "parentUUID": "333ac005-0068-44e5-b4e9-cf989fa2dd27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8bcf6f8d-7ec0-4e23-b759-4d25406e9d06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 182,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "404b151e-5b25-48ad-b12a-bb3ae098f3e8",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7ec400a8-f894-4778-be6a-ef054a651533",
              "parentUUID": "404b151e-5b25-48ad-b12a-bb3ae098f3e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ec400a8-f894-4778-be6a-ef054a651533"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1dfb7e33-bdaa-4220-901f-98cc86f319ff",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 811,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c1b881f2-820b-4003-8fb7-d2b49ce54dc8",
              "parentUUID": "1dfb7e33-bdaa-4220-901f-98cc86f319ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c1b881f2-820b-4003-8fb7-d2b49ce54dc8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 811,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "59f3bb83-195a-406d-b0b5-bc79430757f0",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1827,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b5464a90-cb05-4c8b-b55d-c0947a1f27e5",
              "parentUUID": "59f3bb83-195a-406d-b0b5-bc79430757f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5464a90-cb05-4c8b-b55d-c0947a1f27e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1827,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3fc116e2-009b-43a3-aad7-24bb56a821fb",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "df5bbdd0-1257-48bb-9690-926d3346c008",
              "parentUUID": "3fc116e2-009b-43a3-aad7-24bb56a821fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df5bbdd0-1257-48bb-9690-926d3346c008"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 198,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9fe92fa8-e52d-4eb8-90a6-451df7a95ad7",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 210,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "99bd7537-7216-493b-b707-01607fffa776",
              "parentUUID": "9fe92fa8-e52d-4eb8-90a6-451df7a95ad7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "99bd7537-7216-493b-b707-01607fffa776"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cf9eb73e-f3d9-4793-a70e-dc813d5d64e3",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2e98d096-b304-481b-b51b-72b611058028",
              "parentUUID": "cf9eb73e-f3d9-4793-a70e-dc813d5d64e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e98d096-b304-481b-b51b-72b611058028"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 206,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8d68a626-d1bf-4fe9-a613-6ab3ea19d1e3",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 205,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v1.5/data/sites/{siteid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    success: 1,\n    status: 'success',\n    data: [\n      {\n        siteid: 1,\n        sitename: '15/1',\n        sitedescription: 'Lake.',\n        geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n        altitude: 244,\n        collectionunitid: 1,\n        collectionunit: '15/1',\n        handle: '15-1',\n        unittype: 'Modern',\n        datasetid: 1,\n        datasettype: 'pollen surface sample'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v1.5/data/sites/{siteid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/sitesv1point5' } }\n    },\n    description: 'An array of site elements.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v1.5/data/sites/{siteid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    success: 1,\n    status: 'success',\n    data: [\n      {\n        siteid: 1,\n        sitename: '15/1',\n        sitedescription: 'Lake.',\n        geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n        altitude: 244,\n        collectionunitid: 1,\n        collectionunit: '15/1',\n        handle: '15-1',\n        unittype: 'Modern',\n        datasetid: 1,\n        datasettype: 'pollen surface sample'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v1.5/data/sites/{siteid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/sitesv1point5' } }\n    },\n    description: 'An array of site elements.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "ddd508ad-c81b-4168-9548-5962af7aa462",
              "parentUUID": "8d68a626-d1bf-4fe9-a613-6ab3ea19d1e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ddd508ad-c81b-4168-9548-5962af7aa462"
          ],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "bd7cc133-54f8-4644-b766-56c37ccfac64",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 328,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "c3ff787d-3a8b-4e96-9144-3b554967e585",
              "parentUUID": "bd7cc133-54f8-4644-b766-56c37ccfac64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c3ff787d-3a8b-4e96-9144-3b554967e585"
          ],
          "pending": [],
          "skipped": [],
          "duration": 328,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0ffa0ba5-1d4d-4f46-b73b-3074b4ccfa3c",
          "title": "GET /v2.0/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 278,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0d9e10b7-2d51-4827-b8c4-027158cfec77",
              "parentUUID": "0ffa0ba5-1d4d-4f46-b73b-3074b4ccfa3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d9e10b7-2d51-4827-b8c4-027158cfec77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "bcb36a0b-eb32-4c8c-83c8-afdd9e36ee48",
          "title": "GET /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronology/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "3a60e82d-b01c-4926-bf35-3887f089f247",
              "parentUUID": "bcb36a0b-eb32-4c8c-83c8-afdd9e36ee48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3a60e82d-b01c-4926-bf35-3887f089f247"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7b6bfb50-95f5-4a15-8aa0-62573cb5717a",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "b872da82-d901-4867-a8fc-d02746614928",
              "parentUUID": "7b6bfb50-95f5-4a15-8aa0-62573cb5717a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b872da82-d901-4867-a8fc-d02746614928"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "875b078a-0c78-4db3-9b12-fa7ffd9f43b5",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3025,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        sites: {\n          site: {\n            handle: 'ADYCHA',\n            siteid: 11,\n            altitude: 130,\n            sitename: 'Konus Exposure, Adycha River',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n            sitenotes: 'Adycha River, Lower Yana River.',\n            collectionunit: null,\n            sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n            collectionunitid: 11\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3097s', '10.21233/n3d59w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 8820,\n                  ageyoung: 1000\n                }\n              ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 11,\n              datasetpi: [\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                },\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 7860,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUILAR',\n            siteid: 15,\n            altitude: 4000,\n            sitename: 'Aguilar',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n            collectionunitid: 15\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3g974', '10.21233/n3w88w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9822,\n                  ageyoung: 0\n                }\n              ],\n              database: 'Latin American Pollen Database',\n              datasetid: 15,\n              datasetpi: [\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                },\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7863,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGE',\n            siteid: 12,\n            altitude: 58,\n            sitename: 'Ageröds Mosse',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n            sitenotes: 'Surrounding vegetation: birch woodland.',\n            collectionunit: null,\n            sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n            collectionunitid: 12\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/znex-sp94' ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 11004,\n                  ageyoung: -26\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9660,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 12,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                },\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Regnéll Joachim.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7861,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '16-1',\n            siteid: 3,\n            altitude: 285,\n            sitename: '16/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n            sitenotes: null,\n            collectionunit: '16/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 3\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/g2yc-7s57', '10.21233/n3rp48' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 3,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-1',\n            siteid: 4,\n            altitude: 235,\n            sitename: '17/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n            sitenotes: null,\n            collectionunit: '17/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 4\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/7s96-8m25',\n                '10.21233/n39g6x',\n                '10.21233/n3qp4z',\n                '10.21233/n3wh55'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 4,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADANGE',\n            siteid: 9,\n            altitude: 1750,\n            sitename: 'Adange',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n            sitenotes: 'The site is the wide part of the mouth of the river.',\n            collectionunit: null,\n            sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n            collectionunitid: 9\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3301b',\n                '10.21233/n37t27',\n                '10.21233/n3np4b'\n              ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 6051,\n                  ageyoung: -475\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4000,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 9,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Kvavadze Eliso V.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7859,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC2',\n            siteid: 14,\n            altitude: 4210,\n            sitename: 'Aguas Calientes 2',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Mire.',\n            collectionunitid: 14\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3101q', '10.21233/n3m10z' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 14,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7862,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-3',\n            siteid: 6,\n            altitude: 255,\n            sitename: '17/3',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n            sitenotes: null,\n            collectionunit: '17/3',\n            sitedescription: 'Lake.',\n            collectionunitid: 6\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n32011',\n                '10.21233/n3g59h',\n                '10.21233/n3n09b'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 6,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ABALONE',\n            siteid: 8,\n            altitude: 0,\n            sitename: 'Abalone Rocks Marsh',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n            collectionunitid: 8\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n36p49',\n                '10.21233/n3ch5h',\n                '10.21233/n3sg68'\n              ],\n              agerange: [\n                {\n                  units: 'Calendar years BP',\n                  ageold: 6904,\n                  ageyoung: -43\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 8,\n              datasetpi: [\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7858,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10469,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'charcoal',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADC001',\n            siteid: 10,\n            altitude: 37,\n            sitename: 'Site 1 (Cohen unpublished)',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: null,\n            collectionunitid: 10\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3409p', '10.21233/n3j01c' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10,\n              datasetpi: [\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                },\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-2',\n            siteid: 5,\n            altitude: 335,\n            sitename: '17/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n            sitenotes: null,\n            collectionunit: '17/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 5\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/8rvx-be32',\n                '10.21233/n35p40',\n                '10.21233/n3kw21',\n                '10.21233/n3rt1h'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 5,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC1',\n            siteid: 13,\n            altitude: 4210,\n            sitename: 'Aguas Calientes',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n            sitenotes: null,\n            collectionunit: '1',\n            sitedescription: 'Mire.',\n            collectionunitid: 13\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n34s3b', '10.21233/n3qt16' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 13,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '3PINES',\n            siteid: 7,\n            altitude: 294,\n            sitename: 'Three Pines Bog',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n            sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n            collectionunit: null,\n            sitedescription: 'Bog.',\n            collectionunitid: 7\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3bc7k',\n                '10.21233/n3h98t',\n                '10.21233/n3x59j'\n              ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 6485,\n                  ageyoung: -26\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 7,\n              datasetpi: [\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7857,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AHL5',\n            siteid: 16,\n            altitude: 2,\n            sitename: 'Ahlenmoor',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n            sitenotes: null,\n            collectionunit: 'AHL V',\n            sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n            collectionunitid: 16\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3bh6k', '10.21233/n3rg6z' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4276,\n                  ageyoung: 990\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 16,\n              datasetpi: [\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7864,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-1',\n            siteid: 1,\n            altitude: 244,\n            sitename: '15/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n            sitenotes: null,\n            collectionunit: '15/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 1\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-2',\n            siteid: 2,\n            altitude: 305,\n            sitename: '15/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n            sitenotes: null,\n            collectionunit: '15/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 2\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/hhsf-6760', '10.21233/n3wc7j' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 2,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/datasetv2' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        sites: {\n          site: {\n            handle: 'ADYCHA',\n            siteid: 11,\n            altitude: 130,\n            sitename: 'Konus Exposure, Adycha River',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n            sitenotes: 'Adycha River, Lower Yana River.',\n            collectionunit: null,\n            sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n            collectionunitid: 11\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3097s', '10.21233/n3d59w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 8820,\n                  ageyoung: 1000\n                }\n              ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 11,\n              datasetpi: [\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                },\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 7860,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUILAR',\n            siteid: 15,\n            altitude: 4000,\n            sitename: 'Aguilar',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n            collectionunitid: 15\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3g974', '10.21233/n3w88w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9822,\n                  ageyoung: 0\n                }\n              ],\n              database: 'Latin American Pollen Database',\n              datasetid: 15,\n              datasetpi: [\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                },\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7863,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGE',\n            siteid: 12,\n            altitude: 58,\n            sitename: 'Ageröds Mosse',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n            sitenotes: 'Surrounding vegetation: birch woodland.',\n            collectionunit: null,\n            sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n            collectionunitid: 12\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/znex-sp94' ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 11004,\n                  ageyoung: -26\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9660,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 12,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                },\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Regnéll Joachim.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7861,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '16-1',\n            siteid: 3,\n            altitude: 285,\n            sitename: '16/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n            sitenotes: null,\n            collectionunit: '16/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 3\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/g2yc-7s57', '10.21233/n3rp48' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 3,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-1',\n            siteid: 4,\n            altitude: 235,\n            sitename: '17/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n            sitenotes: null,\n            collectionunit: '17/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 4\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/7s96-8m25',\n                '10.21233/n39g6x',\n                '10.21233/n3qp4z',\n                '10.21233/n3wh55'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 4,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADANGE',\n            siteid: 9,\n            altitude: 1750,\n            sitename: 'Adange',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n            sitenotes: 'The site is the wide part of the mouth of the river.',\n            collectionunit: null,\n            sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n            collectionunitid: 9\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3301b',\n                '10.21233/n37t27',\n                '10.21233/n3np4b'\n              ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 6051,\n                  ageyoung: -475\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4000,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 9,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Kvavadze Eliso V.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7859,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC2',\n            siteid: 14,\n            altitude: 4210,\n            sitename: 'Aguas Calientes 2',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Mire.',\n            collectionunitid: 14\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3101q', '10.21233/n3m10z' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 14,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7862,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-3',\n            siteid: 6,\n            altitude: 255,\n            sitename: '17/3',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n            sitenotes: null,\n            collectionunit: '17/3',\n            sitedescription: 'Lake.',\n            collectionunitid: 6\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n32011',\n                '10.21233/n3g59h',\n                '10.21233/n3n09b'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 6,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ABALONE',\n            siteid: 8,\n            altitude: 0,\n            sitename: 'Abalone Rocks Marsh',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n            collectionunitid: 8\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n36p49',\n                '10.21233/n3ch5h',\n                '10.21233/n3sg68'\n              ],\n              agerange: [\n                {\n                  units: 'Calendar years BP',\n                  ageold: 6904,\n                  ageyoung: -43\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 8,\n              datasetpi: [\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7858,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10469,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'charcoal',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADC001',\n            siteid: 10,\n            altitude: 37,\n            sitename: 'Site 1 (Cohen unpublished)',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: null,\n            collectionunitid: 10\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3409p', '10.21233/n3j01c' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10,\n              datasetpi: [\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                },\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-2',\n            siteid: 5,\n            altitude: 335,\n            sitename: '17/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n            sitenotes: null,\n            collectionunit: '17/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 5\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/8rvx-be32',\n                '10.21233/n35p40',\n                '10.21233/n3kw21',\n                '10.21233/n3rt1h'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 5,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC1',\n            siteid: 13,\n            altitude: 4210,\n            sitename: 'Aguas Calientes',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n            sitenotes: null,\n            collectionunit: '1',\n            sitedescription: 'Mire.',\n            collectionunitid: 13\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n34s3b', '10.21233/n3qt16' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 13,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '3PINES',\n            siteid: 7,\n            altitude: 294,\n            sitename: 'Three Pines Bog',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n            sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n            collectionunit: null,\n            sitedescription: 'Bog.',\n            collectionunitid: 7\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3bc7k',\n                '10.21233/n3h98t',\n                '10.21233/n3x59j'\n              ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 6485,\n                  ageyoung: -26\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 7,\n              datasetpi: [\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7857,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AHL5',\n            siteid: 16,\n            altitude: 2,\n            sitename: 'Ahlenmoor',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n            sitenotes: null,\n            collectionunit: 'AHL V',\n            sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n            collectionunitid: 16\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3bh6k', '10.21233/n3rg6z' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4276,\n                  ageyoung: 990\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 16,\n              datasetpi: [\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7864,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-1',\n            siteid: 1,\n            altitude: 244,\n            sitename: '15/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n            sitenotes: null,\n            collectionunit: '15/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 1\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-2',\n            siteid: 2,\n            altitude: 305,\n            sitename: '15/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n            sitenotes: null,\n            collectionunit: '15/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 2\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/hhsf-6760', '10.21233/n3wc7j' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 2,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/datasetv2' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "ca2e51b5-021c-49c3-9e1c-5f3ac3174adb",
              "parentUUID": "875b078a-0c78-4db3-9b12-fa7ffd9f43b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ca2e51b5-021c-49c3-9e1c-5f3ac3174adb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3025,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3a9500d7-92d2-4add-8eaa-37474f1d44df",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1881,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "1c8810b0-2116-4ba6-ad18-e14fb2ba43b1",
              "parentUUID": "3a9500d7-92d2-4add-8eaa-37474f1d44df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1c8810b0-2116-4ba6-ad18-e14fb2ba43b1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1881,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cee5c4c9-95e3-4ebf-ac42-9dceb98e6aa2",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "dfb45167-4832-4901-bac1-ec74e8080d1b",
              "parentUUID": "cee5c4c9-95e3-4ebf-ac42-9dceb98e6aa2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dfb45167-4832-4901-bac1-ec74e8080d1b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e51e249d-8b86-4a11-8a11-a67f37fcac91",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "248c021e-2373-4f31-9345-1552a2c3a39e",
              "parentUUID": "e51e249d-8b86-4a11-8a11-a67f37fcac91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "248c021e-2373-4f31-9345-1552a2c3a39e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "84b7e1e3-5a9b-4536-8526-24bbf80996ac",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "de57633c-0ffd-4459-bd49-b0e6d85976df",
              "parentUUID": "84b7e1e3-5a9b-4536-8526-24bbf80996ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de57633c-0ffd-4459-bd49-b0e6d85976df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e328d4ae-d1d2-4cab-88a1-4c169dcd63a5",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "7235a8f6-45ab-4885-a8cb-08667bcda134",
              "parentUUID": "e328d4ae-d1d2-4cab-88a1-4c169dcd63a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7235a8f6-45ab-4885-a8cb-08667bcda134"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b296cb3e-da6b-4566-bb55-54cd4eb6a776",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cf86a160-a5c1-49f9-883a-71574705800b",
              "parentUUID": "b296cb3e-da6b-4566-bb55-54cd4eb6a776",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf86a160-a5c1-49f9-883a-71574705800b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 99,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "05a20a3c-b7e8-4e1f-9063-adbf72cd16a0",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5c51ee0a-4d3a-4b4b-b8fa-091b1028dd33",
              "parentUUID": "05a20a3c-b7e8-4e1f-9063-adbf72cd16a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c51ee0a-4d3a-4b4b-b8fa-091b1028dd33"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 178,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7a559a67-775d-42d0-8a84-e65d5bc2a785",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "349969fd-b1c8-45e1-aa31-ead124ff6a1b",
              "parentUUID": "7a559a67-775d-42d0-8a84-e65d5bc2a785",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "349969fd-b1c8-45e1-aa31-ead124ff6a1b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "734bba7f-34f2-4f1a-b486-0ec9dcd1b058",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "07665bd7-ec0a-4b4c-95e7-e1b1293e4b74",
              "parentUUID": "734bba7f-34f2-4f1a-b486-0ec9dcd1b058",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07665bd7-ec0a-4b4c-95e7-e1b1293e4b74"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "aa9cbc4b-e3c7-463c-a586-57c1e44fa3f7",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "4233518e-a4ca-4744-9f86-08eb146e4aad",
              "parentUUID": "aa9cbc4b-e3c7-463c-a586-57c1e44fa3f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4233518e-a4ca-4744-9f86-08eb146e4aad"
          ],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c27a7898-b970-429a-a191-25680972f018",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 733,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ef73ca04-cd73-422e-aceb-875b49730bba",
              "parentUUID": "c27a7898-b970-429a-a191-25680972f018",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef73ca04-cd73-422e-aceb-875b49730bba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 733,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cbd679c5-f689-4eca-8900-1fd4c6dbe43d",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d90aaef0-2dc2-4af5-a8f2-1ac818b88466",
              "parentUUID": "cbd679c5-f689-4eca-8900-1fd4c6dbe43d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d90aaef0-2dc2-4af5-a8f2-1ac818b88466"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 174,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8c138281-6b09-4a6d-bc38-8a2be13fda27",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "277257fa-170b-4cf8-9fd8-c473e39a9e1f",
              "parentUUID": "8c138281-6b09-4a6d-bc38-8a2be13fda27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "277257fa-170b-4cf8-9fd8-c473e39a9e1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d9950c3f-9095-4563-8d7f-76b1f73157d2",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1804,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "9a6c6979-fbeb-4de5-85c5-a058e634ae69",
              "parentUUID": "d9950c3f-9095-4563-8d7f-76b1f73157d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9a6c6979-fbeb-4de5-85c5-a058e634ae69"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1804,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2d920f2b-5c22-4195-a11d-6dc8e8a2d54d",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f7a2cbd1-a22a-42e9-abcb-fa2aca256009",
              "parentUUID": "2d920f2b-5c22-4195-a11d-6dc8e8a2d54d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7a2cbd1-a22a-42e9-abcb-fa2aca256009"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 199,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6820740c-dac7-4f9f-ab74-7b8cde5f31db",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/collectionTypes, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/dbtables, /v2.0/data/downloads/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/publications, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "23b2c992-4679-4954-a5fb-61faac6be183",
              "parentUUID": "6820740c-dac7-4f9f-ab74-7b8cde5f31db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "23b2c992-4679-4954-a5fb-61faac6be183"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "30ab5e4e-6ceb-400e-98e9-3d067e83b987",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 186,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in your API spec\n\nres did not satisfy it because: status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 1,\n        taxoncode: 'Abi',\n        taxonname: 'Abies',\n        author: 'Miller, 1754',\n        valid: true,\n        highertaxonid: 329,\n        extinct: false,\n        taxagroupid: 'VPL',\n        publicationid: 299,\n        validatorid: 44,\n        validatedate: '2017-04-21T07:00:00.000Z',\n        notes: null,\n        recdatecreated: '2012-03-21T07:00:00.000Z',\n        recdatemodified: '2017-04-21T17:46:35.000Z'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxa' } }\n    },\n    description: 'A taxon or array of taxa.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in your API spec\n\nres did not satisfy it because: status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 1,\n        taxoncode: 'Abi',\n        taxonname: 'Abies',\n        author: 'Miller, 1754',\n        valid: true,\n        highertaxonid: 329,\n        extinct: false,\n        taxagroupid: 'VPL',\n        publicationid: 299,\n        validatorid: 44,\n        validatedate: '2017-04-21T07:00:00.000Z',\n        notes: null,\n        recdatecreated: '2012-03-21T07:00:00.000Z',\n        recdatemodified: '2017-04-21T17:46:35.000Z'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxa' } }\n    },\n    description: 'A taxon or array of taxa.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "af144993-808c-4b50-8593-cc6fa8048702",
              "parentUUID": "30ab5e4e-6ceb-400e-98e9-3d067e83b987",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "af144993-808c-4b50-8593-cc6fa8048702"
          ],
          "pending": [],
          "skipped": [],
          "duration": 186,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a7ac82b0-416a-401e-b171-24b29cd999bf",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 29689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "92d60dc0-5276-46e8-b297-4996a5dff7c2",
              "parentUUID": "a7ac82b0-416a-401e-b171-24b29cd999bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92d60dc0-5276-46e8-b297-4996a5dff7c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29689,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "99e275fd-a718-42e3-b5a2-9751c42bf235",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "d88c0cdc-a5a3-4ace-b1a4-542fb6fcc525",
              "parentUUID": "99e275fd-a718-42e3-b5a2-9751c42bf235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "47296699-5aa3-43e9-a511-00e00d384c65",
              "parentUUID": "99e275fd-a718-42e3-b5a2-9751c42bf235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "8fe02b7e-d2fa-44a4-9eba-f14840657622",
              "parentUUID": "99e275fd-a718-42e3-b5a2-9751c42bf235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "110b8970-43f0-440f-bc73-9d27eb3c1a83",
              "parentUUID": "99e275fd-a718-42e3-b5a2-9751c42bf235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a7876e4f-5fe7-4dcc-842b-c51333a2d972",
              "parentUUID": "99e275fd-a718-42e3-b5a2-9751c42bf235",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d88c0cdc-a5a3-4ace-b1a4-542fb6fcc525",
            "47296699-5aa3-43e9-a511-00e00d384c65",
            "8fe02b7e-d2fa-44a4-9eba-f14840657622",
            "110b8970-43f0-440f-bc73-9d27eb3c1a83",
            "a7876e4f-5fe7-4dcc-842b-c51333a2d972"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 661,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4c61b33d-03ee-4609-8154-be9be7a2cc16",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 906,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "86d266f6-8fd5-4ca0-8183-31814d5a9c8c",
              "parentUUID": "4c61b33d-03ee-4609-8154-be9be7a2cc16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 2380,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "3afa2e6c-2ba0-4ad9-a409-f7574db95660",
              "parentUUID": "4c61b33d-03ee-4609-8154-be9be7a2cc16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 2404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "961c859e-94f6-4384-931b-e19b93689d0b",
              "parentUUID": "4c61b33d-03ee-4609-8154-be9be7a2cc16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86d266f6-8fd5-4ca0-8183-31814d5a9c8c",
            "3afa2e6c-2ba0-4ad9-a409-f7574db95660",
            "961c859e-94f6-4384-931b-e19b93689d0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5690,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "1cad5fd8-2542-4e7a-9d4b-86ad63161222",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 683,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "4bb6951a-a2ce-4b4d-a989-c68807e15482",
              "parentUUID": "1cad5fd8-2542-4e7a-9d4b-86ad63161222",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 2439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c167ea45-b54e-4be1-9233-3023af23ff05",
              "parentUUID": "1cad5fd8-2542-4e7a-9d4b-86ad63161222",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 2402,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b3b3e564-9a6e-4d78-bb15-ea69ef67b97b",
              "parentUUID": "1cad5fd8-2542-4e7a-9d4b-86ad63161222",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 2034,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "20f85f5f-72a7-4098-8f13-379da30e12f9",
              "parentUUID": "1cad5fd8-2542-4e7a-9d4b-86ad63161222",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4bb6951a-a2ce-4b4d-a989-c68807e15482",
            "c167ea45-b54e-4be1-9233-3023af23ff05",
            "b3b3e564-9a6e-4d78-bb15-ea69ef67b97b",
            "20f85f5f-72a7-4098-8f13-379da30e12f9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7558,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "62c0edd4-e10b-4de3-9329-1eae15328208",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "b3295026-41b3-4e87-9030-cf65bf29f9d3",
              "parentUUID": "62c0edd4-e10b-4de3-9329-1eae15328208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "37f0bd26-f42e-4f27-93bd-d1c63abe7282",
              "parentUUID": "62c0edd4-e10b-4de3-9329-1eae15328208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "fb81d3d8-2834-4ca7-8fd8-fc7ed5966359",
              "parentUUID": "62c0edd4-e10b-4de3-9329-1eae15328208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "8f5c5956-a119-4382-ac9a-b2ecade770b1",
              "parentUUID": "62c0edd4-e10b-4de3-9329-1eae15328208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 339,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "e983414e-8c72-433f-8148-1662314f2498",
              "parentUUID": "62c0edd4-e10b-4de3-9329-1eae15328208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "5aba2a4d-7318-43aa-ac83-12b02deab163",
              "parentUUID": "62c0edd4-e10b-4de3-9329-1eae15328208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "8b47995c-1aaa-4c1d-a6fc-bea84959a691",
              "parentUUID": "62c0edd4-e10b-4de3-9329-1eae15328208",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "4140983e-fe4c-471a-a284-aab8c47e9d59",
              "parentUUID": "62c0edd4-e10b-4de3-9329-1eae15328208",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3295026-41b3-4e87-9030-cf65bf29f9d3",
            "37f0bd26-f42e-4f27-93bd-d1c63abe7282",
            "fb81d3d8-2834-4ca7-8fd8-fc7ed5966359",
            "8f5c5956-a119-4382-ac9a-b2ecade770b1",
            "e983414e-8c72-433f-8148-1662314f2498",
            "5aba2a4d-7318-43aa-ac83-12b02deab163",
            "8b47995c-1aaa-4c1d-a6fc-bea84959a691",
            "4140983e-fe4c-471a-a284-aab8c47e9d59"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1200,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e87c98df-4081-4078-9e33-a7ebefc3eda9",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad32deed-d741-4bff-a636-20a69e7c5452",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "659ad215-1674-4c40-8556-70a18f8fad65",
                  "parentUUID": "ad32deed-d741-4bff-a636-20a69e7c5452",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "659ad215-1674-4c40-8556-70a18f8fad65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "80d905bc-17f7-4ba5-b0c0-5035dbf6c84d",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d2aa77f3-4a2f-49fd-b2f0-07e367d46f4f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c9d7732c-0bf2-4bb1-bb2d-4aca04733f4d",
                  "parentUUID": "d2aa77f3-4a2f-49fd-b2f0-07e367d46f4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9d7732c-0bf2-4bb1-bb2d-4aca04733f4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5c370da2-ac61-47d8-8fb8-489e51760d5e",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2b0cd526-2b69-4d3d-a031-59769e362394",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a7540a7e-2a8a-456b-8e1d-fec1dd6817ee",
                  "parentUUID": "2b0cd526-2b69-4d3d-a031-59769e362394",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7540a7e-2a8a-456b-8e1d-fec1dd6817ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1c28db80-4824-4d91-92fc-9cb87839a585",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "29692c01-ff79-400e-8dea-5bdd455418f8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/43854182', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2c102db9-296e-4105-aba3-72be2f374742",
                  "parentUUID": "29692c01-ff79-400e-8dea-5bdd455418f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c102db9-296e-4105-aba3-72be2f374742"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0eca297a-6afc-4013-bcd6-4f28b1695382",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c66bc6a-5ad6-4495-913f-82a657d8b534",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/8012682', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "46621a45-cd24-4223-aefd-8b8529dadbfa",
                  "parentUUID": "3c66bc6a-5ad6-4495-913f-82a657d8b534",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46621a45-cd24-4223-aefd-8b8529dadbfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "50c9113c-54e7-401a-8213-6e6cd1a292e6",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c3edf97b-57eb-4e05-be22-6d400e276fb2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 843,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/75643116', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1e3424f8-9775-461e-aa7f-4dc7dd28a859",
                  "parentUUID": "c3edf97b-57eb-4e05-be22-6d400e276fb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e3424f8-9775-461e-aa7f-4dc7dd28a859"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 843,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "66dcd9de-29c9-4391-a899-f9b8bcc561c2",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e004499c-1240-4846-bba8-bf4014b4297b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 29706306, 'gpname': 'officia eu Duis est in', 'rank': 4, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f819bd6a-1ae3-4ad6-9841-dec948803b03",
                  "parentUUID": "e004499c-1240-4846-bba8-bf4014b4297b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f819bd6a-1ae3-4ad6-9841-dec948803b03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2c05f144-ce03-4ffe-b1c5-35345f791e48",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b0d7a5b2-56b3-40d2-9563-5287af4d9e0d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 237,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/56189190', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d3e97100-739f-41bf-a63e-6a28ce5f0305",
                  "parentUUID": "b0d7a5b2-56b3-40d2-9563-5287af4d9e0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3e97100-739f-41bf-a63e-6a28ce5f0305"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 237,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e86e70b5-412f-4a80-8fcb-28d1c6bd5f15",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5dd3abdc-675f-4165-9359-24d5e01babe0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 202,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/4903980', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b5f6cc17-7f07-4928-9d40-cc27cbc22967",
                  "parentUUID": "5dd3abdc-675f-4165-9359-24d5e01babe0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5f6cc17-7f07-4928-9d40-cc27cbc22967"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 202,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f6fa28a8-7e5e-440e-86fd-e2463f290fab",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "21cb7502-7709-4780-9aa5-be2b9015d2fb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/6966', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2829ebff-5df2-4d57-a07c-23aebb4d44a0",
                  "parentUUID": "21cb7502-7709-4780-9aa5-be2b9015d2fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2829ebff-5df2-4d57-a07c-23aebb4d44a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e3c34870-dce8-49a3-8c7b-baf37555c7f8",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "49e62e59-3e5e-45a6-a094-2697f113caf5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 206,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "01cecf4b-89c5-48ad-bd56-b3a6f9fc3ed8",
                  "parentUUID": "49e62e59-3e5e-45a6-a094-2697f113caf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01cecf4b-89c5-48ad-bd56-b3a6f9fc3ed8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3895071b-a856-455d-ac9d-6981031ae0d1",
          "title": "tests for /v2.0/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectionTypes-test.js",
          "file": "/test/v2.0-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b5eb5963-afb6-4fbd-8999-1497caf2be93",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectionTypes-test.js",
              "file": "/test/v2.0-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectionTypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3038e598-cfdc-433f-8356-6738f4c3ea66",
                  "parentUUID": "b5eb5963-afb6-4fbd-8999-1497caf2be93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3038e598-cfdc-433f-8356-6738f4c3ea66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "373f7887-717d-4d44-9cbf-2c9f0dde88ce",
          "title": "tests for /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
          "file": "/test/v2.0-data-chronology-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1b600566-f37b-44f5-a551-ec2374e52b7f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
              "file": "/test/v2.0-data-chronology-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronology/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronology/63080155', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a7c5aa48-a3c1-4e55-8645-855c03846f85",
                  "parentUUID": "1b600566-f37b-44f5-a551-ec2374e52b7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7c5aa48-a3c1-4e55-8645-855c03846f85"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f8bcf81a-4666-48af-bdfd-07b9e2adb0b1",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c87503b6-7b3d-478a-bbe1-9c7f7e92ccdb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 179,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 75089173, 'familyname': 'Excepteur irure dolore', 'contactname': 'ad aliqua reprehenderit', 'contactstatus': 'unknown', 'limit': 12745308, 'offset': 98026064 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f86090e6-9e40-44d6-989d-0a2b8a081f40",
                  "parentUUID": "c87503b6-7b3d-478a-bbe1-9c7f7e92ccdb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f86090e6-9e40-44d6-989d-0a2b8a081f40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 179,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "dc7209ad-75b4-499f-8afd-5b8c4bb1c0ec",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a6363903-b49d-422e-8240-ce91a71ae4ef",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 4331, 'contactid': 86224163, 'datasettype': 'dolore sunt', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 2007549 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ad5d2763-7940-4760-879d-034c7e77520a",
                  "parentUUID": "a6363903-b49d-422e-8240-ce91a71ae4ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad5d2763-7940-4760-879d-034c7e77520a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1055,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8522adea-73f5-4fb5-a220-b6fc1c1f8020",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8d560d8b-65e0-4e2d-906e-5d9117aa782d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 374,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/65653200/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4fe63b62-f944-4f0e-846a-0b5e90e5ca3d",
                  "parentUUID": "8d560d8b-65e0-4e2d-906e-5d9117aa782d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fe63b62-f944-4f0e-846a-0b5e90e5ca3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 374,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "430c7445-cb50-488a-87db-25afb128d89e",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "020cd37a-f148-474b-879d-2e817b4da4d0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/16221629', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f377bb04-2b76-4445-a06c-70d5b7f85795",
                  "parentUUID": "020cd37a-f148-474b-879d-2e817b4da4d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f377bb04-2b76-4445-a06c-70d5b7f85795"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d932bf6c-cdaf-4418-875d-d63ea131c8af",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "597b11dc-488f-4dbf-82ee-d0e26db07ba3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 205,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'esse dolore fugiat enim est', 'limit': 79009783, 'offset': 4473146 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "cb063efd-6225-47d9-b5f2-715c5397e64f",
                  "parentUUID": "597b11dc-488f-4dbf-82ee-d0e26db07ba3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb063efd-6225-47d9-b5f2-715c5397e64f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 205,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9f105d09-a37a-4f8b-8618-9b750cde2819",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d7ffc0b9-a910-4039-aee6-2a6c134d6be7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/13589786', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ebe26f51-c8a8-4f1f-8bde-435b4c82577a",
                  "parentUUID": "d7ffc0b9-a910-4039-aee6-2a6c134d6be7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebe26f51-c8a8-4f1f-8bde-435b4c82577a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 204,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "dde95974-b9f1-4565-858b-84a7b3539122",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3561b756-0b36-4dd9-bd8e-51112d234bbe",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 201,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 24926675, 'gpname': 'eiusmod deserunt', 'rank': 2, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "bea753ea-fba6-4111-9e81-a412ed48fcf2",
                  "parentUUID": "3561b756-0b36-4dd9-bd8e-51112d234bbe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bea753ea-fba6-4111-9e81-a412ed48fcf2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 201,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "12ff1d97-c31e-43c7-8aa7-e79ceec79735",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0e4a60a8-b602-42f1-ba11-ee51b436988e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/98049872/sites', {\n  'qs': { 'limit': 64492091, 'offset': 27471150 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "667f4efe-a99f-4298-ad79-b9801cb6dfc4",
                  "parentUUID": "0e4a60a8-b602-42f1-ba11-ee51b436988e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "667f4efe-a99f-4298-ad79-b9801cb6dfc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "39c4ed2d-1c12-4ca3-bf5e-fc4fcab870b4",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "892550f1-0d91-45f6-8d98-5211b5a8946a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/95351660', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a51b22f3-0d9f-4bc4-ab5e-f8eea0be7b14",
                  "parentUUID": "892550f1-0d91-45f6-8d98-5211b5a8946a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a51b22f3-0d9f-4bc4-ab5e-f8eea0be7b14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e71d2d32-4aff-4bc9-9a39-227ba255a436",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3ce4fb4d-f20d-4a9b-8f93-ed7fefd71e78",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 202,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'cillum minim ea Lorem nostrud', 'taxonid': 36410, 'siteid': 26651, 'sitename': 'incididunt enim', 'datasettype': 'nostrud', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 16957777, 'ageyoung': 1000, 'ageold': 10000, 'limit': 99953621, 'offset': 56933265 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a0e4696b-5b20-4708-a8ed-ddd849648fb4",
                  "parentUUID": "3ce4fb4d-f20d-4a9b-8f93-ed7fefd71e78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0e4696b-5b20-4708-a8ed-ddd849648fb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 202,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a7d2b5d5-da3b-42d0-bca6-aa66f5bf20c3",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5437d9e6-1015-41e2-8f76-1fe2b95a621f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/7521599', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "48a86bb9-6fc7-4529-a131-ab9774c2136b",
                  "parentUUID": "5437d9e6-1015-41e2-8f76-1fe2b95a621f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48a86bb9-6fc7-4529-a131-ab9774c2136b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b7922c69-48a2-40d9-a926-555d77879890",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3b26013c-6a74-468f-9d5b-ce05fd71d0f8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 98523315, 'datasetid': 55954799, 'siteid': 5235, 'familyname': 'pariatur aliquip', 'pubtype': 'Undergraduate thesis', 'year': 1988, 'search': 'non Ut', 'limit': 88376352, 'offset': 85983082 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0dede07a-1f9d-40cb-a434-97dcae347ffe",
                  "parentUUID": "3b26013c-6a74-468f-9d5b-ce05fd71d0f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dede07a-1f9d-40cb-a434-97dcae347ffe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "eb1ef260-53e3-4aac-987c-34c43c2e9431",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "22cbe517-1283-4f35-a81b-1a5413a4b1c6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 210,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 7356, 'sitename': 'irure', 'altmax': 100, 'altmin': 10, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 68386205, 'offset': 30019115 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e608cab1-7957-44f1-9ac3-f762e0d00c4b",
                  "parentUUID": "22cbe517-1283-4f35-a81b-1a5413a4b1c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e608cab1-7957-44f1-9ac3-f762e0d00c4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 210,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2fa4865a-c187-4ed0-915a-4a1e7dac572d",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "08ed6870-8e10-4e4b-b2e6-86464f4d51c4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/24332/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "12717cc8-4c4b-4c4f-89db-c740e97e2042",
                  "parentUUID": "08ed6870-8e10-4e4b-b2e6-86464f4d51c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12717cc8-4c4b-4c4f-89db-c740e97e2042"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3b5518f3-7a15-4a7a-88b0-ce180e408de4",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "647428aa-2d9e-4443-9ba4-63123e650988",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 2262,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/22096/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0c798648-35e0-461c-947e-1943e1d82b5e",
                  "parentUUID": "647428aa-2d9e-4443-9ba4-63123e650988",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c798648-35e0-461c-947e-1943e1d82b5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "62f857aa-3321-4852-b0c0-bb355d1147bb",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "226c4489-2000-45c1-b4a9-7dd2f4ef2de3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1948/geopoliticalunits', {\n  'qs': { 'limit': 94732206, 'offset': 77189269 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fefef2ed-0c74-40ab-ac15-cf8b4889b35e",
                  "parentUUID": "226c4489-2000-45c1-b4a9-7dd2f4ef2de3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fefef2ed-0c74-40ab-ac15-cf8b4889b35e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c19a067f-6041-476a-b72a-8e897011bab7",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a2dffc49-5fd7-4b8b-a7d5-280391e2c1e2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/18996', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "08f0a45f-fd5c-4ba6-8b14-925fb367aeb1",
                  "parentUUID": "a2dffc49-5fd7-4b8b-a7d5-280391e2c1e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08f0a45f-fd5c-4ba6-8b14-925fb367aeb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9b2ec4ad-a7c1-4008-bed7-67a5ff8013b5",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "05e109e5-4bf9-4172-a350-f1654c0c88b2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 137,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'sunt aliquip', 'datasetid': 37407626, 'siteid': 4423 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "11eed548-2a5e-433f-8fa2-62be7aa2d8ab",
                  "parentUUID": "05e109e5-4bf9-4172-a350-f1654c0c88b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11eed548-2a5e-433f-8fa2-62be7aa2d8ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 137,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e1cb98f0-6aa5-42f8-b52b-ba8b19e20508",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "908306e4-023f-4ccf-9fb1-159c47580c82",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/46076/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f1956a55-2b04-4715-b2dd-ef572647bc9a",
                  "parentUUID": "908306e4-023f-4ccf-9fb1-159c47580c82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1956a55-2b04-4715-b2dd-ef572647bc9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "deb9aa72-7ba6-401b-9d33-8c4bfefc9cec",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "99cbe965-9648-440d-aba3-19134a884866",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/28929', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "62eb8987-7a01-4360-8841-32f12e53998a",
                  "parentUUID": "99cbe965-9648-440d-aba3-19134a884866",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62eb8987-7a01-4360-8841-32f12e53998a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}