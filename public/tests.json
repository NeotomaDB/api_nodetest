{
  "stats": {
    "suites": 209,
    "tests": 194,
    "passes": 147,
    "pending": 0,
    "failures": 47,
    "start": "2021-09-08T23:22:12.854Z",
    "end": "2021-09-08T23:23:41.878Z",
    "duration": 89024,
    "testsRegistered": 194,
    "passPercent": 75.77319587628865,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fb1cff30-8d9c-4c30-b67a-7b50ce7bdf3c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "a145a092-ceff-4eec-8e02-da2fed1d2cfa",
          "parentUUID": "fb1cff30-8d9c-4c30-b67a-7b50ce7bdf3c",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "6b145db1-8228-499b-8e8c-e6ac63b6feec",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 793,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "4e09af87-844a-4cb9-99f8-1311bc3dfde5",
              "parentUUID": "6b145db1-8228-499b-8e8c-e6ac63b6feec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e09af87-844a-4cb9-99f8-1311bc3dfde5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 793,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d8115f89-c730-442d-8a5e-c03d2c184a61",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get contact data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/')\n  .set('Accept', 'application/json')\n  .expect(302)\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "1b872eeb-e03e-4e43-a053-121db9efd91b",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "ac519e9a-33d8-4acf-8090-3751225ddf98",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "3b7eaabd-e3ad-41f1-b6dd-c4b5c915aa25",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "6f1533b3-e481-4bcf-9dfc-b13d8cd4d66a",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "4c36a312-44f4-4e7c-87ca-4ff64747d896",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "b12c5115-783e-48d0-b191-ff3a5236ec51",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "a3ef6b22-32d0-405a-b6a9-21393f99cf94",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "f1961229-d0c6-484b-8945-a63ccd87079b",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "446c2ba2-52af-4d81-a73c-08223ca0994e",
              "parentUUID": "d8115f89-c730-442d-8a5e-c03d2c184a61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b872eeb-e03e-4e43-a053-121db9efd91b",
            "ac519e9a-33d8-4acf-8090-3751225ddf98",
            "3b7eaabd-e3ad-41f1-b6dd-c4b5c915aa25",
            "6f1533b3-e481-4bcf-9dfc-b13d8cd4d66a",
            "4c36a312-44f4-4e7c-87ca-4ff64747d896",
            "b12c5115-783e-48d0-b191-ff3a5236ec51",
            "a3ef6b22-32d0-405a-b6a9-21393f99cf94",
            "f1961229-d0c6-484b-8945-a63ccd87079b",
            "446c2ba2-52af-4d81-a73c-08223ca0994e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 697,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9d17a629-5359-4d9d-8896-d91b660ad781",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site', 'dataset');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "08e7f05a-584f-432f-bda7-41e9fa9b7eaa",
              "parentUUID": "9d17a629-5359-4d9d-8896-d91b660ad781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 789,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "09577edf-7200-46f6-963d-44106e131ca4",
              "parentUUID": "9d17a629-5359-4d9d-8896-d91b660ad781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ecbb3f57-4d44-4a74-8883-870be4bdeefb",
              "parentUUID": "9d17a629-5359-4d9d-8896-d91b660ad781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 1315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "67491831-59b7-4261-9baf-b5bf9bd14cbd",
              "parentUUID": "9d17a629-5359-4d9d-8896-d91b660ad781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "fd448864-5260-4ca1-9bfa-d63e7a6bf7ff",
              "parentUUID": "9d17a629-5359-4d9d-8896-d91b660ad781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 1531,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "56296052-01a0-4874-bebb-3c2909c5be06",
              "parentUUID": "9d17a629-5359-4d9d-8896-d91b660ad781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1683,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f70af3eb-8dd7-42ae-bd3f-8d3246181881",
              "parentUUID": "9d17a629-5359-4d9d-8896-d91b660ad781",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08e7f05a-584f-432f-bda7-41e9fa9b7eaa",
            "09577edf-7200-46f6-963d-44106e131ca4",
            "ecbb3f57-4d44-4a74-8883-870be4bdeefb",
            "67491831-59b7-4261-9baf-b5bf9bd14cbd",
            "fd448864-5260-4ca1-9bfa-d63e7a6bf7ff",
            "56296052-01a0-4874-bebb-3c2909c5be06",
            "f70af3eb-8dd7-42ae-bd3f-8d3246181881"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7691,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "fa0a8bf3-ab40-4011-9457-7bf8e7425ecc",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "d3dda3b1-ea9f-4383-b64a-e0a91a00daf0",
              "parentUUID": "fa0a8bf3-ab40-4011-9457-7bf8e7425ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "fe2b06a6-36ed-45c1-b249-01581e55bfc6",
              "parentUUID": "fa0a8bf3-ab40-4011-9457-7bf8e7425ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "af0984e7-7ae8-4f14-a29f-c3cffdf44a17",
              "parentUUID": "fa0a8bf3-ab40-4011-9457-7bf8e7425ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "37fd479c-c3c5-4502-9380-ddc654599dad",
              "parentUUID": "fa0a8bf3-ab40-4011-9457-7bf8e7425ecc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3dda3b1-ea9f-4383-b64a-e0a91a00daf0",
            "fe2b06a6-36ed-45c1-b249-01581e55bfc6",
            "af0984e7-7ae8-4f14-a29f-c3cffdf44a17",
            "37fd479c-c3c5-4502-9380-ddc654599dad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 255,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "00eb1d2f-aa63-48a4-b528-6689ec0dcf36",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "da0d4869-52f4-41bb-81a1-a49f210d47fa",
              "parentUUID": "00eb1d2f-aa63-48a4-b528-6689ec0dcf36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da0d4869-52f4-41bb-81a1-a49f210d47fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a2502640-d076-4440-b8fc-f63274a91ecc",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "4c17309f-425a-4e66-8293-3bc819be633c",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 5981,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "dd545a91-c64a-429f-9f51-30e630796aa4",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 7818,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a336f777-e79c-4905-ae2e-af5b85e20c1e",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 2109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "56978a62-52e2-440f-b31f-4af2576baf6d",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "0daa3e28-669a-4e69-8e2e-7c5a920cb519",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "057cdcf7-abcb-45b2-8108-7350de16e40a",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "9c447fa2-6c49-4556-8cbe-588b330542b7",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 229,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c9580d63-c3da-4a52-994c-e5313a104c6a",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6234d050-f5ba-46ff-8563-c57fe79c2e37",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "851191c9-1fc1-4a5d-8039-38e920913175",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 3438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a360bee2-02d1-42dd-b2cc-9fe41cf59a6a",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "dc05d2b6-0977-4c6c-91e1-b40e6b718406",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 211,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "1dcd2355-3bc5-477b-8c8b-9e5bf6cfcb3a",
              "parentUUID": "a2502640-d076-4440-b8fc-f63274a91ecc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c17309f-425a-4e66-8293-3bc819be633c",
            "dd545a91-c64a-429f-9f51-30e630796aa4",
            "a336f777-e79c-4905-ae2e-af5b85e20c1e",
            "56978a62-52e2-440f-b31f-4af2576baf6d",
            "0daa3e28-669a-4e69-8e2e-7c5a920cb519",
            "057cdcf7-abcb-45b2-8108-7350de16e40a",
            "9c447fa2-6c49-4556-8cbe-588b330542b7",
            "c9580d63-c3da-4a52-994c-e5313a104c6a",
            "6234d050-f5ba-46ff-8563-c57fe79c2e37",
            "851191c9-1fc1-4a5d-8039-38e920913175",
            "a360bee2-02d1-42dd-b2cc-9fe41cf59a6a",
            "dc05d2b6-0977-4c6c-91e1-b40e6b718406",
            "1dcd2355-3bc5-477b-8c8b-9e5bf6cfcb3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20430,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8b001f49-138d-4a60-b92a-8d93886201a4",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a61c58d2-80f1-4620-8f01-56ac4fbde85e",
              "parentUUID": "8b001f49-138d-4a60-b92a-8d93886201a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "eb16da1b-7a8a-4dfe-8957-99b7ffed66ab",
              "parentUUID": "8b001f49-138d-4a60-b92a-8d93886201a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a8c836ee-4cf5-4e0d-a3b5-82086dd9e320",
              "parentUUID": "8b001f49-138d-4a60-b92a-8d93886201a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "9ad4d05d-83bc-458c-b4c2-28030a55192c",
              "parentUUID": "8b001f49-138d-4a60-b92a-8d93886201a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "d810453c-442c-4a82-b401-096a0ff21e74",
              "parentUUID": "8b001f49-138d-4a60-b92a-8d93886201a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "74768462-ebbb-45c9-a314-900addea8551",
              "parentUUID": "8b001f49-138d-4a60-b92a-8d93886201a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a5c43d52-04d2-45e2-8cdb-5f46186c1676",
              "parentUUID": "8b001f49-138d-4a60-b92a-8d93886201a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a61c58d2-80f1-4620-8f01-56ac4fbde85e",
            "eb16da1b-7a8a-4dfe-8957-99b7ffed66ab",
            "a8c836ee-4cf5-4e0d-a3b5-82086dd9e320",
            "9ad4d05d-83bc-458c-b4c2-28030a55192c",
            "d810453c-442c-4a82-b401-096a0ff21e74",
            "74768462-ebbb-45c9-a314-900addea8551",
            "a5c43d52-04d2-45e2-8cdb-5f46186c1676"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 576,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ee949661-5fda-4aa0-b088-f7d264ad459c",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b5e4a856-842c-4309-9b6d-fa74f397b917",
              "parentUUID": "ee949661-5fda-4aa0-b088-f7d264ad459c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5e4a856-842c-4309-9b6d-fa74f397b917"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 216,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f0509e13-83e5-4d8e-ac06-bbab457757e2",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "26b96812-6744-4db4-b628-7667241e0676",
              "parentUUID": "f0509e13-83e5-4d8e-ac06-bbab457757e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26b96812-6744-4db4-b628-7667241e0676"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6412,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0fee6700-5559-48e2-acd7-470cba846cae",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5dcc5d9f-9428-4cdd-8abb-133500b00e65",
              "parentUUID": "0fee6700-5559-48e2-acd7-470cba846cae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5dcc5d9f-9428-4cdd-8abb-133500b00e65"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3213aaa3-be28-4f3e-9c5f-4dbf26f61894",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1cf8eaca-c84b-4943-871f-0ad97f6811ea",
              "parentUUID": "3213aaa3-be28-4f3e-9c5f-4dbf26f61894",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1cf8eaca-c84b-4943-871f-0ad97f6811ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1def0c1c-4160-48b2-85bb-27fbbf6faf4c",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 620,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "6604ae1e-78b5-4999-9efb-e18fdeac07cb",
              "parentUUID": "1def0c1c-4160-48b2-85bb-27fbbf6faf4c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6604ae1e-78b5-4999-9efb-e18fdeac07cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 620,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "87bf3458-9247-4e86-a73f-a7128b2d8c47",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 632,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "37119b7d-fe05-4cd8-b965-9ad4b83687ee",
              "parentUUID": "87bf3458-9247-4e86-a73f-a7128b2d8c47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "37119b7d-fe05-4cd8-b965-9ad4b83687ee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 632,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "14edb0c2-d63f-4a8a-aaa1-1d9b7424c1ee",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "62ca1a01-a030-476d-82c7-e652303b3f5a",
              "parentUUID": "14edb0c2-d63f-4a8a-aaa1-1d9b7424c1ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62ca1a01-a030-476d-82c7-e652303b3f5a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5b34810d-777e-4e95-b154-95228d8b98be",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "4d9c2f2b-9bbe-4b7c-89ea-e3fa8d27f139",
              "parentUUID": "5b34810d-777e-4e95-b154-95228d8b98be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d9c2f2b-9bbe-4b7c-89ea-e3fa8d27f139"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2161dccc-4352-451c-b69a-a4e2a577e914",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ae7eb3fc-d18f-4bbe-a97b-71534652f413",
              "parentUUID": "2161dccc-4352-451c-b69a-a4e2a577e914",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae7eb3fc-d18f-4bbe-a97b-71534652f413"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b40fefbe-7872-42f9-b005-41cdf447382d",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3f49b0f0-5aca-413b-b204-ad9d65e090e8",
              "parentUUID": "b40fefbe-7872-42f9-b005-41cdf447382d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f49b0f0-5aca-413b-b204-ad9d65e090e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8f7d16a7-bf1c-41d2-806d-a7a3894659b1",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 237,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "bf8ebc60-3bed-4baa-bd46-364956b0f1f4",
              "parentUUID": "8f7d16a7-bf1c-41d2-806d-a7a3894659b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bf8ebc60-3bed-4baa-bd46-364956b0f1f4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 237,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "41b1df37-7257-42a8-827e-68b9de40f434",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 559,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "983e4720-967b-4e58-a621-1caf6a2a0102",
              "parentUUID": "41b1df37-7257-42a8-827e-68b9de40f434",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "983e4720-967b-4e58-a621-1caf6a2a0102"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 559,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6cd5f0ff-adf6-4e33-b86f-2344bec4c6fb",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b72cef26-d856-49a5-aaa1-78732ac8e68e",
              "parentUUID": "6cd5f0ff-adf6-4e33-b86f-2344bec4c6fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b72cef26-d856-49a5-aaa1-78732ac8e68e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a4c28f7f-9f0c-4b08-b8bf-34efb9bb19d5",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "738c0939-30e2-470a-b72e-abc2fe97d920",
              "parentUUID": "a4c28f7f-9f0c-4b08-b8bf-34efb9bb19d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "738c0939-30e2-470a-b72e-abc2fe97d920"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2280a060-c501-46d1-81c8-7143fe2c0b65",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 110,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/depositionalresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdeptenvtypesroot: '(6,Biological,11)' },\n      { getdeptenvtypesroot: '(99,Spring,7)' },\n      { getdeptenvtypesroot: '(19,Lacustrine,4)' },\n      { getdeptenvtypesroot: '(93,Sampler,4)' },\n      { getdeptenvtypesroot: '(1,Archaeological,7)' },\n      { getdeptenvtypesroot: '(16,Estuarine,3)' },\n      { getdeptenvtypesroot: '(51,Marine,10)' },\n      { getdeptenvtypesroot: '(103,Terrestrial,8)' },\n      { getdeptenvtypesroot: '(136,Other,3)' },\n      { getdeptenvtypesroot: '(180,Well,2)' },\n      { getdeptenvtypesroot: '(76,Riverine,5)' },\n      { getdeptenvtypesroot: '(137,Unknown,1)' },\n      { getdeptenvtypesroot: '(59,Palustrine,7)' }\n    ],\n    message: 'Retrieved root depositional environment types'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/depositionalresponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/depositionalresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdeptenvtypesroot: '(6,Biological,11)' },\n      { getdeptenvtypesroot: '(99,Spring,7)' },\n      { getdeptenvtypesroot: '(19,Lacustrine,4)' },\n      { getdeptenvtypesroot: '(93,Sampler,4)' },\n      { getdeptenvtypesroot: '(1,Archaeological,7)' },\n      { getdeptenvtypesroot: '(16,Estuarine,3)' },\n      { getdeptenvtypesroot: '(51,Marine,10)' },\n      { getdeptenvtypesroot: '(103,Terrestrial,8)' },\n      { getdeptenvtypesroot: '(136,Other,3)' },\n      { getdeptenvtypesroot: '(180,Well,2)' },\n      { getdeptenvtypesroot: '(76,Riverine,5)' },\n      { getdeptenvtypesroot: '(137,Unknown,1)' },\n      { getdeptenvtypesroot: '(59,Palustrine,7)' }\n    ],\n    message: 'Retrieved root depositional environment types'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/depositionalresponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "ab6a0094-97e1-4d35-958a-4828e2093ad5",
              "parentUUID": "2280a060-c501-46d1-81c8-7143fe2c0b65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ab6a0094-97e1-4d35-958a-4828e2093ad5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b252ed06-0043-482d-8ac6-7ed1a05a2321",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "00c3e6ba-3b88-4169-accf-daf1c693abe7",
              "parentUUID": "b252ed06-0043-482d-8ac6-7ed1a05a2321",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00c3e6ba-3b88-4169-accf-daf1c693abe7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8766e2c7-a1a4-4cee-a986-b713e6476bf0",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taphonomyresponse\n\nres contained: {\n  body: {\n    status: 'failure',\n    data: null,\n    message: 'No datasetTypeId provided.'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taphonomyresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taphonomyresponse\n\nres contained: {\n  body: {\n    status: 'failure',\n    data: null,\n    message: 'No datasetTypeId provided.'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taphonomyresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e8898323-d208-4a11-b47d-f4899962c925",
              "parentUUID": "8766e2c7-a1a4-4cee-a986-b713e6476bf0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e8898323-d208-4a11-b47d-f4899962c925"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e539b7d0-c42b-40e0-806b-9e574ac9ae3c",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 179,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taxagroupresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { gettaxagrouptypes: '(ACR,Acritarchs)' },\n      { gettaxagrouptypes: '(ALG,Algae)' },\n      { gettaxagrouptypes: '(ANM,\"Animals undiff.\")' },\n      { gettaxagrouptypes: '(ANL,Annelids)' },\n      { gettaxagrouptypes: '(AQU,\"Aquatic parameters\")' },\n      { gettaxagrouptypes: '(ART,\"Arthropods undiff.\")' },\n      { gettaxagrouptypes: '(AVE,Birds)' },\n      { gettaxagrouptypes: '(BRC,Brachiopods)' },\n      { gettaxagrouptypes: '(BRY,Bryophytes)' },\n      { gettaxagrouptypes: '(BRZ,Bryozoa)' },\n      { gettaxagrouptypes: '(CHO,Chromista)' },\n      { gettaxagrouptypes: '(CRU,\"Crustaceans undiff.\")' },\n      { gettaxagrouptypes: '(DIA,Diatoms)' },\n      { gettaxagrouptypes: '(DIN,Dinoflagellates)' },\n      { gettaxagrouptypes: '(ECH,Echinoderms)' },\n      { gettaxagrouptypes: '(FSH,Fish)' },\n      { gettaxagrouptypes: '(FLT,Flatworms)' },\n      { gettaxagrouptypes: '(FOR,Foraminifera)' },\n      { gettaxagrouptypes: '(FUN,Fungi)' },\n      { gettaxagrouptypes: '(INS,Insects)' },\n      { gettaxagrouptypes: '(MAM,Mammals)' },\n      { gettaxagrouptypes: '(MOL,Molluscs)' },\n      { gettaxagrouptypes: '(NEM,Nematodes)' },\n      { gettaxagrouptypes: '(CAR,\"Organic carbon\")' },\n      { gettaxagrouptypes: '(OST,Ostracode)' },\n      { gettaxagrouptypes: '(MAG,Paleomagnetics)' },\n      { gettaxagrouptypes: '(PHY,\"Physical variables\")' },\n      { gettaxagrouptypes: '(PHT,Phytolith)' },\n      { gettaxagrouptypes: '(PLA,\"Plants undiff.\")' },\n      { gettaxagrouptypes: '(PRO,\"Protista undiff.\")' },\n      { gettaxagrouptypes: '(HRP,\"Reptiles and amphibians\")' },\n      { gettaxagrouptypes: '(ROT,Rotifers)' },\n      { gettaxagrouptypes: '(SIL,Silicoflagellates)' },\n      { gettaxagrouptypes: '(SPO,Sponges)' },\n      { gettaxagrouptypes: '(ISO,\"Stable isotopes\")' },\n      { gettaxagrouptypes: '(TES,\"Testate amoebae\")' },\n      { gettaxagrouptypes: '(VPL,\"Vascular plants\")' },\n      { gettaxagrouptypes: '(VER,\"Vertebrates undiff.\")' }\n    ],\n    message: 'Retrieved all taxagrouptypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxagroupresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taxagroupresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { gettaxagrouptypes: '(ACR,Acritarchs)' },\n      { gettaxagrouptypes: '(ALG,Algae)' },\n      { gettaxagrouptypes: '(ANM,\"Animals undiff.\")' },\n      { gettaxagrouptypes: '(ANL,Annelids)' },\n      { gettaxagrouptypes: '(AQU,\"Aquatic parameters\")' },\n      { gettaxagrouptypes: '(ART,\"Arthropods undiff.\")' },\n      { gettaxagrouptypes: '(AVE,Birds)' },\n      { gettaxagrouptypes: '(BRC,Brachiopods)' },\n      { gettaxagrouptypes: '(BRY,Bryophytes)' },\n      { gettaxagrouptypes: '(BRZ,Bryozoa)' },\n      { gettaxagrouptypes: '(CHO,Chromista)' },\n      { gettaxagrouptypes: '(CRU,\"Crustaceans undiff.\")' },\n      { gettaxagrouptypes: '(DIA,Diatoms)' },\n      { gettaxagrouptypes: '(DIN,Dinoflagellates)' },\n      { gettaxagrouptypes: '(ECH,Echinoderms)' },\n      { gettaxagrouptypes: '(FSH,Fish)' },\n      { gettaxagrouptypes: '(FLT,Flatworms)' },\n      { gettaxagrouptypes: '(FOR,Foraminifera)' },\n      { gettaxagrouptypes: '(FUN,Fungi)' },\n      { gettaxagrouptypes: '(INS,Insects)' },\n      { gettaxagrouptypes: '(MAM,Mammals)' },\n      { gettaxagrouptypes: '(MOL,Molluscs)' },\n      { gettaxagrouptypes: '(NEM,Nematodes)' },\n      { gettaxagrouptypes: '(CAR,\"Organic carbon\")' },\n      { gettaxagrouptypes: '(OST,Ostracode)' },\n      { gettaxagrouptypes: '(MAG,Paleomagnetics)' },\n      { gettaxagrouptypes: '(PHY,\"Physical variables\")' },\n      { gettaxagrouptypes: '(PHT,Phytolith)' },\n      { gettaxagrouptypes: '(PLA,\"Plants undiff.\")' },\n      { gettaxagrouptypes: '(PRO,\"Protista undiff.\")' },\n      { gettaxagrouptypes: '(HRP,\"Reptiles and amphibians\")' },\n      { gettaxagrouptypes: '(ROT,Rotifers)' },\n      { gettaxagrouptypes: '(SIL,Silicoflagellates)' },\n      { gettaxagrouptypes: '(SPO,Sponges)' },\n      { gettaxagrouptypes: '(ISO,\"Stable isotopes\")' },\n      { gettaxagrouptypes: '(TES,\"Testate amoebae\")' },\n      { gettaxagrouptypes: '(VPL,\"Vascular plants\")' },\n      { gettaxagrouptypes: '(VER,\"Vertebrates undiff.\")' }\n    ],\n    message: 'Retrieved all taxagrouptypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxagroupresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "10d1c02a-ea68-432a-9d00-b397b1842d33",
              "parentUUID": "e539b7d0-c42b-40e0-806b-9e574ac9ae3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "10d1c02a-ea68-432a-9d00-b397b1842d33"
          ],
          "pending": [],
          "skipped": [],
          "duration": 179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0d7ec08f-31db-43ed-9d6c-11e962a27347",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2939,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "7f7cee02-d8c5-4441-be7a-64e011843d66",
              "parentUUID": "0d7ec08f-31db-43ed-9d6c-11e962a27347",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7f7cee02-d8c5-4441-be7a-64e011843d66"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2939,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0ca2e793-8e58-4320-92fc-3e965c8c9505",
          "title": "GET /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronology/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "f7cbe886-cf10-44fb-94cc-5d212e0ea195",
              "parentUUID": "0ca2e793-8e58-4320-92fc-3e965c8c9505",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f7cbe886-cf10-44fb-94cc-5d212e0ea195"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f3fa8007-8160-462a-9e46-c0fccf03c959",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "79e817a9-30c8-4607-91b9-a55d0e7b6be2",
              "parentUUID": "f3fa8007-8160-462a-9e46-c0fccf03c959",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "79e817a9-30c8-4607-91b9-a55d0e7b6be2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5491fa6f-0ee7-4618-bb81-b33f63c82ed6",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5f119f5e-2e6f-4645-ad38-c4ba5674c0df",
              "parentUUID": "5491fa6f-0ee7-4618-bb81-b33f63c82ed6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f119f5e-2e6f-4645-ad38-c4ba5674c0df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6b19e03d-216e-403d-bce0-9e72d6fde99a",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2e211297-8e88-4fd8-b490-237a4688ba2a",
              "parentUUID": "6b19e03d-216e-403d-bce0-9e72d6fde99a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e211297-8e88-4fd8-b490-237a4688ba2a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "adfbddb9-db13-4447-83cb-dfc75926dd77",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 22,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ffb16291-4d23-452d-8933-eb23066c2bbe",
              "parentUUID": "adfbddb9-db13-4447-83cb-dfc75926dd77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ffb16291-4d23-452d-8933-eb23066c2bbe"
          ],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f24c0ce0-8e4d-4b2b-978d-3b002e5749ac",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "140b4c25-72f9-4572-89f8-070614356ea0",
              "parentUUID": "f24c0ce0-8e4d-4b2b-978d-3b002e5749ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "140b4c25-72f9-4572-89f8-070614356ea0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1e4c37f3-16af-4bca-9b1e-baef8db3a6a4",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1876,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        sites: {\n          site: {\n            handle: 'ADYCHA',\n            siteid: 11,\n            altitude: 130,\n            sitename: 'Konus Exposure, Adycha River',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n            sitenotes: 'Adycha River, Lower Yana River.',\n            collectionunit: null,\n            sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n            collectionunitid: 11\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3097s', '10.21233/n3d59w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 8820,\n                  ageyoung: 1000\n                }\n              ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 11,\n              datasetpi: [\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                },\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 7860,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUILAR',\n            siteid: 15,\n            altitude: 4000,\n            sitename: 'Aguilar',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n            collectionunitid: 15\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3g974', '10.21233/n3w88w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9822,\n                  ageyoung: 0\n                }\n              ],\n              database: 'Latin American Pollen Database',\n              datasetid: 15,\n              datasetpi: [\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                },\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7863,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGE',\n            siteid: 12,\n            altitude: 58,\n            sitename: 'Ageröds Mosse',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n            sitenotes: 'Surrounding vegetation: birch woodland.',\n            collectionunit: null,\n            sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n            collectionunitid: 12\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/znex-sp94' ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 11004,\n                  ageyoung: -26\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9660,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 12,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                },\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Regnéll Joachim.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7861,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '16-1',\n            siteid: 3,\n            altitude: 285,\n            sitename: '16/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n            sitenotes: null,\n            collectionunit: '16/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 3\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/g2yc-7s57', '10.21233/n3rp48' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 3,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-1',\n            siteid: 4,\n            altitude: 235,\n            sitename: '17/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n            sitenotes: null,\n            collectionunit: '17/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 4\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/7s96-8m25',\n                '10.21233/n39g6x',\n                '10.21233/n3qp4z',\n                '10.21233/n3wh55'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 4,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADANGE',\n            siteid: 9,\n            altitude: 1750,\n            sitename: 'Adange',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n            sitenotes: 'The site is the wide part of the mouth of the river.',\n            collectionunit: null,\n            sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n            collectionunitid: 9\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3301b',\n                '10.21233/n37t27',\n                '10.21233/n3np4b'\n              ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 6051,\n                  ageyoung: -475\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4000,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 9,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Kvavadze Eliso V.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7859,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC2',\n            siteid: 14,\n            altitude: 4210,\n            sitename: 'Aguas Calientes 2',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Mire.',\n            collectionunitid: 14\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3101q', '10.21233/n3m10z' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 14,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7862,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-3',\n            siteid: 6,\n            altitude: 255,\n            sitename: '17/3',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n            sitenotes: null,\n            collectionunit: '17/3',\n            sitedescription: 'Lake.',\n            collectionunitid: 6\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n32011',\n                '10.21233/n3g59h',\n                '10.21233/n3n09b'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 6,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ABALONE',\n            siteid: 8,\n            altitude: 0,\n            sitename: 'Abalone Rocks Marsh',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n            collectionunitid: 8\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n36p49',\n                '10.21233/n3ch5h',\n                '10.21233/n3sg68'\n              ],\n              agerange: [\n                {\n                  units: 'Calendar years BP',\n                  ageold: 6904,\n                  ageyoung: -43\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 8,\n              datasetpi: [\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7858,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10469,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'charcoal',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADC001',\n            siteid: 10,\n            altitude: 37,\n            sitename: 'Site 1 (Cohen unpublished)',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: null,\n            collectionunitid: 10\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3409p', '10.21233/n3j01c' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10,\n              datasetpi: [\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                },\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-2',\n            siteid: 5,\n            altitude: 335,\n            sitename: '17/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n            sitenotes: null,\n            collectionunit: '17/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 5\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/8rvx-be32',\n                '10.21233/n35p40',\n                '10.21233/n3kw21',\n                '10.21233/n3rt1h'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 5,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC1',\n            siteid: 13,\n            altitude: 4210,\n            sitename: 'Aguas Calientes',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n            sitenotes: null,\n            collectionunit: '1',\n            sitedescription: 'Mire.',\n            collectionunitid: 13\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n34s3b', '10.21233/n3qt16' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 13,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '3PINES',\n            siteid: 7,\n            altitude: 294,\n            sitename: 'Three Pines Bog',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n            sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n            collectionunit: null,\n            sitedescription: 'Bog.',\n            collectionunitid: 7\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3bc7k',\n                '10.21233/n3h98t',\n                '10.21233/n3x59j'\n              ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 6485,\n                  ageyoung: -26\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 7,\n              datasetpi: [\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7857,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AHL5',\n            siteid: 16,\n            altitude: 2,\n            sitename: 'Ahlenmoor',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n            sitenotes: null,\n            collectionunit: 'AHL V',\n            sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n            collectionunitid: 16\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3bh6k', '10.21233/n3rg6z' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4276,\n                  ageyoung: 990\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 16,\n              datasetpi: [\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7864,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-1',\n            siteid: 1,\n            altitude: 244,\n            sitename: '15/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n            sitenotes: null,\n            collectionunit: '15/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 1\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-2',\n            siteid: 2,\n            altitude: 305,\n            sitename: '15/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n            sitenotes: null,\n            collectionunit: '15/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 2\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/hhsf-6760', '10.21233/n3wc7j' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 2,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/datasetv2' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        sites: {\n          site: {\n            handle: 'ADYCHA',\n            siteid: 11,\n            altitude: 130,\n            sitename: 'Konus Exposure, Adycha River',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n            sitenotes: 'Adycha River, Lower Yana River.',\n            collectionunit: null,\n            sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n            collectionunitid: 11\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3097s', '10.21233/n3d59w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 8820,\n                  ageyoung: 1000\n                }\n              ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 11,\n              datasetpi: [\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                },\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 7860,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUILAR',\n            siteid: 15,\n            altitude: 4000,\n            sitename: 'Aguilar',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n            collectionunitid: 15\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3g974', '10.21233/n3w88w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9822,\n                  ageyoung: 0\n                }\n              ],\n              database: 'Latin American Pollen Database',\n              datasetid: 15,\n              datasetpi: [\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                },\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7863,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGE',\n            siteid: 12,\n            altitude: 58,\n            sitename: 'Ageröds Mosse',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n            sitenotes: 'Surrounding vegetation: birch woodland.',\n            collectionunit: null,\n            sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n            collectionunitid: 12\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/znex-sp94' ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 11004,\n                  ageyoung: -26\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9660,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 12,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                },\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Regnéll Joachim.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7861,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '16-1',\n            siteid: 3,\n            altitude: 285,\n            sitename: '16/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n            sitenotes: null,\n            collectionunit: '16/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 3\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/g2yc-7s57', '10.21233/n3rp48' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 3,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-1',\n            siteid: 4,\n            altitude: 235,\n            sitename: '17/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n            sitenotes: null,\n            collectionunit: '17/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 4\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/7s96-8m25',\n                '10.21233/n39g6x',\n                '10.21233/n3qp4z',\n                '10.21233/n3wh55'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 4,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADANGE',\n            siteid: 9,\n            altitude: 1750,\n            sitename: 'Adange',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n            sitenotes: 'The site is the wide part of the mouth of the river.',\n            collectionunit: null,\n            sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n            collectionunitid: 9\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3301b',\n                '10.21233/n37t27',\n                '10.21233/n3np4b'\n              ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 6051,\n                  ageyoung: -475\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4000,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 9,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Kvavadze Eliso V.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7859,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC2',\n            siteid: 14,\n            altitude: 4210,\n            sitename: 'Aguas Calientes 2',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Mire.',\n            collectionunitid: 14\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3101q', '10.21233/n3m10z' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 14,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7862,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-3',\n            siteid: 6,\n            altitude: 255,\n            sitename: '17/3',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n            sitenotes: null,\n            collectionunit: '17/3',\n            sitedescription: 'Lake.',\n            collectionunitid: 6\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n32011',\n                '10.21233/n3g59h',\n                '10.21233/n3n09b'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 6,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ABALONE',\n            siteid: 8,\n            altitude: 0,\n            sitename: 'Abalone Rocks Marsh',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n            collectionunitid: 8\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n36p49',\n                '10.21233/n3ch5h',\n                '10.21233/n3sg68'\n              ],\n              agerange: [\n                {\n                  units: 'Calendar years BP',\n                  ageold: 6904,\n                  ageyoung: -43\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 8,\n              datasetpi: [\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7858,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10469,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'charcoal',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADC001',\n            siteid: 10,\n            altitude: 37,\n            sitename: 'Site 1 (Cohen unpublished)',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: null,\n            collectionunitid: 10\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3409p', '10.21233/n3j01c' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10,\n              datasetpi: [\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                },\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-2',\n            siteid: 5,\n            altitude: 335,\n            sitename: '17/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n            sitenotes: null,\n            collectionunit: '17/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 5\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/8rvx-be32',\n                '10.21233/n35p40',\n                '10.21233/n3kw21',\n                '10.21233/n3rt1h'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 5,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC1',\n            siteid: 13,\n            altitude: 4210,\n            sitename: 'Aguas Calientes',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n            sitenotes: null,\n            collectionunit: '1',\n            sitedescription: 'Mire.',\n            collectionunitid: 13\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n34s3b', '10.21233/n3qt16' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 13,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '3PINES',\n            siteid: 7,\n            altitude: 294,\n            sitename: 'Three Pines Bog',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n            sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n            collectionunit: null,\n            sitedescription: 'Bog.',\n            collectionunitid: 7\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3bc7k',\n                '10.21233/n3h98t',\n                '10.21233/n3x59j'\n              ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 6485,\n                  ageyoung: -26\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 7,\n              datasetpi: [\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7857,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AHL5',\n            siteid: 16,\n            altitude: 2,\n            sitename: 'Ahlenmoor',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n            sitenotes: null,\n            collectionunit: 'AHL V',\n            sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n            collectionunitid: 16\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3bh6k', '10.21233/n3rg6z' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4276,\n                  ageyoung: 990\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 16,\n              datasetpi: [\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7864,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-1',\n            siteid: 1,\n            altitude: 244,\n            sitename: '15/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n            sitenotes: null,\n            collectionunit: '15/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 1\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-2',\n            siteid: 2,\n            altitude: 305,\n            sitename: '15/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n            sitenotes: null,\n            collectionunit: '15/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 2\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/hhsf-6760', '10.21233/n3wc7j' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 2,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/datasetv2' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "2f10c9d5-5a47-4764-a421-fd97f381dcde",
              "parentUUID": "1e4c37f3-16af-4bca-9b1e-baef8db3a6a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2f10c9d5-5a47-4764-a421-fd97f381dcde"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1876,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c611dde3-32cf-4467-9c15-d29b4783f69a",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1152,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "f9c3349c-18e4-45af-afd3-696995d1d08c",
              "parentUUID": "c611dde3-32cf-4467-9c15-d29b4783f69a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f9c3349c-18e4-45af-afd3-696995d1d08c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1152,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "94315405-b9ea-4590-9add-73ccf7642472",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 111,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologiesresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/chronologiesresponse' }\n      }\n    },\n    description: 'chronology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologiesresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/chronologiesresponse' }\n      }\n    },\n    description: 'chronology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "18c96763-de40-4122-9e01-315b16dccbcf",
              "parentUUID": "94315405-b9ea-4590-9add-73ccf7642472",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "18c96763-de40-4122-9e01-315b16dccbcf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7f346af2-0d2e-4e0d-a67d-32d1fa4e782f",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f3fca923-6228-4e19-9c09-e78f4b6ec786",
              "parentUUID": "7f346af2-0d2e-4e0d-a67d-32d1fa4e782f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f3fca923-6228-4e19-9c09-e78f4b6ec786"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a7e33a31-6942-413b-9abf-be74e42432d2",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/doiresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [ { datasetid: 1, dois: '10.21233/9twd-s570' } ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/doiresponse' } }\n    },\n    description: 'DOI'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/doiresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [ { datasetid: 1, dois: '10.21233/9twd-s570' } ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/doiresponse' } }\n    },\n    description: 'DOI'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "09835463-5383-41ee-83a9-9e18d4dc35a9",
              "parentUUID": "a7e33a31-6942-413b-9abf-be74e42432d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "09835463-5383-41ee-83a9-9e18d4dc35a9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cd05359e-31d2-4602-befd-88d0da649b65",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 96,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/lithologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/lithologyresponse' } }\n    },\n    description: 'Lithology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/lithologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/lithologyresponse' } }\n    },\n    description: 'Lithology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "bd2e92b1-9e26-48ac-a546-113f40c39ad2",
              "parentUUID": "cd05359e-31d2-4602-befd-88d0da649b65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bd2e92b1-9e26-48ac-a546-113f40c39ad2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 96,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f5c6ba0b-6cbb-4465-8fb3-97b4193956e6",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 102,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "32aa5999-d9f7-435c-a858-136a5c7845b3",
              "parentUUID": "f5c6ba0b-6cbb-4465-8fb3-97b4193956e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "32aa5999-d9f7-435c-a858-136a5c7845b3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0d887987-d1b6-4e92-a777-3cd712006993",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "df824964-0137-4825-9458-b3f6f27fbc51",
              "parentUUID": "0d887987-d1b6-4e92-a777-3cd712006993",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df824964-0137-4825-9458-b3f6f27fbc51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d53fadb7-20aa-4939-b735-1d6defa3f113",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[0].ecolgroup should be array, data[0].status should be boolean, data[1].author should be string, data[1].ecolgroup should be array, data[1].publicationid should be integer, data[1].status should be boolean, data[2].ecolgroup should be array, data[2].status should be boolean, data[3].ecolgroup should be array, data[3].status should be boolean, data[4].ecolgroup should be array, data[4].status should be boolean, data[5].ecolgroup should be array, data[5].status should be boolean, data[6].ecolgroup should be array, data[6].status should be boolean, data[7].ecolgroup should be array, data[7].status should be boolean, data[8].ecolgroup should be array, data[8].status should be boolean, data[9].ecolgroup should be array, data[9].status should be boolean, data[10].ecolgroup should be array, data[10].status should be boolean, data[11].ecolgroup should be array, data[11].status should be boolean, data[12].ecolgroup should be array, data[12].status should be boolean, data[13].ecolgroup should be array, data[13].status should be boolean, data[14].author should be string, data[14].ecolgroup should be array, data[14].publicationid should be integer, data[14].status should be boolean, data[15].ecolgroup should be array, data[15].status should be boolean, data[16].author should be string, data[16].ecolgroup should be array, data[16].publicationid should be integer, data[16].status should be boolean, data[17].ecolgroup should be array, data[17].status should be boolean, data[18].ecolgroup should be array, data[18].status should be boolean, data[19].ecolgroup should be array, data[19].status should be boolean, data[20].ecolgroup should be array, data[20].status should be boolean, data[21].ecolgroup should be array, data[21].status should be boolean, data[22].ecolgroup should be array, data[22].status should be boolean, data[23].ecolgroup should be array, data[23].status should be boolean, data[24].ecolgroup should be array, data[24].status should be boolean, data[25].ecolgroup should be array, data[25].status should be boolean, data[26].ecolgroup should be array, data[26].status should be boolean, data[27].ecolgroup should be array, data[27].status should be boolean, data[28].ecolgroup should be array, data[28].status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          type: 'object',\n          properties: {\n            status: { '$ref': '#/components/schemas/status' },\n            message: { '$ref': '#/components/schemas/message' },\n            data: {\n              type: 'array',\n              items: { '$ref': '#/components/schemas/taxa' }\n            }\n          }\n        }\n      }\n    },\n    description: 'Taxa'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[0].ecolgroup should be array, data[0].status should be boolean, data[1].author should be string, data[1].ecolgroup should be array, data[1].publicationid should be integer, data[1].status should be boolean, data[2].ecolgroup should be array, data[2].status should be boolean, data[3].ecolgroup should be array, data[3].status should be boolean, data[4].ecolgroup should be array, data[4].status should be boolean, data[5].ecolgroup should be array, data[5].status should be boolean, data[6].ecolgroup should be array, data[6].status should be boolean, data[7].ecolgroup should be array, data[7].status should be boolean, data[8].ecolgroup should be array, data[8].status should be boolean, data[9].ecolgroup should be array, data[9].status should be boolean, data[10].ecolgroup should be array, data[10].status should be boolean, data[11].ecolgroup should be array, data[11].status should be boolean, data[12].ecolgroup should be array, data[12].status should be boolean, data[13].ecolgroup should be array, data[13].status should be boolean, data[14].author should be string, data[14].ecolgroup should be array, data[14].publicationid should be integer, data[14].status should be boolean, data[15].ecolgroup should be array, data[15].status should be boolean, data[16].author should be string, data[16].ecolgroup should be array, data[16].publicationid should be integer, data[16].status should be boolean, data[17].ecolgroup should be array, data[17].status should be boolean, data[18].ecolgroup should be array, data[18].status should be boolean, data[19].ecolgroup should be array, data[19].status should be boolean, data[20].ecolgroup should be array, data[20].status should be boolean, data[21].ecolgroup should be array, data[21].status should be boolean, data[22].ecolgroup should be array, data[22].status should be boolean, data[23].ecolgroup should be array, data[23].status should be boolean, data[24].ecolgroup should be array, data[24].status should be boolean, data[25].ecolgroup should be array, data[25].status should be boolean, data[26].ecolgroup should be array, data[26].status should be boolean, data[27].ecolgroup should be array, data[27].status should be boolean, data[28].ecolgroup should be array, data[28].status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          type: 'object',\n          properties: {\n            status: { '$ref': '#/components/schemas/status' },\n            message: { '$ref': '#/components/schemas/message' },\n            data: {\n              type: 'array',\n              items: { '$ref': '#/components/schemas/taxa' }\n            }\n          }\n        }\n      }\n    },\n    description: 'Taxa'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "064479a6-2f1f-4834-ac84-0752c3f4d4f7",
              "parentUUID": "d53fadb7-20aa-4939-b735-1d6defa3f113",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "064479a6-2f1f-4834-ac84-0752c3f4d4f7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7d220cf3-9b26-47f7-95ea-f8f0ff21774f",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "fefc3a1b-5755-452c-a9fc-db01bdc79a96",
              "parentUUID": "7d220cf3-9b26-47f7-95ea-f8f0ff21774f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "fefc3a1b-5755-452c-a9fc-db01bdc79a96"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "39b221f7-2729-484f-ba0b-297c85af84ce",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 419,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3b647995-8a3c-4f66-801d-f6fb1c7fb280",
              "parentUUID": "39b221f7-2729-484f-ba0b-297c85af84ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b647995-8a3c-4f66-801d-f6fb1c7fb280"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b9e2a598-6b22-4336-861b-9ee173920b96",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "813612cb-556e-4cca-9395-9de10d8df724",
              "parentUUID": "b9e2a598-6b22-4336-861b-9ee173920b96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "813612cb-556e-4cca-9395-9de10d8df724"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "53b0b256-f61a-420d-8a40-0cc5b535aa8c",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "c994e3b4-d621-4bfc-9fc5-fe2221cc2d4c",
              "parentUUID": "53b0b256-f61a-420d-8a40-0cc5b535aa8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c994e3b4-d621-4bfc-9fc5-fe2221cc2d4c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ee493c48-06a4-45c1-b39e-3e296767a942",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1542d92f-8799-4928-8a2e-33d3f8d86738",
              "parentUUID": "ee493c48-06a4-45c1-b39e-3e296767a942",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1542d92f-8799-4928-8a2e-33d3f8d86738"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 147,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5f8dd5e0-a90e-43d3-a214-aec916f92a1c",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "08959876-d870-4f75-8204-162043982e8d",
              "parentUUID": "5f8dd5e0-a90e-43d3-a214-aec916f92a1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "08959876-d870-4f75-8204-162043982e8d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "483dcde7-0a1b-4652-b978-ff7d1c07eb34",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2cd32265-951d-4784-973c-16c7ffd9cfe6",
              "parentUUID": "483dcde7-0a1b-4652-b978-ff7d1c07eb34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2cd32265-951d-4784-973c-16c7ffd9cfe6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "365bdd30-1d99-41b9-883f-96cd9a6ab460",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 162,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "8726b78a-5099-4bfe-96ef-06dbbcd7b8f7",
              "parentUUID": "365bdd30-1d99-41b9-883f-96cd9a6ab460",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8726b78a-5099-4bfe-96ef-06dbbcd7b8f7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 162,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "720937b9-da18-419a-8435-bab177ad2dee",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7281f7cc-5aed-462d-a8d6-8cffec3b3ab3",
              "parentUUID": "720937b9-da18-419a-8435-bab177ad2dee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7281f7cc-5aed-462d-a8d6-8cffec3b3ab3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 145,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fe1833ee-4ace-410f-978a-f25a8d493485",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "7a013dc7-5747-42eb-af4c-c53cf438b7d1",
              "parentUUID": "fe1833ee-4ace-410f-978a-f25a8d493485",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7a013dc7-5747-42eb-af4c-c53cf438b7d1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "298b0954-a970-4605-8c53-58c326ef0dc3",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e0cce61b-0a84-4fb2-bb2f-f7599e91534d",
              "parentUUID": "298b0954-a970-4605-8c53-58c326ef0dc3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0cce61b-0a84-4fb2-bb2f-f7599e91534d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e1aa99d1-6853-46d7-8aa5-64f887c7ef3f",
          "title": "GET /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 30,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "58387bf8-1658-48ed-a3e8-be4dcd1ec851",
              "parentUUID": "e1aa99d1-6853-46d7-8aa5-64f887c7ef3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "58387bf8-1658-48ed-a3e8-be4dcd1ec851"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "dccf28e5-7e00-4bbc-959d-532db8462009",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "2cf86da0-1469-4c3c-9dbe-ce875c258931",
              "parentUUID": "dccf28e5-7e00-4bbc-959d-532db8462009",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2cf86da0-1469-4c3c-9dbe-ce875c258931"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3b03669a-9079-44a4-bba7-d87a9542705b",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "81418eed-5ada-4870-946f-fde1953414e8",
              "parentUUID": "3b03669a-9079-44a4-bba7-d87a9542705b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "81418eed-5ada-4870-946f-fde1953414e8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9db0ea60-2587-4e50-bda5-385ae9d0743e",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "4da332e4-c070-4686-8001-01e6cbfa5255",
              "parentUUID": "9db0ea60-2587-4e50-bda5-385ae9d0743e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4da332e4-c070-4686-8001-01e6cbfa5255"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a2ef91e4-546e-40a5-b3b9-32a4b826ec48",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "727a3488-1548-46a7-a3f1-78ca3c6f2144",
              "parentUUID": "a2ef91e4-546e-40a5-b3b9-32a4b826ec48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "727a3488-1548-46a7-a3f1-78ca3c6f2144"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 99,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "210b3b68-4ef6-43e2-b70c-5db2a0a12d35",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "637bce74-f1af-488e-bc94-6499a16948bd",
              "parentUUID": "210b3b68-4ef6-43e2-b70c-5db2a0a12d35",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "637bce74-f1af-488e-bc94-6499a16948bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 258,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f084c820-2d3a-48fe-8cb2-26c72f7bcbbc",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d46f0995-3f5f-4f04-beaa-f6d206a257d1",
              "parentUUID": "f084c820-2d3a-48fe-8cb2-26c72f7bcbbc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d46f0995-3f5f-4f04-beaa-f6d206a257d1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c5871911-2f1e-4068-9573-49336a5c2689",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 124,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in your API spec\n\nres did not satisfy it because: status should be integer, status should be equal to one of the allowed values\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/chronologyv2response' }\n      }\n    },\n    description: 'chronology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in your API spec\n\nres did not satisfy it because: status should be integer, status should be equal to one of the allowed values\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/chronologyv2response' }\n      }\n    },\n    description: 'chronology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "39b3f125-7f17-4cf6-ae2f-2f62e6a38e3b",
              "parentUUID": "c5871911-2f1e-4068-9573-49336a5c2689",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "39b3f125-7f17-4cf6-ae2f-2f62e6a38e3b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 124,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a3b6d86c-eba0-4dc2-8be9-05be1cd38f17",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0967e9ac-d8f1-4306-9309-f481f87647e9",
              "parentUUID": "a3b6d86c-eba0-4dc2-8be9-05be1cd38f17",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0967e9ac-d8f1-4306-9309-f481f87647e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f31ca095-fa96-4cde-8139-160c4898ded6",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1114,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "6cb6a60b-6849-4da7-8208-3f43be48e193",
              "parentUUID": "f31ca095-fa96-4cde-8139-160c4898ded6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6cb6a60b-6849-4da7-8208-3f43be48e193"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ff2e1f4b-4b0a-4976-9d78-44c22c21ede0",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "e0a40098-54ea-463b-8003-d334b94d0cf2",
              "parentUUID": "ff2e1f4b-4b0a-4976-9d78-44c22c21ede0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e0a40098-54ea-463b-8003-d334b94d0cf2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "691d79bb-6433-42b0-95d4-39e5116ed336",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f562213a-c693-4868-9283-005c847adcde",
              "parentUUID": "691d79bb-6433-42b0-95d4-39e5116ed336",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f562213a-c693-4868-9283-005c847adcde"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 99,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9b9936bb-c9c7-4a40-9b39-624c88573319",
          "title": "GET /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "de1fe34d-589e-4750-97bc-6e87ab8c608f",
              "parentUUID": "9b9936bb-c9c7-4a40-9b39-624c88573319",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "de1fe34d-589e-4750-97bc-6e87ab8c608f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e1d3aa69-a4bf-4490-90c0-c0c85481b997",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "64799c6a-03c1-4ad3-a8da-a59ff663c5c5",
              "parentUUID": "e1d3aa69-a4bf-4490-90c0-c0c85481b997",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "64799c6a-03c1-4ad3-a8da-a59ff663c5c5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "804a1fd9-bc8c-42e0-a285-ebc40ebc81e6",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 94,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "3638d1fe-94bb-44c3-bb6e-f3fc71bf4536",
              "parentUUID": "804a1fd9-bc8c-42e0-a285-ebc40ebc81e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3638d1fe-94bb-44c3-bb6e-f3fc71bf4536"
          ],
          "pending": [],
          "skipped": [],
          "duration": 94,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f21263de-47f2-4448-b135-ab867dd5f4e2",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 93,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "7e5fbc83-a35a-4011-87ae-18d80a60df26",
              "parentUUID": "f21263de-47f2-4448-b135-ab867dd5f4e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7e5fbc83-a35a-4011-87ae-18d80a60df26"
          ],
          "pending": [],
          "skipped": [],
          "duration": 93,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4eaab283-0687-4722-9ac9-ac91ef64348f",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 89,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "a2a1a99f-b230-41c8-9816-0beace9e49d5",
              "parentUUID": "4eaab283-0687-4722-9ac9-ac91ef64348f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a2a1a99f-b230-41c8-9816-0beace9e49d5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 89,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a93c4dff-e526-49d5-a32a-3990797ef66e",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 98,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in your API spec\n\nres did not satisfy it because: status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 1,\n        taxoncode: 'Abi',\n        taxonname: 'Abies',\n        author: 'Miller, 1754',\n        valid: true,\n        highertaxonid: 329,\n        extinct: false,\n        taxagroupid: 'VPL',\n        publicationid: 299,\n        validatorid: 44,\n        validatedate: '2017-04-21T07:00:00.000Z',\n        notes: null,\n        recdatecreated: '2012-03-21T07:00:00.000Z',\n        recdatemodified: '2017-04-21T17:46:35.000Z'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxa' } }\n    },\n    description: 'A taxon or array of taxa.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in your API spec\n\nres did not satisfy it because: status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 1,\n        taxoncode: 'Abi',\n        taxonname: 'Abies',\n        author: 'Miller, 1754',\n        valid: true,\n        highertaxonid: 329,\n        extinct: false,\n        taxagroupid: 'VPL',\n        publicationid: 299,\n        validatorid: 44,\n        validatedate: '2017-04-21T07:00:00.000Z',\n        notes: null,\n        recdatecreated: '2012-03-21T07:00:00.000Z',\n        recdatemodified: '2017-04-21T17:46:35.000Z'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxa' } }\n    },\n    description: 'A taxon or array of taxa.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e6d04b8b-3bc1-42af-adf8-e7668b7abaa0",
              "parentUUID": "a93c4dff-e526-49d5-a32a-3990797ef66e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e6d04b8b-3bc1-42af-adf8-e7668b7abaa0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e7102f4e-ede6-4251-926b-5e38173af2ea",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 19032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c67353ce-1779-4f28-8c78-66356ad4543e",
              "parentUUID": "e7102f4e-ede6-4251-926b-5e38173af2ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c67353ce-1779-4f28-8c78-66356ad4543e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19032,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8dc09e19-06d5-42e0-a982-42d685ab2bf7",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "dc560a12-c39d-4541-9e65-1f048cf4e436",
              "parentUUID": "8dc09e19-06d5-42e0-a982-42d685ab2bf7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dc560a12-c39d-4541-9e65-1f048cf4e436"
          ],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "63e8126d-3884-456c-b763-437410d8ea29",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 440,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b9356ee5-8641-4224-990d-83db5fe42e1b",
              "parentUUID": "63e8126d-3884-456c-b763-437410d8ea29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9356ee5-8641-4224-990d-83db5fe42e1b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 440,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "533510e2-7c3f-4503-affc-3a687bac66da",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "ffde4cfc-9143-448c-a09e-835d27d87cfb",
              "parentUUID": "533510e2-7c3f-4503-affc-3a687bac66da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "85a31a20-d48b-403e-b27c-2377d36a4020",
              "parentUUID": "533510e2-7c3f-4503-affc-3a687bac66da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "e82e6bc4-f6ba-4c4b-859b-d3266a2db192",
              "parentUUID": "533510e2-7c3f-4503-affc-3a687bac66da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "91c88ea6-0938-4ab7-85ab-6f75447c1a29",
              "parentUUID": "533510e2-7c3f-4503-affc-3a687bac66da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 300,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6dfe86c4-8c42-40ba-95e5-3757f701b5aa",
              "parentUUID": "533510e2-7c3f-4503-affc-3a687bac66da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffde4cfc-9143-448c-a09e-835d27d87cfb",
            "85a31a20-d48b-403e-b27c-2377d36a4020",
            "e82e6bc4-f6ba-4c4b-859b-d3266a2db192",
            "91c88ea6-0938-4ab7-85ab-6f75447c1a29",
            "6dfe86c4-8c42-40ba-95e5-3757f701b5aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 608,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6893cad4-3fe5-4c97-a175-3e943121c7d3",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 454,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "461cbf7b-d920-4aa9-8236-5b7acd55b1d7",
              "parentUUID": "6893cad4-3fe5-4c97-a175-3e943121c7d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "31a4076f-17d7-45fa-bf72-a0530b88a5bf",
              "parentUUID": "6893cad4-3fe5-4c97-a175-3e943121c7d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1549,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "edd2851c-0d19-4338-95a0-3dfe9250dad7",
              "parentUUID": "6893cad4-3fe5-4c97-a175-3e943121c7d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "461cbf7b-d920-4aa9-8236-5b7acd55b1d7",
            "31a4076f-17d7-45fa-bf72-a0530b88a5bf",
            "edd2851c-0d19-4338-95a0-3dfe9250dad7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2306,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ba1f99d1-db09-485a-82a2-215b5e4832f7",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 492,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "755d0c5b-d191-4c5a-a10c-0da9edc6f830",
              "parentUUID": "ba1f99d1-db09-485a-82a2-215b5e4832f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "45908092-048a-4e9c-b4a6-0fc9bc246980",
              "parentUUID": "ba1f99d1-db09-485a-82a2-215b5e4832f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1464,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "10f612f3-9656-4ccd-80d0-7e06e8183ace",
              "parentUUID": "ba1f99d1-db09-485a-82a2-215b5e4832f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "36578631-2e66-457e-b71e-5426aa6ca9aa",
              "parentUUID": "ba1f99d1-db09-485a-82a2-215b5e4832f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "755d0c5b-d191-4c5a-a10c-0da9edc6f830",
            "45908092-048a-4e9c-b4a6-0fc9bc246980",
            "10f612f3-9656-4ccd-80d0-7e06e8183ace",
            "36578631-2e66-457e-b71e-5426aa6ca9aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3584,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ca833726-1d0b-4db9-9739-3af18448d0e0",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "112cab2a-a792-47bb-b243-ebd2844d0716",
              "parentUUID": "ca833726-1d0b-4db9-9739-3af18448d0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "6cef0048-12f3-4955-9e7c-c2b0808109c2",
              "parentUUID": "ca833726-1d0b-4db9-9739-3af18448d0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "d72119fe-2c79-4fa8-9519-313d7cf1695e",
              "parentUUID": "ca833726-1d0b-4db9-9739-3af18448d0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "33c0e9af-ae8d-445f-b11a-25fb97f88193",
              "parentUUID": "ca833726-1d0b-4db9-9739-3af18448d0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "82987bbd-c965-4823-9825-d980583ce5fa",
              "parentUUID": "ca833726-1d0b-4db9-9739-3af18448d0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "540592b6-6f7c-49fe-a197-027a568eee9e",
              "parentUUID": "ca833726-1d0b-4db9-9739-3af18448d0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 165,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "46e6d940-e7c4-4b5b-adb2-297c05dfcb01",
              "parentUUID": "ca833726-1d0b-4db9-9739-3af18448d0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 164,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "77506983-0070-4fc9-9c3a-9ebc7a20fcbd",
              "parentUUID": "ca833726-1d0b-4db9-9739-3af18448d0e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "112cab2a-a792-47bb-b243-ebd2844d0716",
            "6cef0048-12f3-4955-9e7c-c2b0808109c2",
            "d72119fe-2c79-4fa8-9519-313d7cf1695e",
            "33c0e9af-ae8d-445f-b11a-25fb97f88193",
            "82987bbd-c965-4823-9825-d980583ce5fa",
            "540592b6-6f7c-49fe-a197-027a568eee9e",
            "46e6d940-e7c4-4b5b-adb2-297c05dfcb01",
            "77506983-0070-4fc9-9c3a-9ebc7a20fcbd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1029,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ef542276-46a4-47f3-a474-c987d15afec9",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "04c71488-5cf0-47fb-baa7-5821bb9c05ea",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6976ef53-d66a-42d3-bf64-5c670f567833",
                  "parentUUID": "04c71488-5cf0-47fb-baa7-5821bb9c05ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6976ef53-d66a-42d3-bf64-5c670f567833"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cf9e7118-869d-4748-8894-b18c5c44f539",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e3e76333-903b-4e7d-b6b4-32ea1a6cde9d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9a4e4906-12f6-4a0d-af81-380bf4dde8a6",
                  "parentUUID": "e3e76333-903b-4e7d-b6b4-32ea1a6cde9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a4e4906-12f6-4a0d-af81-380bf4dde8a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c8c34e8b-81cb-4d9a-85e7-6c02e343b990",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "20607a00-83c4-4f7c-bc78-2d35c9645840",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "42cec91d-af12-4688-b250-24f4bcee4518",
                  "parentUUID": "20607a00-83c4-4f7c-bc78-2d35c9645840",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42cec91d-af12-4688-b250-24f4bcee4518"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f3a4d32f-2fe8-4666-b2f6-95a4ca02f683",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16ef4f1d-f6d1-4ecf-9d07-7bc3bf4c1bca",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/-94875939', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "280e071b-4fff-49cd-8906-b8253f74ba5a",
                  "parentUUID": "16ef4f1d-f6d1-4ecf-9d07-7bc3bf4c1bca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "280e071b-4fff-49cd-8906-b8253f74ba5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a50d0754-3c38-411d-b5d9-c27842adc553",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d1bf2f6d-b45d-481c-8dd2-fa5bc73484df",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/99785699', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "709e216c-83f1-484e-babf-dd5db4d587be",
                  "parentUUID": "d1bf2f6d-b45d-481c-8dd2-fa5bc73484df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "709e216c-83f1-484e-babf-dd5db4d587be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 112,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8e6adc81-7ed3-4be0-9de3-970195e57380",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cd6adf1e-11ad-49b9-828f-36df6288ca58",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 615,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/3960287', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "97e6820c-a961-4f40-a4fe-8139ed02ebaf",
                  "parentUUID": "cd6adf1e-11ad-49b9-828f-36df6288ca58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97e6820c-a961-4f40-a4fe-8139ed02ebaf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 615,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "34797a1c-399b-4dff-9eb7-616fc4420929",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bffe0ccb-08e1-4788-b6f5-ed623cafc6a5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 88590290, 'gpname': 'dolor fugiat sint Excepteur minim', 'rank': 1, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ceab8952-f320-4ddd-abdd-6ac9e549a711",
                  "parentUUID": "bffe0ccb-08e1-4788-b6f5-ed623cafc6a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ceab8952-f320-4ddd-abdd-6ac9e549a711"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fc5e2bbb-ac0d-4ade-ac6d-1e8b3b1c5d98",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "174f8a67-3f91-4981-840a-02f1cba7572e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/63187358', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d6b59f2e-b4c1-466a-9135-c743cd7e872d",
                  "parentUUID": "174f8a67-3f91-4981-840a-02f1cba7572e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6b59f2e-b4c1-466a-9135-c743cd7e872d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "28cb765b-a617-4003-9416-4e1df2f795ed",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "277a082a-71bf-479b-8f63-2630f02d6d10",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/6692001', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "55fe1867-cf35-4a54-b178-a7c27b1ddc38",
                  "parentUUID": "277a082a-71bf-479b-8f63-2630f02d6d10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55fe1867-cf35-4a54-b178-a7c27b1ddc38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1b31d318-1e0d-438a-a977-d14f3ec01062",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d676826c-098b-4c4e-8a1e-45bbe29aa468",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/5747', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "852c7d94-f921-45f3-bb9f-091745ad8ad0",
                  "parentUUID": "d676826c-098b-4c4e-8a1e-45bbe29aa468",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "852c7d94-f921-45f3-bb9f-091745ad8ad0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "beb03cd0-c076-437a-ba4b-8508e36e4b0c",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "242049d4-6408-427f-853e-3577882765f4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "930dadcc-9674-4132-b76d-1474d7c54101",
                  "parentUUID": "242049d4-6408-427f-853e-3577882765f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "930dadcc-9674-4132-b76d-1474d7c54101"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "62ef9d5d-3f5d-4964-9e10-9cb16329bb98",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "342cad45-4241-4b6b-95ea-f118f13ff4cc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a732000f-bd1e-4752-843e-ceb3c6f23b40",
                  "parentUUID": "342cad45-4241-4b6b-95ea-f118f13ff4cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a732000f-bd1e-4752-843e-ceb3c6f23b40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "20fabc16-4f7c-40a7-bea6-dfcdc47f9cc3",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "877e715e-ebe0-4a6a-b63c-ad208a0deb9b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d1537a4a-149c-4ab8-b480-6797455bb2fc",
                  "parentUUID": "877e715e-ebe0-4a6a-b63c-ad208a0deb9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1537a4a-149c-4ab8-b480-6797455bb2fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9dedaf56-1db0-4594-9d6a-cef2888bbbb9",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7a41f055-bade-4bcb-b852-641bfe53465b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "805a2160-6af4-4db1-b0cc-a0259b717191",
                  "parentUUID": "7a41f055-bade-4bcb-b852-641bfe53465b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "805a2160-6af4-4db1-b0cc-a0259b717191"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e03d5862-1118-434d-afe3-7027df6ef797",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7ee8033d-3257-4f68-ae47-546063932e82",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "08a0e3c1-b0d9-4fc4-9bcf-2eaf287e69c6",
                  "parentUUID": "7ee8033d-3257-4f68-ae47-546063932e82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08a0e3c1-b0d9-4fc4-9bcf-2eaf287e69c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3af2464a-c0b3-4af8-84a7-7b2f9b03791e",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "742c6f5e-7ec4-47c5-b9c6-71ce0b2ae566",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "852df8d7-2eaf-471c-8e88-16f288407b90",
                  "parentUUID": "742c6f5e-7ec4-47c5-b9c6-71ce0b2ae566",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "852df8d7-2eaf-471c-8e88-16f288407b90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "982c016f-07e5-4e36-baa7-e93b335f7b87",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9691ffd6-94af-4644-8d6c-c771458a487f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "60328671-0ec0-485c-a5c6-b8b9dd1e4379",
                  "parentUUID": "9691ffd6-94af-4644-8d6c-c771458a487f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60328671-0ec0-485c-a5c6-b8b9dd1e4379"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c7754e8c-c681-4f88-89ee-766c393660d3",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8b408ec5-73a1-4e34-9764-b8b7b792c58d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "64dbbd4e-70d6-4646-8b48-0dc356345969",
                  "parentUUID": "8b408ec5-73a1-4e34-9764-b8b7b792c58d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64dbbd4e-70d6-4646-8b48-0dc356345969"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ef440463-da14-4fc6-b696-cbf355986f73",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1ccf1ae6-d005-4ab4-b589-89d2a86786b1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "467f204f-5d92-4c6b-a3d0-63e22d6098e4",
                  "parentUUID": "1ccf1ae6-d005-4ab4-b589-89d2a86786b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "467f204f-5d92-4c6b-a3d0-63e22d6098e4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5a2d51e8-e2b8-42d3-8a59-4deae0ffea97",
          "title": "tests for /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
          "file": "/test/v2.0-data-chronology-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6346241f-51fd-4554-83c5-34eda2f44513",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
              "file": "/test/v2.0-data-chronology-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronology/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronology/87624127', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c1181ff1-cdfc-4c70-89db-84b38a8dd36b",
                  "parentUUID": "6346241f-51fd-4554-83c5-34eda2f44513",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1181ff1-cdfc-4c70-89db-84b38a8dd36b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9d2d4c29-c4c2-49d6-9c13-6c1fe001765b",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dc7ace99-ab2c-404b-9962-a10b8dfa529c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 27307983, 'familyname': 'esse', 'contactname': 'in veniam', 'contactstatus': 'extant', 'limit': 79898871, 'offset': 38058998 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9ee95101-1f06-4941-af98-ebd058824378",
                  "parentUUID": "dc7ace99-ab2c-404b-9962-a10b8dfa529c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ee95101-1f06-4941-af98-ebd058824378"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7828385d-bf42-457d-acca-9e293810dba7",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1cd75ad6-e7e1-4162-ba2d-645dbc097ed4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/56150576/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "56a72684-3aa7-4799-aff2-f322fc41dc00",
                  "parentUUID": "1cd75ad6-e7e1-4162-ba2d-645dbc097ed4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56a72684-3aa7-4799-aff2-f322fc41dc00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ba174816-301c-4f7a-9f61-f203dc0e6c31",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "50180b3f-b073-4fa1-8265-05b9293d0aa6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/29294895', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "659b0056-122f-4c5d-9a22-ebcddedf711c",
                  "parentUUID": "50180b3f-b073-4fa1-8265-05b9293d0aa6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "659b0056-122f-4c5d-9a22-ebcddedf711c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e4e7acea-44c1-4482-93d8-581c1b4c2f72",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6cd15dc6-9be4-4ee5-915f-f5e3ec2b024f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 36561589, 'offset': 14390108 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "32b16df7-484e-47eb-8632-aa229c0baf90",
                  "parentUUID": "6cd15dc6-9be4-4ee5-915f-f5e3ec2b024f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "32b16df7-484e-47eb-8632-aa229c0baf90"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "30b7d41f-44b7-45a9-91db-2ad3361282dd",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "79da0547-1254-44ef-8308-7bd86a33f57f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 689,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 20733, 'contactid': 41171739, 'datasettype': 'esse minim', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 11652171 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "76db30d4-2fcc-4a7e-aecd-5cd5b3a5a098",
                  "parentUUID": "79da0547-1254-44ef-8308-7bd86a33f57f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76db30d4-2fcc-4a7e-aecd-5cd5b3a5a098"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 689,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "53734e09-3e2f-4bd0-b25c-1206f3a03226",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "01ad88f3-5ea4-40e2-9d7a-885b6552f9e9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/81514660/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4e957870-a092-4aed-b938-82c90e9581a6",
                  "parentUUID": "01ad88f3-5ea4-40e2-9d7a-885b6552f9e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e957870-a092-4aed-b938-82c90e9581a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1b0eab6b-d0de-4ff0-9d2d-bebd8616958a",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0e05a96a-35c0-47e6-a462-f61a49e0eaf3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/57690762/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a3e9cb48-a3da-4e9f-be35-c585b3bede96",
                  "parentUUID": "0e05a96a-35c0-47e6-a462-f61a49e0eaf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3e9cb48-a3da-4e9f-be35-c585b3bede96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b6d2640e-ce35-46c2-b4af-79c7f4e28dda",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2692887f-2834-4ce0-b994-a0be5729211b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/82345827/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "373b5a63-25d9-4e55-9c05-a9b8edc52fed",
                  "parentUUID": "2692887f-2834-4ce0-b994-a0be5729211b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "373b5a63-25d9-4e55-9c05-a9b8edc52fed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a7030710-93ed-4db6-b047-93d73f3ac14b",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "27f0bea3-488a-4624-a55e-1fecc67d256d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/3633764/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2316c18c-d59f-4551-8176-3f92603973df",
                  "parentUUID": "27f0bea3-488a-4624-a55e-1fecc67d256d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2316c18c-d59f-4551-8176-3f92603973df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5dc92267-9272-4e29-9d17-1fb3ea4a078d",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2919b8c3-5e73-4eeb-a7a8-4e6fd81fbdef",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/78566397/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fde97e08-0a77-408e-894f-8d097cdf94c5",
                  "parentUUID": "2919b8c3-5e73-4eeb-a7a8-4e6fd81fbdef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fde97e08-0a77-408e-894f-8d097cdf94c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e90f79c2-ae54-45d5-bf49-4a5d99956279",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ea223b4b-c487-460d-ab28-62a11aa52e62",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/69188231/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c6ff7c5a-3c80-4536-b075-4bbc1374a94d",
                  "parentUUID": "ea223b4b-c487-460d-ab28-62a11aa52e62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6ff7c5a-3c80-4536-b075-4bbc1374a94d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "049a2df9-3da0-42e4-a58d-7a5574773994",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "231315e1-b9cd-45a5-944c-cd41ec04c9ba",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/71567569/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8bf827f8-ed43-4a24-aafb-661d95a89a19",
                  "parentUUID": "231315e1-b9cd-45a5-944c-cd41ec04c9ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bf827f8-ed43-4a24-aafb-661d95a89a19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "248350b4-824f-448d-99ab-1a5993dae7a5",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1e9090f5-bce2-4cf7-b441-a9a4f3e8d3a5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/59333019', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a7b0a343-6a7b-40f4-b3b0-28b9106332ef",
                  "parentUUID": "1e9090f5-bce2-4cf7-b441-a9a4f3e8d3a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7b0a343-6a7b-40f4-b3b0-28b9106332ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0f904400-ddc4-4075-9b40-ccf36f09af00",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e078c243-4900-47c7-9f66-859b7d011334",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 28,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 27548, 'contactid': 44688781, 'datasettype': 'cillum reprehenderit cupidatat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 2537699 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "5815e6c1-bb92-4f27-ac8b-387ea936e854",
                  "parentUUID": "e078c243-4900-47c7-9f66-859b7d011334",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5815e6c1-bb92-4f27-ac8b-387ea936e854"
              ],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "35630101-6a5e-45a8-9c72-01322d4a5929",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9cc13091-dd0c-49f0-a699-cf0a3b305c5c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/21949863', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "db9c4c84-1387-4898-9687-50e6db12e3a4",
                  "parentUUID": "9cc13091-dd0c-49f0-a699-cf0a3b305c5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "db9c4c84-1387-4898-9687-50e6db12e3a4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "783f1dbd-f160-419a-badb-5fdd08ece21f",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6e4dba7b-7403-4084-8617-919ab55ed539",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'in enim minim', 'limit': 89773212, 'offset': 37903628 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3b964e55-31ec-490f-937a-f19be67e0967",
                  "parentUUID": "6e4dba7b-7403-4084-8617-919ab55ed539",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b964e55-31ec-490f-937a-f19be67e0967"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "eb86ac83-aae0-4af0-ab33-c3e42fe6d2f8",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30407294-9d83-4d6f-8afb-d9053b030ab3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "226d36d3-0334-416f-a650-0a5eefbcf522",
                  "parentUUID": "30407294-9d83-4d6f-8afb-d9053b030ab3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "226d36d3-0334-416f-a650-0a5eefbcf522"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1407e33d-6720-45a6-b70d-f4cc8ae715e8",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f227253b-b1ea-4e02-a961-b191d7d9fb5e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/98367280', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "678b376a-0002-412e-bb69-c018e82ca8e6",
                  "parentUUID": "f227253b-b1ea-4e02-a961-b191d7d9fb5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "678b376a-0002-412e-bb69-c018e82ca8e6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "61d8b30a-6e0f-46e3-89a1-e7edd26ed10c",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8fcad525-ea5b-470f-ad22-6db7f1839017",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/20590623', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "318098b1-7cb5-43e3-94c7-9369ef26c18a",
                  "parentUUID": "8fcad525-ea5b-470f-ad22-6db7f1839017",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "318098b1-7cb5-43e3-94c7-9369ef26c18a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b4489863-7e3b-4e31-8ede-b99e21bfeb2b",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f0a6ad98-2c5b-4f4d-9178-775393be70d5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 87582162, 'gpname': 'ut magna', 'rank': 4, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "072abfa4-724c-4bd1-955f-84cc3bc68948",
                  "parentUUID": "f0a6ad98-2c5b-4f4d-9178-775393be70d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "072abfa4-724c-4bd1-955f-84cc3bc68948"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1c7541bb-ad2c-4d0e-b22b-708cc598fb18",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "24ab8d78-c21c-4926-afb2-989471302cb3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/90372695/datasets', {\n  'qs': { 'limit': 52094121, 'offset': 69839404 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0dc48277-cead-46f8-9e6e-87193fc5a63a",
                  "parentUUID": "24ab8d78-c21c-4926-afb2-989471302cb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dc48277-cead-46f8-9e6e-87193fc5a63a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9695580e-09ae-4bde-b3c7-f8a59c096254",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0d30a2ec-4869-411c-8210-2e7963bad3ce",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/31988172/sites', {\n  'qs': { 'limit': 30963215, 'offset': 15650477 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1f9f0935-8ca8-4fe0-afe3-b387241464a4",
                  "parentUUID": "0d30a2ec-4869-411c-8210-2e7963bad3ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f9f0935-8ca8-4fe0-afe3-b387241464a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 120,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "11bccf2e-4a5d-4ca2-92ad-5153879e521f",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "77dc9f14-b44d-49eb-b0d9-a4e333d20109",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/95521762', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "96a3f723-44b0-47f4-824e-7f1cff12d881",
                  "parentUUID": "77dc9f14-b44d-49eb-b0d9-a4e333d20109",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96a3f723-44b0-47f4-824e-7f1cff12d881"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d60694ed-2fad-4889-b752-ba5406df5663",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14bc2c6b-5c06-478e-90f2-319e4e218b78",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'irure ut ut', 'taxonid': 40952, 'siteid': 19711, 'sitename': 'ad minim do ut in', 'datasettype': 'non occaecat aliqua in dolore', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 9249546, 'ageyoung': 1000, 'ageold': 10000, 'limit': 12099788, 'offset': 31578920 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3987995a-239e-4373-b9c9-aaba854b5f6e",
                  "parentUUID": "14bc2c6b-5c06-478e-90f2-319e4e218b78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3987995a-239e-4373-b9c9-aaba854b5f6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b07028c6-ef8b-42f3-b8c5-843e74ce0754",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5e0c28e8-4dd5-40a7-96ea-b058f22d0788",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/5941885', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ffbab1da-2452-4ab7-9660-95a37f00ff55",
                  "parentUUID": "5e0c28e8-4dd5-40a7-96ea-b058f22d0788",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ffbab1da-2452-4ab7-9660-95a37f00ff55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "98245b54-47eb-4818-80e1-046fa3180825",
          "title": "tests for /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
          "file": "/test/v2.0-data-oxcal-calibrate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7e9db72a-bacb-4042-871d-4bc4529eb020",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
              "file": "/test/v2.0-data-oxcal-calibrate-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "7a496886-08c5-4381-b15f-fa23d2c7c6cb",
                  "parentUUID": "7e9db72a-bacb-4042-871d-4bc4529eb020",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7a496886-08c5-4381-b15f-fa23d2c7c6cb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e23736ef-d753-41cf-ab03-e1d5273c876d",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "26dae47b-9625-42b9-b1c9-f18739ffc7fe",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'irure est fugiat esse aliquip', 'taxonid': 167, 'siteid': 15200, 'sitename': 'dolore non in deserunt', 'datasettype': 'sit voluptate amet do', 'altmin': 10, 'altmax': 100, 'loc': \"{#\\\\tc_#n'Js}\", 'ageof': 12034798, 'ageyoung': 1000, 'ageold': 10000, 'limit': 30271739, 'offset': 93600775 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "4468a05e-c951-4756-87a2-1e5430a0ca3b",
                  "parentUUID": "26dae47b-9625-42b9-b1c9-f18739ffc7fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4468a05e-c951-4756-87a2-1e5430a0ca3b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "91da0cbf-4ed3-4a5c-8b21-2cfa546e3b44",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "04f2ae9c-9dfe-4dc8-9032-658b8724f092",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "19afc277-7b58-43d8-976a-9d8526135fb5",
                  "parentUUID": "04f2ae9c-9dfe-4dc8-9032-658b8724f092",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "19afc277-7b58-43d8-976a-9d8526135fb5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ea64fd9c-b5e3-4aa4-8bd0-bbd76080ab56",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a1a28e4-2a40-4fef-af42-4877e3a3d361",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 3696700, 'datasetid': 20407579, 'siteid': 4983, 'familyname': 'in id enim dolore veniam', 'pubtype': 'Authored Book', 'year': 1629, 'search': 'consequat exercitation ullamco consectetur', 'limit': 95623353, 'offset': 77433200 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9685145c-e412-45c7-874c-c83a6c17535d",
                  "parentUUID": "6a1a28e4-2a40-4fef-af42-4877e3a3d361",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9685145c-e412-45c7-874c-c83a6c17535d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a6e6c656-fb65-4238-9bc1-15b6103bc4f0",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "60411a03-78a4-488f-85ed-e135823c0c14",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 94,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/{publicationid}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "cf4b0a5d-0a58-4c29-aa22-c8d7ca1f1016",
                  "parentUUID": "60411a03-78a4-488f-85ed-e135823c0c14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "cf4b0a5d-0a58-4c29-aa22-c8d7ca1f1016"
              ],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5bf68ffd-13c2-4efe-b100-a331aec84541",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d995da87-18c4-4d9e-8d24-8c471fc01b52",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 101,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 24737, 'sitename': 'eu est voluptate', 'altmax': 100, 'altmin': 10, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 40355368, 'offset': 90066965 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "274ca9e7-7110-42a0-ba35-003c11cf9d3c",
                  "parentUUID": "d995da87-18c4-4d9e-8d24-8c471fc01b52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "274ca9e7-7110-42a0-ba35-003c11cf9d3c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "79206f2b-7edc-4973-84f6-adc4408a90ca",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f2bfaffe-0f77-4bfc-84d3-409229544e9c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/21863/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9c1fb4fd-aa09-413a-81a9-79b56e94ee01",
                  "parentUUID": "f2bfaffe-0f77-4bfc-84d3-409229544e9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c1fb4fd-aa09-413a-81a9-79b56e94ee01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 120,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a42ca693-460a-4cc4-84d2-aa3d40fcadc3",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9bfb8e04-77e8-428c-a2f7-85e7346124e6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1897/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1bb70790-b1c2-4ab4-b15e-aac99e47987e",
                  "parentUUID": "9bfb8e04-77e8-428c-a2f7-85e7346124e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1bb70790-b1c2-4ab4-b15e-aac99e47987e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "51baf095-6c6a-4886-a6a4-373dc3087730",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "26420415-1b77-4e1a-8d77-aba892b49364",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1570/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "11b4ab41-7b97-4088-8632-6bb625b8e7f6",
                  "parentUUID": "26420415-1b77-4e1a-8d77-aba892b49364",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11b4ab41-7b97-4088-8632-6bb625b8e7f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cbaf39c1-4902-4855-9ed1-bd587c46decf",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "09b1f8ed-dacb-4659-a59d-16ae94424279",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/6552/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "a82ab2b8-86cd-4bb9-82e0-2a7762434ea7",
                  "parentUUID": "09b1f8ed-dacb-4659-a59d-16ae94424279",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a82ab2b8-86cd-4bb9-82e0-2a7762434ea7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ea6dca3d-dc4b-405e-af6b-7eb0cb893f6d",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "29605478-3512-4ff5-83ca-5cab1ffc6d08",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/27910/geopoliticalunits', {\n  'qs': { 'limit': 33247263, 'offset': 97153596 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "278ff5c7-7db2-4701-9bcf-1c4798089faa",
                  "parentUUID": "29605478-3512-4ff5-83ca-5cab1ffc6d08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "278ff5c7-7db2-4701-9bcf-1c4798089faa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ee999e90-f23d-4d85-9aa2-e489ec0a0e93",
          "title": "tests for /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e93f3e2e-a729-4425-b41a-39b9f0ec4dc7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/5218/sites', {\n  'qs': { 'limit': 11271725, 'offset': 74404187 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "99e1a751-7a89-4e6c-ac07-003432e0b961",
                  "parentUUID": "e93f3e2e-a729-4425-b41a-39b9f0ec4dc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99e1a751-7a89-4e6c-ac07-003432e0b961"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "aa594e81-be90-417f-a632-62e6ea78765a",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "062e30f7-18cc-4b9c-ad36-1fe2e89d61f0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/11731', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "170c4e9a-bee4-43aa-9dfa-874115a31188",
                  "parentUUID": "062e30f7-18cc-4b9c-ad36-1fe2e89d61f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "170c4e9a-bee4-43aa-9dfa-874115a31188"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e5550a01-58a7-47e0-a523-0d3837904a45",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "72062830-265e-4754-9915-2f1ce064c14e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 238,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "dbd6a843-c052-41fc-858a-682f5df1a4c4",
                  "parentUUID": "72062830-265e-4754-9915-2f1ce064c14e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbd6a843-c052-41fc-858a-682f5df1a4c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 238,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ba5eff68-92ab-446d-ac3e-9a4b482efff4",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "292301d5-cc83-47a2-b758-c9397b35c377",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 230,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "def7c853-5a6b-41ff-a498-24cb196265be",
                  "parentUUID": "292301d5-cc83-47a2-b758-c9397b35c377",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "def7c853-5a6b-41ff-a498-24cb196265be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 230,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "33c62e7b-96dd-48fb-ad73-7b40e1e1ce49",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "085560c2-8a49-40b8-b631-9b648679dafe",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 4138,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "df7f3166-c417-4b5a-bc20-bbc0d881cbd2",
                  "parentUUID": "085560c2-8a49-40b8-b631-9b648679dafe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df7f3166-c417-4b5a-bc20-bbc0d881cbd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4138,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "42ad4d54-0607-44c9-9007-48fa29fbb924",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bb4812b6-1720-4299-9489-4c7bd08b657b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 140,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'aliqua labore cupidatat veniam', 'datasetid': 62760072, 'siteid': 25941 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e8db89e2-e8aa-4e6c-a656-5c1a29265952",
                  "parentUUID": "bb4812b6-1720-4299-9489-4c7bd08b657b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8db89e2-e8aa-4e6c-a656-5c1a29265952"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "43da3bc0-2b38-44a7-a539-6335ad7ce4ea",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "62df047f-4304-4d71-afb4-9e537e0a697c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 1021,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/35095/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "175658d5-c3b3-468a-a1cf-52b30fddd692",
                  "parentUUID": "62df047f-4304-4d71-afb4-9e537e0a697c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "175658d5-c3b3-468a-a1cf-52b30fddd692"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1021,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "36f9580a-2a2a-44b7-987d-597ac4b7b25a",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "32115de3-30f1-4da0-9f8a-0a57ff3c0489",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/1241', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "269fb147-7c60-476c-8b17-6bd9462e504c",
                  "parentUUID": "32115de3-30f1-4da0-9f8a-0a57ff3c0489",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "269fb147-7c60-476c-8b17-6bd9462e504c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "34fd9fa5-071e-4dde-8185-a44da0287e9b",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5e81bbd6-e3c5-457b-ab41-29996f98d586",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "d0a0116b-fa07-4956-8b80-1fa6613b70bb",
                  "parentUUID": "5e81bbd6-e3c5-457b-ab41-29996f98d586",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d0a0116b-fa07-4956-8b80-1fa6613b70bb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e7066749-29e6-44fe-a627-ffe9d0dd3cce",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f1c90d51-1656-4074-84ff-a2eb2bf44239",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5d095bd7-8d5f-4dfe-94ed-62a0ee43eaae",
                  "parentUUID": "f1c90d51-1656-4074-84ff-a2eb2bf44239",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d095bd7-8d5f-4dfe-94ed-62a0ee43eaae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}