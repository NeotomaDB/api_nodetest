{
  "stats": {
    "suites": 209,
    "tests": 194,
    "passes": 173,
    "pending": 0,
    "failures": 21,
    "start": "2021-10-25T20:35:16.105Z",
    "end": "2021-10-25T20:38:24.258Z",
    "duration": 188153,
    "testsRegistered": 194,
    "passPercent": 89.2,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d798b6cd-8751-44b9-be92-f25bd927d409",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [
      {
        "title": "\"after each\" hook in \"{root}\"",
        "fullTitle": "\"after each\" hook in \"{root}\"",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
        "err": {},
        "isRoot": true,
        "uuid": "6fda493c-6aa4-4d59-9d42-4601efd0d2f8",
        "isHook": true,
        "skipped": false
      }
    ],
    "tests": [],
    "suites": [
      {
        "uuid": "fee4b523-e38d-4d06-b61a-1c0c05d0a989",
        "title": "Get chronology data by datasetid:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
        "file": "/test/chronologies.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "A call to two datasets returns two datasets of data:",
            "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
            "timedOut": false,
            "duration": 867,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "bad1006e-850b-4d88-9eca-f7eb72ce9c34",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bad1006e-850b-4d88-9eca-f7eb72ce9c34"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 867,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "900e9b7a-e405-4f1f-924a-b4ab2caf6f5a",
        "title": "Get contact data:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
        "file": "/test/contacts.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "An empty query redirects to the api documentation.",
            "fullTitle": "Get contact data: An empty query redirects to the api documentation.",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/')\n  .set('Accept', 'application/json')\n  .expect(302)\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "09865295-ab74-4310-9eb4-0457639e26d4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The default limit of 25 should be reached for contact data:",
            "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
            "timedOut": false,
            "duration": 102,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "dce775bf-a584-4767-b07b-67d271356215",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The example in the swagger should return an object:",
            "fullTitle": "Get contact data: The example in the swagger should return an object:",
            "timedOut": false,
            "duration": 131,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "d5cbc392-d6f8-4ffa-bf9c-2b4eea884469",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Contact queries should be case insensitive:",
            "fullTitle": "Get contact data: Contact queries should be case insensitive:",
            "timedOut": false,
            "duration": 97,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "7711d7c5-e025-4e14-bf27-92149c5f9eb1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Changing the limit should change the number of contacts retrieved:",
            "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
            "timedOut": false,
            "duration": 91,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "4b5ad02d-77c1-478a-9d03-a522777a4c63",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A single contact (12) should be returned.",
            "fullTitle": "Get contact data: A single contact (12) should be returned.",
            "timedOut": false,
            "duration": 76,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "2f0407e9-1280-49cf-9432-21aaa49be4e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "All contacts from datasets should be returned.",
            "fullTitle": "Get contact data: All contacts from datasets should be returned.",
            "timedOut": false,
            "duration": 76,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "1ed8f63a-38c6-4829-aec9-896eb7894972",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The length of returned contacts should be equivalent to the number of datasets.",
            "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "a1833fc2-ee1d-4736-8bfa-bcfc10c309a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The length of returned contacts should be equivalent to the number of sites.",
            "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
            "timedOut": false,
            "duration": 92,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "3de6f4ee-c0d2-4f62-a3ab-961bc6a3b555",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "09865295-ab74-4310-9eb4-0457639e26d4",
          "dce775bf-a584-4767-b07b-67d271356215",
          "d5cbc392-d6f8-4ffa-bf9c-2b4eea884469",
          "7711d7c5-e025-4e14-bf27-92149c5f9eb1",
          "4b5ad02d-77c1-478a-9d03-a522777a4c63",
          "2f0407e9-1280-49cf-9432-21aaa49be4e7",
          "1ed8f63a-38c6-4829-aec9-896eb7894972",
          "a1833fc2-ee1d-4736-8bfa-bcfc10c309a0",
          "3de6f4ee-c0d2-4f62-a3ab-961bc6a3b555"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 686,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "c79a54d4-8b47-4e4e-93de-670d91349c8b",
        "title": "Get datasets any number of ways:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
        "file": "/test/datasets.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Asking for the datasets associated with Lake Tulane work:",
            "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
            "timedOut": false,
            "duration": 1197,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site', 'dataset');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c164e177-6ad8-4d25-9978-4599f67fa041",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset by singular id & return same id:",
            "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
            "timedOut": false,
            "duration": 816,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "34d4f26c-a105-487b-8126-d11a8f006533",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset from siteid gives us siteids back and datasets:",
            "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
            "timedOut": false,
            "duration": 1064,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e7186343-a7f9-4bda-857c-6260e3e9efd1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset by comma separated ids & return same ids:",
            "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
            "timedOut": false,
            "duration": 2110,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "eebe86d6-a395-4ad0-bbdf-86b2dd65e5ac",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Returns all key elements of the object:",
            "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9fe05084-7ea9-4733-9c5d-f3e45b135e55",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Limits work:",
            "fullTitle": "Get datasets any number of ways: Limits work:",
            "timedOut": false,
            "duration": 1700,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1544379b-d020-469c-a7c7-22ca7e08e1f4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Works with age validation:",
            "fullTitle": "Get datasets any number of ways: Works with age validation:",
            "timedOut": false,
            "duration": 1710,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "576c5083-9437-48b7-a92f-1c6bce815df9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c164e177-6ad8-4d25-9978-4599f67fa041",
          "34d4f26c-a105-487b-8126-d11a8f006533",
          "e7186343-a7f9-4bda-857c-6260e3e9efd1",
          "eebe86d6-a395-4ad0-bbdf-86b2dd65e5ac",
          "9fe05084-7ea9-4733-9c5d-f3e45b135e55",
          "1544379b-d020-469c-a7c7-22ca7e08e1f4",
          "576c5083-9437-48b7-a92f-1c6bce815df9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8601,
        "root": false,
        "rootEmpty": false,
        "_timeout": 50000
      },
      {
        "uuid": "c53215ce-a142-454a-b76e-e9ae6b935f5a",
        "title": "Get geopolitical data:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
        "file": "/test/geopolitical.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "An empty query redirects to the api documentation.",
            "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7a2c3c3e-cbbf-4b75-9d4b-b0f9f57b7309",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The default limit of 25 should be reached for country level data:",
            "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
            "timedOut": false,
            "duration": 75,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "e930ff69-3a31-4311-9196-a0d12f7dbda6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Changing the limit should change the number of countries retrieved:",
            "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
            "timedOut": false,
            "duration": 89,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "4a6abed9-463b-4a8a-b7d5-5021fe3cff69",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A single geopolitical unit (12) should be returned.",
            "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
            "timedOut": false,
            "duration": 75,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "426c7b8d-5f01-4bb6-ba92-5c22be0abba0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7a2c3c3e-cbbf-4b75-9d4b-b0f9f57b7309",
          "e930ff69-3a31-4311-9196-a0d12f7dbda6",
          "4a6abed9-463b-4a8a-b7d5-5021fe3cff69",
          "426c7b8d-5f01-4bb6-ba92-5c22be0abba0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 245,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "25bf5536-11ec-43ad-8457-e939b5146939",
        "title": "Any path goes to the api documentation:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
        "file": "/test/neotoma_test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "`api-docs` redirects to the api documentation.",
            "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a3e8e928-48d7-429f-be86-e66da9823964",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a3e8e928-48d7-429f-be86-e66da9823964"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c3f73c2e-ef94-499a-99b1-8fe2d7a1a7d6",
        "title": "Get occurrence data any number of ways:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
        "file": "/test/occurrence.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get occurrence by singular id & return same id:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
            "timedOut": false,
            "duration": 84,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9441523c-97e7-4851-9c42-30e88b861e02",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get the Flyover test call:",
            "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
            "timedOut": false,
            "duration": 5619,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
            "err": {},
            "isRoot": false,
            "uuid": "7873edac-d21e-4a15-add3-3ade70a3ea57",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Failing Canis test works:",
            "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
            "timedOut": false,
            "duration": 5262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "db0de7ba-23dd-4248-8983-a2d7438c22fc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrence by taxon:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
            "timedOut": false,
            "duration": 1428,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "fd9170a1-88cd-4943-bebd-37775e9786d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Break occurrences by flipping altitudes:",
            "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
            "err": {},
            "isRoot": false,
            "uuid": "294f96fa-3f9a-496a-b8f4-0a925ce90f3c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Break occurrences by flipping ages:",
            "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ead384f0-3cdb-4d24-aecb-e05efed942ce",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Occurrences filter by age:",
            "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
            "timedOut": false,
            "duration": 106,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2ab9cb17-348b-47be-a5c0-99c68937dc94",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences with comma separated fields:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
            "timedOut": false,
            "duration": 163,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e5d0b8b9-cdaf-4f77-a14b-4d0c07134ec9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences with comma separated taxa:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
            "timedOut": false,
            "duration": 105,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "59ba33f4-483c-4612-ad48-edc5d6182a26",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get hierarchical occurrences with comma separated taxa:",
            "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
            "timedOut": false,
            "duration": 92,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d7992e30-cb16-4716-be82-f3d18fe0f7e9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences returns lower taxa:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
            "timedOut": false,
            "duration": 3541,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c77149da-eaeb-480e-bd1a-8ff927734a5b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences with mammals and lower taxa works:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
            "timedOut": false,
            "duration": 284,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "48b7ae3f-9f7f-4a35-aa86-809c2d0b177b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get occurrences using taxon and age bounds:",
            "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
            "timedOut": false,
            "duration": 218,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "276cadf3-6413-46ca-8f84-bf6dbec88b23",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9441523c-97e7-4851-9c42-30e88b861e02",
          "7873edac-d21e-4a15-add3-3ade70a3ea57",
          "db0de7ba-23dd-4248-8983-a2d7438c22fc",
          "fd9170a1-88cd-4943-bebd-37775e9786d5",
          "294f96fa-3f9a-496a-b8f4-0a925ce90f3c",
          "ead384f0-3cdb-4d24-aecb-e05efed942ce",
          "2ab9cb17-348b-47be-a5c0-99c68937dc94",
          "e5d0b8b9-cdaf-4f77-a14b-4d0c07134ec9",
          "59ba33f4-483c-4612-ad48-edc5d6182a26",
          "d7992e30-cb16-4716-be82-f3d18fe0f7e9",
          "c77149da-eaeb-480e-bd1a-8ff927734a5b",
          "48b7ae3f-9f7f-4a35-aa86-809c2d0b177b",
          "276cadf3-6413-46ca-8f84-bf6dbec88b23"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 16911,
        "root": false,
        "rootEmpty": false,
        "_timeout": 30000
      },
      {
        "uuid": "d43dc47d-870a-44c2-9b41-78b3a44811f9",
        "title": "Get publication data any number of ways:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
        "file": "/test/publications.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get publication by singular id & return same id:",
            "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
            "timedOut": false,
            "duration": 79,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3a01ceed-d314-4ba1-841f-528630b9f90c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by comma sepatarated ids:",
            "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
            "timedOut": false,
            "duration": 75,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "68b06aef-d470-4144-a35f-523e0eae7890",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by querying author:",
            "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
            "timedOut": false,
            "duration": 84,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0e2e4cd8-aca8-407c-b143-8aa1b51c5f0f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publications using pubs with missing links:",
            "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
            "timedOut": false,
            "duration": 76,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "090eab11-95d5-4c1a-82fd-1265f2d49704",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by site id:",
            "fullTitle": "Get publication data any number of ways: Get publication by site id:",
            "timedOut": false,
            "duration": 77,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5adb2b62-0c07-4435-a214-05faa5efcd6f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by site id finds pubs for all sites:",
            "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
            "timedOut": false,
            "duration": 76,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "99a5aa43-925f-4a96-b46f-d44ce5ca4718",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get publication by dataset id finds pubs for all datasets:",
            "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
            "timedOut": false,
            "duration": 79,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5939e42e-b540-4a01-8925-a3b3d9dddda7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3a01ceed-d314-4ba1-841f-528630b9f90c",
          "68b06aef-d470-4144-a35f-523e0eae7890",
          "0e2e4cd8-aca8-407c-b143-8aa1b51c5f0f",
          "090eab11-95d5-4c1a-82fd-1265f2d49704",
          "5adb2b62-0c07-4435-a214-05faa5efcd6f",
          "99a5aa43-925f-4a96-b46f-d44ce5ca4718",
          "5939e42e-b540-4a01-8925-a3b3d9dddda7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 546,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      },
      {
        "uuid": "cfa94439-7909-40ce-99ba-6d33dcda778b",
        "title": "GET /v1.5/apps/DatasetTypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 159,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "3b43ac8a-7b8e-43dc-b82a-c4b5562325db",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3b43ac8a-7b8e-43dc-b82a-c4b5562325db"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 159,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e9ecaf48-7ce3-41c4-99c9-c8baafc89eaf",
        "title": "GET /v1.5/apps/TaxaInDatasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 4181,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "6c879333-5c97-427c-b726-251215dec850",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6c879333-5c97-427c-b726-251215dec850"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4181,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "71fabce5-8057-43fb-8757-7ab6e676a3c0",
        "title": "GET /v1.5/apps/collectionTypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 94,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "725d245f-ff2b-4996-9944-394c5dc59f74",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "725d245f-ff2b-4996-9944-394c5dc59f74"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 94,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c02efd69-232e-4de4-9664-18c931f3f576",
        "title": "GET /v1.5/data/contacts/{contactid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 116,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "734a64c3-148c-4c82-8282-3dc8b4a71fd2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "734a64c3-148c-4c82-8282-3dc8b4a71fd2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 116,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "14d6c7c9-10c6-49b8-b627-d90fdce7ab21",
        "title": "GET /v1.5/data/datasets/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 631,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "c8a5ff17-7fbe-4b38-a5aa-10a8a5f699e9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c8a5ff17-7fbe-4b38-a5aa-10a8a5f699e9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 631,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d678fc23-dcf4-4446-9d70-3f4491419db4",
        "title": "GET /v1.5/data/downloads/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 603,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "5a0037c3-fb22-4c47-917c-d8e44a4ae3ff",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5a0037c3-fb22-4c47-917c-d8e44a4ae3ff"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 603,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9d12c6e3-6141-47f4-83d2-2ea9ac107527",
        "title": "GET /v1.5/data/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 128,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "8fcf1565-9277-4b17-932a-b87a297a7e05",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8fcf1565-9277-4b17-932a-b87a297a7e05"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 128,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "15f7c8ab-09a7-4ca6-bc17-1170ae251bbd",
        "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "a1515f4c-1360-4abb-b6a5-0d758b368a4e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a1515f4c-1360-4abb-b6a5-0d758b368a4e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 101,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1160c621-2be4-4a0c-a15a-7d22d82b786f",
        "title": "GET /v1.5/data/occurrence/{occurrenceid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 113,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "11e17a20-142a-471f-9fd1-c2b148627a1a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "11e17a20-142a-471f-9fd1-c2b148627a1a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 113,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "fc2458dd-9354-4598-ad10-6c7b46a85f35",
        "title": "GET /v1.5/data/sites/{siteid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 104,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "5033903a-bfa5-450a-8672-1b5e40ff16f3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5033903a-bfa5-450a-8672-1b5e40ff16f3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 104,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "de8aeedd-9b29-43d4-80e9-20c47ee49bdf",
        "title": "GET /v1.5/dbtables/{table}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 105,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "2cbf0584-b154-4eb1-8e61-d2960ddfa0f9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2cbf0584-b154-4eb1-8e61-d2960ddfa0f9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 105,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "90a429dd-886f-4d46-aba3-f4860e7553ab",
        "title": "GET /v2.0/apps/authorpis",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 602,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "81cd3d98-5846-49d3-864d-fabaf4892aef",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "81cd3d98-5846-49d3-864d-fabaf4892aef"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 602,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cda566e5-6e7f-46af-b28e-8feb75d76dc0",
        "title": "GET /v2.0/apps/collectiontypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 123,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "d1d5f622-58b4-4561-8eb5-f9b8cbba6828",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d1d5f622-58b4-4561-8eb5-f9b8cbba6828"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 123,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d5c0908f-fe99-4a33-b1bc-30ab45eca6ef",
        "title": "GET /v2.0/apps/datasettypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 124,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "54181348-92ac-45f6-9b9c-907aa158373d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "54181348-92ac-45f6-9b9c-907aa158373d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 124,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "99935590-4d1c-423a-91e9-1cb3a26afff8",
        "title": "GET /v2.0/apps/depositionalenvironments/root",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 86,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "35191f05-902d-4ab8-b315-61dddbfb6bc1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "35191f05-902d-4ab8-b315-61dddbfb6bc1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 86,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5f6150b3-f65f-497d-a5ec-49676c66c46c",
        "title": "GET /v2.0/apps/keywords",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 90,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "09804d2c-e3f3-4c5d-8c3a-b2c040982ba7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "09804d2c-e3f3-4c5d-8c3a-b2c040982ba7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 90,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "fa37c06b-99da-4416-afab-961e524c4875",
        "title": "GET /v2.0/apps/taphonomysystems",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "f0b45a1c-51f6-46a0-bf11-e642f9b6ff5e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f0b45a1c-51f6-46a0-bf11-e642f9b6ff5e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 22,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "39aa7676-8c1f-41e8-9b58-32a27f9d513c",
        "title": "GET /v2.0/apps/taxagrouptypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 173,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "812f6d2f-8f48-4f15-b25c-d61c615430a7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "812f6d2f-8f48-4f15-b25c-d61c615430a7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 173,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "aaccbbb9-968a-42bc-8a0f-67dede8c86cf",
        "title": "GET /v2.0/apps/taxaindatasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 75494,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "86945e4d-7b5e-4f3b-b8ce-83555930a984",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "86945e4d-7b5e-4f3b-b8ce-83555930a984"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 75494,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1b8e587e-3b3a-48e6-a356-333dc8286813",
        "title": "GET /v2.0/data/chronology/{chronid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/chronology/{chronid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 36,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "6596fb39-4626-47f0-b359-53faae9dd9b1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "6596fb39-4626-47f0-b359-53faae9dd9b1"
        ],
        "pending": [],
        "skipped": [],
        "duration": 36,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "112fb18c-1b81-4074-ba5a-20975fadfaf8",
        "title": "GET /v2.0/data/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 14,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "029411fc-e13f-44f3-af97-d04e810fb68e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "029411fc-e13f-44f3-af97-d04e810fb68e"
        ],
        "pending": [],
        "skipped": [],
        "duration": 14,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "53a63e27-1d70-424a-ae1d-8b19331c0b09",
        "title": "GET /v2.0/data/contacts/{contactid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 394,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "7bcbfe7e-7e33-484b-8fc9-45a40a804402",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7bcbfe7e-7e33-484b-8fc9-45a40a804402"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 394,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7fd43e4c-9a09-41a9-a315-0d6420e78e94",
        "title": "GET /v2.0/data/contacts/{contactid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 161,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "19d193f8-4305-45a9-a722-281f1f8412de",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "19d193f8-4305-45a9-a722-281f1f8412de"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 161,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5fc8c157-6813-4a05-8d33-476359bbb008",
        "title": "GET /v2.0/data/datasets_elc/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 961,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "2dac80e2-0857-44fd-afe7-27a6b12b0b0a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "2dac80e2-0857-44fd-afe7-27a6b12b0b0a"
        ],
        "pending": [],
        "skipped": [],
        "duration": 961,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "4f7d3d02-b04f-473f-93f0-811f0a69c5c9",
        "title": "GET /v2.0/data/datasets_elc",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1570,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "5a5b90a8-47f3-4c2b-a2f1-e9ddde6b78fd",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5a5b90a8-47f3-4c2b-a2f1-e9ddde6b78fd"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1570,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "485bb9e3-9513-4a7e-8440-2637a0db9de9",
        "title": "GET /v2.0/data/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 8096,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "4f8bc830-9267-4412-a49f-2ab20ebeafcd",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4f8bc830-9267-4412-a49f-2ab20ebeafcd"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8096,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7216e90c-4d82-4b73-b13e-ea7551ba9787",
        "title": "GET /v2.0/data/datasets/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 883,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "2fe54946-a5ef-43ae-b325-e5229a161d3b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2fe54946-a5ef-43ae-b325-e5229a161d3b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 883,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "04aaffe9-10dd-4708-8330-9e33bdba4516",
        "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 114,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "ba605c0a-a541-4aeb-a64b-5bff12da3621",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ba605c0a-a541-4aeb-a64b-5bff12da3621"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 114,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "678e2958-a78a-406a-8574-909900f07c83",
        "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 144,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "cb3ef63e-3f8e-4b57-bb5f-1c9992768b78",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "cb3ef63e-3f8e-4b57-bb5f-1c9992768b78"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 144,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "173b9595-4b34-4a10-8238-9ca0dbddb4e1",
        "title": "GET /v2.0/data/datasets/{datasetid}/doi",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 188,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "81d46235-4726-4cda-9c76-a869593074d0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "81d46235-4726-4cda-9c76-a869593074d0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 188,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f38125d6-f77a-4e4d-a99b-1bd6d5921e31",
        "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 210,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "5a0d4e88-879a-413a-b209-f04b1762a2d0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5a0d4e88-879a-413a-b209-f04b1762a2d0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 210,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7ee1c4f6-33bb-475e-871c-c80f6540ca52",
        "title": "GET /v2.0/data/datasets/{datasetid}/publications",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 238,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "1a748fd4-fb2c-4566-a472-648b8e18732f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "1a748fd4-fb2c-4566-a472-648b8e18732f"
        ],
        "pending": [],
        "skipped": [],
        "duration": 238,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "60b52dd1-7f12-417f-9428-b09c8fabcaa9",
        "title": "GET /v2.0/data/datasets/{datasetid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 386,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "08181696-d0e9-4462-a526-2a3a1597c5c8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "08181696-d0e9-4462-a526-2a3a1597c5c8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 386,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "827ac141-15a6-42d1-a0a9-178c08152fa8",
        "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 207,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[0].ecolgroup should be array, data[0].status should be boolean, data[1].author should be string, data[1].ecolgroup should be array, data[1].publicationid should be integer, data[1].status should be boolean, data[2].ecolgroup should be array, data[2].status should be boolean, data[3].ecolgroup should be array, data[3].status should be boolean, data[4].ecolgroup should be array, data[4].status should be boolean, data[5].ecolgroup should be array, data[5].status should be boolean, data[6].ecolgroup should be array, data[6].status should be boolean, data[7].ecolgroup should be array, data[7].status should be boolean, data[8].ecolgroup should be array, data[8].status should be boolean, data[9].ecolgroup should be array, data[9].status should be boolean, data[10].ecolgroup should be array, data[10].status should be boolean, data[11].ecolgroup should be array, data[11].status should be boolean, data[12].ecolgroup should be array, data[12].status should be boolean, data[13].ecolgroup should be array, data[13].status should be boolean, data[14].author should be string, data[14].ecolgroup should be array, data[14].publicationid should be integer, data[14].status should be boolean, data[15].ecolgroup should be array, data[15].status should be boolean, data[16].author should be string, data[16].ecolgroup should be array, data[16].publicationid should be integer, data[16].status should be boolean, data[17].ecolgroup should be array, data[17].status should be boolean, data[18].ecolgroup should be array, data[18].status should be boolean, data[19].ecolgroup should be array, data[19].status should be boolean, data[20].ecolgroup should be array, data[20].status should be boolean, data[21].ecolgroup should be array, data[21].status should be boolean, data[22].ecolgroup should be array, data[22].status should be boolean, data[23].ecolgroup should be array, data[23].status should be boolean, data[24].ecolgroup should be array, data[24].status should be boolean, data[25].ecolgroup should be array, data[25].status should be boolean, data[26].ecolgroup should be array, data[26].status should be boolean, data[27].ecolgroup should be array, data[27].status should be boolean, data[28].ecolgroup should be array, data[28].status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[0].ecolgroup should be array, data[0].status should be boolean, data[1].author should be string, data[1].ecolgroup should be array, data[1].publicationid should be integer, data[1].status should be boolean, data[2].ecolgroup should be array, data[2].status should be boolean, data[3].ecolgroup should be array, data[3].status should be boolean, data[4].ecolgroup should be array, data[4].status should be boolean, data[5].ecolgroup should be array, data[5].status should be boolean, data[6].ecolgroup should be array, data[6].status should be boolean, data[7].ecolgroup should be array, data[7].status should be boolean, data[8].ecolgroup should be array, data[8].status should be boolean, data[9].ecolgroup should be array, data[9].status should be boolean, data[10].ecolgroup should be array, data[10].status should be boolean, data[11].ecolgroup should be array, data[11].status should be boolean, data[12].ecolgroup should be array, data[12].status should be boolean, data[13].ecolgroup should be array, data[13].status should be boolean, data[14].author should be string, data[14].ecolgroup should be array, data[14].publicationid should be integer, data[14].status should be boolean, data[15].ecolgroup should be array, data[15].status should be boolean, data[16].author should be string, data[16].ecolgroup should be array, data[16].publicationid should be integer, data[16].status should be boolean, data[17].ecolgroup should be array, data[17].status should be boolean, data[18].ecolgroup should be array, data[18].status should be boolean, data[19].ecolgroup should be array, data[19].status should be boolean, data[20].ecolgroup should be array, data[20].status should be boolean, data[21].ecolgroup should be array, data[21].status should be boolean, data[22].ecolgroup should be array, data[22].status should be boolean, data[23].ecolgroup should be array, data[23].status should be boolean, data[24].ecolgroup should be array, data[24].status should be boolean, data[25].ecolgroup should be array, data[25].status should be boolean, data[26].ecolgroup should be array, data[26].status should be boolean, data[27].ecolgroup should be array, data[27].status should be boolean, data[28].ecolgroup should be array, data[28].status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "43c57aad-cd59-4a1c-a716-de3350f9b823",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "43c57aad-cd59-4a1c-a716-de3350f9b823"
        ],
        "pending": [],
        "skipped": [],
        "duration": 207,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7864fc35-7134-4eb1-b953-e787138d1fec",
        "title": "GET /v2.0/data/datasets/db",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 3,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: Request failed with status code 500",
              "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "d9cba2cb-8920-4c9c-b551-8a3f37a795a2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "d9cba2cb-8920-4c9c-b551-8a3f37a795a2"
        ],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1c71ba76-c88e-4d00-b3b7-258845eb5dc1",
        "title": "GET /v2.0/data/dbtables",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1216,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "358511f1-d945-455b-b075-5b697475ee06",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "358511f1-d945-455b-b075-5b697475ee06"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1216,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "648b5d24-eb7d-4b73-b2f0-8f4f47226c97",
        "title": "GET /v2.0/data/dbtables/{table}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 213,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "ccdf5737-0aff-4abd-8251-2161bb09ebcd",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ccdf5737-0aff-4abd-8251-2161bb09ebcd"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 213,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "42babb22-ba67-48ea-a89e-95bd1c6cffbe",
        "title": "GET /v2.0/data/downloads/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 855,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "510da6c6-bcdc-467f-bd0a-254331276027",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "510da6c6-bcdc-467f-bd0a-254331276027"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 855,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5932707b-cf98-42ea-9309-d31a6f97f1e5",
        "title": "GET /v2.0/data/frozen/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 376,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "1c5c3dea-0a89-415f-bcd9-fc629c7fa817",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1c5c3dea-0a89-415f-bcd9-fc629c7fa817"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 376,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d1b93adf-7276-4138-8177-65f4ce6d4ed5",
        "title": "GET /v2.0/data/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 13,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "b7f18a0f-b0d8-4cf8-a367-1d7fdf315ef6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "b7f18a0f-b0d8-4cf8-a367-1d7fdf315ef6"
        ],
        "pending": [],
        "skipped": [],
        "duration": 13,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "71710b6a-51cb-42ad-a22e-00e1c2050809",
        "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 382,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "c7143764-3e72-4c36-95ef-176e059f3453",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c7143764-3e72-4c36-95ef-176e059f3453"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 382,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "be6557f1-f094-409c-b921-44060607f592",
        "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 209,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "c9a48124-95c0-45ad-9d23-afd06a771595",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "c9a48124-95c0-45ad-9d23-afd06a771595"
        ],
        "pending": [],
        "skipped": [],
        "duration": 209,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "12341939-0dd4-4e3d-9004-42d145878266",
        "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 139,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "83a3d735-d5ee-4b59-95db-c56747601448",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "83a3d735-d5ee-4b59-95db-c56747601448"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 139,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6c1ea7f6-38e9-4716-b086-70dca65b4e08",
        "title": "GET /v2.0/data/occurrences",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 12,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "5dfe9952-f3b8-4584-9815-a27ad0ec6240",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "5dfe9952-f3b8-4584-9815-a27ad0ec6240"
        ],
        "pending": [],
        "skipped": [],
        "duration": 12,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f3e67435-f34d-4459-9aec-f6abc289cd71",
        "title": "GET /v2.0/data/occurrences/{occurrenceid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 250,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "bba9859d-421f-4235-9895-2d507fd9fffd",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bba9859d-421f-4235-9895-2d507fd9fffd"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 250,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e98cd234-efee-45e8-93f1-e37c4e0f1666",
        "title": "GET /v2.0/data/oxcal/calibrate",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 23,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: Request failed with status code 500",
              "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "57640a18-6fc2-4cd9-bb10-223616605970",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "57640a18-6fc2-4cd9-bb10-223616605970"
        ],
        "pending": [],
        "skipped": [],
        "duration": 23,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "fcf6df7a-4c61-476a-8175-37301d7306eb",
        "title": "GET /v2.0/data/pollen",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 20,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/pollen' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/pollenresponse\n\nres contained: { body: { status: 'success', query: {}, message: 'Retrieved pollen' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/pollen' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/pollenresponse' } }\n    },\n    description: 'A record of all pollen samples in time/space for a particular taxon.'\n  }\n}",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/pollen' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/pollenresponse\n\nres contained: { body: { status: 'success', query: {}, message: 'Retrieved pollen' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/pollen' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/pollenresponse' } }\n    },\n    description: 'A record of all pollen samples in time/space for a particular taxon.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "e72ce503-0d4a-4265-a453-7bc1d68449e6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "e72ce503-0d4a-4265-a453-7bc1d68449e6"
        ],
        "pending": [],
        "skipped": [],
        "duration": 20,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0ae06886-57d6-4665-bd01-22fc25d4fe1c",
        "title": "GET /v2.0/data/pollen/{id}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 21,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/pollen/{id}' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/pollenresponse\n\nres contained: { body: { status: 'success', query: {}, message: 'Retrieved pollen' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/pollen/{id}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/pollenresponse' } }\n    },\n    description: 'A record of all pollen samples in time/space for a particular taxon.'\n  }\n}",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/pollen/{id}' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/pollenresponse\n\nres contained: { body: { status: 'success', query: {}, message: 'Retrieved pollen' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/pollen/{id}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/pollenresponse' } }\n    },\n    description: 'A record of all pollen samples in time/space for a particular taxon.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "64e7a11d-dc8d-4a57-b323-d8ecbcbe911c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "64e7a11d-dc8d-4a57-b323-d8ecbcbe911c"
        ],
        "pending": [],
        "skipped": [],
        "duration": 21,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a5d4728f-4e12-4c1b-a941-9f1730be2f8f",
        "title": "GET /v2.0/data/publications",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 11,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "1a2458f7-235e-46a4-8aba-9da8b43dde2b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "1a2458f7-235e-46a4-8aba-9da8b43dde2b"
        ],
        "pending": [],
        "skipped": [],
        "duration": 11,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "4be15f7f-ce1b-4cc7-8a61-9fb19300af10",
        "title": "GET /v2.0/data/publications/{publicationid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 332,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "39dd1c27-8dd1-4105-b8a7-bdd2b9dd2c8a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "39dd1c27-8dd1-4105-b8a7-bdd2b9dd2c8a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 332,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5191b406-7a62-47d4-aea7-649db303a48d",
        "title": "GET /v2.0/data/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 339,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "93da8d02-c753-4a6d-8dc1-d05cb73a3d63",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "93da8d02-c753-4a6d-8dc1-d05cb73a3d63"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 339,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3962088d-559b-4074-a10e-67982e15430b",
        "title": "GET /v2.0/data/sites/{siteid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 97,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "bc60df8f-ccb3-475c-8bf8-85ac51fe823e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bc60df8f-ccb3-475c-8bf8-85ac51fe823e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 97,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "634bc199-7860-4812-b747-292564b97962",
        "title": "GET /v2.0/data/sites/{siteid}/chronologies",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 110,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "98449da0-4692-4390-8d8e-83b6f84b01a8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "98449da0-4692-4390-8d8e-83b6f84b01a8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 110,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9b1b9c01-c930-459a-9f5e-1750b686d8de",
        "title": "GET /v2.0/data/sites/{siteid}/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 92,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "06333d71-3799-443c-a913-7892e5256b5f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "06333d71-3799-443c-a913-7892e5256b5f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 92,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "721b7b64-73db-4b47-98d3-1180e1f2a9d9",
        "title": "GET /v2.0/data/sites/{siteid}/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 1103,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "408d64e8-b0bd-4ad7-936f-1dabc43a22e3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "408d64e8-b0bd-4ad7-936f-1dabc43a22e3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1103,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "439c3547-f992-4572-a752-3da0e89ad0ba",
        "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 694,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets_elc' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetelcresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          }\n        ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets_elc' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetelcresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets_elc' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetelcresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null, units: null }\n          }\n        ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets_elc' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetelcresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "6ed5f5df-412c-4113-81fe-56924372f381",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "6ed5f5df-412c-4113-81fe-56924372f381"
        ],
        "pending": [],
        "skipped": [],
        "duration": 694,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8e4804c7-39cc-4340-b7ce-e266c9f0ffbf",
        "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 94,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "e6b072ee-3d3f-41bd-8107-7b68565da47e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e6b072ee-3d3f-41bd-8107-7b68565da47e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 94,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "4c7eebb1-dfdd-4c34-a984-ab5c1d0c1853",
        "title": "GET /v2.0/data/sites/{siteid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/sites/{siteid}/sites should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 14,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "8efce647-4cde-4838-893f-d8404cbd6a57",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "8efce647-4cde-4838-893f-d8404cbd6a57"
        ],
        "pending": [],
        "skipped": [],
        "duration": 14,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1dbf5be0-bef8-49bc-8a3c-bf6d92519b6b",
        "title": "GET /v2.0/data/taxa",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 10,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
              "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
            },
            "isRoot": false,
            "uuid": "bc2b844f-a045-4d98-8bbd-41c428a7e490",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "bc2b844f-a045-4d98-8bbd-41c428a7e490"
        ],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a55549af-034e-432e-a293-812d80e3c6ea",
        "title": "GET /v2.0/data/summary/dsdbmonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 244,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "10366bcd-f73d-42e7-9367-35495c669ade",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "10366bcd-f73d-42e7-9367-35495c669ade"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 244,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6a8bc0a8-5aad-49e8-9117-13030c5b07ed",
        "title": "GET /v2.0/data/summary/dstypemonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 300,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "4c1026ef-f2a5-4fdc-9064-91cd1a0eaa54",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4c1026ef-f2a5-4fdc-9064-91cd1a0eaa54"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 300,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6963f940-0511-47b7-81f2-db7b83adc4c5",
        "title": "GET /v2.0/data/summary/rawbymonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 4501,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "5ca4c931-1773-4caa-84ec-18c135a2624c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5ca4c931-1773-4caa-84ec-18c135a2624c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4501,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9e9ee829-d1d8-4f6a-b8ca-7868860ecbbb",
        "title": "GET /v2.0/data/taxa/{taxonid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 92,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "a4305e3f-26a4-4c00-883d-733ede1b875f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a4305e3f-26a4-4c00-883d-733ede1b875f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 92,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "08e8b386-8fa0-4128-99ed-64cdff05cea9",
        "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 24369,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "c0baa677-14c8-4850-9fb6-733122aafc8d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c0baa677-14c8-4850-9fb6-733122aafc8d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 24369,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "17c7ea9d-41d9-4e3d-bb33-cc2e84bad61d",
        "title": "GET /v2.0/dbtables/table",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 21,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {
              "message": "Error: Request failed with status code 500",
              "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1334:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)"
            },
            "isRoot": false,
            "uuid": "10e0397a-6cb7-4e7a-9f1d-4911f6f5ef6d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "10e0397a-6cb7-4e7a-9f1d-4911f6f5ef6d"
        ],
        "pending": [],
        "skipped": [],
        "duration": 21,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "54809f8f-c1c0-4de4-9215-e41ccb87c44b",
        "title": "GET /v2.0/dbtables/tablenames",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
        "file": "/test/responsevalidate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should satisfy OpenAPI spec",
            "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
            "timedOut": false,
            "duration": 420,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
            "err": {},
            "isRoot": false,
            "uuid": "97c73ad3-dc54-4abd-ab7d-62908e5c889a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "97c73ad3-dc54-4abd-ab7d-62908e5c889a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 420,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "219992be-2e29-4fa1-ae64-adefec33b9c5",
        "title": "Get site data any number of ways:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
        "file": "/test/sites.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get site by singular id & return same id:",
            "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
            "timedOut": false,
            "duration": 103,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "4157194b-25cd-483e-8cc5-5490070e7631",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get site by altitude:",
            "fullTitle": "Get site data any number of ways: Get site by altitude:",
            "timedOut": false,
            "duration": 97,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "0a4ce3d1-9556-4790-8319-1f71c5ecdff6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Break sites by flipping altitudes:",
            "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "1a399d58-688a-4798-93ae-c7ce431bb147",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Break sites by passing invalid siteid:",
            "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
            "timedOut": false,
            "duration": 89,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "3841c249-5f64-4a06-a677-ca0eb593272b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get site by contact information for multiple authors:",
            "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
            "timedOut": false,
            "duration": 171,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "67f1e032-f012-451e-8ece-97fc816ab945",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4157194b-25cd-483e-8cc5-5490070e7631",
          "0a4ce3d1-9556-4790-8319-1f71c5ecdff6",
          "1a399d58-688a-4798-93ae-c7ce431bb147",
          "3841c249-5f64-4a06-a677-ca0eb593272b",
          "67f1e032-f012-451e-8ece-97fc816ab945"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 465,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "37432c0a-c583-45fa-a47d-f53cd3bfebd4",
        "title": "Get Neotoma data with geoJSON extents:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
        "file": "/test/spatial.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get occurrence data using a simple geoJSON:",
            "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
            "timedOut": false,
            "duration": 458,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "39905805-6afb-4def-a601-32822311f66a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get site data using a simple geoJSON:",
            "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
            "timedOut": false,
            "duration": 211,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7465d7a6-25f2-4b3b-8d2b-41f1dd501300",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset data using a simple geoJSON:",
            "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
            "timedOut": false,
            "duration": 1957,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e1224368-8cda-4234-9e81-41559064f4f5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "39905805-6afb-4def-a601-32822311f66a",
          "7465d7a6-25f2-4b3b-8d2b-41f1dd501300",
          "e1224368-8cda-4234-9e81-41559064f4f5"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2626,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      },
      {
        "uuid": "b422ae0f-36dd-424c-97af-f77d641b178f",
        "title": "Get Neotoma data with WKT extents:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
        "file": "/test/spatial.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Get occurrence data using a simple WKT:",
            "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
            "timedOut": false,
            "duration": 497,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1694cc2a-aac1-4b38-baca-751a25106d6f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get site data using a simple WKT:",
            "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
            "timedOut": false,
            "duration": 214,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0415597a-9b9c-49f0-a9a5-d7683a703d2c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset data using a simple WKT:",
            "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
            "timedOut": false,
            "duration": 1951,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cb43ef0b-0253-4108-b53c-52f29dbf471d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get dataset data using a simple WKT:",
            "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
            "timedOut": false,
            "duration": 1562,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e823275d-b71a-4646-9748-2a6a9a444302",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1694cc2a-aac1-4b38-baca-751a25106d6f",
          "0415597a-9b9c-49f0-a9a5-d7683a703d2c",
          "cb43ef0b-0253-4108-b53c-52f29dbf471d",
          "e823275d-b71a-4646-9748-2a6a9a444302"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4224,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      },
      {
        "uuid": "a6caa6b1-7519-4e51-adb2-4b6610bfccf9",
        "title": "Get taxon data:",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
        "file": "/test/taxa.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "An empty query redirects to the api documentation.",
            "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ef4af983-fd4a-4053-9cb8-217ecd46f236",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A single taxon should be returned by id:",
            "fullTitle": "Get taxon data: A single taxon should be returned by id:",
            "timedOut": false,
            "duration": 74,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "2100997a-95d7-4179-903d-1d71ed7d94d1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Taxon queries should be case insensitive:",
            "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
            "timedOut": false,
            "duration": 145,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "f7893322-b857-4ed4-83e4-ed8243088a29",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Taxon queries should accept comma separated lists:",
            "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
            "timedOut": false,
            "duration": 141,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "c87ef12b-157a-420f-aacd-63c247ebc947",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Hierarchical taxon queries should accept comma separated lists:",
            "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
            "timedOut": false,
            "duration": 195,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "d735a510-1bfa-43fb-a7fb-08ba110350a7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Taxon queries should accept `*` as a wildcard:",
            "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
            "timedOut": false,
            "duration": 141,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "7a47fde9-3209-4fa6-b0d3-f36633891d03",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The default limit of 25 should be reached for taxon data:",
            "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
            "timedOut": false,
            "duration": 162,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "5be4cc1e-1df5-450c-998a-00e5dc7779ca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Changing the limit should change the number of taxa retrieved:",
            "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
            "timedOut": false,
            "duration": 160,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "ac5118fe-aa14-4a31-952d-ebc16a3680c4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ef4af983-fd4a-4053-9cb8-217ecd46f236",
          "2100997a-95d7-4179-903d-1d71ed7d94d1",
          "f7893322-b857-4ed4-83e4-ed8243088a29",
          "c87ef12b-157a-420f-aacd-63c247ebc947",
          "d735a510-1bfa-43fb-a7fb-08ba110350a7",
          "7a47fde9-3209-4fa6-b0d3-f36633891d03",
          "5be4cc1e-1df5-450c-998a-00e5dc7779ca",
          "ac5118fe-aa14-4a31-952d-ebc16a3680c4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1025,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "21be0c73-292b-41f1-b469-7352c10934ef",
        "title": "tests for /v1.5/apps/DatasetTypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
        "file": "/test/v1.5-apps-DatasetTypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ca7417e1-74f6-41e8-8494-a3a9f3439e0c",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
            "file": "/test/v1.5-apps-DatasetTypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "1babee28-8bf6-4310-8d57-2113b3c3826a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1babee28-8bf6-4310-8d57-2113b3c3826a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 70,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a5ba54d1-7131-41db-a120-aa7768e0a63d",
        "title": "tests for /v1.5/apps/TaxaInDatasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
        "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1d8a6573-1387-4887-b530-1cd2a9858bd0",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
            "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "43b7fb26-3eba-4535-a3d5-b65e556109c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "43b7fb26-3eba-4535-a3d5-b65e556109c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 62,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1381a9ac-7662-43f9-9c57-0cd8e65de63d",
        "title": "tests for /v1.5/apps/collectionTypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
        "file": "/test/v1.5-apps-collectionTypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "914842f1-e67c-4623-9f02-ab5f1e408951",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
            "file": "/test/v1.5-apps-collectionTypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "d30073ca-a423-4f09-a9e1-bb2cda247698",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d30073ca-a423-4f09-a9e1-bb2cda247698"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d76ba818-fdc6-4bb6-bf74-54bc38177f58",
        "title": "tests for /v1.5/data/contacts/{contactid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
        "file": "/test/v1.5-data-contacts-{contactid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "58b8a2e9-4136-4789-b29c-79b0da6322c5",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
            "file": "/test/v1.5-data-contacts-{contactid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Contact\"",
                "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e1523579-3e68-460b-b38d-a44aaa95c799",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e1523579-3e68-460b-b38d-a44aaa95c799"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 78,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "70d1cdbe-16b3-4661-9ba3-5694c916fa78",
        "title": "tests for /v1.5/data/datasets/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
        "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8d532e95-d5d9-45af-a9fa-9f5db0ae7a9b",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
            "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 579,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "0fee40dc-03ff-4877-9580-850d98ad34e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0fee40dc-03ff-4877-9580-850d98ad34e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 579,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e2431186-32bd-4784-beb6-ae8c5ed6ec61",
        "title": "tests for /v1.5/data/downloads/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
        "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d679461c-8f7b-48b1-9fe5-273c2cda1b96",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
            "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned download object.\"",
                "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                "timedOut": false,
                "duration": 641,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "a7f0d662-8709-4490-ae33-004e40fbe68d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a7f0d662-8709-4490-ae33-004e40fbe68d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 641,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a0fa38b0-664e-46c4-aa5e-3a1997907535",
        "title": "tests for /v1.5/data/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
        "file": "/test/v1.5-data-geopoliticalunits-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6342c569-eca6-4359-99cc-e1a311820e51",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
            "file": "/test/v1.5-data-geopoliticalunits-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 4504, 'gpname': 'reprehenderit in laboris minim fugiat', 'rank': 3, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e79b10cd-141f-4e0c-820b-408fdc9a409d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e79b10cd-141f-4e0c-820b-408fdc9a409d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 118,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f050512e-b4a8-46e6-a3e3-cc241232259b",
        "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
        "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "05b62530-e32c-48cc-9e4b-3a6c48cb3f80",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
            "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/7815', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "317fb05a-3ee3-4a3e-b537-8454f57f0a35",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "317fb05a-3ee3-4a3e-b537-8454f57f0a35"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 77,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "201c97b1-8991-4a36-9cdf-f744cf294822",
        "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
        "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c4f7f030-9bda-4720-bbe1-01b81965db02",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
            "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A single occurrence object.\"",
                "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "98eb6e24-6888-4e8b-bd42-5ff366c6409a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98eb6e24-6888-4e8b-bd42-5ff366c6409a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 81,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5798c71f-eb2f-44aa-919a-740ebbe6c530",
        "title": "tests for /v1.5/data/sites/{siteid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
        "file": "/test/v1.5-data-sites-{siteid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d4062368-d470-448b-a754-29dd599e84da",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
            "file": "/test/v1.5-data-sites-{siteid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of site elements.\"",
                "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "4d343622-3896-47a1-9e8a-a1f573d1a7a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4d343622-3896-47a1-9e8a-a1f573d1a7a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 80,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3f4f6850-ff0b-4662-837b-87fd6135f54b",
        "title": "tests for /v1.5/dbtables/{table}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
        "file": "/test/v1.5-dbtables-{table}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4926d8b6-5f25-41e5-ad21-92f8f07aec89",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
            "file": "/test/v1.5-dbtables-{table}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned table.\"",
                "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "0a4d6c91-6932-4444-baad-9b1051e46469",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a4d6c91-6932-4444-baad-9b1051e46469"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 78,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7c3938f7-10d3-47b6-b8cd-fc1e34d5b4ea",
        "title": "tests for /v2.0/apps/authorpis",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
        "file": "/test/v2.0-apps-authorpis-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5c51897e-3db2-4206-95d9-3dbb8cd5892c",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
            "file": "/test/v2.0-apps-authorpis-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "c62f7320-60b2-49f1-8725-c71149c4d5aa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c62f7320-60b2-49f1-8725-c71149c4d5aa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c2fc86e6-3cc0-4b61-b39f-0383584aa791",
        "title": "tests for /v2.0/apps/collectiontypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
        "file": "/test/v2.0-apps-collectiontypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7c047d08-daed-4760-a677-8d9e0880b61d",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
            "file": "/test/v2.0-apps-collectiontypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "31fb43a0-b0b3-4a96-ac3a-ef19d8c0c045",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "31fb43a0-b0b3-4a96-ac3a-ef19d8c0c045"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "72eb9655-de2e-402e-b9b4-2949c6daad1e",
        "title": "tests for /v2.0/apps/datasettypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
        "file": "/test/v2.0-apps-datasettypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "14cf1ea3-35f1-4a83-8027-ddb2a9d85f51",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
            "file": "/test/v2.0-apps-datasettypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "c027a839-ea50-479e-8233-3e4720080993",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c027a839-ea50-479e-8233-3e4720080993"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "34c6bc90-080a-4e65-8988-035d29e18d15",
        "title": "tests for /v2.0/apps/depositionalenvironments/root",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
        "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ce23e3d4-bd0e-42fd-bb01-1f27bd4f758c",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
            "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "7ccdd4e5-cfff-4a9e-806b-9761dbce24d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ccdd4e5-cfff-4a9e-806b-9761dbce24d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "813541a7-9e2b-4713-9043-ead8a28cdd10",
        "title": "tests for /v2.0/apps/keywords",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
        "file": "/test/v2.0-apps-keywords-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5d44b6de-ef94-4dc3-a495-333f13848ea0",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
            "file": "/test/v2.0-apps-keywords-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "7fc8b9c8-3997-470e-809c-2c45dd319e34",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7fc8b9c8-3997-470e-809c-2c45dd319e34"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "168a6b76-d060-46f5-9acf-0cfc7466f560",
        "title": "tests for /v2.0/apps/taphonomysystems",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
        "file": "/test/v2.0-apps-taphonomysystems-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1086e906-ee27-4a6f-ae26-2478f888c321",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
            "file": "/test/v2.0-apps-taphonomysystems-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 17 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "d286bb6e-0f67-4c20-939c-645e8a9d4949",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d286bb6e-0f67-4c20-939c-645e8a9d4949"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 75,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "076d744f-046e-4cbe-870f-6da4bfb914cb",
        "title": "tests for /v2.0/apps/taxagrouptypes",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
        "file": "/test/v2.0-apps-taxagrouptypes-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "628a119a-a39c-4648-badd-48b00b357499",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
            "file": "/test/v2.0-apps-taxagrouptypes-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "09e206a8-3a1a-4d35-b1d6-c8dfef7d9fae",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "09e206a8-3a1a-4d35-b1d6-c8dfef7d9fae"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "17e02d84-c0aa-4b9f-9829-e919bd1dcd64",
        "title": "tests for /v2.0/apps/taxaindatasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
        "file": "/test/v2.0-apps-taxaindatasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "738271de-4fa2-4d67-a18f-d15c60753eaa",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
            "file": "/test/v2.0-apps-taxaindatasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e893609e-a9d3-485a-b9a0-fc6e4b55b974",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e893609e-a9d3-485a-b9a0-fc6e4b55b974"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 45,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5ba6fee1-f4f7-44bd-b988-9014d10f13ec",
        "title": "tests for /v2.0/data/chronology/{chronid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
        "file": "/test/v2.0-data-chronology-{chronid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9400d3a9-a22e-4fc6-8964-afd17071ce2f",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
            "file": "/test/v2.0-data-chronology-{chronid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma chronology object.\"",
                "fullTitle": "tests for /v2.0/data/chronology/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronology/7047', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "0b241237-4e0d-4753-94a5-a7fe5f523272",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0b241237-4e0d-4753-94a5-a7fe5f523272"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "36221a53-2fe7-4044-bb92-9c198596f2b8",
        "title": "tests for /v2.0/data/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
        "file": "/test/v2.0-data-contacts-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3ebdbf6a-5b4e-48be-a8cd-3205f47d8988",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
            "file": "/test/v2.0-data-contacts-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"contact\"",
                "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 5148, 'familyname': 'commodo ea veniam sit', 'contactname': 'aute anim', 'contactstatus': 'unknown', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "075e23f7-94f0-469a-99f5-0d3ed20e3668",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "075e23f7-94f0-469a-99f5-0d3ed20e3668"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 87,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f6608573-509e-496c-9d0d-52ae28a2acbd",
        "title": "tests for /v2.0/data/contacts/{contactid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
        "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "55cfb7d9-9d3a-42f9-a19f-c4e356296769",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
            "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma sites object.\"",
                "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "3a66b5cd-9880-4eb0-8852-2a47f63c04fe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3a66b5cd-9880-4eb0-8852-2a47f63c04fe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 101,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7b025ae3-30cb-4554-8d4d-5ce4bf4b0f2b",
        "title": "tests for /v2.0/data/contacts/{contactid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
        "file": "/test/v2.0-data-contacts-{contactid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c9e5c8fa-d53b-47af-92fa-b4fa275c761f",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
            "file": "/test/v2.0-data-contacts-{contactid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma contacts object.\"",
                "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "f3577b17-dbca-468e-b908-037c6166f674",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f3577b17-dbca-468e-b908-037c6166f674"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 84,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3f001f7d-896a-4d49-bc28-035dd874effd",
        "title": "tests for /v2.0/data/datasets/db",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
        "file": "/test/v2.0-data-datasets-db-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "21e64abe-2f00-448e-9782-cc78f4ed8a6f",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
            "file": "/test/v2.0-data-datasets-db-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Datasets\"",
                "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                "timedOut": false,
                "duration": 2008,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Neotoma Charcoal Data' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "0bef4cf1-4b48-4468-b3d2-d01539031347",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0bef4cf1-4b48-4468-b3d2-d01539031347"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2008,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8b899889-9273-4a93-b300-cb96859f19ea",
        "title": "tests for /v2.0/data/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
        "file": "/test/v2.0-data-datasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0474a850-988f-4048-b8ff-d63ea5357fc8",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
            "file": "/test/v2.0-data-datasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 1084,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 24280, 'contactid': 16100, 'datasettype': 'est dolor amet labore commodo', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 12633816 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "921fe851-dbf2-4749-a975-ce4602dfb56f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "921fe851-dbf2-4749-a975-ce4602dfb56f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1084,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "23f7458b-0496-403a-9118-807ebbe18f3b",
        "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "65f9a076-2eb5-4bc9-960d-ce439317e3c5",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"chronology\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e9b39682-b944-4a0c-bf8e-6716f63490d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e9b39682-b944-4a0c-bf8e-6716f63490d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 116,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "139e26df-1f28-433b-8432-4e570d44017e",
        "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7fa77687-b96a-4936-bbcc-8f0bf56814ab",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"contact\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "0d4ede12-69f7-47be-8463-697761a5454e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d4ede12-69f7-47be-8463-697761a5454e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 75,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "bf461fde-c69f-4167-8977-a2eb42c538ec",
        "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cc8f84d0-4a56-49d9-b14b-a60811be9f95",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"DOI\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e3b798c9-e34a-48a6-8515-b1addb0eaf33",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3b798c9-e34a-48a6-8515-b1addb0eaf33"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 75,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9cb71fd4-24b8-4e52-b15c-31ec53f8db39",
        "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f7677671-e033-4a46-9ce5-e5c98cd39f26",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Lithology\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e1dbf891-a75c-467c-bc4e-259fc303df19",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e1dbf891-a75c-467c-bc4e-259fc303df19"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 76,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2d52a833-0b9f-454e-8445-47b165946f77",
        "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f82e9d38-16d2-4816-84c5-d90c1adc00b5",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Publication\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "2d6eac1e-d67b-49c2-9b56-1edd79775f8c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2d6eac1e-d67b-49c2-9b56-1edd79775f8c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 80,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3dd9259f-d869-4003-8ca3-2bc5cb1d4363",
        "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3619c963-c2bb-4b07-8fc5-e1ebeb445204",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Site\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/681/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "54a93ee2-e816-494d-9eb8-c0831ab24d7b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "54a93ee2-e816-494d-9eb8-c0831ab24d7b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 76,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "4f87a83c-f666-45bb-890d-dfe4c1726572",
        "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a117dc48-f24d-41e5-8a77-22df9df87eed",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Taxa\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "8feafde0-c0ea-451c-8f41-4027952f97bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8feafde0-c0ea-451c-8f41-4027952f97bb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 152,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "240296ea-46df-4658-9427-4959ca401d99",
        "title": "tests for /v2.0/data/datasets/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
        "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "356e5afd-24c3-41a8-88be-ac40486e7d16",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
            "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 846,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "816b7f5e-3e9a-47c0-be79-3ce5d41ee09e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "816b7f5e-3e9a-47c0-be79-3ce5d41ee09e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 846,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "186556ae-b553-49be-a8b5-0b81620044f3",
        "title": "tests for /v2.0/data/datasets_elc",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
        "file": "/test/v2.0-data-datasets_elc-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "be78aaf7-23e0-48cb-8733-bf7d2769eb35",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
            "file": "/test/v2.0-data-datasets_elc-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                "timedOut": false,
                "duration": 8,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 10709, 'contactid': 15783, 'datasettype': 'consequat enim', 'altmin': 10, 'altmax': -287, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 16136556 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "AssertionError: expected status code 500 to equal 200",
                  "estack": "AssertionError: expected status code 500 to equal 200"
                },
                "isRoot": false,
                "uuid": "96c601cb-69b5-4da7-8020-caa20e686b9f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "96c601cb-69b5-4da7-8020-caa20e686b9f"
            ],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8ea207de-b23c-43e2-996f-c66a4ebfa87f",
        "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
        "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "197c7ccf-d6e4-4afe-a5f0-cb81d4f10697",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
            "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                "timedOut": false,
                "duration": 1191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "f7223e23-4659-4e57-84e4-70e330a9714f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7223e23-4659-4e57-84e4-70e330a9714f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1191,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "52eee971-fa28-45ec-9c6c-b3d393ec1fc4",
        "title": "tests for /v2.0/data/dbtables",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
        "file": "/test/v2.0-data-dbtables-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8d8cd02f-cf2e-4fdb-8102-b4e388cb05a7",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
            "file": "/test/v2.0-data-dbtables-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned table.\"",
                "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'quis', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "c9302dd3-53b8-4b8b-b157-1410a6ef5bb1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9302dd3-53b8-4b8b-b157-1410a6ef5bb1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 76,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a12787b6-37a8-45bc-b4e2-57c23cef5e09",
        "title": "tests for /v2.0/data/dbtables/{table}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
        "file": "/test/v2.0-data-dbtables-{table}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "92311a32-3720-4fb8-b1b1-ab889736102c",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
            "file": "/test/v2.0-data-dbtables-{table}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned table.\"",
                "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "44304291-0e05-4fac-b4bd-b8901f7aa2e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "44304291-0e05-4fac-b4bd-b8901f7aa2e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 79,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ece1724e-7ae7-420a-96ad-8c65a1181185",
        "title": "tests for /v2.0/data/downloads/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
        "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "13966560-877a-4374-9068-7c24d65c4a78",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
            "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned download object.\"",
                "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                "timedOut": false,
                "duration": 840,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/5531', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "b5eea50b-1f37-44de-a116-f03cb583c1e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b5eea50b-1f37-44de-a116-f03cb583c1e1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 840,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5c412734-e103-47d3-9a78-bae15956c25d",
        "title": "tests for /v2.0/data/frozen/{datasetid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
        "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "88143079-0c08-479a-b4b1-d2b59bb3a647",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
            "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned download object.\"",
                "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "da1b21ca-8ed2-480a-8263-6754a3aaab08",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "da1b21ca-8ed2-480a-8263-6754a3aaab08"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 147,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b56351ab-9f08-4e06-8ce2-06bda003096f",
        "title": "tests for /v2.0/data/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
        "file": "/test/v2.0-data-geopoliticalunits-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "719821bf-597f-47be-a0c7-4e352a84213b",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
            "file": "/test/v2.0-data-geopoliticalunits-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 1110, 'gpname': 'Excepteur ea id', 'rank': 3, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "8094cba8-d12e-425e-8854-3b831e85f320",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8094cba8-d12e-425e-8854-3b831e85f320"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 75,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "867d307f-77dc-430e-9e1f-dc46ade49890",
        "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
        "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8e41b932-66e9-486f-b0d3-c88914009911",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
            "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/6919/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "72b7d4f8-81d3-40ee-be69-25d3c085b1c5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72b7d4f8-81d3-40ee-be69-25d3c085b1c5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 126,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "28b59e68-64e5-4a7f-8a79-512fec5c074e",
        "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
        "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cfbbeaa9-d35d-42a0-9e54-8f33561ff58c",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
            "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of sites.\"",
                "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/500/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "f5945ca0-cb3c-42a6-83a6-4ea370273b68",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5945ca0-cb3c-42a6-83a6-4ea370273b68"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 125,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9bb003c1-dcab-4ba4-b893-c5168280be9e",
        "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
        "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7a43ad38-360f-4b72-ab7c-1a5391c83260",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
            "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/8860', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "b5f240e0-c95b-41e4-afdf-e9153a58e243",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b5f240e0-c95b-41e4-afdf-e9153a58e243"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 84,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2c14cb11-9597-47cf-ae12-f3cec7b7e3ac",
        "title": "tests for /v2.0/data/occurrences",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
        "file": "/test/v2.0-data-occurrences-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "561d223c-539d-46a1-9e8d-eb4fe544cfc1",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
            "file": "/test/v2.0-data-occurrences-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"occurrence\"",
                "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'ea ad eiusmod voluptate', 'taxonid': 40543, 'siteid': 2699, 'sitename': 'culpa deserunt ipsum cupidatat in', 'datasettype': 'culpa est enim elit cupidatat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 9276421, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "4c112407-c16b-4938-bfd4-e66d344088c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c112407-c16b-4938-bfd4-e66d344088c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 114,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2ecffc6d-7438-40b8-a4d4-1f3df10b4300",
        "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
        "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e49d375f-08c5-44a2-a034-352ee637419b",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
            "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"occurrence\"",
                "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "b1c5c3a2-2816-43d9-a506-26439fc6fd76",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b1c5c3a2-2816-43d9-a506-26439fc6fd76"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 80,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "068e3661-2b55-4e38-af5c-e5265db3dd7d",
        "title": "tests for /v2.0/data/oxcal/calibrate",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
        "file": "/test/v2.0-data-oxcal-calibrate-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ae0ba06e-09cf-41ad-97cb-41bb66e20e5d",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
            "file": "/test/v2.0-data-oxcal-calibrate-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                "timedOut": false,
                "duration": 5,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "AssertionError: expected status code 500 to equal 200",
                  "estack": "AssertionError: expected status code 500 to equal 200"
                },
                "isRoot": false,
                "uuid": "2487f6c4-e265-43bb-8b8a-7542b3c6e543",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "2487f6c4-e265-43bb-8b8a-7542b3c6e543"
            ],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7e8fbcd3-e181-4143-b8a1-eb0f32c19814",
        "title": "tests for /v2.0/data/pollen",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
        "file": "/test/v2.0-data-pollen-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "14c778d7-befd-4f8a-b706-fcdef9602f63",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
            "file": "/test/v2.0-data-pollen-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'esse Lorem reprehenderit dolore', 'taxonid': 12259, 'siteid': 5390, 'sitename': 'ut', 'datasettype': 'velit elit Excepteur consequat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 12604500, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "ce6fb4c2-0ad4-4729-a2c4-41537a689a55",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ce6fb4c2-0ad4-4729-a2c4-41537a689a55"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "009beda2-5ae7-4bdb-8ef2-9bb554bd59a9",
        "title": "tests for /v2.0/data/pollen/{id}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
        "file": "/test/v2.0-data-pollen-{id}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1c3eeae8-6d26-4cba-976a-042e6472cb08",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
            "file": "/test/v2.0-data-pollen-{id}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "04a32639-3db6-4ec2-b3e9-99d381504942",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "04a32639-3db6-4ec2-b3e9-99d381504942"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "953a00a5-f396-472a-a820-b1b1eafffb38",
        "title": "tests for /v2.0/data/publications",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
        "file": "/test/v2.0-data-publications-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "50d3067c-0409-4210-a309-952ef75e71ef",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
            "file": "/test/v2.0-data-publications-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of publications.\"",
                "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 19217, 'datasetid': 57863584, 'siteid': 17146, 'familyname': 'voluptate sunt sint nostrud', 'pubtype': 'Other Authored', 'year': 1588, 'search': 'Lorem', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "d17dc2ea-8ed8-4d1b-b9a3-e9ea5205c476",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d17dc2ea-8ed8-4d1b-b9a3-e9ea5205c476"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 84,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "eff32941-8b4c-425f-b159-42483f63c38c",
        "title": "tests for /v2.0/data/publications/{publicationid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
        "file": "/test/v2.0-data-publications-{publicationid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d79acd2d-8eb9-4cb4-a7ae-1743425d24b5",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
            "file": "/test/v2.0-data-publications-{publicationid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of publications.\"",
                "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                "timedOut": false,
                "duration": 87,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/{publicationid}', {\n  'qs': { 'publicationid': 5422 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "AssertionError: expected status code 500 to equal 200",
                  "estack": "AssertionError: expected status code 500 to equal 200"
                },
                "isRoot": false,
                "uuid": "8620c4a5-2774-4d9a-a91f-5b9d427eb7a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "8620c4a5-2774-4d9a-a91f-5b9d427eb7a8"
            ],
            "pending": [],
            "skipped": [],
            "duration": 87,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7a9ac669-f707-498f-8721-26db9f12c1f0",
        "title": "tests for /v2.0/data/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
        "file": "/test/v2.0-data-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e604c79c-b47d-4a31-85ce-374537bcd263",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
            "file": "/test/v2.0-data-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of sites.\"",
                "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                "timedOut": false,
                "duration": 91,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 6666, 'sitename': 'proident Excepteur elit aliqua', 'altmax': 100, 'altmin': 10, 'loc': \"{3F'u~q}\", 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {
                  "message": "AssertionError: expected status code 500 to equal 200",
                  "estack": "AssertionError: expected status code 500 to equal 200"
                },
                "isRoot": false,
                "uuid": "18a6afc3-6f6b-47d8-bd34-e732d72f6ed8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "18a6afc3-6f6b-47d8-bd34-e732d72f6ed8"
            ],
            "pending": [],
            "skipped": [],
            "duration": 91,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "842f893d-0442-48f2-94af-a7901128d201",
        "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c70d2e24-bdf4-4f8b-a150-ccfdac88bf08",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"chronology\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e042f3d2-4658-47ed-9398-a8376a1c82f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e042f3d2-4658-47ed-9398-a8376a1c82f1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 121,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "526067ad-40b4-4002-a774-80a70ae24e1d",
        "title": "tests for /v2.0/data/sites/{siteid}/contacts",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5b10ebb7-bf4e-4788-9b1a-a6830374e2a8",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"contact\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/6005/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "261804a9-20c3-4cb1-bf80-b15126e0d2c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "261804a9-20c3-4cb1-bf80-b15126e0d2c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 76,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e87d5dd0-25c6-4f72-bf22-78c118670569",
        "title": "tests for /v2.0/data/sites/{siteid}/datasets",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "26f8a3f1-b1fa-4dfd-8f3e-979f28cfd210",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/8715/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "110296be-99d5-48a2-b104-b29db950638f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "110296be-99d5-48a2-b104-b29db950638f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 84,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a0ac5c65-c5a4-4e75-9728-14628d74862d",
        "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "608ae955-c806-40b0-8fce-efeabb8b0660",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of datasets.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                "timedOut": false,
                "duration": 1042,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "4359882e-0c3b-490c-b14d-0bf0c888469b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4359882e-0c3b-490c-b14d-0bf0c888469b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1042,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a4c8f09e-f803-4a2e-895e-7468bc236e64",
        "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7adf0541-6ac4-4730-9413-f9f2ce514dd7",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of geopolitical units.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "21398dd8-8af5-4f82-9971-53f21c700ce8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "21398dd8-8af5-4f82-9971-53f21c700ce8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 76,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8d51e814-0971-4446-b143-cdcb97392499",
        "title": "tests for /v2.0/data/sites/{siteid}/sites",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9309e983-bdde-47bd-ada9-008a55d6a265",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of sites.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid}/sites tests for get should respond 200 for \"An array of sites.\"",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/8715/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "0f122632-1347-4b7d-bbde-7f358e148dda",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0f122632-1347-4b7d-bbde-7f358e148dda"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ba5d7691-acff-4d63-8d72-67232d6da963",
        "title": "tests for /v2.0/data/sites/{siteid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
        "file": "/test/v2.0-data-sites-{siteid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4579c35c-c239-41ef-ac8a-2ef1d928071b",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
            "file": "/test/v2.0-data-sites-{siteid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"An array of sites.\"",
                "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/5513', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "744408ff-82e2-4362-bf60-a2d23ddc332a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "744408ff-82e2-4362-bf60-a2d23ddc332a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 76,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "532969cf-de0b-404b-bb14-f338efc5dce0",
        "title": "tests for /v2.0/data/summary/dsdbmonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
        "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1dc21091-c492-4b7c-b178-48aabda9cdff",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
            "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                "timedOut": false,
                "duration": 228,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e3ca3c69-c5d7-4c77-b3fc-e9ca010137f7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3ca3c69-c5d7-4c77-b3fc-e9ca010137f7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 228,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "bfbcebc0-a25f-4abf-a2b0-de3ceef9392d",
        "title": "tests for /v2.0/data/summary/dstypemonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
        "file": "/test/v2.0-data-summary-dstypemonth-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "eb07016c-81fc-4726-b5de-0366d52fc902",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
            "file": "/test/v2.0-data-summary-dstypemonth-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                "timedOut": false,
                "duration": 227,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "ec4e9a71-6d34-4826-82d5-f0631a3bf0a4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ec4e9a71-6d34-4826-82d5-f0631a3bf0a4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 227,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9d029f6e-d590-4f70-bdd9-2501f901d13c",
        "title": "tests for /v2.0/data/summary/rawbymonth",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
        "file": "/test/v2.0-data-summary-rawbymonth-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "affab36f-53db-44ee-aee2-511d65a22558",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
            "file": "/test/v2.0-data-summary-rawbymonth-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                "timedOut": false,
                "duration": 4518,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "20ef6086-da09-442c-af0d-ae911670d921",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "20ef6086-da09-442c-af0d-ae911670d921"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4518,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "89a92b50-b189-46e3-847e-8f4ea9babda9",
        "title": "tests for /v2.0/data/taxa",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
        "file": "/test/v2.0-data-taxa-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "51db13e4-304e-4dee-af6f-62e36256886e",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
            "file": "/test/v2.0-data-taxa-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A taxon or array of taxa.\"",
                "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'laboris commodo dolor', 'datasetid': 7001837, 'siteid': 801 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "f8a7298d-a526-426d-9e52-0c9be78922cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f8a7298d-a526-426d-9e52-0c9be78922cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 130,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ff365471-2379-4884-ace8-33369269c6de",
        "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
        "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d856d697-bfc9-4d21-9147-47abeb00395d",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
            "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"occurrence\"",
                "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                "timedOut": false,
                "duration": 1584,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "9563fbb7-3467-4f67-84d3-94f0805397c3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9563fbb7-3467-4f67-84d3-94f0805397c3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1584,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ebcef6f1-9792-44f5-9f08-217de57a196a",
        "title": "tests for /v2.0/data/taxa/{taxonid}",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
        "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "895f7c15-06ec-4b1c-b7bc-b5ca9a9dbfe9",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
            "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A taxon or array of taxa.\"",
                "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "d13db5ec-f839-426f-8fea-241135e71912",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d13db5ec-f839-426f-8fea-241135e71912"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 74,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7f531ef4-d315-4890-89b9-69491b27ec74",
        "title": "tests for /v2.0/dbtables/table",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
        "file": "/test/v2.0-dbtables-table-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cfb7b9bd-7a87-4ad8-ad43-4c57ff0d2e3f",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
            "file": "/test/v2.0-dbtables-table-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"Returned table.\"",
                "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "e9516135-8de9-4791-b17e-e8dd34f04162",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e9516135-8de9-4791-b17e-e8dd34f04162"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 80,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0b99ad67-2f44-4b7b-a62f-54d7ec2a9e5c",
        "title": "tests for /v2.0/dbtables/tablenames",
        "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
        "file": "/test/v2.0-dbtables-tablenames-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e94e74f5-5bcd-4c42-9f59-29d435aee92e",
            "title": "tests for get",
            "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
            "file": "/test/v2.0-dbtables-tablenames-test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "2abeef66-3e52-4a64-bc7c-2fe1e873a670",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2abeef66-3e52-4a64-bc7c-2fe1e873a670"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 300000
  },
  "copyrightYear": 2021
}