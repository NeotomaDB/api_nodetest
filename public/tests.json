{
  "stats": {
    "suites": 209,
    "tests": 194,
    "passes": 0,
    "pending": 0,
    "failures": 194,
    "start": "2021-11-25T19:10:40.731Z",
    "end": "2021-11-25T19:10:41.169Z",
    "duration": 438,
    "testsRegistered": 194,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "64bcc333-f282-4552-8ea6-92f7774b88bc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "6b94cb92-0d20-4e8f-bd76-e04ff60a1348",
          "parentUUID": "64bcc333-f282-4552-8ea6-92f7774b88bc",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a2529630-8dcb-4b8e-b0ef-2c2baf61b203",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f27ff190-3e16-4c27-a4b1-ecdbeeff7109",
              "parentUUID": "a2529630-8dcb-4b8e-b0ef-2c2baf61b203",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f27ff190-3e16-4c27-a4b1-ecdbeeff7109"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get contact data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/')\n  .set('Accept', 'application/json')\n  .expect(302)\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "8b999651-c5fb-4d5e-bdc6-6d2d66fad1be",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "a5f5821d-6b88-4631-a544-7ef24f5bdc16",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "5fd97643-7505-421a-9884-4b054997b395",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "5c5db1c8-a7c7-4bb8-a47b-9e88db0a2359",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "11f1a556-5c63-4ebf-9e12-a679b7ee8fa7",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f651895c-cf89-4a0d-9345-a1bbca94987a",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "45fef1a5-26bc-4c4c-bacd-467dca69f09a",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ed2e40d1-e14c-4856-a147-eef1f3d5bc94",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "88652d26-43a1-414d-9093-fffdd9564268",
              "parentUUID": "a57e7ce3-e889-4cbc-9aa2-1fb55df36615",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8b999651-c5fb-4d5e-bdc6-6d2d66fad1be",
            "a5f5821d-6b88-4631-a544-7ef24f5bdc16",
            "5fd97643-7505-421a-9884-4b054997b395",
            "5c5db1c8-a7c7-4bb8-a47b-9e88db0a2359",
            "11f1a556-5c63-4ebf-9e12-a679b7ee8fa7",
            "f651895c-cf89-4a0d-9345-a1bbca94987a",
            "45fef1a5-26bc-4c4c-bacd-467dca69f09a",
            "ed2e40d1-e14c-4856-a147-eef1f3d5bc94",
            "88652d26-43a1-414d-9093-fffdd9564268"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "991291dc-db1f-41fc-b042-c475d9cde38b",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site', 'dataset');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "96d1026a-f57f-47d1-9337-c067067482ac",
              "parentUUID": "991291dc-db1f-41fc-b042-c475d9cde38b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "7a8e7265-a009-4f13-b8cb-52649d44c505",
              "parentUUID": "991291dc-db1f-41fc-b042-c475d9cde38b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "90001683-b52b-42db-8121-f09c1ce1fd5b",
              "parentUUID": "991291dc-db1f-41fc-b042-c475d9cde38b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "d38943e7-4c28-496b-8a20-77b68efcc7ab",
              "parentUUID": "991291dc-db1f-41fc-b042-c475d9cde38b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "0d7fe8ff-56d7-405f-8b22-7358029222bf",
              "parentUUID": "991291dc-db1f-41fc-b042-c475d9cde38b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "25c6b0eb-9f2c-44e0-8fbf-8e5f39c33d0f",
              "parentUUID": "991291dc-db1f-41fc-b042-c475d9cde38b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f1db6b66-9bae-4503-bb55-3a30c1ef2143",
              "parentUUID": "991291dc-db1f-41fc-b042-c475d9cde38b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "96d1026a-f57f-47d1-9337-c067067482ac",
            "7a8e7265-a009-4f13-b8cb-52649d44c505",
            "90001683-b52b-42db-8121-f09c1ce1fd5b",
            "d38943e7-4c28-496b-8a20-77b68efcc7ab",
            "0d7fe8ff-56d7-405f-8b22-7358029222bf",
            "25c6b0eb-9f2c-44e0-8fbf-8e5f39c33d0f",
            "f1db6b66-9bae-4503-bb55-3a30c1ef2143"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "300f9005-2f65-4c24-8fe5-1970be25b934",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "a9a29fe5-b8b3-4af5-967e-0f6fcf7e8d20",
              "parentUUID": "300f9005-2f65-4c24-8fe5-1970be25b934",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/geopolitical.js:28:38)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "fe3b7f62-1465-4312-b938-75f55178f60b",
              "parentUUID": "300f9005-2f65-4c24-8fe5-1970be25b934",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/geopolitical.js:37:38)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "46e190b9-37fe-4032-bb25-946b08ccdd01",
              "parentUUID": "300f9005-2f65-4c24-8fe5-1970be25b934",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/geopolitical.js:46:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "b6debe59-f57d-4dff-aef2-d728f4101364",
              "parentUUID": "300f9005-2f65-4c24-8fe5-1970be25b934",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a9a29fe5-b8b3-4af5-967e-0f6fcf7e8d20",
            "fe3b7f62-1465-4312-b938-75f55178f60b",
            "46e190b9-37fe-4032-bb25-946b08ccdd01",
            "b6debe59-f57d-4dff-aef2-d728f4101364"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1ee93bd8-7afc-45bd-99de-11bbe4a91f0b",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "4b8f8309-46bf-4a87-8b2c-405a90775e53",
              "parentUUID": "1ee93bd8-7afc-45bd-99de-11bbe4a91f0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4b8f8309-46bf-4a87-8b2c-405a90775e53"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "12c495f4-73ef-410d-aa56-a516f848a403",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "80d42e51-f163-4336-90b3-2c9413678d40",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "9fc41a5d-303b-4f62-9402-a20bca125455",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "c809503e-dd5c-404e-a32d-412ad3c2b288",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f8309bce-0bbe-4ae0-a7bb-8a2e7a523393",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ad5a3370-402a-46dc-b453-440129067547",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "601713de-363a-4c8e-a048-fb065c6e366c",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "0d3ba441-df55-4ad5-b516-338913fb755e",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "cd50ab4e-123c-48d6-a3cf-94fc43d5ee0e",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ee6864f3-3c0d-4155-ad34-ffd1a2ec39b4",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "78d6a8ff-cdc2-4162-809d-f61ae8d168f5",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "c110a633-f44e-44c4-9984-41257921b319",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "022accc0-a7b6-453a-86a9-91fbca324b47",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "a9383065-a6fc-4846-8612-e3d0d8e6f7fd",
              "parentUUID": "12c495f4-73ef-410d-aa56-a516f848a403",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "80d42e51-f163-4336-90b3-2c9413678d40",
            "9fc41a5d-303b-4f62-9402-a20bca125455",
            "c809503e-dd5c-404e-a32d-412ad3c2b288",
            "f8309bce-0bbe-4ae0-a7bb-8a2e7a523393",
            "ad5a3370-402a-46dc-b453-440129067547",
            "601713de-363a-4c8e-a048-fb065c6e366c",
            "0d3ba441-df55-4ad5-b516-338913fb755e",
            "cd50ab4e-123c-48d6-a3cf-94fc43d5ee0e",
            "ee6864f3-3c0d-4155-ad34-ffd1a2ec39b4",
            "78d6a8ff-cdc2-4162-809d-f61ae8d168f5",
            "c110a633-f44e-44c4-9984-41257921b319",
            "022accc0-a7b6-453a-86a9-91fbca324b47",
            "a9383065-a6fc-4846-8612-e3d0d8e6f7fd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6453193e-a88f-4074-b40a-6da0f6faad53",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "b0681167-8d39-4a4f-a96f-a4fbdf43ef11",
              "parentUUID": "6453193e-a88f-4074-b40a-6da0f6faad53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f09a3f42-30c2-43f0-9a94-faed28dda110",
              "parentUUID": "6453193e-a88f-4074-b40a-6da0f6faad53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "5ce6f565-6889-4829-a2ed-8762398486df",
              "parentUUID": "6453193e-a88f-4074-b40a-6da0f6faad53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f792502c-2005-407f-b8d8-a5b7090f5b8b",
              "parentUUID": "6453193e-a88f-4074-b40a-6da0f6faad53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "8d138699-59d0-4cb5-9561-b948500669aa",
              "parentUUID": "6453193e-a88f-4074-b40a-6da0f6faad53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "16bd228f-7980-4389-9e1d-aa5ca30df2aa",
              "parentUUID": "6453193e-a88f-4074-b40a-6da0f6faad53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "9a9e3ed7-7c5b-41b1-b671-adafcac0be63",
              "parentUUID": "6453193e-a88f-4074-b40a-6da0f6faad53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b0681167-8d39-4a4f-a96f-a4fbdf43ef11",
            "f09a3f42-30c2-43f0-9a94-faed28dda110",
            "5ce6f565-6889-4829-a2ed-8762398486df",
            "f792502c-2005-407f-b8d8-a5b7090f5b8b",
            "8d138699-59d0-4cb5-9561-b948500669aa",
            "16bd228f-7980-4389-9e1d-aa5ca30df2aa",
            "9a9e3ed7-7c5b-41b1-b671-adafcac0be63"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "15803e54-4bcb-42c4-987d-ea5eb7d433a2",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "fce7da30-03a9-4d8e-b77d-e98a6529aee8",
              "parentUUID": "15803e54-4bcb-42c4-987d-ea5eb7d433a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "fce7da30-03a9-4d8e-b77d-e98a6529aee8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e1e85811-4b3b-4b54-84db-96e0034dcc75",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "87b58657-2343-4df9-b018-598d78f60baf",
              "parentUUID": "e1e85811-4b3b-4b54-84db-96e0034dcc75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "87b58657-2343-4df9-b018-598d78f60baf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ca5c5c57-ba66-400c-af35-2f60ba68e335",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "c2c4d2de-8f90-4628-9d10-7e699c321f1b",
              "parentUUID": "ca5c5c57-ba66-400c-af35-2f60ba68e335",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c2c4d2de-8f90-4628-9d10-7e699c321f1b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "72ee1c1f-db78-42b9-aa01-ac7937ad36d6",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "d42eb8eb-f7eb-4f4a-9395-28739c9df6b7",
              "parentUUID": "72ee1c1f-db78-42b9-aa01-ac7937ad36d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d42eb8eb-f7eb-4f4a-9395-28739c9df6b7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ade1ab7d-74e4-4469-96de-793b5f079963",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "abccdc9c-922e-4ecd-9447-6a6424d975b6",
              "parentUUID": "ade1ab7d-74e4-4469-96de-793b5f079963",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "abccdc9c-922e-4ecd-9447-6a6424d975b6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f5f76f3f-1664-4558-bc0c-ff47001ccc6c",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "5a9c0acc-f90e-4357-b129-0bedf2cedf2e",
              "parentUUID": "f5f76f3f-1664-4558-bc0c-ff47001ccc6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5a9c0acc-f90e-4357-b129-0bedf2cedf2e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aa64bf0d-ba4c-4619-a3d9-1876d296c5e0",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "a3ac286d-0844-489b-be48-92ca6ff41f38",
              "parentUUID": "aa64bf0d-ba4c-4619-a3d9-1876d296c5e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a3ac286d-0844-489b-be48-92ca6ff41f38"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "94c7e049-bd16-4c73-8093-c0f020f8e40e",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "06350b1a-a3dd-4217-b777-96b1c29700e7",
              "parentUUID": "94c7e049-bd16-4c73-8093-c0f020f8e40e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "06350b1a-a3dd-4217-b777-96b1c29700e7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f398a8e0-1593-48e9-8d10-bb489c29fbbd",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "f3c4cf47-ff9b-4acd-86ee-4788bd53f741",
              "parentUUID": "f398a8e0-1593-48e9-8d10-bb489c29fbbd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f3c4cf47-ff9b-4acd-86ee-4788bd53f741"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "16e987c6-c6ad-463b-b1d3-4a606f90a868",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "6a42eaf6-8e94-4eec-9f22-5eabf8c94d43",
              "parentUUID": "16e987c6-c6ad-463b-b1d3-4a606f90a868",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6a42eaf6-8e94-4eec-9f22-5eabf8c94d43"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "acaa77c0-16bf-4008-9c85-ba47ef466ae0",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "f747ea26-1e58-417b-bcda-350b6ca1d519",
              "parentUUID": "acaa77c0-16bf-4008-9c85-ba47ef466ae0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f747ea26-1e58-417b-bcda-350b6ca1d519"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5e2cfd0e-f437-41bb-b3ad-11d8f8b27e35",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "575eada9-6a04-42fb-8b6b-29ce4715a1cb",
              "parentUUID": "5e2cfd0e-f437-41bb-b3ad-11d8f8b27e35",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "575eada9-6a04-42fb-8b6b-29ce4715a1cb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "05df13bc-9cc7-42a3-b320-59eecca45f10",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "5a1163ad-bee0-4dc0-b3d9-ae42c1986d20",
              "parentUUID": "05df13bc-9cc7-42a3-b320-59eecca45f10",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5a1163ad-bee0-4dc0-b3d9-ae42c1986d20"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "61b6fc0f-0e72-4e28-b84a-cbfe7392d2e6",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "49110a33-798a-443f-a20f-e5c1c7f7ba58",
              "parentUUID": "61b6fc0f-0e72-4e28-b84a-cbfe7392d2e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "49110a33-798a-443f-a20f-e5c1c7f7ba58"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7af17ae2-401b-4b72-b8a5-b6fe02fc868d",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "7f5ba750-3826-458f-99f0-313eda0ea11f",
              "parentUUID": "7af17ae2-401b-4b72-b8a5-b6fe02fc868d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7f5ba750-3826-458f-99f0-313eda0ea11f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "55491c16-ebd6-4def-8c84-bd17daff5caf",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "7ac840f1-403d-41e1-9c2c-09a3539ec5b4",
              "parentUUID": "55491c16-ebd6-4def-8c84-bd17daff5caf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7ac840f1-403d-41e1-9c2c-09a3539ec5b4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a778a141-ed73-4fa3-9240-ff15683c78b1",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "3f8163b5-ffa1-47ad-afa0-12f87121fb09",
              "parentUUID": "a778a141-ed73-4fa3-9240-ff15683c78b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3f8163b5-ffa1-47ad-afa0-12f87121fb09"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8e584dc2-bdb5-4dfa-a77c-7575d290a962",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "bffe4651-ab37-44c8-9a72-511f344b2955",
              "parentUUID": "8e584dc2-bdb5-4dfa-a77c-7575d290a962",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bffe4651-ab37-44c8-9a72-511f344b2955"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cb35eece-1082-4df0-b30d-8276962d2fda",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "bb3c2633-22e2-4ce8-86f3-8bcdbe2fd751",
              "parentUUID": "cb35eece-1082-4df0-b30d-8276962d2fda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bb3c2633-22e2-4ce8-86f3-8bcdbe2fd751"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8c206658-1114-42e4-96d1-8e508ee38f0b",
          "title": "GET /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronologies/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "b93a24a3-0084-456d-a401-b2e39506baa4",
              "parentUUID": "8c206658-1114-42e4-96d1-8e508ee38f0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b93a24a3-0084-456d-a401-b2e39506baa4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "746eeadb-a9aa-4b54-84cc-364a2dd0b1e4",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "fe0490b1-2828-4430-b8ce-81e4cf9ae15a",
              "parentUUID": "746eeadb-a9aa-4b54-84cc-364a2dd0b1e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "fe0490b1-2828-4430-b8ce-81e4cf9ae15a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d5da49c7-2e43-4ee6-b26d-bac791037ce5",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "9ea49405-1b98-4c3d-b62a-609eb5293be0",
              "parentUUID": "d5da49c7-2e43-4ee6-b26d-bac791037ce5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9ea49405-1b98-4c3d-b62a-609eb5293be0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "13dec93d-bafd-42c2-a936-4919a8871d43",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "b5295df6-8574-43af-bd60-474e03665937",
              "parentUUID": "13dec93d-bafd-42c2-a936-4919a8871d43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b5295df6-8574-43af-bd60-474e03665937"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eb98c898-5e1a-4d7e-8a67-47b97809efde",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "738f962b-1866-4cbb-84e8-6bf4e29f479c",
              "parentUUID": "eb98c898-5e1a-4d7e-8a67-47b97809efde",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "738f962b-1866-4cbb-84e8-6bf4e29f479c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "32a6846a-f4ab-4e21-b46a-4ce465d22455",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "9ff32dd8-c3fb-41ae-8eae-4f3af6e75f90",
              "parentUUID": "32a6846a-f4ab-4e21-b46a-4ce465d22455",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9ff32dd8-c3fb-41ae-8eae-4f3af6e75f90"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "321915bc-43bb-4643-8951-2ee4b9b85d95",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "5c4d7ead-8c80-4149-9570-0597237b912e",
              "parentUUID": "321915bc-43bb-4643-8951-2ee4b9b85d95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5c4d7ead-8c80-4149-9570-0597237b912e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "067fd132-9b6b-468f-b60b-b2be69683251",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "52a8385f-9759-475b-a1e1-e397d563f07c",
              "parentUUID": "067fd132-9b6b-468f-b60b-b2be69683251",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "52a8385f-9759-475b-a1e1-e397d563f07c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6d5791de-e891-4b8a-a108-5abe1aa0ec5d",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "c9bf6a28-2d92-43fe-abbf-7c40717aee44",
              "parentUUID": "6d5791de-e891-4b8a-a108-5abe1aa0ec5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c9bf6a28-2d92-43fe-abbf-7c40717aee44"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f6b835bf-1599-4f0d-b8c2-434fae611e30",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "5b01a3d7-8592-45e2-a463-82f8d5c3d466",
              "parentUUID": "f6b835bf-1599-4f0d-b8c2-434fae611e30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5b01a3d7-8592-45e2-a463-82f8d5c3d466"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "21aa05a9-f7b9-458a-9475-65458e3b5c97",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "c95d8cf7-1342-4f5d-977d-8aad51132f77",
              "parentUUID": "21aa05a9-f7b9-458a-9475-65458e3b5c97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c95d8cf7-1342-4f5d-977d-8aad51132f77"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1a3ebf67-b2e3-4c3b-ae98-50a124cccd56",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "b380e088-dd9f-421a-ad8b-516b954d2998",
              "parentUUID": "1a3ebf67-b2e3-4c3b-ae98-50a124cccd56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b380e088-dd9f-421a-ad8b-516b954d2998"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "23c4b92c-9e08-4165-ab2f-367facf6c2d0",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "39b249e8-d00c-4b11-97d6-8296b54a4932",
              "parentUUID": "23c4b92c-9e08-4165-ab2f-367facf6c2d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "39b249e8-d00c-4b11-97d6-8296b54a4932"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f9fb9ae5-6773-4a84-9785-ee86165f1be3",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "697739d2-d46e-47e1-ad61-b1f4047f834e",
              "parentUUID": "f9fb9ae5-6773-4a84-9785-ee86165f1be3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "697739d2-d46e-47e1-ad61-b1f4047f834e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "458c89c2-4d89-47d8-b3d6-16e436d190ab",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "14a0764c-5b75-4439-bee9-66217e817b2e",
              "parentUUID": "458c89c2-4d89-47d8-b3d6-16e436d190ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "14a0764c-5b75-4439-bee9-66217e817b2e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "32103199-1e7b-4f42-b1fc-38af0b332396",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "6b21e34f-22c1-413e-9c53-29630ccad1f3",
              "parentUUID": "32103199-1e7b-4f42-b1fc-38af0b332396",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6b21e34f-22c1-413e-9c53-29630ccad1f3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3630ac62-1d0a-4c2c-858d-c92cb6de06bc",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "c7cc77fd-eed3-4193-9494-b4292149d7fd",
              "parentUUID": "3630ac62-1d0a-4c2c-858d-c92cb6de06bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c7cc77fd-eed3-4193-9494-b4292149d7fd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6975a503-8b2a-4736-a27f-cc2f3b84eb1a",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "c76d6059-f758-44b5-8d90-75d4cfb08c20",
              "parentUUID": "6975a503-8b2a-4736-a27f-cc2f3b84eb1a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c76d6059-f758-44b5-8d90-75d4cfb08c20"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f99e0066-4e11-4cf0-8abd-4072ddc0446f",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "bc4a519b-229c-470a-a3eb-1f6381e4b6aa",
              "parentUUID": "f99e0066-4e11-4cf0-8abd-4072ddc0446f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bc4a519b-229c-470a-a3eb-1f6381e4b6aa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "23a41837-56ff-46e3-ac01-6e66893f0b07",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "d5ce3e80-f765-4e37-9f4e-38233ba9cd1a",
              "parentUUID": "23a41837-56ff-46e3-ac01-6e66893f0b07",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d5ce3e80-f765-4e37-9f4e-38233ba9cd1a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5096653d-5d27-41ed-be81-5f6a1543ed79",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "bc9a5b27-2f7b-4d1e-9e2e-2285697680cd",
              "parentUUID": "5096653d-5d27-41ed-be81-5f6a1543ed79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bc9a5b27-2f7b-4d1e-9e2e-2285697680cd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d0b3857f-2e89-40c1-8672-e19f49740358",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "f028f7a5-fef7-4b7b-b42b-34afba21dc1a",
              "parentUUID": "d0b3857f-2e89-40c1-8672-e19f49740358",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f028f7a5-fef7-4b7b-b42b-34afba21dc1a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a7dcd12b-ceb4-40da-94b9-ae3e2fb3a18a",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "cb75d1ea-7a34-4b9a-b9cd-00c04f23432b",
              "parentUUID": "a7dcd12b-ceb4-40da-94b9-ae3e2fb3a18a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cb75d1ea-7a34-4b9a-b9cd-00c04f23432b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "24377efa-956d-4b7b-b87b-fae501e71950",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "985c01da-5917-4a04-8659-7b2acfd9090a",
              "parentUUID": "24377efa-956d-4b7b-b87b-fae501e71950",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "985c01da-5917-4a04-8659-7b2acfd9090a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6346b66f-a0e3-4564-9c0d-47686d423c03",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "1bc2c6f2-13cb-41e2-a749-a2562a5d8a60",
              "parentUUID": "6346b66f-a0e3-4564-9c0d-47686d423c03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1bc2c6f2-13cb-41e2-a749-a2562a5d8a60"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e513440d-ab1b-4635-9903-beefc836ae8a",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "e5fa638e-598b-4506-9d9c-a73bc5884acc",
              "parentUUID": "e513440d-ab1b-4635-9903-beefc836ae8a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e5fa638e-598b-4506-9d9c-a73bc5884acc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "df5efb47-4cd8-4049-810d-1da2a2a8c031",
          "title": "GET /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "06aa9bfa-863a-4168-9e65-484d3e502933",
              "parentUUID": "df5efb47-4cd8-4049-810d-1da2a2a8c031",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "06aa9bfa-863a-4168-9e65-484d3e502933"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "52aebb1d-22d4-49d1-bae9-45fd503e8b06",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "f353f6c7-3020-4961-ba4e-a2b89035acb1",
              "parentUUID": "52aebb1d-22d4-49d1-bae9-45fd503e8b06",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f353f6c7-3020-4961-ba4e-a2b89035acb1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bf1bb720-549f-4487-9ac8-47c169d2e6fc",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "1899fedd-1715-47a2-84f4-525cbe2b977e",
              "parentUUID": "bf1bb720-549f-4487-9ac8-47c169d2e6fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1899fedd-1715-47a2-84f4-525cbe2b977e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "592f813b-7b83-43a0-a818-92b0002c6261",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "e2ff3f06-27f2-40c7-8fa6-966751cd157d",
              "parentUUID": "592f813b-7b83-43a0-a818-92b0002c6261",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e2ff3f06-27f2-40c7-8fa6-966751cd157d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "acc70da0-0e32-4661-bff7-d9ab0940e4c8",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "900a7064-9e57-45f2-9b17-2aa35c412e9c",
              "parentUUID": "acc70da0-0e32-4661-bff7-d9ab0940e4c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "900a7064-9e57-45f2-9b17-2aa35c412e9c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "65a15b45-cf1f-4dca-8fca-83e26e539b9c",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "720f7087-80de-4946-bb06-5deaef6803c1",
              "parentUUID": "65a15b45-cf1f-4dca-8fca-83e26e539b9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "720f7087-80de-4946-bb06-5deaef6803c1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0b9db52b-5414-48da-a3a5-a6ab66c9abfa",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "978b1de8-6110-4246-afe9-b78f43a0b353",
              "parentUUID": "0b9db52b-5414-48da-a3a5-a6ab66c9abfa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "978b1de8-6110-4246-afe9-b78f43a0b353"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6a78e83b-f59c-4e4c-9a24-67cd47f441e6",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "a384e2c5-4da7-4c96-a0ec-ffee4c768ca2",
              "parentUUID": "6a78e83b-f59c-4e4c-9a24-67cd47f441e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a384e2c5-4da7-4c96-a0ec-ffee4c768ca2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f4209529-d6a8-4fd5-9837-160aa44793dd",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "1a623a34-8047-4ad5-8c2a-39cc6c0ad0b4",
              "parentUUID": "f4209529-d6a8-4fd5-9837-160aa44793dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1a623a34-8047-4ad5-8c2a-39cc6c0ad0b4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "754f2d4d-ec12-4fb3-b20a-79a384347fa5",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "7e0b00de-bcbb-4d72-8084-f1a383f07edc",
              "parentUUID": "754f2d4d-ec12-4fb3-b20a-79a384347fa5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7e0b00de-bcbb-4d72-8084-f1a383f07edc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0bb14d44-29ef-41b9-a9c8-f7bed46bc34e",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "b9aaf4b8-50da-4eba-b1ca-c6cee4b0c733",
              "parentUUID": "0bb14d44-29ef-41b9-a9c8-f7bed46bc34e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b9aaf4b8-50da-4eba-b1ca-c6cee4b0c733"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "92a52fd2-d986-4f04-991f-205b1ee90fe3",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "42c33d1f-bc9f-4bec-958f-2ef6beb46a94",
              "parentUUID": "92a52fd2-d986-4f04-991f-205b1ee90fe3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "42c33d1f-bc9f-4bec-958f-2ef6beb46a94"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a20a5ad4-1909-434f-afec-5ce0fd4522a8",
          "title": "GET /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "65942d6c-a205-4cda-b1e1-c11306e37061",
              "parentUUID": "a20a5ad4-1909-434f-afec-5ce0fd4522a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "65942d6c-a205-4cda-b1e1-c11306e37061"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8cc1ef4b-374f-4541-b4c8-7a300a5c343c",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "d0f4d7a6-de70-45ab-b705-fa4d44bc4cb1",
              "parentUUID": "8cc1ef4b-374f-4541-b4c8-7a300a5c343c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d0f4d7a6-de70-45ab-b705-fa4d44bc4cb1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bd8bf2c0-a2a3-43de-97f0-dd0a1d3364fa",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "66cb37e2-db73-47fd-9832-c7de626e0ddc",
              "parentUUID": "bd8bf2c0-a2a3-43de-97f0-dd0a1d3364fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "66cb37e2-db73-47fd-9832-c7de626e0ddc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e773f92e-f2f5-4621-834d-e121fb98bb61",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "e7aac3be-9c09-4ba3-9d3b-2f75002196e7",
              "parentUUID": "e773f92e-f2f5-4621-834d-e121fb98bb61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e7aac3be-9c09-4ba3-9d3b-2f75002196e7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "db650cc7-63fe-4a99-854e-aacbd9068c7b",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "54c64a10-49e1-4205-a219-786d0aa8d8f3",
              "parentUUID": "db650cc7-63fe-4a99-854e-aacbd9068c7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "54c64a10-49e1-4205-a219-786d0aa8d8f3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bc0f6806-a6db-4104-adf8-f97151d66de1",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "4bc717f8-dfe0-40ec-950d-677403419ed4",
              "parentUUID": "bc0f6806-a6db-4104-adf8-f97151d66de1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4bc717f8-dfe0-40ec-950d-677403419ed4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7c980ed6-48a3-4a3d-ae6e-904374428111",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "cf4349a8-c703-4967-9016-446ba71c2e23",
              "parentUUID": "7c980ed6-48a3-4a3d-ae6e-904374428111",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cf4349a8-c703-4967-9016-446ba71c2e23"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "67546c7d-320d-4062-9e23-bc5df104297d",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "01827434-7216-48b8-8983-1f374790babb",
              "parentUUID": "67546c7d-320d-4062-9e23-bc5df104297d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "01827434-7216-48b8-8983-1f374790babb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a93eb47e-b662-460a-803e-29c61fff1bd0",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1159:16)",
                "diff": null
              },
              "uuid": "8cc0d11f-e2fa-49e0-b484-9218a084e4de",
              "parentUUID": "a93eb47e-b662-460a-803e-29c61fff1bd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8cc0d11f-e2fa-49e0-b484-9218a084e4de"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "458acf4e-4360-49e8-9eb8-98119fc738fa",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f903345e-0db3-4cd8-92a7-b952fdb4138b",
              "parentUUID": "458acf4e-4360-49e8-9eb8-98119fc738fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "409906d4-08d8-41c2-a8cc-9a7236f0e9ad",
              "parentUUID": "458acf4e-4360-49e8-9eb8-98119fc738fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "fab00e53-d276-476e-9cda-1369d551f9bd",
              "parentUUID": "458acf4e-4360-49e8-9eb8-98119fc738fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "33e337fc-e327-48a7-9395-0e823b44f83c",
              "parentUUID": "458acf4e-4360-49e8-9eb8-98119fc738fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "4ef4cd8e-1669-4a6f-b76a-1ab52ad4c7e4",
              "parentUUID": "458acf4e-4360-49e8-9eb8-98119fc738fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f903345e-0db3-4cd8-92a7-b952fdb4138b",
            "409906d4-08d8-41c2-a8cc-9a7236f0e9ad",
            "fab00e53-d276-476e-9cda-1369d551f9bd",
            "33e337fc-e327-48a7-9395-0e823b44f83c",
            "4ef4cd8e-1669-4a6f-b76a-1ab52ad4c7e4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ce8373b0-33a7-493a-9e79-beeef0c20543",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "33859f4c-999e-4856-9b5e-a22f3645d813",
              "parentUUID": "ce8373b0-33a7-493a-9e79-beeef0c20543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "06ef7696-0844-468b-bcd9-e06e2ecd89e8",
              "parentUUID": "ce8373b0-33a7-493a-9e79-beeef0c20543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "9a7fe64b-682b-417b-b9f0-fe2cab876a98",
              "parentUUID": "ce8373b0-33a7-493a-9e79-beeef0c20543",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "33859f4c-999e-4856-9b5e-a22f3645d813",
            "06ef7696-0844-468b-bcd9-e06e2ecd89e8",
            "9a7fe64b-682b-417b-b9f0-fe2cab876a98"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7a482312-1ad5-498f-8bad-f2cb410c5af7",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "82869974-a1c1-4682-be76-39440451c0e7",
              "parentUUID": "7a482312-1ad5-498f-8bad-f2cb410c5af7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "a31b2759-39cb-4f21-ae36-e45cf1af1057",
              "parentUUID": "7a482312-1ad5-498f-8bad-f2cb410c5af7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "4b74aa2f-3481-4b4c-a19b-6d19da081fb4",
              "parentUUID": "7a482312-1ad5-498f-8bad-f2cb410c5af7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "28144d36-37a4-47bb-9bfd-f74077b53d0a",
              "parentUUID": "7a482312-1ad5-498f-8bad-f2cb410c5af7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "82869974-a1c1-4682-be76-39440451c0e7",
            "a31b2759-39cb-4f21-ae36-e45cf1af1057",
            "4b74aa2f-3481-4b4c-a19b-6d19da081fb4",
            "28144d36-37a4-47bb-9bfd-f74077b53d0a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:165:15)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "09cf4eaf-9bfd-4201-9189-758a0bd959c4",
              "parentUUID": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:26:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "37c04f60-4102-43ba-864d-e4cf39e74014",
              "parentUUID": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:35:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "3da4323f-7af6-43cd-8aa4-304f35c6603e",
              "parentUUID": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:44:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "1664e885-1994-4081-9188-7b16b814cf26",
              "parentUUID": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:53:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "3e983d36-faa9-4bdb-836b-200a11ddaa2f",
              "parentUUID": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:62:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "ba9c8008-525b-4602-885c-8f6a9d781465",
              "parentUUID": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:71:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "061f01bc-370e-401f-999c-1dc6570c1cc3",
              "parentUUID": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
              "err": {
                "message": "TypeError: Cannot read property 'body' of undefined",
                "estack": "TypeError: Cannot read property 'body' of undefined\n    at Test.<anonymous> (test/taxa.js:80:26)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:475:9)\n    at emitErrorNT (internal/streams/destroy.js:106:8)\n    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "5c9673c5-9f00-450b-a557-7a1f31c9c9ca",
              "parentUUID": "70bc19eb-3917-4b1b-8be5-555a489ffbfc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "09cf4eaf-9bfd-4201-9189-758a0bd959c4",
            "37c04f60-4102-43ba-864d-e4cf39e74014",
            "3da4323f-7af6-43cd-8aa4-304f35c6603e",
            "1664e885-1994-4081-9188-7b16b814cf26",
            "3e983d36-faa9-4bdb-836b-200a11ddaa2f",
            "ba9c8008-525b-4602-885c-8f6a9d781465",
            "061f01bc-370e-401f-999c-1dc6570c1cc3",
            "5c9673c5-9f00-450b-a557-7a1f31c9c9ca"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1a1316e1-bed8-4b4a-b89d-3e3e0c4375eb",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0dbed45c-204b-438a-a818-ec53ba6cd7b9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 60,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "e9c79e6f-84a8-4b25-88bb-00afc1606fd0",
                  "parentUUID": "0dbed45c-204b-438a-a818-ec53ba6cd7b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e9c79e6f-84a8-4b25-88bb-00afc1606fd0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 60,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ae5722aa-1ff9-4bf3-b0bd-18a789049bbf",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8956cb24-ea52-4770-8509-adce611290c9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "3893e189-6efa-4c8a-9830-6566eef65f35",
                  "parentUUID": "8956cb24-ea52-4770-8509-adce611290c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3893e189-6efa-4c8a-9830-6566eef65f35"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5a6bea05-e31d-4205-818f-137ceab32d10",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "56432af4-3827-4ed8-afd6-4d3d79716241",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "c8d6650c-d734-4df7-9759-a224ffdd16c7",
                  "parentUUID": "56432af4-3827-4ed8-afd6-4d3d79716241",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c8d6650c-d734-4df7-9759-a224ffdd16c7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fd84d656-c6bc-41db-8b38-0763e1b57831",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e2b720df-bdbc-4dae-a8dd-3fc480ca934b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "d0fb9091-b8b1-4681-9837-599fe40ded51",
                  "parentUUID": "e2b720df-bdbc-4dae-a8dd-3fc480ca934b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d0fb9091-b8b1-4681-9837-599fe40ded51"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "009bf648-1f44-4848-bfc1-847abf99a5d9",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c23b2c47-63c6-4a53-8c66-f8101f4ac6aa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "17d1e90a-8627-430c-a515-d51130649c8a",
                  "parentUUID": "c23b2c47-63c6-4a53-8c66-f8101f4ac6aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "17d1e90a-8627-430c-a515-d51130649c8a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "851c0156-914f-4491-96db-6fe82d600a65",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57ed5b71-f091-41ce-8fce-9502f883deb8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "c0585286-b785-494a-8e84-1ce541faa8a1",
                  "parentUUID": "57ed5b71-f091-41ce-8fce-9502f883deb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c0585286-b785-494a-8e84-1ce541faa8a1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2c5efdce-447f-4906-b3b3-9bfba4a3212f",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57acbeca-8992-477a-b012-7961e6e960a8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 6393, 'gpname': 'adipisicing Ut cupidatat laborum eiusmod', 'rank': 1, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "de40546a-4935-4adf-8dcf-3c0b4e7533a1",
                  "parentUUID": "57acbeca-8992-477a-b012-7961e6e960a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "de40546a-4935-4adf-8dcf-3c0b4e7533a1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "210d467c-ac7c-40f2-ba4b-5a37985ed895",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f13b2ae8-c84d-4c69-a64c-aaf802ff79bf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/7275', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "bf43cf05-dd97-43ac-b23d-e24c4d49c476",
                  "parentUUID": "f13b2ae8-c84d-4c69-a64c-aaf802ff79bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bf43cf05-dd97-43ac-b23d-e24c4d49c476"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "64490744-fe05-4ea8-95a2-3025211b0db6",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c318d79-ee56-472f-ae0f-f7d6f9781297",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "c5bf64b2-11e0-4a6b-aa93-bb45782baedc",
                  "parentUUID": "3c318d79-ee56-472f-ae0f-f7d6f9781297",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c5bf64b2-11e0-4a6b-aa93-bb45782baedc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "334888c9-e0dc-4885-91f5-d2fb96ce36e5",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e615d297-9837-4d47-a569-a45f701d4c89",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "b4050b9e-b0a1-4dba-9f88-1575f5fc6e1d",
                  "parentUUID": "e615d297-9837-4d47-a569-a45f701d4c89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b4050b9e-b0a1-4dba-9f88-1575f5fc6e1d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bd84e8a1-5744-46b9-a880-dd3325599cac",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "148af07d-a3db-4373-907a-52aeaa929a66",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "5640f379-5d6c-41fe-9f17-2e530e91f50f",
                  "parentUUID": "148af07d-a3db-4373-907a-52aeaa929a66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5640f379-5d6c-41fe-9f17-2e530e91f50f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "583ca3ea-021b-421b-8ac6-1343df3b2447",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "82b21c4a-c36f-4fd4-9672-7234642b27bf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "92265060-56ad-4fbe-b073-e424dcea6661",
                  "parentUUID": "82b21c4a-c36f-4fd4-9672-7234642b27bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "92265060-56ad-4fbe-b073-e424dcea6661"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e58c9d93-5a24-4ca1-99ad-edf944e043e2",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b64b9ce3-fd6b-4fc3-a6e1-344cc5550017",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "0a5ba170-2fc7-4f7d-9f34-a622fdba8934",
                  "parentUUID": "b64b9ce3-fd6b-4fc3-a6e1-344cc5550017",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0a5ba170-2fc7-4f7d-9f34-a622fdba8934"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7b125c95-92a8-4e7f-8355-59d115eaf54d",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3cc42c70-e021-4753-bd5d-401343b391b4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "0ba49014-94ad-4e3d-96e0-1da9227f0024",
                  "parentUUID": "3cc42c70-e021-4753-bd5d-401343b391b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0ba49014-94ad-4e3d-96e0-1da9227f0024"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f4b87e7d-d426-4105-bffe-f5b5cc31a05e",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b2e6b72a-c20f-48d9-b94b-f071c37e39e7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "4059ac17-e296-48a8-a4e6-acba7f56b131",
                  "parentUUID": "b2e6b72a-c20f-48d9-b94b-f071c37e39e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4059ac17-e296-48a8-a4e6-acba7f56b131"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c15907a2-cacc-43e2-b584-9fbf6e301123",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0ae20631-9ffb-44b5-bcc1-3618464529eb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "3c99c744-2813-451d-a42b-3c2b25ae8690",
                  "parentUUID": "0ae20631-9ffb-44b5-bcc1-3618464529eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3c99c744-2813-451d-a42b-3c2b25ae8690"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b4b24dcb-27a5-453e-b3cb-b368e7eac744",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30ce50cd-1cce-4602-9028-fde253dae109",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 11 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "1423372a-c3b5-4a51-bf4b-96320b317169",
                  "parentUUID": "30ce50cd-1cce-4602-9028-fde253dae109",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1423372a-c3b5-4a51-bf4b-96320b317169"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b0302779-d222-49a5-a4c7-483a7069166a",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bed5f6b3-29af-4258-b490-1203f4dc69ff",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "90ae8d8e-7112-4d44-b70e-b29dd738f9a2",
                  "parentUUID": "bed5f6b3-29af-4258-b490-1203f4dc69ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "90ae8d8e-7112-4d44-b70e-b29dd738f9a2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3ef4d0b1-20b3-41ee-b14c-3ce3bfc4a200",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f6a319a3-a832-4434-9f55-7614f3141138",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "baefb1a9-ece7-44ee-a850-5dcc6fffba4a",
                  "parentUUID": "f6a319a3-a832-4434-9f55-7614f3141138",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "baefb1a9-ece7-44ee-a850-5dcc6fffba4a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8c3235e5-e6ce-48fc-8e38-dd8e5a2ba9de",
          "title": "tests for /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
          "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "972f43d6-38c2-4ae6-88b6-c4dc2e21d327",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
              "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronologies/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronologies/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "5cbe4ec8-c5f7-46f0-bb22-cf5000e39256",
                  "parentUUID": "972f43d6-38c2-4ae6-88b6-c4dc2e21d327",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5cbe4ec8-c5f7-46f0-bb22-cf5000e39256"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "64ad2584-4ea6-4cba-b632-fd80fba58cce",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0acbf2fd-2f11-4813-ae7b-d188dcff1ac8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 1769, 'familyname': 'voluptate est velit', 'contactname': 'ipsum in ex', 'contactstatus': 'active', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "e5a3e256-5956-4f54-9ac1-c4f340c11634",
                  "parentUUID": "0acbf2fd-2f11-4813-ae7b-d188dcff1ac8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e5a3e256-5956-4f54-9ac1-c4f340c11634"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a622289e-83e2-477b-a5a5-3e4fad5b4632",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "783b962c-7209-42a7-b66d-57a41e65ef19",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "11beb6ee-54ee-4f3f-9d18-813536cc4565",
                  "parentUUID": "783b962c-7209-42a7-b66d-57a41e65ef19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "11beb6ee-54ee-4f3f-9d18-813536cc4565"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1182ffa4-02f4-4f14-b214-bc2952ef3daf",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "17c86bdc-6050-453e-b54e-8a8973f2032c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "2edbce30-f980-450a-97ff-f45e1a9c4b60",
                  "parentUUID": "17c86bdc-6050-453e-b54e-8a8973f2032c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2edbce30-f980-450a-97ff-f45e1a9c4b60"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b2925e23-e27e-4c32-99d7-e6a6dd8ddcd3",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3eff3ed9-9d09-4b58-9d55-4ebbe969d265",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Canadian Pollen Database' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "aa914b8e-171f-49cc-827a-7fc4ece16845",
                  "parentUUID": "3eff3ed9-9d09-4b58-9d55-4ebbe969d265",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "aa914b8e-171f-49cc-827a-7fc4ece16845"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1d72f9e6-c265-4420-b6d5-54b54e2aa991",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bf8a6575-5dce-49d2-bdbd-173fc5821e06",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 25392, 'contactid': 9991, 'datasettype': 'enim', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 1911007 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "03081c3d-5c48-4c37-ac2f-865a5fdd115c",
                  "parentUUID": "bf8a6575-5dce-49d2-bdbd-173fc5821e06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "03081c3d-5c48-4c37-ac2f-865a5fdd115c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d0b72a4f-3bc2-41d0-b331-f9aa973d96e6",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1576d9ce-f34a-4a4f-b3ff-7eee5aafb3d6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "6d5ff2a2-5eee-49c2-9754-07dbb97a0ae3",
                  "parentUUID": "1576d9ce-f34a-4a4f-b3ff-7eee5aafb3d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6d5ff2a2-5eee-49c2-9754-07dbb97a0ae3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a833643e-3ff8-4c8e-b0b3-0887e1c1d8d4",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "013c69e5-0440-4067-8bfb-fedb705f4f73",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/6690/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "aef52eaf-673a-42f4-9020-7aeaec79e396",
                  "parentUUID": "013c69e5-0440-4067-8bfb-fedb705f4f73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "aef52eaf-673a-42f4-9020-7aeaec79e396"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cfbc9aa2-b3cd-41cf-b1af-667610cc9f54",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d1fcc7c6-504e-4ad7-b861-7e0c9916e897",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "e007bb66-f0aa-43a8-99dd-7245f558cd3d",
                  "parentUUID": "d1fcc7c6-504e-4ad7-b861-7e0c9916e897",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e007bb66-f0aa-43a8-99dd-7245f558cd3d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c6335239-70cb-4a3b-b1a7-f275d22ffcb8",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c7746b0-f7a9-477c-861e-3a2c6dc60604",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "f1817325-9e20-4f67-ae84-b3e1cab46dbc",
                  "parentUUID": "3c7746b0-f7a9-477c-861e-3a2c6dc60604",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f1817325-9e20-4f67-ae84-b3e1cab46dbc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "68e10981-914f-4f6f-97d0-96ec8431eac2",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e465b094-462c-4c23-b982-417f98075d1b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "6031ab18-f6cd-475a-adae-2919a443fcca",
                  "parentUUID": "e465b094-462c-4c23-b982-417f98075d1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6031ab18-f6cd-475a-adae-2919a443fcca"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "56ad1fa6-d2df-4c17-842f-5c4521a9f7dc",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fd6aa72a-eab4-41eb-b71d-c0b6d9a6f63b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "aab179f5-5d4b-4af6-a2c0-28367f1bb989",
                  "parentUUID": "fd6aa72a-eab4-41eb-b71d-c0b6d9a6f63b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "aab179f5-5d4b-4af6-a2c0-28367f1bb989"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d88d390e-1b63-4842-a1d4-f3e646f69686",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "03f8f9ee-35a3-49a9-a072-b4ee0c956f76",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "3870837e-392c-42f5-92e9-9e69befaccf1",
                  "parentUUID": "03f8f9ee-35a3-49a9-a072-b4ee0c956f76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3870837e-392c-42f5-92e9-9e69befaccf1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cf6ffd5b-7114-475e-b214-7ebe87e2455c",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f38f6665-7fed-4531-8f7b-6d8e414b9d6c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "36434079-81de-4180-8e10-78759e175e95",
                  "parentUUID": "f38f6665-7fed-4531-8f7b-6d8e414b9d6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "36434079-81de-4180-8e10-78759e175e95"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4cb73549-fdfc-4bac-b033-0f99e7d313a0",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "401aa510-8242-464b-a016-176d53368c57",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 3636, 'contactid': 8496, 'datasettype': 'est Lorem occaecat eu', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 8243452 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "f9bd6bd9-9a65-409c-a390-eae2dfad1d20",
                  "parentUUID": "401aa510-8242-464b-a016-176d53368c57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f9bd6bd9-9a65-409c-a390-eae2dfad1d20"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1e2eaf91-8e61-4423-bfe2-99f2324afc64",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "40f0d9af-0e0e-4cbf-a70b-dce6a4c248c8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "0bfd95a7-b70a-41be-bcc6-7cc88c7ffb0d",
                  "parentUUID": "40f0d9af-0e0e-4cbf-a70b-dce6a4c248c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0bfd95a7-b70a-41be-bcc6-7cc88c7ffb0d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dfe1b14b-c36a-456d-82b6-7bb4662a8626",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "99cb7380-2a90-45e1-abad-67727119d8bd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'sed in', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "c9a2bb20-7579-4454-b09f-eda309736cd4",
                  "parentUUID": "99cb7380-2a90-45e1-abad-67727119d8bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c9a2bb20-7579-4454-b09f-eda309736cd4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ce2ed31f-996f-49f0-9152-430c862210c8",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4cb4acb9-45e4-4f2e-a007-634f943121ba",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "4bc1ff6b-3977-4ed5-b6f6-ffc752e505f8",
                  "parentUUID": "4cb4acb9-45e4-4f2e-a007-634f943121ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4bc1ff6b-3977-4ed5-b6f6-ffc752e505f8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4737e907-2561-4210-adde-87b7387256c9",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57c40948-5673-4ba9-ae82-4f94fa48fb8b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/2865', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "bd797a1d-e753-4e01-b8b4-d0fb7cf573b3",
                  "parentUUID": "57c40948-5673-4ba9-ae82-4f94fa48fb8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bd797a1d-e753-4e01-b8b4-d0fb7cf573b3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b248c2cb-a599-481a-a4cd-89ae6ac1cac0",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "45a59e0c-426a-4ba0-b367-bb7807b2cd98",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "131bdab4-8d03-44ab-986f-c40abdb0b190",
                  "parentUUID": "45a59e0c-426a-4ba0-b367-bb7807b2cd98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "131bdab4-8d03-44ab-986f-c40abdb0b190"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b6167d5c-075a-4235-9e41-8b3adfdbafd0",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e77127e3-2a24-4f2e-87d5-c975f2a64835",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 5261, 'gpname': 'aliqua', 'rank': 3, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "8c9a63d7-f2da-4311-982a-84a5f4752ab8",
                  "parentUUID": "e77127e3-2a24-4f2e-87d5-c975f2a64835",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8c9a63d7-f2da-4311-982a-84a5f4752ab8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c9b7a8b1-4b93-424c-a88b-ee54ef3ada73",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d3815fb0-519f-4d6b-a751-b8a590023411",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/6858/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "c81bf958-6a53-4a43-b6a0-32161b7d95cd",
                  "parentUUID": "d3815fb0-519f-4d6b-a751-b8a590023411",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c81bf958-6a53-4a43-b6a0-32161b7d95cd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ba894f18-2db9-455c-b625-1ada117beaf3",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7e7f66a8-88ce-4fbc-bbc9-7964ffcbf961",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/500/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "c9603a2b-8eee-425d-8f64-45820494c2e8",
                  "parentUUID": "7e7f66a8-88ce-4fbc-bbc9-7964ffcbf961",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c9603a2b-8eee-425d-8f64-45820494c2e8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aacae782-0525-4799-99e7-d99d94a2dfd6",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b53b3cea-78cc-4cce-ad9c-d8194f2fbd2b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/6355', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "f214ba72-3ae2-4db6-a6c7-12dfc143ae29",
                  "parentUUID": "b53b3cea-78cc-4cce-ad9c-d8194f2fbd2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f214ba72-3ae2-4db6-a6c7-12dfc143ae29"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ab37da8b-2a74-406c-be31-54bba1907331",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be8f40cb-afe5-4c64-a828-90d58d8abca4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'ad', 'taxonid': 11557, 'siteid': 21147, 'sitename': 'veniam aliquip proident', 'datasettype': 'laborum in pariatur dolor Ut', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 12424691, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "53726167-88fb-4e56-b528-4b289830bc1a",
                  "parentUUID": "be8f40cb-afe5-4c64-a828-90d58d8abca4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "53726167-88fb-4e56-b528-4b289830bc1a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e2cf0078-9619-44c4-b9ed-d5f933df1997",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fc8ebe4a-83ac-48da-b838-369fb76cc3f6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "f59dc3f0-fc4c-49d6-8806-ca372034b298",
                  "parentUUID": "fc8ebe4a-83ac-48da-b838-369fb76cc3f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f59dc3f0-fc4c-49d6-8806-ca372034b298"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "730546c6-1406-47e5-8813-0a4c952a0a85",
          "title": "tests for /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
          "file": "/test/v2.0-data-oxcal-calibrate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d5e6786-2be0-4f52-b531-cf7a264a6355",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
              "file": "/test/v2.0-data-oxcal-calibrate-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "3813cdf4-0745-40c8-8d99-51c70f3088fc",
                  "parentUUID": "1d5e6786-2be0-4f52-b531-cf7a264a6355",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3813cdf4-0745-40c8-8d99-51c70f3088fc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "46fdcc15-33b6-482c-9ac5-9df0db8702bc",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a2bbb3f5-fb0d-4351-8ba2-95d7e82324d8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'Excepteur', 'taxonid': 9316, 'siteid': 10852, 'sitename': 'sint dolor eiusmod culpa', 'datasettype': 'pariatur officia exercitation ut amet', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 18974311, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "8ddf3950-94bd-4c18-ae8a-b060f50c0f60",
                  "parentUUID": "a2bbb3f5-fb0d-4351-8ba2-95d7e82324d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8ddf3950-94bd-4c18-ae8a-b060f50c0f60"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "12f10e70-d333-48ab-a0e7-207f409d8ba6",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f6a51bf9-8126-4d69-b673-4be5757730c6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "87796ae0-3f84-4350-ae78-490b0ea87b30",
                  "parentUUID": "f6a51bf9-8126-4d69-b673-4be5757730c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "87796ae0-3f84-4350-ae78-490b0ea87b30"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b97fc14c-ea3e-45cb-b474-a987f785e0cb",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1da0bc7f-6fef-4c30-b611-25ba576d8469",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 19496, 'datasetid': 92974751, 'siteid': 25707, 'familyname': 'et cupidatat incididunt ut', 'pubtype': 'Other Authored', 'year': 2006, 'search': 'eu eiusmod minim sed ad', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "d41bdee1-1951-4e69-bb8f-aeb8f43821f3",
                  "parentUUID": "1da0bc7f-6fef-4c30-b611-25ba576d8469",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d41bdee1-1951-4e69-bb8f-aeb8f43821f3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6bc5ce28-ce2b-4ed0-a33f-bb8c8dc6029c",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f55673d7-7811-4c86-87ad-c1539c8f385b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/{publicationid}', {\n  'qs': { 'publicationid': 4543 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "a5a1c935-68c5-4997-9749-560acd25d785",
                  "parentUUID": "f55673d7-7811-4c86-87ad-c1539c8f385b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a5a1c935-68c5-4997-9749-560acd25d785"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "11dcb74f-fe41-4188-ab1d-152fc3d3f9f4",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "744e7f0a-ce11-4676-a33d-84307cede195",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 24495, 'sitename': 'sed', 'altmax': 100, 'altmin': 10, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "8641dc1f-d133-4a5d-a9c8-50bfc6633140",
                  "parentUUID": "744e7f0a-ce11-4676-a33d-84307cede195",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8641dc1f-d133-4a5d-a9c8-50bfc6633140"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aa1a860c-c6dc-46bb-9fe1-6f5b7b44bdbb",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fbc86740-47ea-4c7b-acdf-7f0052ca9527",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/2655/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "544c8028-f884-46c8-8d4c-bf9b089c52d7",
                  "parentUUID": "fbc86740-47ea-4c7b-acdf-7f0052ca9527",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "544c8028-f884-46c8-8d4c-bf9b089c52d7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "69287f3f-4191-49b6-b7e6-7ab881287b53",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0505cd2-c7ae-4cfa-8c99-950838aabcfb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "55708cd4-1e9b-4dd5-850e-9d992f0f9bf1",
                  "parentUUID": "d0505cd2-c7ae-4cfa-8c99-950838aabcfb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "55708cd4-1e9b-4dd5-850e-9d992f0f9bf1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "75ccf5e7-86ae-4de0-a6ac-9181065cb741",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "26091e56-8665-45c5-8ed1-c82651de478e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "226e9c8a-2413-4879-9b39-1f072b0b2305",
                  "parentUUID": "26091e56-8665-45c5-8ed1-c82651de478e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "226e9c8a-2413-4879-9b39-1f072b0b2305"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3f0ec153-382a-4650-bfd8-fc264b62d5e0",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "52529420-2915-419f-86cf-6f044240cbcf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/3333/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "e4e670bd-649d-4a2c-af0d-e40f2804106d",
                  "parentUUID": "52529420-2915-419f-86cf-6f044240cbcf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e4e670bd-649d-4a2c-af0d-e40f2804106d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3d5cab1f-035f-4f7d-a24c-ef7504fea821",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "834dc245-179e-473b-aa23-fb95cb2a6fde",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/4037/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "a77c4ff0-7181-4a2d-bbee-650cc7889387",
                  "parentUUID": "834dc245-179e-473b-aa23-fb95cb2a6fde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a77c4ff0-7181-4a2d-bbee-650cc7889387"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7bf2ec7b-5222-4107-b668-d5488f4da34e",
          "title": "tests for /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "27822a0a-433e-4b7e-885b-062587d75c15",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "2a564f85-8d13-4858-aebd-330d4d3385a4",
                  "parentUUID": "27822a0a-433e-4b7e-885b-062587d75c15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2a564f85-8d13-4858-aebd-330d4d3385a4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fbaddb83-ff98-4f04-91d5-7c256f340c68",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab6e6ff1-e661-488a-93bd-78fa7275fac9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "7740db10-0a63-4f10-b155-1a7c057f873c",
                  "parentUUID": "ab6e6ff1-e661-488a-93bd-78fa7275fac9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7740db10-0a63-4f10-b155-1a7c057f873c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "65823fd9-7a09-464d-a68e-e4163c91aeec",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7ce5ec09-712b-4689-924a-9230dbfcf2d6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "332a78c6-7529-4123-9fdd-40fb9d41b715",
                  "parentUUID": "7ce5ec09-712b-4689-924a-9230dbfcf2d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "332a78c6-7529-4123-9fdd-40fb9d41b715"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3fe6a00f-b42c-4018-b6ae-41ee03dff5c7",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "212b3ba0-1edc-483d-97c7-fe572bd04488",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "dda8761f-56c3-42b6-b8cd-ef8dc859cc11",
                  "parentUUID": "212b3ba0-1edc-483d-97c7-fe572bd04488",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "dda8761f-56c3-42b6-b8cd-ef8dc859cc11"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7b9500ec-5afe-4905-8c53-68d87508fba1",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a5295bfe-5255-4965-a8f4-05f248e87f2e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "daaa3b19-49a1-4459-981f-2e6a9454e3dd",
                  "parentUUID": "a5295bfe-5255-4965-a8f4-05f248e87f2e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "daaa3b19-49a1-4459-981f-2e6a9454e3dd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "001ccd0d-9365-4ceb-9c69-66bdb0ce07cd",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cf49c71a-57fb-4d0d-a5c8-29c52b48bb15",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'dolor et nulla velit dolor', 'datasetid': 90942683, 'siteid': 11158 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "53ef901b-807d-4327-a8d2-04ed6eeeba00",
                  "parentUUID": "cf49c71a-57fb-4d0d-a5c8-29c52b48bb15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "53ef901b-807d-4327-a8d2-04ed6eeeba00"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "512b7409-49d2-40ba-a577-d8221a0263bf",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "01f72e1a-5a07-4edc-9e42-6e9c7d4b8ddb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "d4268959-b928-4336-99aa-02051d2e88ed",
                  "parentUUID": "01f72e1a-5a07-4edc-9e42-6e9c7d4b8ddb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d4268959-b928-4336-99aa-02051d2e88ed"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "65713fde-4b67-4ca7-8f52-f6459c06fce6",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2b60fb44-2396-4880-9cf4-370d8fa6d159",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "bb814a62-2597-49d0-a99c-2bcc20953f67",
                  "parentUUID": "2b60fb44-2396-4880-9cf4-370d8fa6d159",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bb814a62-2597-49d0-a99c-2bcc20953f67"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "77662a73-fa39-4146-9c32-9436661f0081",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2010eb19-30bc-4274-bf8d-3bd8922f35e3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "ba6d7c4a-81c8-4fb1-b2ce-00d6f14b305c",
                  "parentUUID": "2010eb19-30bc-4274-bf8d-3bd8922f35e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ba6d7c4a-81c8-4fb1-b2ce-00d6f14b305c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "389fae81-e8f2-4032-90b5-2d108f3212e3",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8bb1206a-fdba-4cb9-aba7-5e6e5dacb015",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "TypeError: Cannot read property 'statusCode' of undefined",
                    "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Assertion.<anonymous> (node_modules/chakram/lib/assertions/statuscode.js:15:45)\n    at Assertion.ctx.<computed> (node_modules/chakram/node_modules/chai/lib/chai/utils/addMethod.js:41:25)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/chakram/node_modules/chai-as-promised/lib/chai-as-promised.js:308:26\n    at _fulfilled (node_modules/q/q.js:854:54)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:883:30\n    at Promise.promise.promiseDispatch (node_modules/q/q.js:816:13)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/q/q.js:624:44\n    at runSingle (node_modules/q/q.js:137:13)\n    at flush (node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)",
                    "diff": null
                  },
                  "uuid": "d474fcab-f934-4eb7-85fc-0006ca31e598",
                  "parentUUID": "8bb1206a-fdba-4cb9-aba7-5e6e5dacb015",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d474fcab-f934-4eb7-85fc-0006ca31e598"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}