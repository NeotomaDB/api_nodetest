{
  "stats": {
    "suites": 208,
    "tests": 204,
    "passes": 192,
    "pending": 0,
    "failures": 12,
    "start": "2022-05-12T23:03:55.256Z",
    "end": "2022-05-12T23:07:37.413Z",
    "duration": 222157,
    "testsRegistered": 204,
    "passPercent": 94.11764705882352,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5fca13ff-74fa-426a-bca6-b5716d1d8326",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "072f8f43-4806-443e-b097-239ff1d4be89",
          "parentUUID": "5fca13ff-74fa-426a-bca6-b5716d1d8326",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a7b1a602-f9ec-4d26-8407-fce5086bf768",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 1475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "15c6dcb0-7f98-4a5c-a978-3fff0edc2888",
              "parentUUID": "a7b1a602-f9ec-4d26-8407-fce5086bf768",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15c6dcb0-7f98-4a5c-a978-3fff0edc2888"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1475,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2cad090d-edae-40eb-8051-e310bc90f5d5",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "2b0dbb1e-ab33-4a48-b0e3-a2bffd2a1959",
              "parentUUID": "2cad090d-edae-40eb-8051-e310bc90f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 330,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "0869868b-a70a-438a-b9a7-dffb55812258",
              "parentUUID": "2cad090d-edae-40eb-8051-e310bc90f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "44e92e79-39b8-41a5-90ee-304e5d41a2c2",
              "parentUUID": "2cad090d-edae-40eb-8051-e310bc90f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "41c1fdf8-670d-4448-9f8d-c1c21ff3ea32",
              "parentUUID": "2cad090d-edae-40eb-8051-e310bc90f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "20611968-70d0-4a24-872f-c51643b0f520",
              "parentUUID": "2cad090d-edae-40eb-8051-e310bc90f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "e18f3dc1-82b2-442f-b02a-d2d9d6157fe4",
              "parentUUID": "2cad090d-edae-40eb-8051-e310bc90f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "da369f7f-be78-48e8-863d-8d0ccf74550f",
              "parentUUID": "2cad090d-edae-40eb-8051-e310bc90f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "1ab6b41d-ed45-4ebe-86e3-1c9258404184",
              "parentUUID": "2cad090d-edae-40eb-8051-e310bc90f5d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b0dbb1e-ab33-4a48-b0e3-a2bffd2a1959",
            "0869868b-a70a-438a-b9a7-dffb55812258",
            "44e92e79-39b8-41a5-90ee-304e5d41a2c2",
            "41c1fdf8-670d-4448-9f8d-c1c21ff3ea32",
            "20611968-70d0-4a24-872f-c51643b0f520",
            "e18f3dc1-82b2-442f-b02a-d2d9d6157fe4",
            "da369f7f-be78-48e8-863d-8d0ccf74550f",
            "1ab6b41d-ed45-4ebe-86e3-1c9258404184"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1032,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7368b16f-29ab-427a-bcfa-819a29da9fbf",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]['site']['datasets'][0]).includes('datasetid');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6aee1370-ea54-4f8f-bdad-6c38ff6de962",
              "parentUUID": "7368b16f-29ab-427a-bcfa-819a29da9fbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 740,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "99bf907a-ca2c-4187-84ff-6e3351a481cb",
              "parentUUID": "7368b16f-29ab-427a-bcfa-819a29da9fbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "91000e77-2708-4a37-bdcc-e6acebadf133",
              "parentUUID": "7368b16f-29ab-427a-bcfa-819a29da9fbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 1162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "85893a61-e137-4301-8fe3-ae57ed48845c",
              "parentUUID": "7368b16f-29ab-427a-bcfa-819a29da9fbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6a46355d-eb96-4947-b39b-f7132ff1dad7",
              "parentUUID": "7368b16f-29ab-427a-bcfa-819a29da9fbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 1229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6aca91ae-f494-4873-9053-d4230a93d804",
              "parentUUID": "7368b16f-29ab-427a-bcfa-819a29da9fbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1756,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "06d0db2b-e627-443b-92e4-60fdfb764bed",
              "parentUUID": "7368b16f-29ab-427a-bcfa-819a29da9fbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6aee1370-ea54-4f8f-bdad-6c38ff6de962",
            "99bf907a-ca2c-4187-84ff-6e3351a481cb",
            "91000e77-2708-4a37-bdcc-e6acebadf133",
            "85893a61-e137-4301-8fe3-ae57ed48845c",
            "6a46355d-eb96-4947-b39b-f7132ff1dad7",
            "6aca91ae-f494-4873-9053-d4230a93d804",
            "06d0db2b-e627-443b-92e4-60fdfb764bed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7349,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "08f5525b-d7b8-4b90-8cf7-38a0e029d2ca",
          "title": "Tests for Explorer App Services",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
          "file": "/test/explorerCalls.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
              "file": "/test/explorerCalls.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for TaxaGroupTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaGroupTypes",
                  "timedOut": false,
                  "duration": 248,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaGroupTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "dc748862-7d78-4b25-ba67-d2b5574b80f8",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomyTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomyTypes",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomyTypes', {\n  'qs': {\n    taphonomicSystemId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d10978ee-0257-435e-8838-023fc6b8eb62",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomySystems",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomySystems",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomySystems', {\n  'qs': {\n    datasetTypeId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "56fc1248-95c6-43db-88eb-61bd4e1926ba",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for ElementTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for ElementTypes",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/ElementTypes', {\n  'qs': {\n    taxagroupid: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a7f621e0-d73a-4548-a7df-cf18068c80e3",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaxaInDatasets (a slow service)",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaInDatasets (a slow service)",
                  "timedOut": false,
                  "duration": 6432,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3847906c-108b-4e57-8730-6113f68cc2f8",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for collectionTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for collectionTypes",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4207b128-7063-45ec-8be2-64c968744fee",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for keywords",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for keywords",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "435d1c0f-4d84-47ab-8ad1-942bfc8e3e61",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for authorpis",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for authorpis",
                  "timedOut": false,
                  "duration": 2023,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5a852ade-e6b3-4c8b-967c-b6b4ac8d7607",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DepositionalEnvironments",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DepositionalEnvironments",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DepositionalEnvironments', {\n  'qs': { idProperty: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d91c26d0-1b5a-4539-baa8-982be84c2023",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Search",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Search",
                  "timedOut": false,
                  "duration": 959,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Search', {\n  'qs': { search: '{\"taxa\":null,\"time\":null,\"space\":null,\"metadata\":null,\"datasetTypeId\":\"21\"}',\n    'time': true }\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3e86fff9-dbe6-4039-ac90-553f8a20c2a8",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DatasetTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DatasetTypes",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0f7bba07-c7a2-48dc-a79c-71c8b1836ac4",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for RelativeAges",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for RelativeAges",
                  "timedOut": false,
                  "duration": 478,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/RelativeAges', {\n  'qs': { agescaleid: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "877bc387-15f3-456a-a0bc-0a535742ce15",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Geochronologies",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Geochronologies",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Geochronologies', {\n  'qs': { datasetId: 1001 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8c6ce040-3e3b-4723-95f0-4abe7fe00a9d",
                  "parentUUID": "5c9ed921-a83b-422e-b84e-e4a9ceeb2e1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc748862-7d78-4b25-ba67-d2b5574b80f8",
                "d10978ee-0257-435e-8838-023fc6b8eb62",
                "56fc1248-95c6-43db-88eb-61bd4e1926ba",
                "a7f621e0-d73a-4548-a7df-cf18068c80e3",
                "3847906c-108b-4e57-8730-6113f68cc2f8",
                "4207b128-7063-45ec-8be2-64c968744fee",
                "435d1c0f-4d84-47ab-8ad1-942bfc8e3e61",
                "5a852ade-e6b3-4c8b-967c-b6b4ac8d7607",
                "d91c26d0-1b5a-4539-baa8-982be84c2023",
                "3e86fff9-dbe6-4039-ac90-553f8a20c2a8",
                "0f7bba07-c7a2-48dc-a79c-71c8b1836ac4",
                "877bc387-15f3-456a-a0bc-0a535742ce15",
                "8c6ce040-3e3b-4723-95f0-4abe7fe00a9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10647,
              "root": false,
              "rootEmpty": false,
              "_timeout": 8000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 8000
        },
        {
          "uuid": "2a4f6815-af29-4a13-a5b3-d80ea6bfd086",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "e8eacc01-bf4d-49a4-8a5e-7574e5626b70",
              "parentUUID": "2a4f6815-af29-4a13-a5b3-d80ea6bfd086",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "d871d43f-7ca5-436a-9a5c-2e64d8d7d538",
              "parentUUID": "2a4f6815-af29-4a13-a5b3-d80ea6bfd086",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "c992cc65-1196-4da6-bd8a-0bad088e36e3",
              "parentUUID": "2a4f6815-af29-4a13-a5b3-d80ea6bfd086",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "d3980394-d4ea-4782-90b4-274e6647c2db",
              "parentUUID": "2a4f6815-af29-4a13-a5b3-d80ea6bfd086",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e8eacc01-bf4d-49a4-8a5e-7574e5626b70",
            "d871d43f-7ca5-436a-9a5c-2e64d8d7d538",
            "c992cc65-1196-4da6-bd8a-0bad088e36e3",
            "d3980394-d4ea-4782-90b4-274e6647c2db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e1a66b75-d51d-41b4-8888-82271bc1e1d3",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "bb89f3e0-edce-40a7-bf1f-55ef1bdbc3a5",
              "parentUUID": "e1a66b75-d51d-41b4-8888-82271bc1e1d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bb89f3e0-edce-40a7-bf1f-55ef1bdbc3a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "42fcc173-0a14-41b1-a235-c6b68b8bbd32",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 6620,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "a0252bbf-a689-4ca9-a80b-da2f769aecb5",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 8593,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "4bca260c-7f6b-43b3-9f1d-53e5bfaef9aa",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 1616,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "866ebc77-e876-465f-83b3-7aa6d6606dfc",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "4162aa79-ed3d-481f-8dc4-b416bf5168e4",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "dacb1fa6-55ad-421a-8fb4-37b409e561e9",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "beefd88c-c052-40d1-b075-feebc19b49eb",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "52287c8e-5b8e-4d2c-800a-2ff675661fbe",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "7ad701c0-6610-4774-a220-9675e385f47f",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "037c54cf-fc98-4d93-904f-e4aec41759eb",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "72fb04a9-85ee-49dd-aed4-d9569c713646",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 239,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "3a0feb76-de01-4a35-9844-8605ea76f64b",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "0a56a079-c903-46fc-84df-bcaa8b936b5f",
              "parentUUID": "a141389e-b5fd-48a9-acb6-28b15f0544ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "42fcc173-0a14-41b1-a235-c6b68b8bbd32",
            "a0252bbf-a689-4ca9-a80b-da2f769aecb5",
            "4bca260c-7f6b-43b3-9f1d-53e5bfaef9aa",
            "866ebc77-e876-465f-83b3-7aa6d6606dfc",
            "4162aa79-ed3d-481f-8dc4-b416bf5168e4",
            "dacb1fa6-55ad-421a-8fb4-37b409e561e9",
            "beefd88c-c052-40d1-b075-feebc19b49eb",
            "52287c8e-5b8e-4d2c-800a-2ff675661fbe",
            "7ad701c0-6610-4774-a220-9675e385f47f",
            "037c54cf-fc98-4d93-904f-e4aec41759eb",
            "72fb04a9-85ee-49dd-aed4-d9569c713646",
            "3a0feb76-de01-4a35-9844-8605ea76f64b",
            "0a56a079-c903-46fc-84df-bcaa8b936b5f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18164,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fb4df6df-9fc7-4d78-a14c-67e1460fdef8",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ac168b3d-a5e5-41f5-b647-cf8bab8e76c2",
              "parentUUID": "fb4df6df-9fc7-4d78-a14c-67e1460fdef8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b92b996b-3cd2-47f3-9487-3ba25b63d7bd",
              "parentUUID": "fb4df6df-9fc7-4d78-a14c-67e1460fdef8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "fff05e20-25ac-4f10-9869-50bb0ee59a70",
              "parentUUID": "fb4df6df-9fc7-4d78-a14c-67e1460fdef8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "4afc529a-1e71-407c-a4f0-307e24a88f41",
              "parentUUID": "fb4df6df-9fc7-4d78-a14c-67e1460fdef8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c70ba497-ac7a-421b-9d37-04007bf7fd7d",
              "parentUUID": "fb4df6df-9fc7-4d78-a14c-67e1460fdef8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "cd962ff7-4880-4743-93e7-7e22c94fd596",
              "parentUUID": "fb4df6df-9fc7-4d78-a14c-67e1460fdef8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6062ea97-08f0-4b95-9dd4-5d011cfd81b3",
              "parentUUID": "fb4df6df-9fc7-4d78-a14c-67e1460fdef8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac168b3d-a5e5-41f5-b647-cf8bab8e76c2",
            "b92b996b-3cd2-47f3-9487-3ba25b63d7bd",
            "fff05e20-25ac-4f10-9869-50bb0ee59a70",
            "4afc529a-1e71-407c-a4f0-307e24a88f41",
            "c70ba497-ac7a-421b-9d37-04007bf7fd7d",
            "cd962ff7-4880-4743-93e7-7e22c94fd596",
            "6062ea97-08f0-4b95-9dd4-5d011cfd81b3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 619,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f347e518-03a6-443d-b0a9-6ce2ed9aec72",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "badb6fbb-54ba-48fc-bec7-ebbfe2ecbac8",
              "parentUUID": "f347e518-03a6-443d-b0a9-6ce2ed9aec72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "badb6fbb-54ba-48fc-bec7-ebbfe2ecbac8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 49,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fc17032a-0371-4c22-ae5e-2db29503c8b7",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d8a40869-1488-49b9-a087-c228e152984e",
              "parentUUID": "fc17032a-0371-4c22-ae5e-2db29503c8b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d8a40869-1488-49b9-a087-c228e152984e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ef4f1353-19e4-42aa-bc73-8cd64a91d05a",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b7c0a902-bc96-48ef-9999-3bd8030483f4",
              "parentUUID": "ef4f1353-19e4-42aa-bc73-8cd64a91d05a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7c0a902-bc96-48ef-9999-3bd8030483f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7d5a5379-19b4-428a-b974-3c51e1ad40fa",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "eade732f-31f0-4bd5-9d3b-ec93ce0800f7",
              "parentUUID": "7d5a5379-19b4-428a-b974-3c51e1ad40fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eade732f-31f0-4bd5-9d3b-ec93ce0800f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ec3ec603-df9e-407e-a8c1-3fea301ea721",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 590,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "badf22fb-d336-48cb-a847-fd8542dc74f6",
              "parentUUID": "ec3ec603-df9e-407e-a8c1-3fea301ea721",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "badf22fb-d336-48cb-a847-fd8542dc74f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 590,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "53497732-c592-41dd-8b53-bf046658803f",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 665,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "613ccf69-c574-4ac5-912c-a0f0fefdb5fb",
              "parentUUID": "53497732-c592-41dd-8b53-bf046658803f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "613ccf69-c574-4ac5-912c-a0f0fefdb5fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 665,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3d3423d0-1b3a-4523-8648-796e16168b07",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 271,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7925eada-2e1a-41d8-9e77-46929d24b487",
              "parentUUID": "3d3423d0-1b3a-4523-8648-796e16168b07",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7925eada-2e1a-41d8-9e77-46929d24b487"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 271,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f1740662-49cb-444c-8bd3-54af18d7dee3",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a2d78615-9119-4df2-af7a-3632f893e3d9",
              "parentUUID": "f1740662-49cb-444c-8bd3-54af18d7dee3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a2d78615-9119-4df2-af7a-3632f893e3d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cfe6dc5a-8fa9-4a3e-a425-200ccb8e6903",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1d9b900c-ddeb-414a-a76c-2198beb72b91",
              "parentUUID": "cfe6dc5a-8fa9-4a3e-a425-200ccb8e6903",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d9b900c-ddeb-414a-a76c-2198beb72b91"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "60dd5d82-3b1e-4890-b7e3-456d78892de8",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bab8214a-964c-44f5-b084-d8f786a73d43",
              "parentUUID": "60dd5d82-3b1e-4890-b7e3-456d78892de8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bab8214a-964c-44f5-b084-d8f786a73d43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 108,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b07ee9db-d2ff-4d2a-b31e-220cc6027263",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "64677d21-e6d9-4c9e-b19b-ca4bc781cf9d",
              "parentUUID": "b07ee9db-d2ff-4d2a-b31e-220cc6027263",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64677d21-e6d9-4c9e-b19b-ca4bc781cf9d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 106,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "feb3bd72-18d9-4908-97aa-57669d50f554",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c5c596ad-814e-4ce0-abd8-1ef81423c068",
              "parentUUID": "feb3bd72-18d9-4908-97aa-57669d50f554",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5c596ad-814e-4ce0-abd8-1ef81423c068"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e12648d5-0b5c-4e67-b4fe-e6c75df5f711",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2b4c5103-5782-4ad2-a9fd-5c1eaab6d654",
              "parentUUID": "e12648d5-0b5c-4e67-b4fe-e6c75df5f711",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b4c5103-5782-4ad2-a9fd-5c1eaab6d654"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6b35ee08-4157-427a-815d-3e243d392d05",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "88ae454a-45d7-4f5a-8876-4745e064dd3e",
              "parentUUID": "6b35ee08-4157-427a-815d-3e243d392d05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88ae454a-45d7-4f5a-8876-4745e064dd3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 134,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0df9f288-8e4e-43c2-b8d8-f0755639758f",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a7824e9f-a5a8-45ab-a81b-9cd6649c107a",
              "parentUUID": "0df9f288-8e4e-43c2-b8d8-f0755639758f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7824e9f-a5a8-45ab-a81b-9cd6649c107a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "32a38846-c0e0-42ba-9996-0a16ebeda327",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2df4b239-2d94-4e03-b541-b6e2e1c23287",
              "parentUUID": "32a38846-c0e0-42ba-9996-0a16ebeda327",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2df4b239-2d94-4e03-b541-b6e2e1c23287"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "15b0384f-2f81-4742-979d-170c7d962eb7",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a610a2d8-d9e1-469b-b8a4-a4dcd406f072",
              "parentUUID": "15b0384f-2f81-4742-979d-170c7d962eb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a610a2d8-d9e1-469b-b8a4-a4dcd406f072"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2738d8ba-3aa6-421f-955e-fa8f7728ae49",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "da847718-2540-4a35-bfc0-53d4f1fad7e8",
              "parentUUID": "2738d8ba-3aa6-421f-955e-fa8f7728ae49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da847718-2540-4a35-bfc0-53d4f1fad7e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 185,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "69965861-34cc-4294-aeed-15aac39ba05e",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 94073,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "8cbc5af2-0ccb-4486-9104-6bee362c16d2",
              "parentUUID": "69965861-34cc-4294-aeed-15aac39ba05e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8cbc5af2-0ccb-4486-9104-6bee362c16d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 94073,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5cf95f1f-1a1b-45bb-898d-564c8b066b82",
          "title": "GET /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronologies/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 522,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d35239f1-48ab-4518-b803-1647f17ebfea",
              "parentUUID": "5cf95f1f-1a1b-45bb-898d-564c8b066b82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d35239f1-48ab-4518-b803-1647f17ebfea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 522,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "808a9dac-7286-4f62-a125-11a37abcc8d5",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 126,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: data.result[0].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[0].contactstatus should be integer, data.result[0].fax should be string, data.result[0].notes should be string, data.result[0].suffix should be string, data.result[0].url should be string, data.result[1].address should be string, data.result[1].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[1].contactstatus should be integer, data.result[1].phone should be string, data.result[1].fax should be string, data.result[1].notes should be string, data.result[1].suffix should be string, data.result[1].title should be string, data.result[1].url should be string, data.result[2].address should be string, data.result[2].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[2].contactstatus should be integer, data.result[2].phone should be string, data.result[2].fax should be string, data.result[2].notes should be string, data.result[2].suffix should be string, data.result[2].title should be string, data.result[2].url should be string, data.result[3].address should be string, data.result[3].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[3].contactstatus should be integer, data.result[3].phone should be string, data.result[3].fax should be string, data.result[3].notes should be string, data.result[3].suffix should be string, data.result[3].title should be string, data.result[3].url should be string, data.result[4].address should be string, data.result[4].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[4].contactstatus should be integer, data.result[4].phone should be string, data.result[4].fax should be string, data.result[4].notes should be string, data.result[4].suffix should be string, data.result[4].title should be string, data.result[4].url should be string, data.result[5].address should be string, data.result[5].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[5].contactstatus should be integer, data.result[5].phone should be string, data.result[5].fax should be string, data.result[5].notes should be string, data.result[5].suffix should be string, data.result[5].title should be string, data.result[5].url should be string, data.result[6].address should be string, data.result[6].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[6].contactstatus should be integer, data.result[6].phone should be string, data.result[6].fax should be string, data.result[6].notes should be string, data.result[6].suffix should be string, data.result[6].title should be string, data.result[6].url should be string, data.result[7].address should be string, data.result[7].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[7].contactstatus should be integer, data.result[7].phone should be string, data.result[7].fax should be string, data.result[7].notes should be string, data.result[7].suffix should be string, data.result[7].title should be string, data.result[7].url should be string, data.result[8].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[8].contactstatus should be integer, data.result[8].phone should be string, data.result[8].fax should be string, data.result[8].notes should be string, data.result[8].suffix should be string, data.result[8].title should be string, data.result[8].url should be string, data.result[9].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[9].contactstatus should be integer, data.result[9].phone should be string, data.result[9].fax should be string, data.result[9].notes should be string, data.result[9].suffix should be string, data.result[9].url should be string, data.result[10].address should be string, data.result[10].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[10].contactstatus should be integer, data.result[10].phone should be string, data.result[10].fax should be string, data.result[10].notes should be string, data.result[10].suffix should be string, data.result[10].title should be string, data.result[10].url should be string, data.result[11].address should be string, data.result[11].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[11].contactstatus should be integer, data.result[11].phone should be string, data.result[11].fax should be string, data.result[11].notes should be string, data.result[11].suffix should be string, data.result[11].url should be string, data.result[12].address should be string, data.result[12].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[12].contactstatus should be integer, data.result[12].phone should be string, data.result[12].fax should be string, data.result[12].notes should be string, data.result[12].suffix should be string, data.result[12].title should be string, data.result[12].url should be string, data.result[13].address should be string, data.result[13].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[13].contactstatus should be integer, data.result[13].phone should be string, data.result[13].fax should be string, data.result[13].notes should be string, data.result[13].suffix should be string, data.result[13].title should be string, data.result[13].url should be string, data.result[14].address should be string, data.result[14].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[14].contactstatus should be integer, data.result[14].phone should be string, data.result[14].fax should be string, data.result[14].notes should be string, data.result[14].suffix should be string, data.result[14].title should be string, data.result[14].url should be string, data.result[15].address should be string, data.result[15].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[15].contactstatus should be integer, data.result[15].phone should be string, data.result[15].fax should be string, data.result[15].notes should be string, data.result[15].suffix should be string, data.result[15].url should be string, data.result[16].address should be string, data.result[16].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[16].contactstatus should be integer, data.result[16].phone should be string, data.result[16].fax should be string, data.result[16].notes should be string, data.result[16].suffix should be string, data.result[16].title should be string, data.result[16].url should be string, data.result[17].address should be string, data.result[17].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[17].contactstatus should be integer, data.result[17].phone should be string, data.result[17].fax should be string, data.result[17].notes should be string, data.result[17].suffix should be string, data.result[17].title should be string, data.result[17].url should be string, data.result[18].address should be string, data.result[18].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[18].contactstatus should be integer, data.result[18].phone should be string, data.result[18].fax should be string, data.result[18].notes should be string, data.result[18].suffix should be string, data.result[18].title should be string, data.result[18].url should be string, data.result[19].address should be string, data.result[19].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[19].contactstatus should be integer, data.result[19].phone should be string, data.result[19].fax should be string, data.result[19].notes should be string, data.result[19].suffix should be string, data.result[19].title should be string, data.result[19].url should be string, data.result[20].address should be string, data.result[20].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[20].contactstatus should be integer, data.result[20].phone should be string, data.result[20].fax should be string, data.result[20].notes should be string, data.result[20].suffix should be string, data.result[20].title should be string, data.result[20].url should be string, data.result[21].address should be string, data.result[21].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[21].contactstatus should be integer, data.result[21].phone should be string, data.result[21].fax should be string, data.result[21].notes should be string, data.result[21].suffix should be string, data.result[21].title should be string, data.result[21].url should be string, data.result[22].address should be string, data.result[22].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[22].contactstatus should be integer, data.result[22].phone should be string, data.result[22].fax should be string, data.result[22].notes should be string, data.result[22].suffix should be string, data.result[22].title should be string, data.result[22].url should be string, data.result[23].address should be string, data.result[23].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[23].contactstatus should be integer, data.result[23].phone should be string, data.result[23].fax should be string, data.result[23].notes should be string, data.result[23].suffix should be string, data.result[23].title should be string, data.result[23].url should be string, data.result[24].address should be string, data.result[24].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[24].contactstatus should be integer, data.result[24].phone should be string, data.result[24].fax should be string, data.result[24].notes should be string, data.result[24].suffix should be string, data.result[24].title should be string, data.result[24].url should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: 25,\n        offset: 0\n      },\n      result: [\n        {\n          contactid: 251,\n          aliasid: 251,\n          contactname: 'Schoenweter, James',\n          contactstatusid: 1,\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          aliasid: 2848,\n          contactname: 'Parry, W. J.',\n          contactstatusid: 7,\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          aliasid: 3565,\n          contactname: 'Marvan, P.',\n          contactstatusid: 7,\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          aliasid: 2026,\n          contactname: 'Pinsof, J. D.',\n          contactstatusid: 7,\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          aliasid: 10295,\n          contactname: 'Cambon, Geneviève',\n          contactstatusid: 7,\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-04-12T16:07:37.000Z',\n          recdatemodified: '2018-04-12T16:07:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          aliasid: 2024,\n          contactname: 'Bell, G. L.',\n          contactstatusid: 7,\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          aliasid: 12752,\n          contactname: 'Zhou, Shanfu',\n          contactstatusid: 7,\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-11-05T04:45:38.000Z',\n          recdatemodified: '2018-11-05T04:45:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          aliasid: 17928,\n          contactname: 'Räsänen, Satu',\n          contactstatusid: 7,\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-01-30T16:45:55.000Z',\n          recdatemodified: '2022-01-30T16:45:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          aliasid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          contactstatusid: 1,\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          aliasid: 7247,\n          contactname: 'Andersson, Sofia',\n          contactstatusid: 1,\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          recdatecreated: '2015-05-25T00:15:50.000Z',\n          recdatemodified: '2015-05-25T00:15:51.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 18149,\n          aliasid: 18149,\n          contactname: 'Labeyrie, Laurent',\n          contactstatusid: 7,\n          familyname: 'Labeyrie',\n          leadinginitials: 'L.',\n          givennames: 'Laurent',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-05T21:03:20.000Z',\n          recdatemodified: '2022-04-05T21:03:21.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16703,\n          aliasid: 16703,\n          contactname: 'Irion, Georg',\n          contactstatusid: 6,\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-12-01T21:24:29.000Z',\n          recdatemodified: '2020-12-01T21:24:31.000Z',\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          aliasid: 2961,\n          contactname: 'Ruff, B.',\n          contactstatusid: 7,\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          aliasid: 16633,\n          contactname: 'Castro, H.',\n          contactstatusid: 7,\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-11-18T01:55:19.000Z',\n          recdatemodified: '2020-11-18T01:55:20.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          aliasid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          contactstatusid: 2,\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-10-18T03:58:42.000Z',\n          recdatemodified: '2017-10-18T03:58:42.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          aliasid: 1101,\n          contactname: 'Iversen, J.',\n          contactstatusid: 2,\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          aliasid: 599,\n          contactname: 'Farrington, A.',\n          contactstatusid: 7,\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          aliasid: 11460,\n          contactname: 'Waldrop, J. S.',\n          contactstatusid: 7,\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-06-08T08:33:33.000Z',\n          recdatemodified: '2018-06-08T08:33:34.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          aliasid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          contactstatusid: 1,\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-05-15T22:39:25.000Z',\n          recdatemodified: '2017-05-15T22:39:26.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          aliasid: 1789,\n          contactname: 'Bade, M. J.',\n          contactstatusid: 7,\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          aliasid: 2769,\n          contactname: 'Carraway, L. N.',\n          contactstatusid: 7,\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          aliasid: 7564,\n          contactname: 'Santos, F. R.',\n          contactstatusid: 7,\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2016-02-12T12:11:11.000Z',\n          recdatemodified: '2016-02-12T12:11:12.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          aliasid: 2247,\n          contactname: 'Fortsch, D. E.',\n          contactstatusid: 7,\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 18160,\n          aliasid: 18160,\n          contactname: 'Andruleit, Harald',\n          contactstatusid: 7,\n          familyname: 'Andruleit',\n          leadinginitials: 'H.',\n          givennames: 'Harald',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-07T01:14:54.000Z',\n          recdatemodified: '2022-04-07T01:14:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          aliasid: 4083,\n          contactname: 'Hudon, C.',\n          contactstatusid: 7,\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'contact'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: data.result[0].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[0].contactstatus should be integer, data.result[0].fax should be string, data.result[0].notes should be string, data.result[0].suffix should be string, data.result[0].url should be string, data.result[1].address should be string, data.result[1].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[1].contactstatus should be integer, data.result[1].phone should be string, data.result[1].fax should be string, data.result[1].notes should be string, data.result[1].suffix should be string, data.result[1].title should be string, data.result[1].url should be string, data.result[2].address should be string, data.result[2].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[2].contactstatus should be integer, data.result[2].phone should be string, data.result[2].fax should be string, data.result[2].notes should be string, data.result[2].suffix should be string, data.result[2].title should be string, data.result[2].url should be string, data.result[3].address should be string, data.result[3].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[3].contactstatus should be integer, data.result[3].phone should be string, data.result[3].fax should be string, data.result[3].notes should be string, data.result[3].suffix should be string, data.result[3].title should be string, data.result[3].url should be string, data.result[4].address should be string, data.result[4].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[4].contactstatus should be integer, data.result[4].phone should be string, data.result[4].fax should be string, data.result[4].notes should be string, data.result[4].suffix should be string, data.result[4].title should be string, data.result[4].url should be string, data.result[5].address should be string, data.result[5].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[5].contactstatus should be integer, data.result[5].phone should be string, data.result[5].fax should be string, data.result[5].notes should be string, data.result[5].suffix should be string, data.result[5].title should be string, data.result[5].url should be string, data.result[6].address should be string, data.result[6].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[6].contactstatus should be integer, data.result[6].phone should be string, data.result[6].fax should be string, data.result[6].notes should be string, data.result[6].suffix should be string, data.result[6].title should be string, data.result[6].url should be string, data.result[7].address should be string, data.result[7].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[7].contactstatus should be integer, data.result[7].phone should be string, data.result[7].fax should be string, data.result[7].notes should be string, data.result[7].suffix should be string, data.result[7].title should be string, data.result[7].url should be string, data.result[8].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[8].contactstatus should be integer, data.result[8].phone should be string, data.result[8].fax should be string, data.result[8].notes should be string, data.result[8].suffix should be string, data.result[8].title should be string, data.result[8].url should be string, data.result[9].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[9].contactstatus should be integer, data.result[9].phone should be string, data.result[9].fax should be string, data.result[9].notes should be string, data.result[9].suffix should be string, data.result[9].url should be string, data.result[10].address should be string, data.result[10].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[10].contactstatus should be integer, data.result[10].phone should be string, data.result[10].fax should be string, data.result[10].notes should be string, data.result[10].suffix should be string, data.result[10].title should be string, data.result[10].url should be string, data.result[11].address should be string, data.result[11].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[11].contactstatus should be integer, data.result[11].phone should be string, data.result[11].fax should be string, data.result[11].notes should be string, data.result[11].suffix should be string, data.result[11].url should be string, data.result[12].address should be string, data.result[12].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[12].contactstatus should be integer, data.result[12].phone should be string, data.result[12].fax should be string, data.result[12].notes should be string, data.result[12].suffix should be string, data.result[12].title should be string, data.result[12].url should be string, data.result[13].address should be string, data.result[13].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[13].contactstatus should be integer, data.result[13].phone should be string, data.result[13].fax should be string, data.result[13].notes should be string, data.result[13].suffix should be string, data.result[13].title should be string, data.result[13].url should be string, data.result[14].address should be string, data.result[14].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[14].contactstatus should be integer, data.result[14].phone should be string, data.result[14].fax should be string, data.result[14].notes should be string, data.result[14].suffix should be string, data.result[14].title should be string, data.result[14].url should be string, data.result[15].address should be string, data.result[15].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[15].contactstatus should be integer, data.result[15].phone should be string, data.result[15].fax should be string, data.result[15].notes should be string, data.result[15].suffix should be string, data.result[15].url should be string, data.result[16].address should be string, data.result[16].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[16].contactstatus should be integer, data.result[16].phone should be string, data.result[16].fax should be string, data.result[16].notes should be string, data.result[16].suffix should be string, data.result[16].title should be string, data.result[16].url should be string, data.result[17].address should be string, data.result[17].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[17].contactstatus should be integer, data.result[17].phone should be string, data.result[17].fax should be string, data.result[17].notes should be string, data.result[17].suffix should be string, data.result[17].title should be string, data.result[17].url should be string, data.result[18].address should be string, data.result[18].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[18].contactstatus should be integer, data.result[18].phone should be string, data.result[18].fax should be string, data.result[18].notes should be string, data.result[18].suffix should be string, data.result[18].title should be string, data.result[18].url should be string, data.result[19].address should be string, data.result[19].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[19].contactstatus should be integer, data.result[19].phone should be string, data.result[19].fax should be string, data.result[19].notes should be string, data.result[19].suffix should be string, data.result[19].title should be string, data.result[19].url should be string, data.result[20].address should be string, data.result[20].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[20].contactstatus should be integer, data.result[20].phone should be string, data.result[20].fax should be string, data.result[20].notes should be string, data.result[20].suffix should be string, data.result[20].title should be string, data.result[20].url should be string, data.result[21].address should be string, data.result[21].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[21].contactstatus should be integer, data.result[21].phone should be string, data.result[21].fax should be string, data.result[21].notes should be string, data.result[21].suffix should be string, data.result[21].title should be string, data.result[21].url should be string, data.result[22].address should be string, data.result[22].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[22].contactstatus should be integer, data.result[22].phone should be string, data.result[22].fax should be string, data.result[22].notes should be string, data.result[22].suffix should be string, data.result[22].title should be string, data.result[22].url should be string, data.result[23].address should be string, data.result[23].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[23].contactstatus should be integer, data.result[23].phone should be string, data.result[23].fax should be string, data.result[23].notes should be string, data.result[23].suffix should be string, data.result[23].title should be string, data.result[23].url should be string, data.result[24].address should be string, data.result[24].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[24].contactstatus should be integer, data.result[24].phone should be string, data.result[24].fax should be string, data.result[24].notes should be string, data.result[24].suffix should be string, data.result[24].title should be string, data.result[24].url should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: 25,\n        offset: 0\n      },\n      result: [\n        {\n          contactid: 251,\n          aliasid: 251,\n          contactname: 'Schoenweter, James',\n          contactstatusid: 1,\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          aliasid: 2848,\n          contactname: 'Parry, W. J.',\n          contactstatusid: 7,\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          aliasid: 3565,\n          contactname: 'Marvan, P.',\n          contactstatusid: 7,\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          aliasid: 2026,\n          contactname: 'Pinsof, J. D.',\n          contactstatusid: 7,\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          aliasid: 10295,\n          contactname: 'Cambon, Geneviève',\n          contactstatusid: 7,\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-04-12T16:07:37.000Z',\n          recdatemodified: '2018-04-12T16:07:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          aliasid: 2024,\n          contactname: 'Bell, G. L.',\n          contactstatusid: 7,\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          aliasid: 12752,\n          contactname: 'Zhou, Shanfu',\n          contactstatusid: 7,\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-11-05T04:45:38.000Z',\n          recdatemodified: '2018-11-05T04:45:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          aliasid: 17928,\n          contactname: 'Räsänen, Satu',\n          contactstatusid: 7,\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-01-30T16:45:55.000Z',\n          recdatemodified: '2022-01-30T16:45:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          aliasid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          contactstatusid: 1,\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          aliasid: 7247,\n          contactname: 'Andersson, Sofia',\n          contactstatusid: 1,\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          recdatecreated: '2015-05-25T00:15:50.000Z',\n          recdatemodified: '2015-05-25T00:15:51.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 18149,\n          aliasid: 18149,\n          contactname: 'Labeyrie, Laurent',\n          contactstatusid: 7,\n          familyname: 'Labeyrie',\n          leadinginitials: 'L.',\n          givennames: 'Laurent',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-05T21:03:20.000Z',\n          recdatemodified: '2022-04-05T21:03:21.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16703,\n          aliasid: 16703,\n          contactname: 'Irion, Georg',\n          contactstatusid: 6,\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-12-01T21:24:29.000Z',\n          recdatemodified: '2020-12-01T21:24:31.000Z',\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          aliasid: 2961,\n          contactname: 'Ruff, B.',\n          contactstatusid: 7,\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          aliasid: 16633,\n          contactname: 'Castro, H.',\n          contactstatusid: 7,\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-11-18T01:55:19.000Z',\n          recdatemodified: '2020-11-18T01:55:20.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          aliasid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          contactstatusid: 2,\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-10-18T03:58:42.000Z',\n          recdatemodified: '2017-10-18T03:58:42.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          aliasid: 1101,\n          contactname: 'Iversen, J.',\n          contactstatusid: 2,\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          aliasid: 599,\n          contactname: 'Farrington, A.',\n          contactstatusid: 7,\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          aliasid: 11460,\n          contactname: 'Waldrop, J. S.',\n          contactstatusid: 7,\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-06-08T08:33:33.000Z',\n          recdatemodified: '2018-06-08T08:33:34.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          aliasid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          contactstatusid: 1,\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-05-15T22:39:25.000Z',\n          recdatemodified: '2017-05-15T22:39:26.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          aliasid: 1789,\n          contactname: 'Bade, M. J.',\n          contactstatusid: 7,\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          aliasid: 2769,\n          contactname: 'Carraway, L. N.',\n          contactstatusid: 7,\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          aliasid: 7564,\n          contactname: 'Santos, F. R.',\n          contactstatusid: 7,\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2016-02-12T12:11:11.000Z',\n          recdatemodified: '2016-02-12T12:11:12.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          aliasid: 2247,\n          contactname: 'Fortsch, D. E.',\n          contactstatusid: 7,\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 18160,\n          aliasid: 18160,\n          contactname: 'Andruleit, Harald',\n          contactstatusid: 7,\n          familyname: 'Andruleit',\n          leadinginitials: 'H.',\n          givennames: 'Harald',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-07T01:14:54.000Z',\n          recdatemodified: '2022-04-07T01:14:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          aliasid: 4083,\n          contactname: 'Hudon, C.',\n          contactstatusid: 7,\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'contact'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "f039b25f-20a8-4a35-b944-a7e3f6c3c39e",
              "parentUUID": "808a9dac-7286-4f62-a125-11a37abcc8d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f039b25f-20a8-4a35-b944-a7e3f6c3c39e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fe5ee488-64b2-4c08-9e4e-39f5c3a334e3",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 110,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        aliasid: 1,\n        contactname: 'International Organization for Standardization',\n        contactstatusid: 4,\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        recdatecreated: '2013-09-30T21:02:35.000Z',\n        recdatemodified: '2013-09-30T21:02:35.000Z',\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        aliasid: 1,\n        contactname: 'International Organization for Standardization',\n        contactstatusid: 4,\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        recdatecreated: '2013-09-30T21:02:35.000Z',\n        recdatemodified: '2013-09-30T21:02:35.000Z',\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "d7baff39-6630-4682-a872-6d81908a1fcd",
              "parentUUID": "fe5ee488-64b2-4c08-9e4e-39f5c3a334e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d7baff39-6630-4682-a872-6d81908a1fcd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bfea1005-6e93-40e9-b25b-47f8a65980e4",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 181,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d9cdb2ad-cc0c-4a98-86a8-86465c9c27c2",
              "parentUUID": "bfea1005-6e93-40e9-b25b-47f8a65980e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9cdb2ad-cc0c-4a98-86a8-86465c9c27c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 181,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "841af9fc-d527-4d72-9959-bf4e2b366286",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3806,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5c3ebe07-3a0a-438a-b984-71760eb423e2",
              "parentUUID": "841af9fc-d527-4d72-9959-bf4e2b366286",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c3ebe07-3a0a-438a-b984-71760eb423e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3806,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3a55d8db-575f-4ceb-abcc-b2df2cdef7a6",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 728,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'Datasets'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'Datasets'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "11cb48b7-c20b-43ef-b9bd-d545901a8286",
              "parentUUID": "3a55d8db-575f-4ceb-abcc-b2df2cdef7a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "11cb48b7-c20b-43ef-b9bd-d545901a8286"
          ],
          "pending": [],
          "skipped": [],
          "duration": 728,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bba65825-c0aa-4e9a-b3ea-caf35d3bc9a3",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 743,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "92e77a98-077c-4afb-9f01-022c39d41d2d",
              "parentUUID": "bba65825-c0aa-4e9a-b3ea-caf35d3bc9a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92e77a98-077c-4afb-9f01-022c39d41d2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 743,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "29c2a659-c7d6-4fd6-bd8a-5c8c513be209",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a0a20f23-e1af-4cb6-a6d8-ccdc0efeab9b",
              "parentUUID": "29c2a659-c7d6-4fd6-bd8a-5c8c513be209",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0a20f23-e1af-4cb6-a6d8-ccdc0efeab9b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "14b0e125-8afd-4b57-847e-b3c60c284202",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "476cdc4c-b1a4-4354-876c-ea7fe011bb38",
              "parentUUID": "14b0e125-8afd-4b57-847e-b3c60c284202",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "476cdc4c-b1a4-4354-876c-ea7fe011bb38"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6de92962-931b-48f0-9adf-60d65c02079e",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bcbe9550-aad5-4877-912b-201534c02c08",
              "parentUUID": "6de92962-931b-48f0-9adf-60d65c02079e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bcbe9550-aad5-4877-912b-201534c02c08"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c1889d50-d8f6-4aba-bca1-35206be5f1aa",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2f5e5e60-3eb8-4f5e-924b-1b394bba9578",
              "parentUUID": "c1889d50-d8f6-4aba-bca1-35206be5f1aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f5e5e60-3eb8-4f5e-924b-1b394bba9578"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 115,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "33cf42ea-c92d-409f-8842-337749c80fa7",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "93f05df0-5a4d-4675-b2be-d61d47e8bab0",
              "parentUUID": "33cf42ea-c92d-409f-8842-337749c80fa7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93f05df0-5a4d-4675-b2be-d61d47e8bab0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "16ef115c-0b80-43f7-b5df-271b9bd1b3b2",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "21366fe0-f917-4b95-b3f1-48341ab90cfd",
              "parentUUID": "16ef115c-0b80-43f7-b5df-271b9bd1b3b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21366fe0-f917-4b95-b3f1-48341ab90cfd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "89731fcf-960a-4960-bcbb-9ff7138d7192",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 128,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a16d1b3a-dc4f-4d65-b519-fae9177f1174",
              "parentUUID": "89731fcf-960a-4960-bcbb-9ff7138d7192",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a16d1b3a-dc4f-4d65-b519-fae9177f1174"
          ],
          "pending": [],
          "skipped": [],
          "duration": 128,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dfd74092-ab51-493a-b77e-4a4884d2ab4b",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "82b00252-f531-4857-a09d-812fa0eb45a2",
              "parentUUID": "dfd74092-ab51-493a-b77e-4a4884d2ab4b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82b00252-f531-4857-a09d-812fa0eb45a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1569,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c99aa801-4718-48ac-872d-29995956ab2c",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 743,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "bf9ed9e5-c5a0-4d6f-a1b5-5b660954586c",
              "parentUUID": "c99aa801-4718-48ac-872d-29995956ab2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bf9ed9e5-c5a0-4d6f-a1b5-5b660954586c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 743,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f08aa098-6709-43e8-9916-fabdbfe2e38c",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 107,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'datasettypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'sites' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'lithostrat' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'fractiondated' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'lithology' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'isostandards' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isostratdata' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimens' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'agetypes' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'publications' },\n      { tablename: 'chronologies' },\n      { tablename: 'collectionunits' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'analysisunits' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'contacts' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeages' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'tephras' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'sitestemp' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'depagents' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'specimendates' },\n      { tablename: 'relativechronology' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'datasettypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'sites' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'lithostrat' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'fractiondated' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'lithology' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'isostandards' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isostratdata' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimens' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'agetypes' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'publications' },\n      { tablename: 'chronologies' },\n      { tablename: 'collectionunits' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'analysisunits' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'contacts' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeages' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'tephras' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'sitestemp' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'depagents' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'specimendates' },\n      { tablename: 'relativechronology' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "89dfcee7-e8b3-4844-831e-d379e0a86590",
              "parentUUID": "f08aa098-6709-43e8-9916-fabdbfe2e38c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "89dfcee7-e8b3-4844-831e-d379e0a86590"
          ],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fe307a50-a6b1-4646-8a16-82c756fb9696",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 116,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'datasettypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'sites' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'lithostrat' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'fractiondated' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'lithology' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'isostandards' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isostratdata' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimens' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'agetypes' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'publications' },\n      { tablename: 'chronologies' },\n      { tablename: 'collectionunits' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'analysisunits' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'contacts' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeages' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'tephras' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'sitestemp' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'depagents' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'specimendates' },\n      { tablename: 'relativechronology' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'datasettypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'sites' },\n      { tablename: 'chroncontroltypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'lithostrat' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'isometadata' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'fractiondated' },\n      { tablename: 'collectors' },\n      { tablename: 'contextsdatasettypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'publicationauthors' },\n      { tablename: 'constituentdatabases' },\n      { tablename: 'lithology' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'aggregatesamples' },\n      { tablename: 'isostandards' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isostratdata' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimens' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'agetypes' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'samplekeywords' },\n      { tablename: 'publications' },\n      { tablename: 'chronologies' },\n      { tablename: 'collectionunits' },\n      { tablename: 'sitegeopolitical' },\n      { tablename: 'analysisunitlithostrat' },\n      { tablename: 'contactstatuses' },\n      { tablename: 'radiocarboncalibration' },\n      { tablename: 'sampleages' },\n      { tablename: 'datasetsubmissions' },\n      { tablename: 'analysisunits' },\n      { tablename: 'chroncontrolaccuracydirections' },\n      { tablename: 'chroncontrolaccuracydistributions' },\n      { tablename: 'chroncontrolaccuracyranks' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'chroncontrolranks' },\n      { tablename: 'datasetsubmissiontypes' },\n      { tablename: 'datasettaxagrouptypes' },\n      { tablename: 'elementportions' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'elementtypes' },\n      { tablename: 'embargo' },\n      { tablename: 'eventpublications' },\n      { tablename: 'events' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'contacts' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeages' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'tephras' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'chroncontrolprecisionranks' },\n      { tablename: 'aggregatechronologies' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'sitestemp' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'depagents' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'specimendates' },\n      { tablename: 'relativechronology' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "5fff1fc6-f695-455f-ba38-8d2bfc70608a",
              "parentUUID": "fe307a50-a6b1-4646-8a16-82c756fb9696",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5fff1fc6-f695-455f-ba38-8d2bfc70608a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6253187b-9350-4499-b71b-9ffd44422b3a",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 808,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c91f80de-19ed-4a9c-8761-7822377cbfe7",
              "parentUUID": "6253187b-9350-4499-b71b-9ffd44422b3a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c91f80de-19ed-4a9c-8761-7822377cbfe7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 808,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4bfc6262-c757-414b-9e85-d1128d5d51d9",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f51ae154-ecff-4f92-be8b-a9bf87b01d20",
              "parentUUID": "4bfc6262-c757-414b-9e85-d1128d5d51d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f51ae154-ecff-4f92-be8b-a9bf87b01d20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a448b2eb-8250-403c-b2a5-498efb21f1b0",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "f9a18fdf-f213-47eb-8e40-94a39bbf0286",
              "parentUUID": "a448b2eb-8250-403c-b2a5-498efb21f1b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f9a18fdf-f213-47eb-8e40-94a39bbf0286"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7b9c4215-c3b2-4775-9362-a8620801dc5b",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fb072d28-9e53-4989-8ee6-595cd048f0ae",
              "parentUUID": "7b9c4215-c3b2-4775-9362-a8620801dc5b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb072d28-9e53-4989-8ee6-595cd048f0ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 183,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0542b96d-33c2-428d-9e0e-186d83190240",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 968,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: { body: { status: 'success', data: [], message: 'Retrieved results' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: { body: { status: 'success', data: [], message: 'Retrieved results' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e7b757b6-9375-45e2-b9f1-72f610148043",
              "parentUUID": "0542b96d-33c2-428d-9e0e-186d83190240",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e7b757b6-9375-45e2-b9f1-72f610148043"
          ],
          "pending": [],
          "skipped": [],
          "duration": 968,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6c220562-a6a2-4af9-aad9-cf29d05b4a66",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c5bf880f-dae5-4b96-a6fc-c7f24094df13",
              "parentUUID": "6c220562-a6a2-4af9-aad9-cf29d05b4a66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5bf880f-dae5-4b96-a6fc-c7f24094df13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 220,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e5630ebc-f83a-4dee-81f8-422ddf07f06b",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 394,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "da21b89b-59e5-42f0-bd92-fe6927b685f6",
              "parentUUID": "e5630ebc-f83a-4dee-81f8-422ddf07f06b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "da21b89b-59e5-42f0-bd92-fe6927b685f6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 394,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fcc42a69-6eb8-44d9-a32a-cd053dae0fb9",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7fcaddb2-981f-4e7c-84e7-2afb572dd33a",
              "parentUUID": "fcc42a69-6eb8-44d9-a32a-cd053dae0fb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7fcaddb2-981f-4e7c-84e7-2afb572dd33a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a51563a2-d6e3-47ed-841c-5a5107a5ed27",
          "title": "GET /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "40b20c13-cda6-4718-aff2-0bf00a463e22",
              "parentUUID": "a51563a2-d6e3-47ed-841c-5a5107a5ed27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "40b20c13-cda6-4718-aff2-0bf00a463e22"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8f253d02-740d-46fd-a72c-7f460f66b76e",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "882572c4-6309-4151-ba45-49abaf1d6f06",
              "parentUUID": "8f253d02-740d-46fd-a72c-7f460f66b76e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "882572c4-6309-4151-ba45-49abaf1d6f06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8af398e6-a86b-47a3-b255-41322f4debfc",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "34cd84c6-a3a4-4298-bb6c-744491e009de",
              "parentUUID": "8af398e6-a86b-47a3-b255-41322f4debfc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34cd84c6-a3a4-4298-bb6c-744491e009de"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fbd8d040-d2f6-43df-bfec-0b82b6c349c1",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 761,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7d8d391d-278c-4371-b1bc-bb74088f4828",
              "parentUUID": "fbd8d040-d2f6-43df-bfec-0b82b6c349c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d8d391d-278c-4371-b1bc-bb74088f4828"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 761,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "113785d6-9ba8-4f1f-a1cd-742546e60305",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "92405adb-df09-42c0-b6de-4e4a628e7447",
              "parentUUID": "113785d6-9ba8-4f1f-a1cd-742546e60305",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92405adb-df09-42c0-b6de-4e4a628e7447"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "896b7709-eea3-417d-9b5b-d350c77e89df",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 613,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "8ccef0d6-3f02-4548-b082-e04e3db384dd",
              "parentUUID": "896b7709-eea3-417d-9b5b-d350c77e89df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ccef0d6-3f02-4548-b082-e04e3db384dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 613,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2c7836ab-67fd-4858-8a9c-bd873371002a",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e9aed936-75da-47cb-9067-560f0cc57af3",
              "parentUUID": "2c7836ab-67fd-4858-8a9c-bd873371002a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9aed936-75da-47cb-9067-560f0cc57af3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a3243f82-e920-4322-9bea-d6751f0061ce",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0c25afbc-fbbb-4ee5-80a9-4619c1c5b10f",
              "parentUUID": "a3243f82-e920-4322-9bea-d6751f0061ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c25afbc-fbbb-4ee5-80a9-4619c1c5b10f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a3358453-acf6-401f-b72f-6fb3c4795e3e",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "60043f68-88f0-4b4f-9ea3-d8d3e5944504",
              "parentUUID": "a3358453-acf6-401f-b72f-6fb3c4795e3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60043f68-88f0-4b4f-9ea3-d8d3e5944504"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 208,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cdb1bc6a-3406-4389-91fb-2e622fb234d8",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "4270a746-c543-4ae6-ba92-1777f6317656",
              "parentUUID": "cdb1bc6a-3406-4389-91fb-2e622fb234d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4270a746-c543-4ae6-ba92-1777f6317656"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1170,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c73b1edc-21a1-49ba-afeb-c13a11e698c9",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 751,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "df248fda-8185-42a8-8f96-cc935554c352",
              "parentUUID": "c73b1edc-21a1-49ba-afeb-c13a11e698c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df248fda-8185-42a8-8f96-cc935554c352"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 751,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eac8c77b-661a-413e-aab7-2be6576c3ec1",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "aece1267-e787-4618-9ece-b50148b0e6b2",
              "parentUUID": "eac8c77b-661a-413e-aab7-2be6576c3ec1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aece1267-e787-4618-9ece-b50148b0e6b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "db61218c-841e-4d68-b9f6-e1b2a914e71a",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 263,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "87cd3e17-d140-4791-937e-e0f2c24cb852",
              "parentUUID": "db61218c-841e-4d68-b9f6-e1b2a914e71a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87cd3e17-d140-4791-937e-e0f2c24cb852"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 263,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "02262e84-fae5-4163-a33a-fafb65528a8a",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0f443dd4-92f0-4836-8890-2058357a6137",
              "parentUUID": "02262e84-fae5-4163-a33a-fafb65528a8a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f443dd4-92f0-4836-8890-2058357a6137"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 258,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "19773a84-ef61-49d5-bdfb-d3b391776809",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 5565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ae29f912-9836-4f40-8b4b-01eef1d472dd",
              "parentUUID": "19773a84-ef61-49d5-bdfb-d3b391776809",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae29f912-9836-4f40-8b4b-01eef1d472dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5565,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "67a161ca-fe2d-4388-a3b6-0b53d537d1ce",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 704,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3a6633a6-c63f-4ad9-8f43-f247a05cad3b",
              "parentUUID": "67a161ca-fe2d-4388-a3b6-0b53d537d1ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a6633a6-c63f-4ad9-8f43-f247a05cad3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 704,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3008873c-137f-4788-92ec-2ec41897e5c9",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "38fe6604-9e5c-44dd-8080-88a9eb7cb155",
              "parentUUID": "3008873c-137f-4788-92ec-2ec41897e5c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38fe6604-9e5c-44dd-8080-88a9eb7cb155"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d6600989-6233-490b-bb02-fd4abc2a0763",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 29082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "057e7860-fabe-4422-b9cd-02ac32fe94c9",
              "parentUUID": "d6600989-6233-490b-bb02-fd4abc2a0763",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "057e7860-fabe-4422-b9cd-02ac32fe94c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29082,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cab15d7f-245f-4e2d-a50a-c3b4b5b7cb95",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1333:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "e888e90f-c4bf-40f6-84a3-e28b394ef7c1",
              "parentUUID": "cab15d7f-245f-4e2d-a50a-c3b4b5b7cb95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e888e90f-c4bf-40f6-84a3-e28b394ef7c1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9835b8dc-ec0d-4482-adc0-2ba73b1dc574",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 456,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0bd8b1c1-d873-4ea4-8742-05bf38ba6d14",
              "parentUUID": "9835b8dc-ec0d-4482-adc0-2ba73b1dc574",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0bd8b1c1-d873-4ea4-8742-05bf38ba6d14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 456,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "122fbab1-10c3-4270-9f5a-94d6c6d3b1f8",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "fa1ee19d-6483-4e96-b9ee-fafff363a328",
              "parentUUID": "122fbab1-10c3-4270-9f5a-94d6c6d3b1f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 442,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "f58fff2c-e73b-4631-aa08-e737098dc48a",
              "parentUUID": "122fbab1-10c3-4270-9f5a-94d6c6d3b1f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "6fdbf976-ee33-44aa-981b-13db4b1efd3a",
              "parentUUID": "122fbab1-10c3-4270-9f5a-94d6c6d3b1f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "16093b11-5dfc-4292-97ed-d0a9d055e950",
              "parentUUID": "122fbab1-10c3-4270-9f5a-94d6c6d3b1f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 164,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6e29e844-1a09-4385-aeb1-630bbcbde4eb",
              "parentUUID": "122fbab1-10c3-4270-9f5a-94d6c6d3b1f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa1ee19d-6483-4e96-b9ee-fafff363a328",
            "f58fff2c-e73b-4631-aa08-e737098dc48a",
            "6fdbf976-ee33-44aa-981b-13db4b1efd3a",
            "16093b11-5dfc-4292-97ed-d0a9d055e950",
            "6e29e844-1a09-4385-aeb1-630bbcbde4eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 808,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "03118c42-5bcf-4c59-85ea-5f83f441ce6c",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 514,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c455b8e7-2694-455a-9d55-a967645dd26d",
              "parentUUID": "03118c42-5bcf-4c59-85ea-5f83f441ce6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "57c5badf-3aa0-4990-bdb5-a975a79cf4ca",
              "parentUUID": "03118c42-5bcf-4c59-85ea-5f83f441ce6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "583eeecb-29fd-424d-aeb7-9df09456c329",
              "parentUUID": "03118c42-5bcf-4c59-85ea-5f83f441ce6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c455b8e7-2694-455a-9d55-a967645dd26d",
            "57c5badf-3aa0-4990-bdb5-a975a79cf4ca",
            "583eeecb-29fd-424d-aeb7-9df09456c329"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3199,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ca66f52a-46bf-4881-ba43-bec7cd0c16b3",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 476,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "652370e3-e932-4234-88a7-9a0dc223fc6c",
              "parentUUID": "ca66f52a-46bf-4881-ba43-bec7cd0c16b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 1366,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "7f76a133-1d7e-4644-a565-b70b0632dcd5",
              "parentUUID": "ca66f52a-46bf-4881-ba43-bec7cd0c16b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "7b7edfdb-c611-4eed-bd01-5faede15d9fd",
              "parentUUID": "ca66f52a-46bf-4881-ba43-bec7cd0c16b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1314,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "0bc92eda-6edd-4053-b23c-435881b06c6c",
              "parentUUID": "ca66f52a-46bf-4881-ba43-bec7cd0c16b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "652370e3-e932-4234-88a7-9a0dc223fc6c",
            "7f76a133-1d7e-4644-a565-b70b0632dcd5",
            "7b7edfdb-c611-4eed-bd01-5faede15d9fd",
            "0bc92eda-6edd-4053-b23c-435881b06c6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4425,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d0c35987-a381-483b-98dd-288390554ec4",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query returns the first 25 taxa.",
              "fullTitle": "Get taxon data: An empty query returns the first 25 taxa.",
              "timedOut": false,
              "duration": 326,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(200, done);",
              "err": {},
              "uuid": "9b58f2e4-0db9-4fcc-99ae-3861fafde7a6",
              "parentUUID": "d0c35987-a381-483b-98dd-288390554ec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 12);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "61d47a42-c61e-428d-b8ba-824bef994999",
              "parentUUID": "d0c35987-a381-483b-98dd-288390554ec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "0654b061-48ba-4e0a-8527-4bd386609280",
              "parentUUID": "d0c35987-a381-483b-98dd-288390554ec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 162,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "4caa93aa-e251-4358-a6aa-b78f966b5c68",
              "parentUUID": "d0c35987-a381-483b-98dd-288390554ec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 408,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "c54d49a4-0215-4768-929d-42796c708c3c",
              "parentUUID": "d0c35987-a381-483b-98dd-288390554ec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "64bddcb1-8cf0-48be-84f2-6c9fe911f2db",
              "parentUUID": "d0c35987-a381-483b-98dd-288390554ec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 25);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "a1c8c9c5-6543-42b0-857b-01c679410d97",
              "parentUUID": "d0c35987-a381-483b-98dd-288390554ec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 30);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "d3880ee2-49f7-40e0-b410-bcbc20176110",
              "parentUUID": "d0c35987-a381-483b-98dd-288390554ec4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b58f2e4-0db9-4fcc-99ae-3861fafde7a6",
            "61d47a42-c61e-428d-b8ba-824bef994999",
            "0654b061-48ba-4e0a-8527-4bd386609280",
            "4caa93aa-e251-4358-a6aa-b78f966b5c68",
            "c54d49a4-0215-4768-929d-42796c708c3c",
            "64bddcb1-8cf0-48be-84f2-6c9fe911f2db",
            "a1c8c9c5-6543-42b0-857b-01c679410d97",
            "d3880ee2-49f7-40e0-b410-bcbc20176110"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1706,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e6c4435a-2842-475c-8bb8-b8361630e164",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d446b841-0d03-42ce-8f5d-cd82e6e97e2a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "34d14d3e-ddfc-4428-8426-de2ad966cee6",
                  "parentUUID": "d446b841-0d03-42ce-8f5d-cd82e6e97e2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34d14d3e-ddfc-4428-8426-de2ad966cee6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "95033d34-149d-4bb0-a5c7-a0da700d87d4",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ca2bc80-d9d3-4fad-96af-bf039e0e7cd6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "33df1079-d526-40da-a4f9-e915c20792c5",
                  "parentUUID": "9ca2bc80-d9d3-4fad-96af-bf039e0e7cd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33df1079-d526-40da-a4f9-e915c20792c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b0981542-0b1b-4a83-bfd6-04be10f78195",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "683b0607-f047-4539-9723-97121378233c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c168ed3c-94e4-4ef1-9a76-902db6be8136",
                  "parentUUID": "683b0607-f047-4539-9723-97121378233c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c168ed3c-94e4-4ef1-9a76-902db6be8136"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b323d270-7104-42d0-9432-86d05a462416",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e31839f0-1ea6-405c-b35d-0d1ba5d29c8f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1742f61f-7e38-46b6-83ac-0ce1a956509e",
                  "parentUUID": "e31839f0-1ea6-405c-b35d-0d1ba5d29c8f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1742f61f-7e38-46b6-83ac-0ce1a956509e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e62bc71a-a0a9-4c65-8635-7ac57bfd0762",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3abebe11-d797-463e-85ad-bbecfdb59b5b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1015,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0cb4af10-9b62-4ea0-bb4c-7068540cf178",
                  "parentUUID": "3abebe11-d797-463e-85ad-bbecfdb59b5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0cb4af10-9b62-4ea0-bb4c-7068540cf178"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1015,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f792d510-3eca-427d-bdad-fd62e0ca6ba6",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c20725c1-130b-4e1a-8c4c-4447ea410757",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 735,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2122d491-d2a5-484f-af12-c2ff5c3b2204",
                  "parentUUID": "c20725c1-130b-4e1a-8c4c-4447ea410757",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2122d491-d2a5-484f-af12-c2ff5c3b2204"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 735,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2f073499-844a-47ea-b0ed-332dd22122cb",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "396be5a6-132e-4627-8605-b6cf70709e80",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 134,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 9933, 'gpname': 'dolor', 'rank': 2, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e8ab5a0a-ed5b-4168-bc27-ffd5d44596f7",
                  "parentUUID": "396be5a6-132e-4627-8605-b6cf70709e80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8ab5a0a-ed5b-4168-bc27-ffd5d44596f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 134,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "af57d4ce-a1bf-40a6-84c3-ac207ce5b808",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "041b362e-e5f4-4523-97a2-0d95aaba54b9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/4005', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "78dec0e8-7ae3-44f0-b403-61e53f9e8c14",
                  "parentUUID": "041b362e-e5f4-4523-97a2-0d95aaba54b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78dec0e8-7ae3-44f0-b403-61e53f9e8c14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ae30d084-1dde-4604-a9ed-1aac1245f2b1",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "759c3df2-d3bd-4a1a-bb1b-74961c4ce4df",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fc1c37f2-f799-468c-ad3c-f55ec021d03e",
                  "parentUUID": "759c3df2-d3bd-4a1a-bb1b-74961c4ce4df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc1c37f2-f799-468c-ad3c-f55ec021d03e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c4982de4-688d-4e6c-b7e3-2f516a1013e3",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6755b100-faba-4875-9d18-f30795284145",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2ff37db6-ed26-490c-bf02-1d7f3a344986",
                  "parentUUID": "6755b100-faba-4875-9d18-f30795284145",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ff37db6-ed26-490c-bf02-1d7f3a344986"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a1f2350e-ef3a-4fc3-a2c8-e44eb87d1de5",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90b877bf-4ce8-4445-b349-c75161191e0f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "69895174-b7d2-40c3-b87c-1019860f7639",
                  "parentUUID": "90b877bf-4ce8-4445-b349-c75161191e0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69895174-b7d2-40c3-b87c-1019860f7639"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1796232b-38ef-4d97-b968-0e60ccdd2673",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30d7b5a1-116d-48d4-98a2-b7b696c04aef",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6f37adff-407f-4149-9e33-d2bc2bb9d131",
                  "parentUUID": "30d7b5a1-116d-48d4-98a2-b7b696c04aef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f37adff-407f-4149-9e33-d2bc2bb9d131"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "41b85407-0aa6-45c0-9096-47ec659f321f",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f20cf916-1123-496f-b4a4-2e8e4d04363f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9c0db49e-7282-4e28-98f7-19604ed3c332",
                  "parentUUID": "f20cf916-1123-496f-b4a4-2e8e4d04363f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c0db49e-7282-4e28-98f7-19604ed3c332"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "394245aa-c581-41a3-9a95-41ac37a7affe",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3618286d-33c6-42d2-91ae-e0e6ed482b93",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e139f7c4-b10a-46b0-93d6-4cd2d4d6a954",
                  "parentUUID": "3618286d-33c6-42d2-91ae-e0e6ed482b93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e139f7c4-b10a-46b0-93d6-4cd2d4d6a954"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "47b6178a-8006-43b1-9754-acbd6fa5a32e",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c6069ede-bd4f-479c-a491-d736bd2db0e6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3583e48c-58b4-4bb1-9377-c51d8c1e34b9",
                  "parentUUID": "c6069ede-bd4f-479c-a491-d736bd2db0e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3583e48c-58b4-4bb1-9377-c51d8c1e34b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b9c70277-fff0-4c29-9efe-175a830b800b",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "badd4e74-1d41-4366-a31e-c4dffa61b8b7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6e865fdb-cd46-4c3a-8744-e57bb161635f",
                  "parentUUID": "badd4e74-1d41-4366-a31e-c4dffa61b8b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e865fdb-cd46-4c3a-8744-e57bb161635f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "59e3b795-13a9-497f-b12d-d03e11ef312e",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2b9f7660-961c-44eb-8971-04a15e0e08ef",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 25 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c66337a7-aa10-4848-b062-1c032dbf0a12",
                  "parentUUID": "2b9f7660-961c-44eb-8971-04a15e0e08ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c66337a7-aa10-4848-b062-1c032dbf0a12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1cbc5aa7-987e-40ff-9d71-7bb963658cae",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "661c873b-f2f8-48a4-be65-c6011fafe325",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "510ff0e8-bd76-4f66-8822-e962bd87b14d",
                  "parentUUID": "661c873b-f2f8-48a4-be65-c6011fafe325",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "510ff0e8-bd76-4f66-8822-e962bd87b14d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "71c7ffba-bcfe-41c6-a217-f3e3400ef71d",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "648d97e5-fdb4-4da4-84e6-3b935b3c7e03",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d129e469-db18-4b53-89d6-a2041bc111ac",
                  "parentUUID": "648d97e5-fdb4-4da4-84e6-3b935b3c7e03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d129e469-db18-4b53-89d6-a2041bc111ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "41c88390-6878-4407-9520-3f0c1e0c4c20",
          "title": "tests for /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
          "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0198241-4e4a-4dcb-aadb-f452a47532ad",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
              "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronologies/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronologies/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b2bfc036-89b2-439f-a1b4-5d8b7529d397",
                  "parentUUID": "a0198241-4e4a-4dcb-aadb-f452a47532ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2bfc036-89b2-439f-a1b4-5d8b7529d397"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 128,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6f99cf64-3d70-4e83-b607-ab1abff96756",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3a98048b-6b0d-44b5-98a4-eaadd43a99e7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 17797, 'familyname': 'elit', 'contactname': 'cillum', 'contactstatus': 'inactive', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "91564c1b-a1f7-4db3-a576-1116c26710b5",
                  "parentUUID": "3a98048b-6b0d-44b5-98a4-eaadd43a99e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91564c1b-a1f7-4db3-a576-1116c26710b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b2ce073a-3895-4319-9c27-850b14f07859",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c33cb37d-1ee6-4949-80ee-f914dc21c111",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 301,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/4808/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "95027296-758b-44c6-818a-137b548edbc5",
                  "parentUUID": "c33cb37d-1ee6-4949-80ee-f914dc21c111",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95027296-758b-44c6-818a-137b548edbc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 301,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0ae75a0a-6194-4083-8c50-d27e4787564c",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0dfee7ce-2933-431d-9ce0-98520054eb5a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/6114', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5a133ef1-c38c-4511-954a-fa314bf9a5bb",
                  "parentUUID": "0dfee7ce-2933-431d-9ce0-98520054eb5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a133ef1-c38c-4511-954a-fa314bf9a5bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1d8162c9-5e4b-4176-b6e7-d8391a4abbca",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d9eab12e-67c6-40b3-b3eb-e878c68fe46e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 1882,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'NDSU Insect Database' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "40b0d953-f1b3-43ac-b378-257bbf0d2c09",
                  "parentUUID": "d9eab12e-67c6-40b3-b3eb-e878c68fe46e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40b0d953-f1b3-43ac-b378-257bbf0d2c09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1882,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "daaf6505-900e-4fa0-a630-5ef8766a9eb7",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ce4ed503-b668-4138-8519-246c22861f4b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'datasetid': 35498573, 'siteid': 7826, 'contactid': 4368, 'datasettype': 'mollit cillum', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'gpid': 487, 'ageyoung': 1000, 'ageold': 10000, 'ageof': 21989464, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7a2bb8d3-ab93-4c3c-bf0c-0166eaeba2df",
                  "parentUUID": "ce4ed503-b668-4138-8519-246c22861f4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a2bb8d3-ab93-4c3c-bf0c-0166eaeba2df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3c210b41-0374-45b9-9660-c322a4b3437b",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5a0c8de1-253e-4a83-b85d-fa1c600a2933",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e7d78f89-ea11-40b5-a94e-2bf79ae05e97",
                  "parentUUID": "5a0c8de1-253e-4a83-b85d-fa1c600a2933",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7d78f89-ea11-40b5-a94e-2bf79ae05e97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6b3d216f-4600-4440-8e8b-157e419f1836",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "513691c5-6899-432a-8b9d-503d459f6404",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9bca185a-c7d2-4fd8-ba77-daa6336f743b",
                  "parentUUID": "513691c5-6899-432a-8b9d-503d459f6404",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bca185a-c7d2-4fd8-ba77-daa6336f743b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "be97d007-bbfe-4d7e-adc6-c567241c28e3",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "736b91b7-cdbf-4a36-a76f-fc6cd25b2454",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/9770/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "44849de8-81c2-4d62-9eed-816764181e53",
                  "parentUUID": "736b91b7-cdbf-4a36-a76f-fc6cd25b2454",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44849de8-81c2-4d62-9eed-816764181e53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee0f461a-b605-4e47-9c75-d24275b11418",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a6da853e-27dd-49b0-a3bd-d65348e2c571",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7feee260-e33b-4702-bd9d-ee23c903048b",
                  "parentUUID": "a6da853e-27dd-49b0-a3bd-d65348e2c571",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7feee260-e33b-4702-bd9d-ee23c903048b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f20298c0-aff6-4878-92fb-e8720a594447",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f62f3f2a-446b-4e29-861d-3417d79f0413",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b5ebb188-24af-4151-8883-eb81f598d8ec",
                  "parentUUID": "f62f3f2a-446b-4e29-861d-3417d79f0413",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5ebb188-24af-4151-8883-eb81f598d8ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e25ee115-e589-448e-bc87-dc11717bfc20",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7dfc2086-ebbe-46f4-90c5-11f556f65705",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2fcc269c-9a2f-4078-9060-e3a535b60bb8",
                  "parentUUID": "7dfc2086-ebbe-46f4-90c5-11f556f65705",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fcc269c-9a2f-4078-9060-e3a535b60bb8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2d7374f1-1bad-45e2-a319-be539ae345e1",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2056908c-b84b-413d-9df4-05381e7d765b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4c67f6be-d804-4002-858b-a4b450248e4a",
                  "parentUUID": "2056908c-b84b-413d-9df4-05381e7d765b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c67f6be-d804-4002-858b-a4b450248e4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "20adaffa-359e-4759-b839-daf75aace40d",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0ce38aff-0c93-47ae-b8e2-d83b45b3e410",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 874,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7e54d9c3-adcd-46b1-b5f6-5f9a8dfe2914",
                  "parentUUID": "0ce38aff-0c93-47ae-b8e2-d83b45b3e410",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e54d9c3-adcd-46b1-b5f6-5f9a8dfe2914"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 874,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a21022c7-04df-4c19-9bba-9b8456826f14",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef0c475f-c958-4e73-b4b4-4c90b02e0788",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 767,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 13584, 'contactid': 19106, 'datasettype': 'magna consectetur enim', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 23400883 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2676b225-8e0f-4c50-8392-dd813f5fcca6",
                  "parentUUID": "ef0c475f-c958-4e73-b4b4-4c90b02e0788",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2676b225-8e0f-4c50-8392-dd813f5fcca6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 767,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ae985a81-0445-4f2c-b3b0-25fd7dbbce76",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "22110b99-6c81-442e-ab2d-e90076ff958e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 768,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/4935', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f84b1212-3159-44c1-8125-9c37d965e792",
                  "parentUUID": "22110b99-6c81-442e-ab2d-e90076ff958e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f84b1212-3159-44c1-8125-9c37d965e792"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 768,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "86463cc9-e7f1-41fc-aa3b-fadce45b81f8",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6084fc8b-de78-4501-a8ce-0db68d80d111",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'incididunt eiusmod nisi non aliqua', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "03550d59-578f-4669-8de4-ece3833b86c2",
                  "parentUUID": "6084fc8b-de78-4501-a8ce-0db68d80d111",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03550d59-578f-4669-8de4-ece3833b86c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1acd64be-fe92-4bb4-af67-921fb1a3864a",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7d1fe8ae-02aa-4872-a6c5-bf87769b226b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'qs': { 'table': 'voluptate' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "600a7725-8ac4-4e74-92bb-3d6d04e00834",
                  "parentUUID": "7d1fe8ae-02aa-4872-a6c5-bf87769b226b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "600a7725-8ac4-4e74-92bb-3d6d04e00834"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8f99dc6f-9f0c-413a-9ac6-2ac778623586",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8fd6ecbc-29f4-418f-aeaf-318a1f7cf9ec",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 1050,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "28132b83-e1e6-4981-9bd1-b07ef7ee0123",
                  "parentUUID": "8fd6ecbc-29f4-418f-aeaf-318a1f7cf9ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28132b83-e1e6-4981-9bd1-b07ef7ee0123"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1050,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "466e5c6c-1017-4334-a67f-a8f54fdc78f6",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "779b62d9-2254-45da-a2b3-676ade99816d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/8874', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "aa138cb1-05cd-43b3-9dcf-7ed24ced89b3",
                  "parentUUID": "779b62d9-2254-45da-a2b3-676ade99816d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa138cb1-05cd-43b3-9dcf-7ed24ced89b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6c5b1864-0bc6-4b52-b632-59a983a0bc0e",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "362a078e-ae44-4856-9eed-f6aaac34e4db",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 7101, 'gpname': 'occaecat dolore eiusmod Excepteur irure', 'rank': 4, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "89a56b1b-1d28-4e23-b0ee-4f00a6b8e6b6",
                  "parentUUID": "362a078e-ae44-4856-9eed-f6aaac34e4db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89a56b1b-1d28-4e23-b0ee-4f00a6b8e6b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bb5a5fd5-1f08-4393-bda7-cf9da1fd95d7",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37ed660a-864f-442f-8467-080c61e54b4f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1439,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/1164/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c9ac6945-4f04-46d7-8f89-76253c033431",
                  "parentUUID": "37ed660a-864f-442f-8467-080c61e54b4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9ac6945-4f04-46d7-8f89-76253c033431"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1439,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a9d75f56-6f2f-46d6-a5b5-0e2728a62b56",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "29332a59-e3bf-4034-ac84-57ac3086175d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/500/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7267f0e9-e563-4ab3-9e9e-5c425db085eb",
                  "parentUUID": "29332a59-e3bf-4034-ac84-57ac3086175d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7267f0e9-e563-4ab3-9e9e-5c425db085eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5d2b1486-3d21-480e-b9f7-cbbe2cb9d404",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "904da90b-ba4e-4c20-9524-7b10c41da71e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/9566', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "33165aaa-e77c-4a76-8ce4-57165bd0f653",
                  "parentUUID": "904da90b-ba4e-4c20-9524-7b10c41da71e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33165aaa-e77c-4a76-8ce4-57165bd0f653"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "98d09eb3-8924-4571-90b8-f255b2cf8751",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7ff6a5a8-a6a9-4334-bb8b-2c18d21c6963",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'id consequat', 'taxonid': 37364, 'siteid': 3553, 'sitename': 'Excepteur nostrud dolore anim dolor', 'datasettype': 'esse enim non laborum', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 11342845, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9e7c2eea-00df-41e0-b7ce-1cb0ec3cae25",
                  "parentUUID": "7ff6a5a8-a6a9-4334-bb8b-2c18d21c6963",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e7c2eea-00df-41e0-b7ce-1cb0ec3cae25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4109088e-1957-4a2d-8a02-b616521876fb",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "31bd9fe3-3d97-43b0-abd5-36db4bb3df89",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "835666d8-9f34-421c-a04d-f0be3513d483",
                  "parentUUID": "31bd9fe3-3d97-43b0-abd5-36db4bb3df89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "835666d8-9f34-421c-a04d-f0be3513d483"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9ebe8028-959e-481c-b3d2-98b1035a57a8",
          "title": "tests for /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
          "file": "/test/v2.0-data-oxcal-calibrate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fee4e70f-c20a-440a-949a-c8a6c65d4042",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
              "file": "/test/v2.0-data-oxcal-calibrate-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b171ce49-c4f8-4bd8-a709-d3fd6126a0a2",
                  "parentUUID": "fee4e70f-c20a-440a-949a-c8a6c65d4042",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b171ce49-c4f8-4bd8-a709-d3fd6126a0a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "91bc120a-2bb2-40df-ab30-eac97b337005",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "05ac0737-ba69-4292-9993-61c220b313e4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'culpa', 'taxonid': 10505, 'siteid': 7242, 'sitename': 'veniam amet consectetur anim qui', 'datasettype': 'enim dolor nostrud aliqua laboris', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 8290343, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "21083349-a14b-46cc-b04b-1d4f34528333",
                  "parentUUID": "05ac0737-ba69-4292-9993-61c220b313e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21083349-a14b-46cc-b04b-1d4f34528333"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "13df3dbe-3f19-4022-92cd-48533d66c776",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8bddc14c-7846-471b-8a47-4b7775e05c1b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "352524ca-e7cd-40c7-83a2-b07003c8600c",
                  "parentUUID": "8bddc14c-7846-471b-8a47-4b7775e05c1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "352524ca-e7cd-40c7-83a2-b07003c8600c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "87db43a0-e9f6-466f-a321-1fac59d5e696",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c8103094-fd95-410f-9cae-87bad91b80a6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 2106, 'datasetid': 35990626, 'siteid': 14142, 'familyname': 'ipsum consectetur', 'pubtype': 'Authored Book', 'year': 1724, 'search': 'ad', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "282ff6e3-c885-4456-b8a0-7f61f5623da9",
                  "parentUUID": "c8103094-fd95-410f-9cae-87bad91b80a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "282ff6e3-c885-4456-b8a0-7f61f5623da9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "16c5f2c6-bb85-470c-bd7a-0f4001471648",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dc0b2ba9-0b1e-49f5-999e-96190b09d97b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/8444', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e01cb4e0-0321-4257-bf8e-69ad6eb51f4e",
                  "parentUUID": "dc0b2ba9-0b1e-49f5-999e-96190b09d97b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e01cb4e0-0321-4257-bf8e-69ad6eb51f4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c404ffdb-3caa-4a91-a10a-cc8cadbff094",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5a960081-427a-469c-97ed-6e5d37239191",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 14735, 'sitename': 'nisi', 'altmax': 100, 'altmin': 10, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1339be7f-7491-4d27-8922-c803721b386f",
                  "parentUUID": "5a960081-427a-469c-97ed-6e5d37239191",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1339be7f-7491-4d27-8922-c803721b386f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f48c549d-0825-413a-ae2d-4d84cd0d4c9b",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90cfe972-4208-4737-8519-a40677055b04",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "588bc502-0834-4f97-a17b-2f53072712d4",
                  "parentUUID": "90cfe972-4208-4737-8519-a40677055b04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "588bc502-0834-4f97-a17b-2f53072712d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 208,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "85e745bd-d436-4445-b3ba-7a835d98063c",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f8139793-cfc0-4e17-8df2-4728a1c93206",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/4835/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ee4012e0-01bd-42b8-b7a6-374a43f23466",
                  "parentUUID": "f8139793-cfc0-4e17-8df2-4728a1c93206",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee4012e0-01bd-42b8-b7a6-374a43f23466"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "91bab3a1-4684-43ec-a659-1baeb39b28a8",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7560975f-0765-427c-a1a1-f68a732fe768",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/7172/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "bbbb6eb1-d211-4a5a-b855-aff8c5e5b78e",
                  "parentUUID": "7560975f-0765-427c-a1a1-f68a732fe768",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbbb6eb1-d211-4a5a-b855-aff8c5e5b78e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2db57a34-b24d-4b72-a4e8-006845f38c87",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "51e67d69-aa85-4066-984a-d01b8c892317",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 744,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/8261/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2091b856-6d79-4b74-82d0-0abbbaf75ba5",
                  "parentUUID": "51e67d69-aa85-4066-984a-d01b8c892317",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2091b856-6d79-4b74-82d0-0abbbaf75ba5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 744,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a5d3e3f3-2b27-4b16-9bb0-9020bc3a78cd",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "336c9563-668b-4a66-a9cd-523688761386",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/932/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "171466a2-c67a-4ac7-a361-29ee5e3663f6",
                  "parentUUID": "336c9563-668b-4a66-a9cd-523688761386",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "171466a2-c67a-4ac7-a361-29ee5e3663f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "df1c0320-8643-4fd4-b8fc-c968eb3458f1",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "39657e1c-bea2-4406-b072-00b9e9464f01",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "58e9d6e5-5648-4cad-a645-4e8c5176f4bb",
                  "parentUUID": "39657e1c-bea2-4406-b072-00b9e9464f01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58e9d6e5-5648-4cad-a645-4e8c5176f4bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e3e161b9-ec5d-4bbf-b4b4-a7480589f91c",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c62c1275-39a4-44d2-aebf-93841792a1db",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 246,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b3797e61-90f1-4fbd-8457-89e1727e4604",
                  "parentUUID": "c62c1275-39a4-44d2-aebf-93841792a1db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3797e61-90f1-4fbd-8457-89e1727e4604"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 246,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8ee4c36d-6ff1-47d1-b02d-bc9e4b494a51",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8e2f157b-570c-48b7-93c9-dcefa692b105",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 262,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5464b809-1348-46df-9847-c3abc569a282",
                  "parentUUID": "8e2f157b-570c-48b7-93c9-dcefa692b105",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5464b809-1348-46df-9847-c3abc569a282"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "99129c58-9a44-41b1-88a5-f1940a2266b2",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a5d20a6c-2e07-4a67-91b0-7d4b90ac0478",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 5048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "778c8e05-b870-4d64-90dd-02ad46f8e878",
                  "parentUUID": "a5d20a6c-2e07-4a67-91b0-7d4b90ac0478",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "778c8e05-b870-4d64-90dd-02ad46f8e878"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5048,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6a3a0b50-78d2-4db6-a93e-9ee254057442",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fa67f799-cf44-4de9-873e-738db39457fa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 160,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'consequat', 'datasetid': 17135229, 'siteid': 16854 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9693c880-cc6a-4d92-83c2-0ffcccc09860",
                  "parentUUID": "fa67f799-cf44-4de9-873e-738db39457fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9693c880-cc6a-4d92-83c2-0ffcccc09860"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 160,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "994f23a6-919a-4302-a577-43a58d2c559f",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be9e2c79-4165-4852-87e1-868a6a5e5608",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 734,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8046b480-5262-428d-b151-68ab2040fee6",
                  "parentUUID": "be9e2c79-4165-4852-87e1-868a6a5e5608",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8046b480-5262-428d-b151-68ab2040fee6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 734,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f2694be8-6bdf-4a42-b429-a81d5668be3b",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2ce6060d-444d-4a72-8a46-d8fd25224679",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e6d47f94-6129-42ed-a318-570c0048b0cd",
                  "parentUUID": "2ce6060d-444d-4a72-8a46-d8fd25224679",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6d47f94-6129-42ed-a318-570c0048b0cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f8fa490a-32b4-42e0-afc4-22537157935d",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "afbba6dc-28ae-4649-87b5-67a3ddc1e8b8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "bbdd11fb-6602-4941-a45b-06498953977f",
                  "parentUUID": "afbba6dc-28ae-4649-87b5-67a3ddc1e8b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbdd11fb-6602-4941-a45b-06498953977f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b5406c8b-15da-492d-a607-36a26b56134b",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eced5458-22f8-411f-868b-4be36f82e54b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "88098f97-351c-4775-985e-2cf75354d1de",
                  "parentUUID": "eced5458-22f8-411f-868b-4be36f82e54b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88098f97-351c-4775-985e-2cf75354d1de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}