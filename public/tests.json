{
  "stats": {
    "suites": 199,
    "tests": 198,
    "passes": 117,
    "pending": 0,
    "failures": 81,
    "start": "2023-12-20T21:55:05.087Z",
    "end": "2023-12-20T22:00:43.134Z",
    "duration": 338047,
    "testsRegistered": 198,
    "passPercent": 59.09090909090909,
    "pendingPercent": 0,
    "other": 22,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "df9ee73d-9b4a-4559-a74c-a11dfa529f0d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "30d191e8-4b68-4d49-9470-931004ed07ea",
          "parentUUID": "df9ee73d-9b4a-4559-a74c-a11dfa529f0d",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "e0ac8149-1587-4c93-9c1b-e00c17175e1f",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "423adb42-3841-4691-84c5-f7fef08a4af5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 190,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/occurrences/500', {\n  'qs': {'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0cbc746b-bad6-4584-a113-d10d74630c42",
                  "parentUUID": "423adb42-3841-4691-84c5-f7fef08a4af5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0cbc746b-bad6-4584-a113-d10d74630c42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 190,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0c8e611a-4bfa-4bb2-a1ed-3d33da3071e4",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "de440413-2a26-48ec-93cb-67c0f82ef1dc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/data/geopoliticalunits/2145', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f42e88fe-9aad-436e-85de-7402650a2c6e",
                  "parentUUID": "de440413-2a26-48ec-93cb-67c0f82ef1dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f42e88fe-9aad-436e-85de-7402650a2c6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3209f7eb-8b22-40ff-b84f-0dad01528417",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1997,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).includes('site');\n    })\n    .expect(function(res) {\n      return res.body['data'][0].site.siteid === 2570;\n    })\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]['site']['datasets'][0]).includes('datasetid');\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "9e058437-9d61-4512-977f-7ecbe9a8f9ec",
              "parentUUID": "3209f7eb-8b22-40ff-b84f-0dad01528417",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 1151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['siteid'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "841dfd31-487c-47a1-b35d-376d8638f4be",
              "parentUUID": "3209f7eb-8b22-40ff-b84f-0dad01528417",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return res.body['data'][0].site.siteid === 123;\n    })\n    .expect(function(res) {\n      return res.body['data'][0].site.datasets.length > 0;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "5eabd19e-d8eb-4ff0-924e-d9be9cd618ea",
              "parentUUID": "3209f7eb-8b22-40ff-b84f-0dad01528417",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 1086,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data']).length > 0;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "9d384fad-078f-4701-bf1d-b6b87e9bd0e1",
              "parentUUID": "3209f7eb-8b22-40ff-b84f-0dad01528417",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 158,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data']).includes('site', 'dataset');\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "a312afce-5d3e-4094-ab2d-6d7eff9b446b",
              "parentUUID": "3209f7eb-8b22-40ff-b84f-0dad01528417",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 2031,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data']).length == 10;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "217d4f24-b7cb-420c-919d-f790b9bd11a5",
              "parentUUID": "3209f7eb-8b22-40ff-b84f-0dad01528417",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      let test = true;\n      for (let i = 0; i < res.body['data'].length; i++) {\n        test = test &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageold'] > 1500;\n        if (test === false) {return test;}\n      }\n      return true;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "a3fab04a-1512-492c-b64f-bf6e9441942b",
              "parentUUID": "3209f7eb-8b22-40ff-b84f-0dad01528417",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e058437-9d61-4512-977f-7ecbe9a8f9ec",
            "841dfd31-487c-47a1-b35d-376d8638f4be",
            "5eabd19e-d8eb-4ff0-924e-d9be9cd618ea",
            "9d384fad-078f-4701-bf1d-b6b87e9bd0e1",
            "a312afce-5d3e-4094-ab2d-6d7eff9b446b",
            "217d4f24-b7cb-420c-919d-f790b9bd11a5",
            "a3fab04a-1512-492c-b64f-bf6e9441942b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9301,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "1f1b9b28-78d9-42a0-a7ba-1995226dcc36",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "553c0cff-5593-4f27-8e04-7bb72b066b13",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 600,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/summary/dstypemonth', {\n  'qs': {'start': 1, 'end': 10},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d5e63671-deda-49cf-9078-801744041b7a",
                  "parentUUID": "553c0cff-5593-4f27-8e04-7bb72b066b13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5e63671-deda-49cf-9078-801744041b7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 600,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4ed1d963-85ee-4dbe-84b0-d8293b7861a5",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d85bb0f-aa54-480c-a83d-17f994a30ceb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/taxa/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "85cde8d9-ab9a-4d6a-85cc-f1e0e8130fd3",
                  "parentUUID": "1d85bb0f-aa54-480c-a83d-17f994a30ceb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85cde8d9-ab9a-4d6a-85cc-f1e0e8130fd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 115,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6fd6fe5b-1303-4d1a-b0da-9776943f2fea",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c45d13ce-b4c3-4480-a808-db75005fbd0b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/contacts/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4e5f6b9c-f969-4bdc-a54c-634134ac65d2",
                  "parentUUID": "c45d13ce-b4c3-4480-a808-db75005fbd0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e5f6b9c-f969-4bdc-a54c-634134ac65d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "32a770a9-067d-4af5-92fc-c39c683f8938",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return res.body.data[0].publication.publicationid === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "31465ffd-b9ee-4170-b335-02fe213eff7a",
              "parentUUID": "32a770a9-067d-4af5-92fc-c39c683f8938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return res.body.data.map((x) => x.publicationid) == [12, 13];\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "f907c000-168b-4bfa-af89-e053e0247f8f",
              "parentUUID": "32a770a9-067d-4af5-92fc-c39c683f8938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 313,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return res.body.data.result.length > 0;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "4b8589cf-8da4-4026-b551-46437a987ff3",
              "parentUUID": "32a770a9-067d-4af5-92fc-c39c683f8938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return res.body.data.result.length > 0;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "c9ca5838-b167-4536-9bc2-cc935eb43b6c",
              "parentUUID": "32a770a9-067d-4af5-92fc-c39c683f8938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 169,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return res.body.data.length > 0;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "759c69cf-f468-4e42-93b5-3a7fcb6b5b84",
              "parentUUID": "32a770a9-067d-4af5-92fc-c39c683f8938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 170,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      const flatten = (list) => list.reduce(\n          (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n      );\n      const sites = [12, 13, 14, 15];\n      const siteids = flatten(res.body.data.map((x) => x.siteid));\n      return sites.every((x) => siteids.includes(x));\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "c61ca13a-b1c5-43c4-aea9-1301e65dc262",
              "parentUUID": "32a770a9-067d-4af5-92fc-c39c683f8938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      const flatten = (list) => list.reduce(\n          (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n      );\n      const datasets = [12, 6000, 13, 2201];\n      const datasetids = flatten(res.body.data.map((x) => x.datasetid));\n      return datasets.every((x) => datasetids.includes(x));\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "96605fd4-afae-4f58-9879-3f6adbc81283",
              "parentUUID": "32a770a9-067d-4af5-92fc-c39c683f8938",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31465ffd-b9ee-4170-b335-02fe213eff7a",
            "f907c000-168b-4bfa-af89-e053e0247f8f",
            "4b8589cf-8da4-4026-b551-46437a987ff3",
            "c9ca5838-b167-4536-9bc2-cc935eb43b6c",
            "759c69cf-f468-4e42-93b5-3a7fcb6b5b84",
            "c61ca13a-b1c5-43c4-aea9-1301e65dc262",
            "96605fd4-afae-4f58-9879-3f6adbc81283"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1387,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c5c12f12-07ea-405d-b232-2a417c0435f4",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0efcefe8-5781-438a-82a2-de3d760c7717",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 350,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/frozen/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "dacc6c45-5fe6-44ad-9320-63624a85663f",
                  "parentUUID": "0efcefe8-5781-438a-82a2-de3d760c7717",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dacc6c45-5fe6-44ad-9320-63624a85663f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 350,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f0e1ff95-a375-451e-a389-e3e286a5e34b",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "edc5cac9-0d0f-4fc0-942d-e63a3423418f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 3988,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f61f0220-dd66-4ea5-8bfc-38169daf3816",
                  "parentUUID": "edc5cac9-0d0f-4fc0-942d-e63a3423418f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f61f0220-dd66-4ea5-8bfc-38169daf3816"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3988,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['occurrence'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "21423b91-9216-4562-b7b0-c28c76b68dc9",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": true,
              "duration": 30011,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(200, done);",
              "err": {
                "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js)",
                "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js)\n    at createTimeoutError (/usr/lib/node_modules/mocha/lib/errors.js:498:15)\n    at Runnable._timeoutError (/usr/lib/node_modules/mocha/lib/runnable.js:431:10)\n    at Timeout.<anonymous> (/usr/lib/node_modules/mocha/lib/runnable.js:246:24)\n    at listOnTimeout (node:internal/timers:569:17)\n    at process.processTimers (node:internal/timers:512:7)",
                "diff": null
              },
              "uuid": "04c1b478-9aa1-4ec5-bb78-0aebe5c87377",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": true,
              "duration": 30001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(200, done);",
              "err": {
                "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js)",
                "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js)\n    at createTimeoutError (/usr/lib/node_modules/mocha/lib/errors.js:498:15)\n    at Runnable._timeoutError (/usr/lib/node_modules/mocha/lib/runnable.js:431:10)\n    at Timeout.<anonymous> (/usr/lib/node_modules/mocha/lib/runnable.js:246:24)\n    at listOnTimeout (node:internal/timers:569:17)\n    at process.processTimers (node:internal/timers:512:7)",
                "diff": null
              },
              "uuid": "b52592fe-9e0c-4f9d-b9a0-00b6fc91556a",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 26921,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "f58bb700-587e-4b88-8e94-55304c06f185",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 392,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n    .set('Accept', 'application/json')\n    .expect(500, done);",
              "err": {},
              "uuid": "d2f444ab-28f9-45e1-a70f-0d146c886750",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 544,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n    .set('Accept', 'application/json')\n    .expect(500, done);",
              "err": {},
              "uuid": "1a545b5d-8c60-46e9-98aa-c303dd43b764",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 781,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "1eadc1d1-e388-467b-a37d-7e0adc5d39e4",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 868,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      const allSite = res.body['data'];\n      const siteids = [];\n      for (let i = 0; i < allSite.length; i++) {\n        siteids.push(allSite[i]['site']['siteid']);\n      };\n      const uniqueSites = Array.from(new Set(siteids)).sort(function(a, b) {return a - b;});\n      return (uniqueSites === [12, 13, 14, 15]);\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "105e90f7-2bc6-40df-bf89-305e55f785f7",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 811,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return (res.body.data.length > 0);\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "82e01cb4-c21a-435f-94ff-29a2ea50ffa1",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 562,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return (res.body.data.length > 0);\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "284eff2a-6209-4600-97a1-05913257114c",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 546,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      const allTaxa = res.body['data'];\n      const taxaids = [];\n      for (let i = 0; i < allTaxa.length; i++) {\n        taxaids.push(allTaxa[i]['sample']['taxonname']);\n      };\n      const uniqueTaxa = Array.from(new Set(taxaids)).sort();\n      return uniqueTaxa.length > 1;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "e93fab17-cf21-428f-b784-35d650d1ed41",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 917,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      const allTaxa = res.body['data'];\n      const taxaids = [];\n      for (let i = 0; i < allTaxa.length; i++) {\n        taxaids.push(allTaxa[i]['sample']['taxonname']);\n      };\n      const uniqueTaxa = Array.from(new Set(taxaids)).sort();\n      return uniqueTaxa.length > 1 & allTaxa.length > 0;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "ae01c991-f553-4b86-aec6-9cd945c3d3c6",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 615,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "fb5d7ebe-f788-476d-bc80-b5d9e9f6fb56",
              "parentUUID": "52df2135-f7fb-490a-b559-b1c6d78fcd46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21423b91-9216-4562-b7b0-c28c76b68dc9",
            "f58bb700-587e-4b88-8e94-55304c06f185",
            "d2f444ab-28f9-45e1-a70f-0d146c886750",
            "1a545b5d-8c60-46e9-98aa-c303dd43b764",
            "1eadc1d1-e388-467b-a37d-7e0adc5d39e4",
            "105e90f7-2bc6-40df-bf89-305e55f785f7",
            "82e01cb4-c21a-435f-94ff-29a2ea50ffa1",
            "284eff2a-6209-4600-97a1-05913257114c",
            "e93fab17-cf21-428f-b784-35d650d1ed41",
            "ae01c991-f553-4b86-aec6-9cd945c3d3c6",
            "fb5d7ebe-f788-476d-bc80-b5d9e9f6fb56"
          ],
          "failures": [
            "04c1b478-9aa1-4ec5-bb78-0aebe5c87377",
            "b52592fe-9e0c-4f9d-b9a0-00b6fc91556a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 93187,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "81c2467c-34ef-4425-be4a-08a5b517d09b",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4400031f-c68b-4bf5-8ef6-c572d38d40aa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/pollen/{id}', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4dc30003-3852-43ff-9bd0-9846268a4551",
                  "parentUUID": "4400031f-c68b-4bf5-8ef6-c572d38d40aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4dc30003-3852-43ff-9bd0-9846268a4551"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "43abd787-32db-4550-8049-9c17672a4b92",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "10a4e713-f695-4507-bb5d-c5411f1cf20c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 521,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/apps/depositionalenvironments/root', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1f2eff2a-59aa-4420-be49-a8a20acf65e8",
                  "parentUUID": "10a4e713-f695-4507-bb5d-c5411f1cf20c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f2eff2a-59aa-4420-be49-a8a20acf65e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 521,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1bdaa942-ac7a-46ac-95d3-3b2476d7c9da",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6c88f90e-7031-4eb0-abe5-4c263e3ba29d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 280,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/data/occurrence/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "63e45613-ebf3-4b15-9307-8b1d875ddba5",
                  "parentUUID": "6c88f90e-7031-4eb0-abe5-4c263e3ba29d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63e45613-ebf3-4b15-9307-8b1d875ddba5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 280,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "955817d3-a4e3-418c-8047-c0eb5a671830",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 509,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if (err) return done(err);\n      expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n      done();\n    });",
              "err": {},
              "uuid": "4498cb9b-6ed7-4104-b6fc-6e473c8dd9c3",
              "parentUUID": "955817d3-a4e3-418c-8047-c0eb5a671830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 1127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if (err) return done(err);\n      expect(Object.keys(res.body['data'][0]).length > 0);\n      done();\n    });",
              "err": {},
              "uuid": "ead84a3b-df9e-49a2-b377-c0b49a9a76c6",
              "parentUUID": "955817d3-a4e3-418c-8047-c0eb5a671830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 408,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if (err) return done(err);\n      expect(res.body.status === 'failure');\n      done();\n    });",
              "err": {},
              "uuid": "618d07d4-e571-495d-b876-031d98c143a7",
              "parentUUID": "955817d3-a4e3-418c-8047-c0eb5a671830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": true,
              "duration": 5005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if (err) return done(err);\n      expect(500, done);\n      done();\n    });",
              "err": {
                "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/sites.js)",
                "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/sites.js)\n    at createTimeoutError (/usr/lib/node_modules/mocha/lib/errors.js:498:15)\n    at Runnable._timeoutError (/usr/lib/node_modules/mocha/lib/runnable.js:431:10)\n    at Timeout.<anonymous> (/usr/lib/node_modules/mocha/lib/runnable.js:246:24)\n    at listOnTimeout (node:internal/timers:569:17)\n    at process.processTimers (node:internal/timers:512:7)",
                "diff": null
              },
              "uuid": "8ef9b295-2f5b-4cbe-a0c4-0de75c30cc51",
              "parentUUID": "955817d3-a4e3-418c-8047-c0eb5a671830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": true,
              "duration": 5006,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length === 2;\n    })\n    .expect(200, done);",
              "err": {
                "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/sites.js)",
                "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/sites.js)\n    at createTimeoutError (/usr/lib/node_modules/mocha/lib/errors.js:498:15)\n    at Runnable._timeoutError (/usr/lib/node_modules/mocha/lib/runnable.js:431:10)\n    at Timeout.<anonymous> (/usr/lib/node_modules/mocha/lib/runnable.js:246:24)\n    at listOnTimeout (node:internal/timers:569:17)\n    at process.processTimers (node:internal/timers:512:7)",
                "diff": null
              },
              "uuid": "9fa211e9-3b09-454e-8eb7-7c80f89cadc3",
              "parentUUID": "955817d3-a4e3-418c-8047-c0eb5a671830",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4498cb9b-6ed7-4104-b6fc-6e473c8dd9c3",
            "ead84a3b-df9e-49a2-b377-c0b49a9a76c6",
            "618d07d4-e571-495d-b876-031d98c143a7"
          ],
          "failures": [
            "8ef9b295-2f5b-4cbe-a0c4-0de75c30cc51",
            "9fa211e9-3b09-454e-8eb7-7c80f89cadc3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12055,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7e991fb9-f219-4a43-b973-4c59c385cfb3",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "773219a4-5915-44df-acad-d12d6a4aab4e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 403,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/apps/collectionTypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8ea1a482-3ffc-4698-8562-83f74177b013",
                  "parentUUID": "773219a4-5915-44df-acad-d12d6a4aab4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ea1a482-3ffc-4698-8562-83f74177b013"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 403,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b4dfb93f-9516-4275-ba4d-805f33f6f547",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "04def669-aade-4a47-85e5-de49a6916813",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/data/contacts/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "dea83eff-0cfc-4cc0-8bc1-79644bfff450",
                  "parentUUID": "04def669-aade-4a47-85e5-de49a6916813",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dea83eff-0cfc-4cc0-8bc1-79644bfff450"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "20657321-7e59-4d6c-9a62-9e3a24870b4b",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7cca918d-4527-4e23-9c33-23b72a24cfb2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 143,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/sites/500/geopoliticalunits', {\n  'qs': {'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3d1fa36b-b1f0-4121-bcb2-c69b2b070d41",
                  "parentUUID": "7cca918d-4527-4e23-9c33-23b72a24cfb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d1fa36b-b1f0-4121-bcb2-c69b2b070d41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 143,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c8a66d41-5a99-4c51-88e6-45a13e6dabb3",
          "title": "Tests for Explorer App Services",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
          "file": "/test/explorerCalls.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
              "file": "/test/explorerCalls.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for TaxaGroupTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaGroupTypes",
                  "timedOut": false,
                  "duration": 154,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/TaxaGroupTypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 502 to equal 200",
                    "estack": "AssertionError: expected status code 502 to equal 200",
                    "diff": null
                  },
                  "uuid": "615f0538-a4fc-44ef-9773-686f822cc7fb",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomyTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomyTypes",
                  "timedOut": false,
                  "duration": 153,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/TaphonomyTypes', {\n  'qs': {\n    taphonomicSystemId: 1,\n  },\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 502 to equal 200",
                    "estack": "AssertionError: expected status code 502 to equal 200",
                    "diff": null
                  },
                  "uuid": "8a370354-1106-4c49-b384-c598e9665e93",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomySystems",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomySystems",
                  "timedOut": false,
                  "duration": 161,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/TaphonomySystems', {\n  'qs': {\n    datasetTypeId: 1,\n  },\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 502 to equal 200",
                    "estack": "AssertionError: expected status code 502 to equal 200",
                    "diff": null
                  },
                  "uuid": "2cbbe9cd-39ad-42bf-a110-19c4a1eaa9cd",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for ElementTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for ElementTypes",
                  "timedOut": false,
                  "duration": 153,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/ElementTypes', {\n  'qs': {\n    taxagroupid: 1,\n  },\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 502 to equal 200",
                    "estack": "AssertionError: expected status code 502 to equal 200",
                    "diff": null
                  },
                  "uuid": "0e1f36e7-8434-4036-bea5-a74929488150",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaxaInDatasets (a slow service)",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaInDatasets (a slow service)",
                  "timedOut": false,
                  "duration": 156,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/TaxaInDatasets', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 502 to equal 200",
                    "estack": "AssertionError: expected status code 502 to equal 200",
                    "diff": null
                  },
                  "uuid": "9f4c993c-93a3-4ad7-aefb-81aada2d5449",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for collectionTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for collectionTypes",
                  "timedOut": false,
                  "duration": 151,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/collectionTypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 502 to equal 200",
                    "estack": "AssertionError: expected status code 502 to equal 200",
                    "diff": null
                  },
                  "uuid": "cc86c2ae-b564-4596-b1a8-f7a759730912",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for keywords",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for keywords",
                  "timedOut": false,
                  "duration": 157,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/keywords', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 502 to equal 200",
                    "estack": "AssertionError: expected status code 502 to equal 200",
                    "diff": null
                  },
                  "uuid": "ed90cb94-6bde-46a7-85d6-88985ce570ed",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for authorpis",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for authorpis",
                  "timedOut": false,
                  "duration": 1501,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/authorpis', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0d7f160e-5aad-40e6-a27a-11d1edb6924a",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DepositionalEnvironments",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DepositionalEnvironments",
                  "timedOut": false,
                  "duration": 483,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/DepositionalEnvironments', {\n  'qs': {idProperty: 1},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "950909ab-b5fa-4eb8-a2fe-661b95cfb2e1",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Search",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Search",
                  "timedOut": false,
                  "duration": 318,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('post', appServicesLocation + '/Search', {\n  'qs': {'search': '{\"datasetTypeId\":21}',\n    'time': true},\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "495053b3-80f7-43d9-b8b1-83d31ded4924",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DatasetTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DatasetTypes",
                  "timedOut": false,
                  "duration": 232,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/DatasetTypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f5059413-1371-42b0-a57c-7ff67d944066",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for RelativeAges",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for RelativeAges",
                  "timedOut": false,
                  "duration": 420,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/RelativeAges', {\n  'qs': {agescaleid: 1},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "387d1572-a043-478c-b629-1c2c91047d06",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Geochronologies",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Geochronologies",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', appServicesLocation + '/Geochronologies', {\n  'qs': {datasetId: 1001},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fb94b244-521f-4846-9d62-420637166ca9",
                  "parentUUID": "d4557949-a5c6-4bcd-8abc-b63adc4e8109",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d7f160e-5aad-40e6-a27a-11d1edb6924a",
                "950909ab-b5fa-4eb8-a2fe-661b95cfb2e1",
                "495053b3-80f7-43d9-b8b1-83d31ded4924",
                "f5059413-1371-42b0-a57c-7ff67d944066",
                "387d1572-a043-478c-b629-1c2c91047d06",
                "fb94b244-521f-4846-9d62-420637166ca9"
              ],
              "failures": [
                "615f0538-a4fc-44ef-9773-686f822cc7fb",
                "8a370354-1106-4c49-b384-c598e9665e93",
                "2cbbe9cd-39ad-42bf-a110-19c4a1eaa9cd",
                "0e1f36e7-8434-4036-bea5-a74929488150",
                "9f4c993c-93a3-4ad7-aefb-81aada2d5449",
                "cc86c2ae-b564-4596-b1a8-f7a759730912",
                "ed90cb94-6bde-46a7-85d6-88985ce570ed"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4208,
              "root": false,
              "rootEmpty": false,
              "_timeout": 12000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 12000
        },
        {
          "uuid": "f82c2cf3-d2a1-49a9-8834-866ca4825e1f",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b6e01b97-d008-4e56-bd3c-ab7d23d95f43",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 556,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/dbtables/estin', {\n  'qs': {'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fc5f31c5-65db-4199-826b-57b5d3d4a38e",
                  "parentUUID": "b6e01b97-d008-4e56-bd3c-ab7d23d95f43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc5f31c5-65db-4199-826b-57b5d3d4a38e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 556,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9c018dc6-d16a-44a0-993c-4211218075ce",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57367843-b4f6-43d8-ad88-40c02d9a9396",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 507,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/500/chronologies', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "44d478e9-ceca-48f6-99f4-10bb2b5067d5",
                  "parentUUID": "57367843-b4f6-43d8-ad88-40c02d9a9396",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44d478e9-ceca-48f6-99f4-10bb2b5067d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 507,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee1ea031-9333-4292-9d72-453e074a3059",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9053b5da-1589-4f97-9ebe-d17f3061f065",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 182,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/data/geopoliticalunits', {\n  'qs': {'gpid': 756, 'gpname': 'Canada', 'rank': 4, 'lower': false},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7cf767df-db9d-481f-98ca-e7193c68eaec",
                  "parentUUID": "9053b5da-1589-4f97-9ebe-d17f3061f065",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7cf767df-db9d-481f-98ca-e7193c68eaec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 182,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "356e13e4-abc6-4bdc-9908-4b9cd4ba31de",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4da1d014-dcfa-4d88-85c9-6e17a38ed4da",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/dbtables/geochrontypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "42c63886-948e-4cd8-887e-660122c8cdc6",
                  "parentUUID": "4da1d014-dcfa-4d88-85c9-6e17a38ed4da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42c63886-948e-4cd8-887e-660122c8cdc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e57a0e20-881b-42c4-9fd0-6750921e7150",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "88863aeb-7f9c-4242-a6a4-d97517c0e00e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/geopoliticalunits', {\n  'qs': {'gpid': 756, 'gpname': 'Canada', 'rank': 1, 'lower': true},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8583f119-2dcd-4863-a479-0222879215e9",
                  "parentUUID": "88863aeb-7f9c-4242-a6a4-d97517c0e00e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8583f119-2dcd-4863-a479-0222879215e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b42b72cc-d3b1-4aca-9f8d-7a3bf8638f48",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c964b3e-3897-4492-9b7b-2e65481919cd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets_elc', {\n  'qs': {'siteid': 17002, 'contactid': 17367, 'datasettype': 'diatom surface sample', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 15228235},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "51082c19-576c-4acc-9a13-1295c4f7e439",
                  "parentUUID": "0c964b3e-3897-4492-9b7b-2e65481919cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51082c19-576c-4acc-9a13-1295c4f7e439"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 167,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7b603a50-9298-439b-aabe-3a31ec6ec9e1",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be2d8a8e-1d41-42a1-ad0d-3af27d879b78",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/data/sites/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3ff96e68-f273-4311-b55d-53f9749ed3da",
                  "parentUUID": "be2d8a8e-1d41-42a1-ad0d-3af27d879b78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ff96e68-f273-4311-b55d-53f9749ed3da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "02bf0a02-01ba-4b32-88a7-9f129dae0287",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a5603ae-a47b-4f88-8f6d-f533caad39f6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/sites/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "824538b2-88a0-47ec-9b2e-a524b3315ff1",
                  "parentUUID": "6a5603ae-a47b-4f88-8f6d-f533caad39f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "824538b2-88a0-47ec-9b2e-a524b3315ff1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5c1a46eb-58e2-4815-badd-a35308cf04dd",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c6fa02a-23b2-4dc9-8bf4-58318ebf02d7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1358,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/sites/2140/datasets', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4a561320-e1cf-4932-803b-9903c4e2f36e",
                  "parentUUID": "0c6fa02a-23b2-4dc9-8bf4-58318ebf02d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a561320-e1cf-4932-803b-9903c4e2f36e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1358,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e09c3943-e48a-4213-a649-7a3891acd1e2",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f23c1d49-6ce3-49dd-aca7-75858daa7c8c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 71,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/apps/collectiontypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2426e11c-978b-4621-acdf-b936aac985a0",
                  "parentUUID": "f23c1d49-6ce3-49dd-aca7-75858daa7c8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2426e11c-978b-4621-acdf-b936aac985a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 71,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f5f64da5-18e4-41b5-82f3-60c3fda98877",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ec99871e-77a6-451c-9eb7-a8cb06b5d32b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1156,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/sites/500/datasets_elc', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9864f408-7bc3-4fc7-8f94-3d9a85dd8ac7",
                  "parentUUID": "ec99871e-77a6-451c-9eb7-a8cb06b5d32b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9864f408-7bc3-4fc7-8f94-3d9a85dd8ac7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1156,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8ba1e7cf-a481-4c2b-84f5-a99093fa3250",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2c11adb5-6bcc-4e9c-bf74-ba61f1e4dd4d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 3336,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/db', {\n  'qs': {'limit': 10, 'offset': 0, 'database': 'PaleoVertebrates of Latin America'},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e3258b25-a2dd-40eb-8987-0a14a32b1fbe",
                  "parentUUID": "2c11adb5-6bcc-4e9c-bf74-ba61f1e4dd4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3258b25-a2dd-40eb-8987-0a14a32b1fbe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3336,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1b51b568-01de-420d-8bab-3a5b702fa298",
          "title": "tests for /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
          "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0749d6b-7c7b-43bc-8ebd-421795dbce29",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
              "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronologies/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 147,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/chronologies/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e63fea5b-4d0a-4527-8d31-89030795a175",
                  "parentUUID": "d0749d6b-7c7b-43bc-8ebd-421795dbce29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e63fea5b-4d0a-4527-8d31-89030795a175"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 147,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "be9be270-5738-474b-8ec7-2d7ac855e4ba",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "08aedad5-36bd-4233-935d-9b926db91fce",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/500/contacts', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "77ddad2a-e28c-48c3-8104-87cfcd51758b",
                  "parentUUID": "08aedad5-36bd-4233-935d-9b926db91fce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77ddad2a-e28c-48c3-8104-87cfcd51758b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 74,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e86c413a-8637-471d-99eb-2c8a8f6d43ce",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "df208cec-76b2-499f-a9d1-7df67cb8b2db",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/contacts', {\n  'qs': {'contactid': 17662, 'familyname': 'dolore cupidatat', 'contactname': 'nostrud nulla enim', 'contactstatus': 'inactive', 'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a5fc35e8-b42a-436a-965a-73249d1460ea",
                  "parentUUID": "df208cec-76b2-499f-a9d1-7df67cb8b2db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5fc35e8-b42a-436a-965a-73249d1460ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9ec58d15-1059-49f1-b3e1-e5b071f5d250",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "db7c162b-1746-40f4-a789-a4fd288f3694",
              "parentUUID": "9ec58d15-1059-49f1-b3e1-e5b071f5d250",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "db7c162b-1746-40f4-a789-a4fd288f3694"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "03b7dea6-76a1-4072-89d8-cf9cee1af500",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "9d921ec6-283d-4cdb-954e-a343e7b617f9",
              "parentUUID": "03b7dea6-76a1-4072-89d8-cf9cee1af500",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9d921ec6-283d-4cdb-954e-a343e7b617f9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "826b26db-d240-4c41-88dd-799e321afb52",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "aca32c0e-846a-473f-84f6-fce9513adf46",
              "parentUUID": "826b26db-d240-4c41-88dd-799e321afb52",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "aca32c0e-846a-473f-84f6-fce9513adf46"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "837e8e56-33c6-4488-abfb-31e7b31730d5",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "68b7f349-8377-45d1-ac99-d5877de4719d",
              "parentUUID": "837e8e56-33c6-4488-abfb-31e7b31730d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "68b7f349-8377-45d1-ac99-d5877de4719d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "60e48c1f-2c03-4d27-a527-431cfbf8b175",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c653c863-c2c1-45f8-8e0b-8db87c5415a9",
              "parentUUID": "60e48c1f-2c03-4d27-a527-431cfbf8b175",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c653c863-c2c1-45f8-8e0b-8db87c5415a9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2599458c-4da6-483f-b8e8-a58a47f41114",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "97798731-334c-4522-8634-d47550cfe4bb",
              "parentUUID": "2599458c-4da6-483f-b8e8-a58a47f41114",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "97798731-334c-4522-8634-d47550cfe4bb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "39c0e566-e5b1-4b07-baeb-afc85988c3a6",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "bb73d1e6-eb64-425e-bfe2-936ccbedf614",
              "parentUUID": "39c0e566-e5b1-4b07-baeb-afc85988c3a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bb73d1e6-eb64-425e-bfe2-936ccbedf614"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0fddd331-eb82-4aa3-8440-ff0efa6434a4",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "42dabbd2-dcdf-48aa-9c49-2387d57c65d8",
              "parentUUID": "0fddd331-eb82-4aa3-8440-ff0efa6434a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "42dabbd2-dcdf-48aa-9c49-2387d57c65d8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d6dc6cd1-7681-437b-b9b8-d503e48ba443",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "e553c684-7e6d-4c71-bfa6-740d002e5939",
              "parentUUID": "d6dc6cd1-7681-437b-b9b8-d503e48ba443",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e553c684-7e6d-4c71-bfa6-740d002e5939"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a494f11b-5a73-4f07-bc6b-6a9c8ffd830e",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5350808c-3287-48a9-ba25-10c7dda9fc17",
              "parentUUID": "a494f11b-5a73-4f07-bc6b-6a9c8ffd830e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5350808c-3287-48a9-ba25-10c7dda9fc17"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "25d041ae-efeb-478b-b8e7-9ddc8d368943",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "17f99e7f-b8e1-43b9-b551-bb2f3f6b4892",
              "parentUUID": "25d041ae-efeb-478b-b8e7-9ddc8d368943",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "17f99e7f-b8e1-43b9-b551-bb2f3f6b4892"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e165d669-1bdf-47e9-b51f-aa6101439570",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "12c222d8-eac4-4268-9ccb-48994a6185d6",
              "parentUUID": "e165d669-1bdf-47e9-b51f-aa6101439570",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "12c222d8-eac4-4268-9ccb-48994a6185d6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1f01ccd8-226b-4ec2-b4fa-c5f27b58c0ba",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ccbfd578-097d-4914-83d4-bf6cce452e83",
              "parentUUID": "1f01ccd8-226b-4ec2-b4fa-c5f27b58c0ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ccbfd578-097d-4914-83d4-bf6cce452e83"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ff92cdde-3a83-459e-906e-f3750252d35a",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "722c3599-ab7f-4535-b290-8e834567868d",
              "parentUUID": "ff92cdde-3a83-459e-906e-f3750252d35a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "722c3599-ab7f-4535-b290-8e834567868d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "17e63527-89a2-42f1-9429-fc92dd00df29",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "038aac56-6d1c-4f1b-a666-80e81d708229",
              "parentUUID": "17e63527-89a2-42f1-9429-fc92dd00df29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "038aac56-6d1c-4f1b-a666-80e81d708229"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4684e487-da69-429c-882e-0b0d1449672f",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "14922e90-b898-40fa-bb34-4f2ffa73a496",
              "parentUUID": "4684e487-da69-429c-882e-0b0d1449672f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "14922e90-b898-40fa-bb34-4f2ffa73a496"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e205f829-0899-403b-8755-0a3fb43f24ea",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ad713b4b-06f3-4941-a7fd-d3e197dc3847",
              "parentUUID": "e205f829-0899-403b-8755-0a3fb43f24ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ad713b4b-06f3-4941-a7fd-d3e197dc3847"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "94dcc338-f3d7-4671-8fc4-c3bd79896ab7",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a1e3aa76-89b9-45b0-8400-76c41ba5a84b",
              "parentUUID": "94dcc338-f3d7-4671-8fc4-c3bd79896ab7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a1e3aa76-89b9-45b0-8400-76c41ba5a84b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "35e28ea4-ad6e-417a-b58e-0e9226d3e489",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "d52cb18d-f5f8-4d34-bdcb-c45311cf2be4",
              "parentUUID": "35e28ea4-ad6e-417a-b58e-0e9226d3e489",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d52cb18d-f5f8-4d34-bdcb-c45311cf2be4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a8fd16b1-56d3-46d9-99f8-f3f1d91c1f4b",
          "title": "GET /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronologies/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "0b0e6ce1-4d6a-4351-8a8e-14ad127a731e",
              "parentUUID": "a8fd16b1-56d3-46d9-99f8-f3f1d91c1f4b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0b0e6ce1-4d6a-4351-8a8e-14ad127a731e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7b515653-fd9f-4850-9fa5-53ebd1f1471e",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "b8f1d1ae-c207-42ef-b4ac-0010fb248ba5",
              "parentUUID": "7b515653-fd9f-4850-9fa5-53ebd1f1471e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b8f1d1ae-c207-42ef-b4ac-0010fb248ba5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8a433f5b-2dca-4b46-babb-ae1046f7a291",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "aa2af937-9949-4ceb-ae5f-34400cdbe4b9",
              "parentUUID": "8a433f5b-2dca-4b46-babb-ae1046f7a291",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "aa2af937-9949-4ceb-ae5f-34400cdbe4b9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ae42a51b-92a0-46d3-9402-c744554d89e3",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "41bfedf4-213b-458f-ab37-755a672d1475",
              "parentUUID": "ae42a51b-92a0-46d3-9402-c744554d89e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "41bfedf4-213b-458f-ab37-755a672d1475"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eece88ee-afbf-444d-ba68-470979d500f9",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "bf46830b-322c-4cba-a95a-011976d3bc0f",
              "parentUUID": "eece88ee-afbf-444d-ba68-470979d500f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bf46830b-322c-4cba-a95a-011976d3bc0f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0fc0e9ba-7a2f-4d9b-98a2-a6bc79d0c903",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "4d7f72af-f9e8-413a-84d2-d4f1105a2ce7",
              "parentUUID": "0fc0e9ba-7a2f-4d9b-98a2-a6bc79d0c903",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4d7f72af-f9e8-413a-84d2-d4f1105a2ce7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5a73b4a6-6eee-4efd-a7eb-e97f5dcf874b",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "0b891c00-e0ee-4f85-a2fc-8152ce3a23b7",
              "parentUUID": "5a73b4a6-6eee-4efd-a7eb-e97f5dcf874b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0b891c00-e0ee-4f85-a2fc-8152ce3a23b7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8d69ab2d-77aa-4648-89fa-70ce2ecefca2",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6cbf9b3d-adf3-4e2a-85e4-6d1c90ba8696",
              "parentUUID": "8d69ab2d-77aa-4648-89fa-70ce2ecefca2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6cbf9b3d-adf3-4e2a-85e4-6d1c90ba8696"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "61aba2fd-6a1f-4e87-b064-ad5155ac2988",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "0230088f-ad21-4a28-a974-e4a8abfd9478",
              "parentUUID": "61aba2fd-6a1f-4e87-b064-ad5155ac2988",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0230088f-ad21-4a28-a974-e4a8abfd9478"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "94df0822-4fa6-431e-b932-47f02a7f5068",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "3ff6cda1-7125-4e27-8c73-6519924a3d0e",
              "parentUUID": "94df0822-4fa6-431e-b932-47f02a7f5068",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3ff6cda1-7125-4e27-8c73-6519924a3d0e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b0d16f7f-ee73-476a-8ddb-7bb1ea028a86",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "3e09a9b9-b5e2-4572-a2e7-a3eeb9115b3a",
              "parentUUID": "b0d16f7f-ee73-476a-8ddb-7bb1ea028a86",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3e09a9b9-b5e2-4572-a2e7-a3eeb9115b3a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e5aa0f2f-8edc-432e-98ac-b5c519e55a85",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "1f648881-9499-4a31-a80a-f8e963b2bfaf",
              "parentUUID": "e5aa0f2f-8edc-432e-98ac-b5c519e55a85",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1f648881-9499-4a31-a80a-f8e963b2bfaf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eff3856e-d06a-4834-9a24-68195c86159d",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "8d49c6c9-330c-4e14-ba00-9cc15be0b604",
              "parentUUID": "eff3856e-d06a-4834-9a24-68195c86159d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8d49c6c9-330c-4e14-ba00-9cc15be0b604"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8d2dfd6c-5f09-46a6-aae5-2ac2558550f3",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "1747a5e5-2ff7-4b18-92da-1f0a556d5406",
              "parentUUID": "8d2dfd6c-5f09-46a6-aae5-2ac2558550f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1747a5e5-2ff7-4b18-92da-1f0a556d5406"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1e10773f-f0da-473f-8e17-86c02df4ec02",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a2869de9-71fd-44e5-a5c5-5313967481c7",
              "parentUUID": "1e10773f-f0da-473f-8e17-86c02df4ec02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a2869de9-71fd-44e5-a5c5-5313967481c7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0e2a3acf-1b5c-469f-8476-20c1937d1311",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "da74d793-0014-4a8a-8373-4a434b4b3035",
              "parentUUID": "0e2a3acf-1b5c-469f-8476-20c1937d1311",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "da74d793-0014-4a8a-8373-4a434b4b3035"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d4b3143e-5874-47bc-b48e-3ac0ad403ac4",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a981ea00-d109-438c-b968-f1e9919eb300",
              "parentUUID": "d4b3143e-5874-47bc-b48e-3ac0ad403ac4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a981ea00-d109-438c-b968-f1e9919eb300"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ea5dbac1-9d7c-4477-bbe3-ec004abd0a0e",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "576db8de-016c-45a5-bf4d-643c1d137066",
              "parentUUID": "ea5dbac1-9d7c-4477-bbe3-ec004abd0a0e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "576db8de-016c-45a5-bf4d-643c1d137066"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a0556b38-36cc-4734-bfe8-1f0c20761d9d",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "88d65817-c146-4805-8a79-71ee8919dd61",
              "parentUUID": "a0556b38-36cc-4734-bfe8-1f0c20761d9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "88d65817-c146-4805-8a79-71ee8919dd61"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c0b29f74-7001-4cdc-aea7-7baa7a21b1ef",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "671746cf-a7ac-4a0c-a745-090f75d72d82",
              "parentUUID": "c0b29f74-7001-4cdc-aea7-7baa7a21b1ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "671746cf-a7ac-4a0c-a745-090f75d72d82"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "30ae5c6a-a3dc-429d-9a91-e55a613ae118",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "b7c0c078-8b4d-4260-b56a-3120fbf93ef8",
              "parentUUID": "30ae5c6a-a3dc-429d-9a91-e55a613ae118",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b7c0c078-8b4d-4260-b56a-3120fbf93ef8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "60bb92d9-6b6a-4c9a-86c9-671ce58919d1",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "f930d1fd-6369-4897-84cb-896a913bde05",
              "parentUUID": "60bb92d9-6b6a-4c9a-86c9-671ce58919d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f930d1fd-6369-4897-84cb-896a913bde05"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a747ac27-91f1-4ada-a631-7dfb54faefc0",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a226177e-1b91-41dd-a988-0b8f34eb500e",
              "parentUUID": "a747ac27-91f1-4ada-a631-7dfb54faefc0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a226177e-1b91-41dd-a988-0b8f34eb500e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "34fcfd10-6648-4fba-95ac-5d7c19e429b8",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "f6ba7110-e278-4bd3-adc5-d94b79b11cb1",
              "parentUUID": "34fcfd10-6648-4fba-95ac-5d7c19e429b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f6ba7110-e278-4bd3-adc5-d94b79b11cb1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e64ecccc-eb73-4702-8ced-e323af672644",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5e57c5ad-2617-4124-b1d9-cc536da9b275",
              "parentUUID": "e64ecccc-eb73-4702-8ced-e323af672644",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5e57c5ad-2617-4124-b1d9-cc536da9b275"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d83f34e2-ae9a-4e8b-baab-685f03f5441d",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "bcedaf6f-da65-49f5-afe2-d4c5c43440b1",
              "parentUUID": "d83f34e2-ae9a-4e8b-baab-685f03f5441d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bcedaf6f-da65-49f5-afe2-d4c5c43440b1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "664ca064-9fe1-4628-8102-b1d90668384d",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "75a0b8b5-6c2b-4771-b85e-242d863916ea",
              "parentUUID": "664ca064-9fe1-4628-8102-b1d90668384d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "75a0b8b5-6c2b-4771-b85e-242d863916ea"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8f15f566-5d17-457e-b974-aeca6a274800",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "1b3e3000-e27b-4fff-8664-2250b4e3ec4d",
              "parentUUID": "8f15f566-5d17-457e-b974-aeca6a274800",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1b3e3000-e27b-4fff-8664-2250b4e3ec4d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5f26cea5-029c-4e01-828f-83308b123044",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6a6120b0-3f94-4584-ab9b-fa4188136274",
              "parentUUID": "5f26cea5-029c-4e01-828f-83308b123044",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6a6120b0-3f94-4584-ab9b-fa4188136274"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "78d8265f-e78d-4f99-80e9-8587cd740915",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "141c3df3-9ec5-469e-a25a-b70778ba0077",
              "parentUUID": "78d8265f-e78d-4f99-80e9-8587cd740915",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "141c3df3-9ec5-469e-a25a-b70778ba0077"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7c83c689-7bd9-45f2-ab2d-86662cf93db8",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "e9c79352-7975-4ea8-9ec0-767784b304b1",
              "parentUUID": "7c83c689-7bd9-45f2-ab2d-86662cf93db8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e9c79352-7975-4ea8-9ec0-767784b304b1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "14dbadcb-688c-439a-b78d-5ee8ed642819",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6bbb0ee8-ca3d-438d-8f21-d6586ab07f36",
              "parentUUID": "14dbadcb-688c-439a-b78d-5ee8ed642819",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6bbb0ee8-ca3d-438d-8f21-d6586ab07f36"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5a44696a-d8cb-4a57-9dc0-ecbe373c5da0",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "3851fe65-ba88-41d3-8f3e-371dea539926",
              "parentUUID": "5a44696a-d8cb-4a57-9dc0-ecbe373c5da0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3851fe65-ba88-41d3-8f3e-371dea539926"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f7d8fc31-b399-4723-a1a9-d17b6ac88bd7",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "2d13ed9e-d51d-4009-9c1f-83b705b275e5",
              "parentUUID": "f7d8fc31-b399-4723-a1a9-d17b6ac88bd7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2d13ed9e-d51d-4009-9c1f-83b705b275e5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cc9ab0dd-d764-4ecf-a5f6-7731263d777c",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "d6366449-33cd-4c0c-bf16-932ac33ad200",
              "parentUUID": "cc9ab0dd-d764-4ecf-a5f6-7731263d777c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d6366449-33cd-4c0c-bf16-932ac33ad200"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "01fe8c8b-035e-4188-8fae-b3e3bb435965",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "2e70da9a-358a-4193-a266-89d52e667de1",
              "parentUUID": "01fe8c8b-035e-4188-8fae-b3e3bb435965",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2e70da9a-358a-4193-a266-89d52e667de1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a4222d08-752d-4450-8993-666d072f91a7",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "13682b6c-3a4e-4bfe-ad1c-b33b34a3e490",
              "parentUUID": "a4222d08-752d-4450-8993-666d072f91a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "13682b6c-3a4e-4bfe-ad1c-b33b34a3e490"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f1fc19c2-bb8f-4af4-b16d-f124cafecf62",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "9a7c7593-dab0-4c26-bb7f-fd6a2ff20a80",
              "parentUUID": "f1fc19c2-bb8f-4af4-b16d-f124cafecf62",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9a7c7593-dab0-4c26-bb7f-fd6a2ff20a80"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6e36df1f-002e-420e-b15c-d878c3150000",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "f7e3d922-d7e6-417b-8994-dedf280439c6",
              "parentUUID": "6e36df1f-002e-420e-b15c-d878c3150000",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f7e3d922-d7e6-417b-8994-dedf280439c6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9aa5a19d-70fb-45f8-8ba5-062c1eab74fe",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "46d930b0-0a6d-45e2-ae6b-05db86e8f80a",
              "parentUUID": "9aa5a19d-70fb-45f8-8ba5-062c1eab74fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "46d930b0-0a6d-45e2-ae6b-05db86e8f80a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "adcd4148-df6b-4005-97e4-a294149ea927",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "d00ea062-455d-41d0-853d-e4c7a66e7154",
              "parentUUID": "adcd4148-df6b-4005-97e4-a294149ea927",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d00ea062-455d-41d0-853d-e4c7a66e7154"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "660ec376-cc71-41f5-b75d-5a5927d17e23",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "9e331df7-9d1f-43ea-a86e-39dfe62764e5",
              "parentUUID": "660ec376-cc71-41f5-b75d-5a5927d17e23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9e331df7-9d1f-43ea-a86e-39dfe62764e5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4a198d10-c1ea-4001-a3d2-a39fe55bcae6",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: connect ECONNREFUSED 127.0.0.1:3005",
                "estack": "Error: connect ECONNREFUSED 127.0.0.1:3005\n    at AxiosError.from (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:837:14)\n    at RedirectableRequest.handleRequestError (/home/simon/Documents/Neotoma/api_nodetest/node_modules/axios/dist/node/axios.cjs:3029:25)\n    at RedirectableRequest.emit (node:events:514:28)\n    at eventHandlers.<computed> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/follow-redirects/index.js:14:24)\n    at ClientRequest.emit (node:events:514:28)\n    at Socket.socketErrorListener (node:_http_client:501:9)\n    at Socket.emit (node:events:514:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "98a60da2-34c1-4da6-b21c-c1e6a337b802",
              "parentUUID": "4a198d10-c1ea-4001-a3d2-a39fe55bcae6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "98a60da2-34c1-4da6-b21c-c1e6a337b802"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b9e40d70-f5ad-4729-91bf-13b2b95424e7",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad86f04e-91de-478b-a5ae-fcce854d6022",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/pollen', {\n  'qs': {'taxonname': 'reprehenderit', 'taxonid': 19822, 'siteid': 27048, 'sitename': 'amet dolor dolore', 'datasettype': 'insect modern', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 1291626, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1da3efdb-7112-4b70-baae-b633c04211db",
                  "parentUUID": "ad86f04e-91de-478b-a5ae-fcce854d6022",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1da3efdb-7112-4b70-baae-b633c04211db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "41dad49a-8997-4272-84a0-975a66e65ca7",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ae398590-4166-407b-b10d-4b40107c6864",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/geopoliticalunits/8698/datasets', {\n  'qs': {'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "15a2a090-3c1b-40ff-9ef5-236a20878374",
                  "parentUUID": "ae398590-4166-407b-b10d-4b40107c6864",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15a2a090-3c1b-40ff-9ef5-236a20878374"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 144,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c693e150-0bf1-4f63-aaf7-2b76087468c4",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "31127729-ccd8-46ce-898a-0e82cd1031c6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 71,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/dbtables', {\n  'qs': {'table': 'veniam anim do', 'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a5773321-84c8-4a1e-bf45-f9685e6c6a3b",
                  "parentUUID": "31127729-ccd8-46ce-898a-0e82cd1031c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5773321-84c8-4a1e-bf45-f9685e6c6a3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 71,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fc0d9d77-4694-496e-870c-4ee2862c1315",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fd74ec3a-caec-4c24-a4e6-6fe12a0d4944",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/500/sites', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "97ae884a-2704-43e7-bb28-877c7c52670a",
                  "parentUUID": "fd74ec3a-caec-4c24-a4e6-6fe12a0d4944",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97ae884a-2704-43e7-bb28-877c7c52670a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 174,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "94de2eee-df49-4651-96df-0f4612caeb0f",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      if (err) return done(err);\n      assert.strictEqual(res.body.data.length, 25);\n      done();\n    });",
              "err": {},
              "uuid": "f738b557-546f-4cc2-9bc5-a7d0aca68c64",
              "parentUUID": "94de2eee-df49-4651-96df-0f4612caeb0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      if (err) return done(err);\n      assert.strictEqual(res.body.data[0]['familyname'], 'Grimm');\n      done();\n    });",
              "err": {},
              "uuid": "30af33ed-2044-4290-af77-0c875f5973d6",
              "parentUUID": "94de2eee-df49-4651-96df-0f4612caeb0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      if (err) return done(err);\n      assert.strictEqual(res.body.data.length, 25);\n      done();\n    });",
              "err": {},
              "uuid": "e8a459f4-6b6e-44f3-b53d-af7bf752acc7",
              "parentUUID": "94de2eee-df49-4651-96df-0f4612caeb0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      if (err) return done(err);\n      assert.strictEqual(res.body.data.length, 30);\n      done();\n    });",
              "err": {},
              "uuid": "53adf45a-9dcf-4f27-931d-1a136cf3a365",
              "parentUUID": "94de2eee-df49-4651-96df-0f4612caeb0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 162,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      if (err) return done(err);\n      assert.strictEqual(res.body.data[0]['contactid'], 12);\n      done();\n    });",
              "err": {},
              "uuid": "273ef0ee-9e88-40c0-aec8-a7fe934242c8",
              "parentUUID": "94de2eee-df49-4651-96df-0f4612caeb0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 170,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      if (err) return done(err);\n      assert.strictEqual(res.body.data.length, 2);\n      done();\n    });",
              "err": {},
              "uuid": "2e665149-ea70-41f4-84da-42a399097077",
              "parentUUID": "94de2eee-df49-4651-96df-0f4612caeb0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      if (err) return done(err);\n      const test = [];\n      assert.strictEqual(test.length, 0);\n      done();\n    });",
              "err": {},
              "uuid": "180d5ace-ac9e-4445-9de3-8ee99b0dc17a",
              "parentUUID": "94de2eee-df49-4651-96df-0f4612caeb0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      if (err) return done(err);\n      assert.strictEqual(Object.keys(res.body.data).length, 4);\n      done();\n    });",
              "err": {},
              "uuid": "8b4feba1-8df3-4218-bff8-ad9fa61e6029",
              "parentUUID": "94de2eee-df49-4651-96df-0f4612caeb0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f738b557-546f-4cc2-9bc5-a7d0aca68c64",
            "30af33ed-2044-4290-af77-0c875f5973d6",
            "e8a459f4-6b6e-44f3-b53d-af7bf752acc7",
            "53adf45a-9dcf-4f27-931d-1a136cf3a365",
            "273ef0ee-9e88-40c0-aec8-a7fe934242c8",
            "2e665149-ea70-41f4-84da-42a399097077",
            "180d5ace-ac9e-4445-9de3-8ee99b0dc17a",
            "8b4feba1-8df3-4218-bff8-ad9fa61e6029"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1355,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "daeb6833-7fbf-4824-a96d-28358268813d",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36e78f03-ba05-400b-ad64-2a85635a37c2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 339,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/summary/dsdbmonth', {\n  'qs': {'start': 1, 'end': 10},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c7e15b1d-4a18-4bfc-bc90-35cbcb281cde",
                  "parentUUID": "36e78f03-ba05-400b-ad64-2a85635a37c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7e15b1d-4a18-4bfc-bc90-35cbcb281cde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 339,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d2b40d67-46e1-46e6-9879-0f798c88f4dd",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "18b4f21e-3624-4931-9816-f0cc54fde1ef",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 122,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/500/publications', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "80476f5e-9287-454d-9928-c3087ba0e9fc",
                  "parentUUID": "18b4f21e-3624-4931-9816-f0cc54fde1ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80476f5e-9287-454d-9928-c3087ba0e9fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 122,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "88cf47e2-0162-4cab-9149-82116fdc0db6",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c4645f7-2fa4-4d36-8660-67e4887a00d7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 968,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/contacts/4005/sites', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7e5f83ed-fa87-49cc-91c6-bb7e81183296",
                  "parentUUID": "0c4645f7-2fa4-4d36-8660-67e4887a00d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e5f83ed-fa87-49cc-91c6-bb7e81183296"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 968,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5f2af553-5ac3-4115-8014-fefce6693967",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5a3b8f0c-a7e3-4060-ba75-2c164ccee1bb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 209,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets', {\n  'qs': {'sitename': 'consequat', 'database': 'Neotoma Biomarker Database', 'datasettype': 'testate amoebae', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'siteid': 5431, 'datasetid': 48370126, 'doi': '10n0587470/A:CJ', 'gpid': 756, 'keyword': 'beyond radiocarbon', 'contactid': 14206, 'taxa': 'in nostrud', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 16221347, 'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5736ff4d-44f0-4914-8e7b-ac3e01b8cbc5",
                  "parentUUID": "5a3b8f0c-a7e3-4060-ba75-2c164ccee1bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5736ff4d-44f0-4914-8e7b-ac3e01b8cbc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 209,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "24b20e2a-2fee-4ce3-b0f0-83a014ec138c",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c27f9655-d86e-4675-a1fb-a25da70d0735",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 1982,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/apps/taxaindatasets', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1d063abb-1027-48cc-ab9c-75f8a86371f3",
                  "parentUUID": "c27f9655-d86e-4675-a1fb-a25da70d0735",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d063abb-1027-48cc-ab9c-75f8a86371f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1982,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1b872afa-1b7d-4b5a-8c8c-eef03218b935",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0bdce5ff-ec16-402f-adcd-f083632e0173",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 9161,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/downloads/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "bbdd59a9-702a-433e-9188-d159637d0fae",
                  "parentUUID": "0bdce5ff-ec16-402f-adcd-f083632e0173",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbdd59a9-702a-433e-9188-d159637d0fae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9161,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c1cc6821-78a1-4d28-8ad6-03f9b9bd0a67",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "670a8fa7-fc80-4f59-b0b9-775cd49ecb40",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/sites/500/contacts', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "60455e62-2911-44fb-9ef3-d2759dcefc57",
                  "parentUUID": "670a8fa7-fc80-4f59-b0b9-775cd49ecb40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60455e62-2911-44fb-9ef3-d2759dcefc57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "61c5c849-8b3e-4073-b37b-b9f2c4596f29",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1ab91c4f-ad7f-42b1-adb0-6f6eae1ee6eb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/taxa', {\n  'qs': {'taxonname': 'labore ut proident nostrud dolor', 'taxongroup': 'sit occaecat dolore', 'ecolgroup': 'Duis et aliqua anim', 'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3e5743af-8cd5-461b-91fe-5e80fbc801bb",
                  "parentUUID": "1ab91c4f-ad7f-42b1-adb0-6f6eae1ee6eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e5743af-8cd5-461b-91fe-5e80fbc801bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 174,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d361536f-8bf6-429e-8921-c57976feb53f",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bdcf9c5c-471b-44ca-b5e5-87b440bcbb33",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 193,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/sites/500/chronologies', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "12defe7c-bf99-48ff-ad5b-461d4398071f",
                  "parentUUID": "bdcf9c5c-471b-44ca-b5e5-87b440bcbb33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12defe7c-bf99-48ff-ad5b-461d4398071f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 193,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "71a3bbd6-57b2-48cc-8c23-5f7eaa981a86",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4c06bf4a-4249-47d2-bb52-e725ebadaebf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/apps/datasettypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "16f2780b-b253-4b72-82f3-fc74021d94b7",
                  "parentUUID": "4c06bf4a-4249-47d2-bb52-e725ebadaebf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16f2780b-b253-4b72-82f3-fc74021d94b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5b1d4cef-15a3-4392-be25-e01c269d0326",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b9bf2a14-668a-44fd-8bea-71c63a3f64b1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 883,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/sites', {\n  'qs': {'sitename': 'Lorem Duis', 'database': 'Alaskan Archaeofaunas', 'datasettype': 'ostracode', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'siteid': 27404, 'datasetid': 24316695, 'doi': '10F4459/H(HCTZ5VVR', 'gpid': 756, 'keyword': 'interglacial', 'contactid': 17999, 'taxa': 'fugiat commodo', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 5064265, 'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c738721d-73c2-44fb-932a-44e519c2edc7",
                  "parentUUID": "b9bf2a14-668a-44fd-8bea-71c63a3f64b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c738721d-73c2-44fb-932a-44e519c2edc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 883,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "76950de7-630f-4d4e-ac55-eead9f8632cb",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "41cb3c33-5fd1-4708-8c82-c27f26517aa4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/occurrences', {\n  'qs': {'taxonname': 'non Lorem quis tempor', 'taxonid': 2805, 'siteid': 8414, 'sitename': 'Ut', 'datasettype': 'chironomid', 'altmin': 10, 'altmax': 100, 'loc': '{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 16238266, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4825fc7e-0ab2-4437-a886-86855d8a1101",
                  "parentUUID": "41cb3c33-5fd1-4708-8c82-c27f26517aa4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4825fc7e-0ab2-4437-a886-86855d8a1101"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 188,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "902326d2-2f16-4eca-b100-c6b9ea66977b",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query returns a valid response.",
              "fullTitle": "Get geopolitical data: An empty query returns a valid response.",
              "timedOut": false,
              "duration": 644,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n    .set('Accept', 'application/json')\n    .expect(200, done);",
              "err": {},
              "uuid": "ff4b322c-4dc6-4f3a-9c35-40c6c55df24e",
              "parentUUID": "902326d2-2f16-4eca-b100-c6b9ea66977b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.equal(res.body.data.length, 25);\n      done();\n    });",
              "err": {},
              "uuid": "d4aaf5a1-c3de-404b-95bf-439e962905cc",
              "parentUUID": "902326d2-2f16-4eca-b100-c6b9ea66977b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.equal(res.body.data.length, 30);\n      done();\n    });",
              "err": {},
              "uuid": "c0376a20-7d4e-4ef0-8448-3c08ffcf4882",
              "parentUUID": "902326d2-2f16-4eca-b100-c6b9ea66977b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.equal(res.body.data[0]['geopoliticalid'], 12);\n      done();\n    });",
              "err": {},
              "uuid": "7482240b-02c9-4f62-b762-c6b97fe179ea",
              "parentUUID": "902326d2-2f16-4eca-b100-c6b9ea66977b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff4b322c-4dc6-4f3a-9c35-40c6c55df24e",
            "d4aaf5a1-c3de-404b-95bf-439e962905cc",
            "c0376a20-7d4e-4ef0-8448-3c08ffcf4882",
            "7482240b-02c9-4f62-b762-c6b97fe179ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1198,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d5e66ab9-a6fd-41d9-a3f0-2c232afc8011",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f8110537-04b2-48e1-9152-5e73baff49e9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/apps/DatasetTypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8ce4cc2f-0a02-4fcd-993d-05a6fee1dc21",
                  "parentUUID": "f8110537-04b2-48e1-9152-5e73baff49e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ce4cc2f-0a02-4fcd-993d-05a6fee1dc21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 112,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9ae5b8c1-bc96-46bf-a0ef-bbc658c6d78b",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n    .set('Accept', 'application/json')\n    .expect(302, done);",
              "err": {},
              "uuid": "775842a8-c68d-48b9-b39a-ae19ade3fe92",
              "parentUUID": "9ae5b8c1-bc96-46bf-a0ef-bbc658c6d78b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "775842a8-c68d-48b9-b39a-ae19ade3fe92"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 150,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9e3f501d-aa74-4ed7-b4cc-f3624a4a29f2",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4fb72d3a-5f47-408a-8496-18eced6c65c5",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/apps/taphonomysystems', {\n  'qs': {'datasettypeid': 18},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "dba912da-498c-49e9-923e-8e0d7f4110a1",
                  "parentUUID": "4fb72d3a-5f47-408a-8496-18eced6c65c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dba912da-498c-49e9-923e-8e0d7f4110a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee964305-f3f8-4a4c-b8db-b7280453ae87",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "43f6e8b1-0758-4044-846b-5a1c2da8390f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/publications/8520', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f6334799-4cac-4df0-ad3a-64dc5c75463a",
                  "parentUUID": "43f6e8b1-0758-4044-846b-5a1c2da8390f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6334799-4cac-4df0-ad3a-64dc5c75463a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1980608f-fd55-4286-8bd0-8baebdf5c730",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "93c603a0-8266-4944-9784-a5f3201004b7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 846,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/apps/authorpis', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "10f181a9-383e-4061-97dd-10ee1861df1a",
                  "parentUUID": "93c603a0-8266-4944-9784-a5f3201004b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10f181a9-383e-4061-97dd-10ee1861df1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 846,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cc288152-b15b-4c9b-8235-5dc60172a9b7",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "83c22bc8-e8e2-414e-97cd-ca4b55baa0e2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 259,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/500/taxa', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ed85e894-6bc3-4bde-8f59-4634512d8311",
                  "parentUUID": "83c22bc8-e8e2-414e-97cd-ca4b55baa0e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed85e894-6bc3-4bde-8f59-4634512d8311"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 259,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4bd0410e-759f-4b94-9ecd-3fce46b75ec2",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "252dc1ab-cb47-4462-97d3-454c7ccef41e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 19178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/summary/rawbymonth', {\n  'qs': {'start': 1, 'end': 10},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d230cddd-f758-4642-a740-8b00e3b67d7a",
                  "parentUUID": "252dc1ab-cb47-4462-97d3-454c7ccef41e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d230cddd-f758-4642-a740-8b00e3b67d7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19178,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2910a863-9955-43f5-9a26-56f7d480ba86",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 718,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return res.body['data'].length === 4;\n    })\n    .expect(200)\n    .end(function(err, res) {\n      if (err) return done(err);\n      done();\n    });",
              "err": {},
              "uuid": "f858b27b-483a-435d-b287-dc95d551ab76",
              "parentUUID": "2910a863-9955-43f5-9a26-56f7d480ba86",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f858b27b-483a-435d-b287-dc95d551ab76"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 718,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0ade55ca-85ee-4502-8eb8-b9fbe0e9b657",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0a49ec0c-a0a0-440f-98de-c47d069de2ce",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/apps/keywords', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e9600658-72b2-4b67-9502-b444619c7cd4",
                  "parentUUID": "0a49ec0c-a0a0-440f-98de-c47d069de2ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9600658-72b2-4b67-9502-b444619c7cd4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "v2.0: An empty query returns the first 25 taxa.",
              "fullTitle": "Get taxon data: v2.0: An empty query returns the first 25 taxa.",
              "timedOut": false,
              "duration": 153,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n    .set('Accept', 'application/json')\n    .expect(200, done);",
              "err": {
                "message": "Error: expected 200 \"OK\", got 502 \"Bad Gateway\"",
                "estack": "Error: expected 200 \"OK\", got 502 \"Bad Gateway\"\n    at Test._assertStatus (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:268:12)\n    at Test._assertFunction (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:173:18)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ee9447ae-0402-4a45-b388-3eb944f80be4",
              "parentUUID": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "v2.0: A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: v2.0: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 143,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.strictEqual(res.body.data[0]['taxonid'], 12);\n      done();\n      if (err) {\n        console.log(err.message);\n      };\n    });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:32:43)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "166ff43d-3138-4a9c-9bfb-e2a0e6ff37db",
              "parentUUID": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "v2.0: Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: v2.0: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 149,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.strictEqual(res.body.data[0]['taxonid'], 1);\n      done();\n      if (err) {\n        console.log(err.message);\n      };\n    });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:44:43)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "b15a0f60-2bd9-418d-a626-c30a01de7b79",
              "parentUUID": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "v2.0: Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: v2.0: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 145,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.strictEqual(res.body.data[0]['taxonid'], 1);\n      done();\n      if (err) {\n        console.log(err.message);\n      };\n    });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:56:43)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "8a9a4830-0c1f-4bd8-8ad9-26f890390948",
              "parentUUID": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "v2.0: Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: v2.0: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 148,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.strictEqual(res.body.data[0]['taxonid'], 1);\n      done();\n      if (err) {\n        console.log(err.message);\n      };\n    });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:68:43)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "5b0764db-42bc-4c0b-80ee-0cbe42e969fa",
              "parentUUID": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "v2.0: Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: v2.0: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 152,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.strictEqual(res.body.data[0]['taxonid'], 1);\n      done();\n      if (err) {\n        console.log(err.message);\n      };\n    });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading '0')",
                "estack": "TypeError: Cannot read properties of undefined (reading '0')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:80:43)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c2e818dd-cb98-4300-9cab-395b5a6aeeb5",
              "parentUUID": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "v2.0: The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: v2.0: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 152,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.strictEqual(res.body.data.length, 25);\n      done();\n      if (err) {\n        console.log(err.message);\n      };\n    });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:92:44)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a637a463-2eae-4604-a724-d889f079511c",
              "parentUUID": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "v2.0: Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: v2.0: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 143,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      assert.strictEqual(res.body.data.length, 30);\n      done();\n      if (err) {\n        console.log(err.message);\n      };\n    });",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Test.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js:104:44)\n    at Test.assert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:181:6)\n    at localAssert (/home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Request.callback (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:728:3)\n    at IncomingMessage.<anonymous> (/home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18)\n    at IncomingMessage.emit (node:events:526:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a450b7fd-b622-463c-b150-961923a080e5",
              "parentUUID": "ff0883f9-b3ac-4229-98f4-43741029f3d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ee9447ae-0402-4a45-b388-3eb944f80be4",
            "166ff43d-3138-4a9c-9bfb-e2a0e6ff37db",
            "b15a0f60-2bd9-418d-a626-c30a01de7b79",
            "8a9a4830-0c1f-4bd8-8ad9-26f890390948",
            "5b0764db-42bc-4c0b-80ee-0cbe42e969fa",
            "c2e818dd-cb98-4300-9cab-395b5a6aeeb5",
            "a637a463-2eae-4604-a724-d889f079511c",
            "a450b7fd-b622-463c-b150-961923a080e5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1185,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "386fc770-9716-4c70-bc20-912dcb322f54",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d7616233-7a9b-45e9-b1c3-d3673cd0261e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 133,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/taxa/500/occurrences', {\n  'qs': {'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f253cf23-f773-4411-94a4-19f62aeb5f1c",
                  "parentUUID": "d7616233-7a9b-45e9-b1c3-d3673cd0261e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f253cf23-f773-4411-94a4-19f62aeb5f1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 133,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bd22fa0e-ecd9-42b5-a71e-fd74dd967408",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "45453438-5d1e-4fa0-853e-56e6bab2c6cf",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 196,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/apps/taxagrouptypes', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "edef9961-bd00-4e86-84c4-78fe2eec0237",
                  "parentUUID": "45453438-5d1e-4fa0-853e-56e6bab2c6cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edef9961-bd00-4e86-84c4-78fe2eec0237"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 196,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2360c544-56b2-4ab2-986d-3df6c5bc2325",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a17c08ad-afd6-405f-b32d-46d3160b4e2a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/500/doi', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "af272fb9-d94e-4b22-8798-7c4feed60c80",
                  "parentUUID": "a17c08ad-afd6-405f-b32d-46d3160b4e2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af272fb9-d94e-4b22-8798-7c4feed60c80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 74,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6c152406-46ba-4a7e-8394-c4a260bacfc6",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "198bdda0-d231-4040-bff4-f5d91be8bd6a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/geopoliticalunits/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d383608c-1182-4231-bb00-e4196e0f07a6",
                  "parentUUID": "198bdda0-d231-4040-bff4-f5d91be8bd6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d383608c-1182-4231-bb00-e4196e0f07a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 74,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "20786f40-ae51-46e0-80ca-85bb35128267",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3ef8782b-5084-4c71-89b0-d94bbf93c9dd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/publications', {\n  'qs': {'publicationid': 10332, 'datasetid': 71435280, 'siteid': 21832, 'familyname': 'nostrud cillum Lorem nulla minim', 'pubtype': 'Authored Book', 'year': 1983, 'search': 'ipsum', 'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "150ae171-cb17-4ca5-bfb1-47cfff33a6da",
                  "parentUUID": "3ef8782b-5084-4c71-89b0-d94bbf93c9dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "150ae171-cb17-4ca5-bfb1-47cfff33a6da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "419f8fcb-8bda-4019-993d-096c779707f3",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2cd38c09-c223-4d51-afd2-482cf412661b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 1358,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/apps/TaxaInDatasets', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7ba6ae2f-d471-41dd-b9b4-e5fb9693c601",
                  "parentUUID": "2cd38c09-c223-4d51-afd2-482cf412661b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ba6ae2f-d471-41dd-b9b4-e5fb9693c601"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1358,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9055cee6-7e39-40fe-9957-57853080bc97",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['occurrence'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "f1d2f115-cd69-43b4-b8e2-3a4635049a68",
              "parentUUID": "9055cee6-7e39-40fe-9957-57853080bc97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 678,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['occurrence'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "05bfc9f3-6699-4645-a2ad-dc49b9579b9b",
              "parentUUID": "9055cee6-7e39-40fe-9957-57853080bc97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 3303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['occurrence'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "b914ebf5-91c1-4634-82e5-acf32b69bd3e",
              "parentUUID": "9055cee6-7e39-40fe-9957-57853080bc97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1d2f115-cd69-43b4-b8e2-3a4635049a68",
            "05bfc9f3-6699-4645-a2ad-dc49b9579b9b",
            "b914ebf5-91c1-4634-82e5-acf32b69bd3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "9cd7c7b4-4dbe-4ba6-bbc1-c1a6f7799cff",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 420,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['occurrence'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "f73317ea-819a-4163-b20d-b84ff87e64a3",
              "parentUUID": "9cd7c7b4-4dbe-4ba6-bbc1-c1a6f7799cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 819,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['occurrence'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "f1abb995-f89c-4b61-9818-1c769cd94f2c",
              "parentUUID": "9cd7c7b4-4dbe-4ba6-bbc1-c1a6f7799cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 4262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['occurrence'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "8c1e3da3-2916-41cc-a1e0-e5f6389e2582",
              "parentUUID": "9cd7c7b4-4dbe-4ba6-bbc1-c1a6f7799cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 3624,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n    .set('Accept', 'application/json')\n    .expect(function(res) {\n      return Object.keys(res.body['data'][0]).length > 0;\n    })\n    .expect(function(res) {\n      return res.body['data'][0]['occurrence'] === 12;\n    })\n    .expect(200, done);",
              "err": {},
              "uuid": "b22f2646-dd57-46bc-8272-5e0e129412c3",
              "parentUUID": "9cd7c7b4-4dbe-4ba6-bbc1-c1a6f7799cff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f73317ea-819a-4163-b20d-b84ff87e64a3",
            "f1abb995-f89c-4b61-9818-1c769cd94f2c",
            "8c1e3da3-2916-41cc-a1e0-e5f6389e2582",
            "b22f2646-dd57-46bc-8272-5e0e129412c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "fb6b8e72-b437-461b-81f0-eed476b0307c",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bc5bb420-05b0-4660-b943-7b62412fc3c9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 471,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/geopoliticalunits/7678/sites', {\n  'qs': {'limit': 10, 'offset': 0},\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0e5e3ef8-e62e-479d-95a3-b964bf84fbb5",
                  "parentUUID": "bc5bb420-05b0-4660-b943-7b62412fc3c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e5e3ef8-e62e-479d-95a3-b964bf84fbb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 471,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9a8e52b7-6033-445c-b6fe-4e3e723f91a9",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "673dc40b-1c9b-419c-9c08-18cb38d9c56c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 916,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets_elc/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f2e9d220-8bcd-45d4-af3d-50a788811bc7",
                  "parentUUID": "673dc40b-1c9b-419c-9c08-18cb38d9c56c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2e9d220-8bcd-45d4-af3d-50a788811bc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 916,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cf9dcf6b-df3c-472b-91ef-7bd69a5a6cf8",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7f9e864b-6fd2-4cbb-8318-3d2379d87a49",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 669,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/data/downloads/9509', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "235ea1b9-c252-4dff-8a3c-01bba05e7eb5",
                  "parentUUID": "7f9e864b-6fd2-4cbb-8318-3d2379d87a49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "235ea1b9-c252-4dff-8a3c-01bba05e7eb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 669,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1ae830cb-ff64-4d0e-b41c-d1a015aea3ed",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6c929b5e-2c74-4d90-9f8e-db6828ef14cb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v2.0/data/datasets/500/lithology', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "feabf37b-72a5-44dd-bfb3-c82be9b17cd9",
                  "parentUUID": "6c929b5e-2c74-4d90-9f8e-db6828ef14cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "feabf37b-72a5-44dd-bfb3-c82be9b17cd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "05053ed7-c050-4547-8f47-396c6213a51f",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef89009a-80a3-4ac3-a4ee-9236906be3f9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1915,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = request('get', 'http://localhost:3001/v1.5/data/datasets/500', {\n  'time': true,\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f67b1267-f7a7-415f-aaaf-9906c75b88c7",
                  "parentUUID": "ef89009a-80a3-4ac3-a4ee-9236906be3f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f67b1267-f7a7-415f-aaaf-9906c75b88c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1915,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}