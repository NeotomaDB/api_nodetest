{
  "stats": {
    "suites": 209,
    "tests": 194,
    "passes": 146,
    "pending": 0,
    "failures": 48,
    "start": "2021-08-25T19:47:01.018Z",
    "end": "2021-08-25T19:50:27.577Z",
    "duration": 206559,
    "testsRegistered": 194,
    "passPercent": 75.25773195876289,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eda2b846-81d9-40b2-8be2-e5364d0aa4c3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "d6ef9201-b577-4a51-bdc6-0c530518640e",
          "parentUUID": "eda2b846-81d9-40b2-8be2-e5364d0aa4c3",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "e8eaa51d-95d5-4178-8a79-f492e8514c02",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 1047,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "e9d0c7ef-8598-4f99-8a46-49539140f7b9",
              "parentUUID": "e8eaa51d-95d5-4178-8a79-f492e8514c02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9d0c7ef-8598-4f99-8a46-49539140f7b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1047,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "217ab2a0-78c2-4592-9cce-51667948500e",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get contact data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/')\n  .set('Accept', 'application/json')\n  .expect(302)\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "d2d9d999-e79b-44a0-9430-f616fe05dbd5",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 177,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "7c35c92b-8497-48b2-a910-8602b7f15192",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "d16f5e59-a8f3-414f-a87b-6a844b645c98",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "7021f327-fd3f-4fe9-92e1-b9befcedeb81",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "cc5a47ec-ee70-4efe-840a-23b640b639cd",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "31c16964-38f2-4ec8-a71e-f8e78d1f65f5",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "338f783e-f2f6-4776-bff2-53fb272b8b0e",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "c071b864-5f54-4e78-9e3a-cb123b05f339",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "98b9d5bd-f8d3-453c-b963-93adc8abeecf",
              "parentUUID": "217ab2a0-78c2-4592-9cce-51667948500e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2d9d999-e79b-44a0-9430-f616fe05dbd5",
            "7c35c92b-8497-48b2-a910-8602b7f15192",
            "d16f5e59-a8f3-414f-a87b-6a844b645c98",
            "7021f327-fd3f-4fe9-92e1-b9befcedeb81",
            "cc5a47ec-ee70-4efe-840a-23b640b639cd",
            "31c16964-38f2-4ec8-a71e-f8e78d1f65f5",
            "338f783e-f2f6-4776-bff2-53fb272b8b0e",
            "c071b864-5f54-4e78-9e3a-cb123b05f339",
            "98b9d5bd-f8d3-453c-b963-93adc8abeecf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 940,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c5fb731c-8ca0-41c4-aab4-a760905ecf49",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site', 'dataset');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f9e3e4a6-ef98-488c-b1e4-15a298ee3651",
              "parentUUID": "c5fb731c-8ca0-41c4-aab4-a760905ecf49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 917,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "e705148c-8d4b-487f-abeb-4c557289c657",
              "parentUUID": "c5fb731c-8ca0-41c4-aab4-a760905ecf49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1807,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2e7983c7-0da6-4b04-8ac8-e4c132611bbf",
              "parentUUID": "c5fb731c-8ca0-41c4-aab4-a760905ecf49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 2256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "776d1fa0-b80d-4bea-ba08-025d52a4557c",
              "parentUUID": "c5fb731c-8ca0-41c4-aab4-a760905ecf49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "af7039a0-5c2c-4cf5-81a2-0058ab13dd5e",
              "parentUUID": "c5fb731c-8ca0-41c4-aab4-a760905ecf49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 2052,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f5361ae4-1422-47a0-a0a1-736d105b4162",
              "parentUUID": "c5fb731c-8ca0-41c4-aab4-a760905ecf49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 3176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['sites']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "aa7b6b0a-6daa-4768-a1b1-19dff4fdb354",
              "parentUUID": "c5fb731c-8ca0-41c4-aab4-a760905ecf49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9e3e4a6-ef98-488c-b1e4-15a298ee3651",
            "e705148c-8d4b-487f-abeb-4c557289c657",
            "2e7983c7-0da6-4b04-8ac8-e4c132611bbf",
            "776d1fa0-b80d-4bea-ba08-025d52a4557c",
            "af7039a0-5c2c-4cf5-81a2-0058ab13dd5e",
            "f5361ae4-1422-47a0-a0a1-736d105b4162",
            "aa7b6b0a-6daa-4768-a1b1-19dff4fdb354"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11592,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "8101795c-9e4b-48ee-a813-2e3f98af31a9",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "6c9cd032-4bad-425f-8ad4-2c58c09a1c8a",
              "parentUUID": "8101795c-9e4b-48ee-a813-2e3f98af31a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 579,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "29fac5f6-2c36-489a-b95a-28653547dd1a",
              "parentUUID": "8101795c-9e4b-48ee-a813-2e3f98af31a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 408,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "26cccf41-539a-4c59-8f15-5747da60199b",
              "parentUUID": "8101795c-9e4b-48ee-a813-2e3f98af31a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 381,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "10b00293-aeac-4aec-a30c-7090e2e5533b",
              "parentUUID": "8101795c-9e4b-48ee-a813-2e3f98af31a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c9cd032-4bad-425f-8ad4-2c58c09a1c8a",
            "29fac5f6-2c36-489a-b95a-28653547dd1a",
            "26cccf41-539a-4c59-8f15-5747da60199b",
            "10b00293-aeac-4aec-a30c-7090e2e5533b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1377,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ec7e799a-3dda-4205-8739-89f017fd7b7b",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "f24b8fe1-1996-48b9-8afd-568106a17cdb",
              "parentUUID": "ec7e799a-3dda-4205-8739-89f017fd7b7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f24b8fe1-1996-48b9-8afd-568106a17cdb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 400,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "afc700b7-03e0-4076-b208-b521ace2b5c8",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 12650,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "af6a60e2-52c6-43dc-8315-25acd1e2bf2f",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 8705,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "da921630-81d5-448d-af7d-b904eeb02fd3",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 3439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "77da793d-824d-4d9c-8f06-b5dda6256588",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "3bcd60c5-8dd5-411c-bc63-ee4052a60dc7",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "299211b6-7f0b-4989-90c3-9f89480392ae",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b51e580e-def8-46f3-b44a-236520019e5a",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 3804,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "00751ce7-c6b9-49bb-bf55-924795b83d2b",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 1230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "15f0ec3d-22c8-4e84-a67a-09e8cdf9852b",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 316,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "0235600e-1a3a-4dad-8650-47ad10f608fb",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 6079,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c1e70d51-e45d-449f-a345-654a7ff0994e",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 528,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "370a2656-babc-41df-b87d-c745c9a78214",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 331,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "7313ea56-d052-454e-ab5d-489d8695be30",
              "parentUUID": "b201e2de-46e3-4191-b13a-8bfb3d8ea3e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "afc700b7-03e0-4076-b208-b521ace2b5c8",
            "af6a60e2-52c6-43dc-8315-25acd1e2bf2f",
            "da921630-81d5-448d-af7d-b904eeb02fd3",
            "77da793d-824d-4d9c-8f06-b5dda6256588",
            "3bcd60c5-8dd5-411c-bc63-ee4052a60dc7",
            "299211b6-7f0b-4989-90c3-9f89480392ae",
            "b51e580e-def8-46f3-b44a-236520019e5a",
            "00751ce7-c6b9-49bb-bf55-924795b83d2b",
            "15f0ec3d-22c8-4e84-a67a-09e8cdf9852b",
            "0235600e-1a3a-4dad-8650-47ad10f608fb",
            "c1e70d51-e45d-449f-a345-654a7ff0994e",
            "370a2656-babc-41df-b87d-c745c9a78214",
            "7313ea56-d052-454e-ab5d-489d8695be30"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37760,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f38385a6-efbb-4502-a966-cfc0957caacf",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "a8442ad1-2b55-43d4-ae38-02cb97737f67",
              "parentUUID": "f38385a6-efbb-4502-a966-cfc0957caacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "1972261a-46c3-4ae5-bb0d-166c97bed3dd",
              "parentUUID": "f38385a6-efbb-4502-a966-cfc0957caacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 1543,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "24349180-ae7c-48ff-a82d-2019dbcb83d3",
              "parentUUID": "f38385a6-efbb-4502-a966-cfc0957caacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 964,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "90262467-02b4-44a4-bb61-1eb4d2137a2f",
              "parentUUID": "f38385a6-efbb-4502-a966-cfc0957caacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 613,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "153164d4-cf5c-4b53-ab9c-f4b0afa18e18",
              "parentUUID": "f38385a6-efbb-4502-a966-cfc0957caacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 614,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2f066b25-df9b-4432-bf1f-3aa180121002",
              "parentUUID": "f38385a6-efbb-4502-a966-cfc0957caacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 410,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "738980be-bbba-499c-9a82-863b5edb470f",
              "parentUUID": "f38385a6-efbb-4502-a966-cfc0957caacf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8442ad1-2b55-43d4-ae38-02cb97737f67",
            "1972261a-46c3-4ae5-bb0d-166c97bed3dd",
            "24349180-ae7c-48ff-a82d-2019dbcb83d3",
            "90262467-02b4-44a4-bb61-1eb4d2137a2f",
            "153164d4-cf5c-4b53-ab9c-f4b0afa18e18",
            "2f066b25-df9b-4432-bf1f-3aa180121002",
            "738980be-bbba-499c-9a82-863b5edb470f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4437,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f5110b68-08d7-41b9-9722-a24162816287",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 269,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "84ac6d86-dba1-4844-b842-e5c83ce9bfe3",
              "parentUUID": "f5110b68-08d7-41b9-9722-a24162816287",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84ac6d86-dba1-4844-b842-e5c83ce9bfe3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 269,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a33e5ad9-0b76-4bd9-bec5-5c2aa0d6d9f9",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 10364,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "66993f3e-3ca8-48a0-bda9-1531474fc71b",
              "parentUUID": "a33e5ad9-0b76-4bd9-bec5-5c2aa0d6d9f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66993f3e-3ca8-48a0-bda9-1531474fc71b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10364,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fd60906a-f5af-42d9-9db7-79720fc43d58",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0a51541e-1a2f-44eb-84de-1ca1b8112b49",
              "parentUUID": "fd60906a-f5af-42d9-9db7-79720fc43d58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a51541e-1a2f-44eb-84de-1ca1b8112b49"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a97a808b-baff-4780-a144-37a67f2e6d03",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 159,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a75c77a2-28ba-4026-81df-932e9fe667c4",
              "parentUUID": "a97a808b-baff-4780-a144-37a67f2e6d03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a75c77a2-28ba-4026-81df-932e9fe667c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 159,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "74e931fc-5fdb-4f8d-8cc7-f91cd4527bba",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 686,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "38b87f64-09e3-49d8-971c-88de60659e71",
              "parentUUID": "74e931fc-5fdb-4f8d-8cc7-f91cd4527bba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38b87f64-09e3-49d8-971c-88de60659e71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 686,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "aa57a53c-d50a-444c-8ad8-1866cabacad3",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 827,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f13655ed-1c6b-44f2-8daf-ca8049278626",
              "parentUUID": "aa57a53c-d50a-444c-8ad8-1866cabacad3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f13655ed-1c6b-44f2-8daf-ca8049278626"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 827,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1f52ad19-43be-4852-b1ee-6b48e6a919dc",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1c5f1c78-3e36-4ed1-9aef-3232c158f382",
              "parentUUID": "1f52ad19-43be-4852-b1ee-6b48e6a919dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c5f1c78-3e36-4ed1-9aef-3232c158f382"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f65e3e2e-f207-44d3-8106-1983b9e6336f",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3429d430-4118-4bd4-aff9-4325aabffcdf",
              "parentUUID": "f65e3e2e-f207-44d3-8106-1983b9e6336f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3429d430-4118-4bd4-aff9-4325aabffcdf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 196,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "06f90e7a-5ec4-490e-af59-7a32cd875312",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d0e6148f-d7a9-4cee-b935-fbe30f8c90bd",
              "parentUUID": "06f90e7a-5ec4-490e-af59-7a32cd875312",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0e6148f-d7a9-4cee-b935-fbe30f8c90bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "09d943dc-c245-42b2-85b4-adcc190d6084",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 135,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v1.5/data/sites/{siteid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    success: 1,\n    status: 'success',\n    data: [\n      {\n        siteid: 1,\n        sitename: '15/1',\n        sitedescription: 'Lake.',\n        geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n        altitude: 244,\n        collectionunitid: 1,\n        collectionunit: '15/1',\n        handle: '15-1',\n        unittype: 'Modern',\n        datasetid: 1,\n        datasettype: 'pollen surface sample'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v1.5/data/sites/{siteid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/sitesv1point5' } }\n    },\n    description: 'An array of site elements.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v1.5/data/sites/{siteid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    success: 1,\n    status: 'success',\n    data: [\n      {\n        siteid: 1,\n        sitename: '15/1',\n        sitedescription: 'Lake.',\n        geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n        altitude: 244,\n        collectionunitid: 1,\n        collectionunit: '15/1',\n        handle: '15-1',\n        unittype: 'Modern',\n        datasetid: 1,\n        datasettype: 'pollen surface sample'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v1.5/data/sites/{siteid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/sitesv1point5' } }\n    },\n    description: 'An array of site elements.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "7078f8a3-5ad0-41cf-b076-23f87c0c34bd",
              "parentUUID": "09d943dc-c245-42b2-85b4-adcc190d6084",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7078f8a3-5ad0-41cf-b076-23f87c0c34bd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 135,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "63efb8b1-dbfe-4703-b36a-fa2f1467fd39",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 323,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "cdb812a6-460e-4f0c-ab61-335aaa46220f",
              "parentUUID": "63efb8b1-dbfe-4703-b36a-fa2f1467fd39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cdb812a6-460e-4f0c-ab61-335aaa46220f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 323,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3ebba05f-7dc9-4921-9100-090c15cd6e8a",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 10228,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/authorpis' in your API spec\n\nres did not satisfy it because: response should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        getpeople: '(1,\"International Organization for Standardization\")'\n      },\n      { getpeople: '(2,\"United States Central Intelligence Agency\")' },\n      { getpeople: '(3,\"Ahearn, P. J.\")' },\n      { getpeople: '(4,\"Albert, Lois E.\")' },\n      { getpeople: '(5,\"Allen, William H., Jr.\")' },\n      { getpeople: '(6,\"Almendinger, John C.\")' },\n      { getpeople: '(7,\"Anderson, R. Scott\")' },\n      { getpeople: '(8,\"Anderson, Thane W.\")' },\n      { getpeople: '(9,\"Bailey, Robert E.\")' },\n      { getpeople: '(10,\"Ashworth, Allan C.\")' },\n      { getpeople: '(11,\"Baker, Richard G.\")' },\n      { getpeople: '(12,\"Barclay, Frank H.\")' },\n      { getpeople: '(13,\"Bernabo, J. Christopher\")' },\n      { getpeople: '(14,\"Birks, Harry John Betteley\")' },\n      { getpeople: '(15,\"Stiernberg, Edward J.\")' },\n      { getpeople: '(16,\"Bostwick, Lisa G.\")' },\n      { getpeople: '(17,\"Bouchard, Michel A.\")' },\n      { getpeople: '(18,\"Bradbury, J. Platt\")' },\n      { getpeople: '(19,\"Bright, Robert C.\")' },\n      { getpeople: '(20,\"Brubaker, Linda Beck\")' },\n      { getpeople: '(21,\"Bryant, Vaughn M., Jr.\")' },\n      { getpeople: '(22,\"Camfield, M.\")' },\n      { getpeople: '(23,\"Comtois, Paul G.\")' },\n      { getpeople: '(24,\"Cotter, James F. P.\")' },\n      { getpeople: '(25,\"Craig, Alan J.\")' },\n      { getpeople: '(26,\"Crisman, Thomas\")' },\n      { getpeople: '(27,\"Cushing, Edward J., Jr.\")' },\n      { getpeople: '(28,\"Davis, Anthony M.\")' },\n      { getpeople: '(29,\"Davis, Margaret B.\")' },\n      { getpeople: '(30,\"Davis, P. Thompson\")' },\n      { getpeople: '(31,\"Davis, Ronald B.\")' },\n      { getpeople: '(32,\"Delcourt, Hazel R.\")' },\n      { getpeople: '(33,\"Delcourt, Paul A.\")' },\n      { getpeople: '(34,\"Engstrom, Daniel R.\")' },\n      { getpeople: '(35,\"Eyster-Smith, Nancy M.\")' },\n      { getpeople: '(36,\"Farley-Gill, L. D.\")' },\n      { getpeople: '(37,\"Fredlund, Glen G.\")' },\n      { getpeople: '(38,\"Fries, Magnus\")' },\n      { getpeople: '(39,\"Futyma, Richard\")' },\n      { getpeople: '(40,\"Gajewski, Konrad J.\")' },\n      { getpeople: '(41,\"Gaudreau, Denise C.\")' },\n      { getpeople: '(42,\"Gauthier, Robert\")' },\n      { getpeople: '(43,\"Gilliam, Jeanne A.\")' },\n      { getpeople: '(44,\"Grimm, Eric Christopher\")' },\n      { getpeople: '(45,\"Hadden, Kathleen A.\")' },\n      { getpeople: '(46,\"Hansen, Barbara C. S.\")' },\n      { getpeople: '(47,\"Hartman, Richard T.\")' },\n      { getpeople: '(48,\"Heide, Kathleen M.\")' },\n      { getpeople: '(49,\"Ibe, Ralph .A.\")' },\n      { getpeople: '(50,\"Jacobson, G.\")' },\n      { getpeople: '(51,\"Janssen, C. Roel\")' },\n      { getpeople: '(52,\"Jordan, Richard H.\")' },\n      { getpeople: '(53,\"Kapp, Ronald O.\")' },\n      { getpeople: '(54,\"Karrow, Paul F.\")' },\n      { getpeople: '(55,\"Kay, Paul A.\")' },\n      { getpeople: '(56,\"Kerfoot, Wilson Charles\")' },\n      { getpeople: '(57,\"Kim, H. K.\")' },\n      { getpeople: '(58,\"King, James E.\")' },\n      { getpeople: '(59,\"Labelle, Claude\")' },\n      { getpeople: '(60,\"Lamb, Henry F.\")' },\n      { getpeople: '(61,\"Larouche, Alayn C.\")' },\n      { getpeople: '(62,\"Lawrenz, Ronald W.\")' },\n      { getpeople: '(63,\"Lichti-Federovich, Sigrid\")' },\n      { getpeople: '(64,\"Liu, Kam-biu\")' },\n      { getpeople: '(65,\"Livingstone, Daniel A.\")' },\n      { getpeople: '(66,\"Macpherson, Joyce B.\")' },\n      { getpeople: '(67,\"Maher, Louis J., Jr.\")' },\n      { getpeople: '(68,\"Maxwell, J. A.\")' },\n      { getpeople: '(69,\"McAndrews, John H.\")' },\n      { getpeople: '(70,\"McDowell, L. L.\")' },\n      { getpeople: '(71,\"Miller, Norton G.\")' },\n      { getpeople: '(72,\"Mode, William N.\")' },\n      { getpeople: '(73,\"Morrison, Alastair\")' },\n      { getpeople: '(74,\"Mott, Robert J.\")' },\n      { getpeople: '(76,\"Nichols, Harvey\")' },\n      { getpeople: '(77,\"Nickmann, Rudy J.\")' },\n      { getpeople: '(78,\"Niering, William A.\")' },\n      { getpeople: '(79,\"Ogden, James Gordon, III\")' },\n      { getpeople: '(80,\"Overpeck, Jonathan T.\")' },\n      { getpeople: '(81,\"Patterson, William Albert, III\")' },\n      { getpeople: '(82,\"Peters, M. A.\")' },\n      { getpeople: '(83,\"Radle, Nancy Jean\")' },\n      { getpeople: '(84,\"Rasmussen, Jack B.\")' },\n      { getpeople: '(85,\"Richard, Pierre J. H.\")' },\n      { getpeople: '(86,\"Ritchie, James C.\")' },\n      { getpeople: '(87,\"Saarnisto, Matti\")' },\n      { getpeople: '(88,\"Samson, Gilles\")' },\n      { getpeople: '(89,\"Savoie, Louise\")' },\n      { getpeople: '(90,\"Shane, Linda C. K.\")' },\n      { getpeople: '(91,\"Sheehan, M. C.\")' },\n      { getpeople: '(92,\"Short, Susan K.\")' },\n      { getpeople: '(93,\"Sirkin, Leslie A.\")' },\n      { getpeople: '(94,\"Smith, Everett Newman, Jr.\")' },\n      { getpeople: '(95,\"Spear, Ray W.\")' },\n      { getpeople: '(96,\"Stravers, Loreen K. Stegeman\")' },\n      { getpeople: '(97,\"Suter, Suzanne M.\")' },\n      { getpeople: '(98,\"Swain, Albert M.\")' },\n      { getpeople: '(99,\"Swain, Patricia C.\")' },\n      { getpeople: '(100,\"Terasmae, Jaan\")' },\n      { getpeople: '(101,\"Van Zant, Kent L.\")' },\n      ... 10411 more items\n    ],\n    message: 'Retrieved all authors PIs'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/authorpis' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/authorpiresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/authorpis' in your API spec\n\nres did not satisfy it because: response should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        getpeople: '(1,\"International Organization for Standardization\")'\n      },\n      { getpeople: '(2,\"United States Central Intelligence Agency\")' },\n      { getpeople: '(3,\"Ahearn, P. J.\")' },\n      { getpeople: '(4,\"Albert, Lois E.\")' },\n      { getpeople: '(5,\"Allen, William H., Jr.\")' },\n      { getpeople: '(6,\"Almendinger, John C.\")' },\n      { getpeople: '(7,\"Anderson, R. Scott\")' },\n      { getpeople: '(8,\"Anderson, Thane W.\")' },\n      { getpeople: '(9,\"Bailey, Robert E.\")' },\n      { getpeople: '(10,\"Ashworth, Allan C.\")' },\n      { getpeople: '(11,\"Baker, Richard G.\")' },\n      { getpeople: '(12,\"Barclay, Frank H.\")' },\n      { getpeople: '(13,\"Bernabo, J. Christopher\")' },\n      { getpeople: '(14,\"Birks, Harry John Betteley\")' },\n      { getpeople: '(15,\"Stiernberg, Edward J.\")' },\n      { getpeople: '(16,\"Bostwick, Lisa G.\")' },\n      { getpeople: '(17,\"Bouchard, Michel A.\")' },\n      { getpeople: '(18,\"Bradbury, J. Platt\")' },\n      { getpeople: '(19,\"Bright, Robert C.\")' },\n      { getpeople: '(20,\"Brubaker, Linda Beck\")' },\n      { getpeople: '(21,\"Bryant, Vaughn M., Jr.\")' },\n      { getpeople: '(22,\"Camfield, M.\")' },\n      { getpeople: '(23,\"Comtois, Paul G.\")' },\n      { getpeople: '(24,\"Cotter, James F. P.\")' },\n      { getpeople: '(25,\"Craig, Alan J.\")' },\n      { getpeople: '(26,\"Crisman, Thomas\")' },\n      { getpeople: '(27,\"Cushing, Edward J., Jr.\")' },\n      { getpeople: '(28,\"Davis, Anthony M.\")' },\n      { getpeople: '(29,\"Davis, Margaret B.\")' },\n      { getpeople: '(30,\"Davis, P. Thompson\")' },\n      { getpeople: '(31,\"Davis, Ronald B.\")' },\n      { getpeople: '(32,\"Delcourt, Hazel R.\")' },\n      { getpeople: '(33,\"Delcourt, Paul A.\")' },\n      { getpeople: '(34,\"Engstrom, Daniel R.\")' },\n      { getpeople: '(35,\"Eyster-Smith, Nancy M.\")' },\n      { getpeople: '(36,\"Farley-Gill, L. D.\")' },\n      { getpeople: '(37,\"Fredlund, Glen G.\")' },\n      { getpeople: '(38,\"Fries, Magnus\")' },\n      { getpeople: '(39,\"Futyma, Richard\")' },\n      { getpeople: '(40,\"Gajewski, Konrad J.\")' },\n      { getpeople: '(41,\"Gaudreau, Denise C.\")' },\n      { getpeople: '(42,\"Gauthier, Robert\")' },\n      { getpeople: '(43,\"Gilliam, Jeanne A.\")' },\n      { getpeople: '(44,\"Grimm, Eric Christopher\")' },\n      { getpeople: '(45,\"Hadden, Kathleen A.\")' },\n      { getpeople: '(46,\"Hansen, Barbara C. S.\")' },\n      { getpeople: '(47,\"Hartman, Richard T.\")' },\n      { getpeople: '(48,\"Heide, Kathleen M.\")' },\n      { getpeople: '(49,\"Ibe, Ralph .A.\")' },\n      { getpeople: '(50,\"Jacobson, G.\")' },\n      { getpeople: '(51,\"Janssen, C. Roel\")' },\n      { getpeople: '(52,\"Jordan, Richard H.\")' },\n      { getpeople: '(53,\"Kapp, Ronald O.\")' },\n      { getpeople: '(54,\"Karrow, Paul F.\")' },\n      { getpeople: '(55,\"Kay, Paul A.\")' },\n      { getpeople: '(56,\"Kerfoot, Wilson Charles\")' },\n      { getpeople: '(57,\"Kim, H. K.\")' },\n      { getpeople: '(58,\"King, James E.\")' },\n      { getpeople: '(59,\"Labelle, Claude\")' },\n      { getpeople: '(60,\"Lamb, Henry F.\")' },\n      { getpeople: '(61,\"Larouche, Alayn C.\")' },\n      { getpeople: '(62,\"Lawrenz, Ronald W.\")' },\n      { getpeople: '(63,\"Lichti-Federovich, Sigrid\")' },\n      { getpeople: '(64,\"Liu, Kam-biu\")' },\n      { getpeople: '(65,\"Livingstone, Daniel A.\")' },\n      { getpeople: '(66,\"Macpherson, Joyce B.\")' },\n      { getpeople: '(67,\"Maher, Louis J., Jr.\")' },\n      { getpeople: '(68,\"Maxwell, J. A.\")' },\n      { getpeople: '(69,\"McAndrews, John H.\")' },\n      { getpeople: '(70,\"McDowell, L. L.\")' },\n      { getpeople: '(71,\"Miller, Norton G.\")' },\n      { getpeople: '(72,\"Mode, William N.\")' },\n      { getpeople: '(73,\"Morrison, Alastair\")' },\n      { getpeople: '(74,\"Mott, Robert J.\")' },\n      { getpeople: '(76,\"Nichols, Harvey\")' },\n      { getpeople: '(77,\"Nickmann, Rudy J.\")' },\n      { getpeople: '(78,\"Niering, William A.\")' },\n      { getpeople: '(79,\"Ogden, James Gordon, III\")' },\n      { getpeople: '(80,\"Overpeck, Jonathan T.\")' },\n      { getpeople: '(81,\"Patterson, William Albert, III\")' },\n      { getpeople: '(82,\"Peters, M. A.\")' },\n      { getpeople: '(83,\"Radle, Nancy Jean\")' },\n      { getpeople: '(84,\"Rasmussen, Jack B.\")' },\n      { getpeople: '(85,\"Richard, Pierre J. H.\")' },\n      { getpeople: '(86,\"Ritchie, James C.\")' },\n      { getpeople: '(87,\"Saarnisto, Matti\")' },\n      { getpeople: '(88,\"Samson, Gilles\")' },\n      { getpeople: '(89,\"Savoie, Louise\")' },\n      { getpeople: '(90,\"Shane, Linda C. K.\")' },\n      { getpeople: '(91,\"Sheehan, M. C.\")' },\n      { getpeople: '(92,\"Short, Susan K.\")' },\n      { getpeople: '(93,\"Sirkin, Leslie A.\")' },\n      { getpeople: '(94,\"Smith, Everett Newman, Jr.\")' },\n      { getpeople: '(95,\"Spear, Ray W.\")' },\n      { getpeople: '(96,\"Stravers, Loreen K. Stegeman\")' },\n      { getpeople: '(97,\"Suter, Suzanne M.\")' },\n      { getpeople: '(98,\"Swain, Albert M.\")' },\n      { getpeople: '(99,\"Swain, Patricia C.\")' },\n      { getpeople: '(100,\"Terasmae, Jaan\")' },\n      { getpeople: '(101,\"Van Zant, Kent L.\")' },\n      ... 10411 more items\n    ],\n    message: 'Retrieved all authors PIs'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/authorpis' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/authorpiresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "364c28e3-9506-46d3-bbe5-eff25f501a35",
              "parentUUID": "3ebba05f-7dc9-4921-9100-090c15cd6e8a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "364c28e3-9506-46d3-bbe5-eff25f501a35"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10228,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "149c0a8f-25c2-40cc-9514-b2f229f93d00",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 799,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "af11f4a5-96a8-433e-b6d8-54c07048cb7b",
              "parentUUID": "149c0a8f-25c2-40cc-9514-b2f229f93d00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af11f4a5-96a8-433e-b6d8-54c07048cb7b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 799,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cb82f9e7-1ef4-417b-9eb3-887c9e7884fd",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 145,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/datasettypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasettyperesponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdatasettypes: '(biomarker,21)' },\n      { getdatasettypes: '(charcoal,16)' },\n      { getdatasettypes: '(\"charcoal surface sample\",33)' },\n      { getdatasettypes: '(chironomid,30)' },\n      { getdatasettypes: '(cladocera,34)' },\n      { getdatasettypes: '(diatom,11)' },\n      { getdatasettypes: '(\"diatom surface sample\",13)' },\n      { getdatasettypes: '(\"diatom top-bottom\",35)' },\n      {\n        getdatasettypes: '(\"energy dispersive X-ray spectroscopy (EDS/EDX)\",20)'\n      },\n      { getdatasettypes: '(geochemistry,14)' },\n      { getdatasettypes: '(geochronologic,1)' },\n      { getdatasettypes: '(insect,8)' },\n      { getdatasettypes: '(\"insect modern\",29)' },\n      { getdatasettypes: '(loss-on-ignition,2)' },\n      { getdatasettypes: '(macrocharcoal,37)' },\n      { getdatasettypes: '(macroinvertebrate,6)' },\n      { getdatasettypes: '(microcharcoal,36)' },\n      { getdatasettypes: '(\"modern biochemistry\",27)' },\n      { getdatasettypes: '(\"organic carbon\",28)' },\n      { getdatasettypes: '(ostracode,9)' },\n      { getdatasettypes: '(\"ostracode surface sample\",12)' },\n      { getdatasettypes: '(paleomagnetic,25)' },\n      { getdatasettypes: '(\"physical sedimentology\",15)' },\n      { getdatasettypes: '(phytolith,23)' },\n      { getdatasettypes: '(\"plant macrofossil\",4)' },\n      { getdatasettypes: '(pollen,3)' },\n      { getdatasettypes: '(\"pollen surface sample\",7)' },\n      { getdatasettypes: '(\"pollen trap\",38)' },\n      { getdatasettypes: '(\"specimen stable isotope\",24)' },\n      { getdatasettypes: '(\"stable isotope\",31)' },\n      { getdatasettypes: '(\"testate amoebae\",17)' },\n      { getdatasettypes: '(\"testate amoebae surface sample\",32)' },\n      { getdatasettypes: '(\"vertebrate fauna\",5)' },\n      { getdatasettypes: '(\"water chemistry\",10)' },\n      { getdatasettypes: '(\"X-ray diffraction (XRD)\",19)' },\n      { getdatasettypes: '(\"X-ray fluorescence (XRF)\",18)' }\n    ],\n    message: 'Retrieved all datasettypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/datasettypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasettyperesponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/datasettypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasettyperesponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdatasettypes: '(biomarker,21)' },\n      { getdatasettypes: '(charcoal,16)' },\n      { getdatasettypes: '(\"charcoal surface sample\",33)' },\n      { getdatasettypes: '(chironomid,30)' },\n      { getdatasettypes: '(cladocera,34)' },\n      { getdatasettypes: '(diatom,11)' },\n      { getdatasettypes: '(\"diatom surface sample\",13)' },\n      { getdatasettypes: '(\"diatom top-bottom\",35)' },\n      {\n        getdatasettypes: '(\"energy dispersive X-ray spectroscopy (EDS/EDX)\",20)'\n      },\n      { getdatasettypes: '(geochemistry,14)' },\n      { getdatasettypes: '(geochronologic,1)' },\n      { getdatasettypes: '(insect,8)' },\n      { getdatasettypes: '(\"insect modern\",29)' },\n      { getdatasettypes: '(loss-on-ignition,2)' },\n      { getdatasettypes: '(macrocharcoal,37)' },\n      { getdatasettypes: '(macroinvertebrate,6)' },\n      { getdatasettypes: '(microcharcoal,36)' },\n      { getdatasettypes: '(\"modern biochemistry\",27)' },\n      { getdatasettypes: '(\"organic carbon\",28)' },\n      { getdatasettypes: '(ostracode,9)' },\n      { getdatasettypes: '(\"ostracode surface sample\",12)' },\n      { getdatasettypes: '(paleomagnetic,25)' },\n      { getdatasettypes: '(\"physical sedimentology\",15)' },\n      { getdatasettypes: '(phytolith,23)' },\n      { getdatasettypes: '(\"plant macrofossil\",4)' },\n      { getdatasettypes: '(pollen,3)' },\n      { getdatasettypes: '(\"pollen surface sample\",7)' },\n      { getdatasettypes: '(\"pollen trap\",38)' },\n      { getdatasettypes: '(\"specimen stable isotope\",24)' },\n      { getdatasettypes: '(\"stable isotope\",31)' },\n      { getdatasettypes: '(\"testate amoebae\",17)' },\n      { getdatasettypes: '(\"testate amoebae surface sample\",32)' },\n      { getdatasettypes: '(\"vertebrate fauna\",5)' },\n      { getdatasettypes: '(\"water chemistry\",10)' },\n      { getdatasettypes: '(\"X-ray diffraction (XRD)\",19)' },\n      { getdatasettypes: '(\"X-ray fluorescence (XRF)\",18)' }\n    ],\n    message: 'Retrieved all datasettypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/datasettypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasettyperesponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "2831b50d-916a-4b5d-9851-06aaa2aa84ad",
              "parentUUID": "cb82f9e7-1ef4-417b-9eb3-887c9e7884fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2831b50d-916a-4b5d-9851-06aaa2aa84ad"
          ],
          "pending": [],
          "skipped": [],
          "duration": 145,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "73bba307-a262-4b2f-8343-573d3504e66a",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 132,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/depositionalresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdeptenvtypesroot: '(6,Biological,11)' },\n      { getdeptenvtypesroot: '(99,Spring,7)' },\n      { getdeptenvtypesroot: '(19,Lacustrine,4)' },\n      { getdeptenvtypesroot: '(93,Sampler,4)' },\n      { getdeptenvtypesroot: '(1,Archaeological,7)' },\n      { getdeptenvtypesroot: '(16,Estuarine,3)' },\n      { getdeptenvtypesroot: '(51,Marine,10)' },\n      { getdeptenvtypesroot: '(103,Terrestrial,8)' },\n      { getdeptenvtypesroot: '(136,Other,3)' },\n      { getdeptenvtypesroot: '(180,Well,2)' },\n      { getdeptenvtypesroot: '(76,Riverine,5)' },\n      { getdeptenvtypesroot: '(137,Unknown,1)' },\n      { getdeptenvtypesroot: '(59,Palustrine,7)' }\n    ],\n    message: 'Retrieved root depositional environment types'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/depositionalresponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/depositionalresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { getdeptenvtypesroot: '(6,Biological,11)' },\n      { getdeptenvtypesroot: '(99,Spring,7)' },\n      { getdeptenvtypesroot: '(19,Lacustrine,4)' },\n      { getdeptenvtypesroot: '(93,Sampler,4)' },\n      { getdeptenvtypesroot: '(1,Archaeological,7)' },\n      { getdeptenvtypesroot: '(16,Estuarine,3)' },\n      { getdeptenvtypesroot: '(51,Marine,10)' },\n      { getdeptenvtypesroot: '(103,Terrestrial,8)' },\n      { getdeptenvtypesroot: '(136,Other,3)' },\n      { getdeptenvtypesroot: '(180,Well,2)' },\n      { getdeptenvtypesroot: '(76,Riverine,5)' },\n      { getdeptenvtypesroot: '(137,Unknown,1)' },\n      { getdeptenvtypesroot: '(59,Palustrine,7)' }\n    ],\n    message: 'Retrieved root depositional environment types'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/depositionalenvironments/root' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/depositionalresponse' }\n      }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "7c6c9b0c-805b-4b2b-a652-8d4484812f02",
              "parentUUID": "73bba307-a262-4b2f-8343-573d3504e66a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7c6c9b0c-805b-4b2b-a652-8d4484812f02"
          ],
          "pending": [],
          "skipped": [],
          "duration": 132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5260098c-bca0-442e-864b-0012e6715a5d",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7d3c9ec0-e0fc-4e52-958e-7ae5ddeb436e",
              "parentUUID": "5260098c-bca0-442e-864b-0012e6715a5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d3c9ec0-e0fc-4e52-958e-7ae5ddeb436e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 124,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7dcb08c5-9c47-4bcf-b870-ac5f37d9a4ae",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 21,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taphonomyresponse\n\nres contained: {\n  body: {\n    status: 'failure',\n    data: null,\n    message: 'No datasetTypeId provided.'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taphonomyresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taphonomyresponse\n\nres contained: {\n  body: {\n    status: 'failure',\n    data: null,\n    message: 'No datasetTypeId provided.'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taphonomysystems' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taphonomyresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "1d29d11a-1753-4444-8e7c-2f35948b7e7b",
              "parentUUID": "7dcb08c5-9c47-4bcf-b870-ac5f37d9a4ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1d29d11a-1753-4444-8e7c-2f35948b7e7b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4e010e04-b1e2-4ceb-b4dd-ec8d6bcd0911",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 277,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taxagroupresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { gettaxagrouptypes: '(ACR,Acritarchs)' },\n      { gettaxagrouptypes: '(ALG,Algae)' },\n      { gettaxagrouptypes: '(ANM,\"Animals undiff.\")' },\n      { gettaxagrouptypes: '(ANL,Annelids)' },\n      { gettaxagrouptypes: '(AQU,\"Aquatic parameters\")' },\n      { gettaxagrouptypes: '(ART,\"Arthropods undiff.\")' },\n      { gettaxagrouptypes: '(AVE,Birds)' },\n      { gettaxagrouptypes: '(BRC,Brachiopods)' },\n      { gettaxagrouptypes: '(BRY,Bryophytes)' },\n      { gettaxagrouptypes: '(BRZ,Bryozoa)' },\n      { gettaxagrouptypes: '(CHO,Chromista)' },\n      { gettaxagrouptypes: '(CRU,\"Crustaceans undiff.\")' },\n      { gettaxagrouptypes: '(DIA,Diatoms)' },\n      { gettaxagrouptypes: '(DIN,Dinoflagellates)' },\n      { gettaxagrouptypes: '(ECH,Echinoderms)' },\n      { gettaxagrouptypes: '(FSH,Fish)' },\n      { gettaxagrouptypes: '(FLT,Flatworms)' },\n      { gettaxagrouptypes: '(FOR,Foraminifera)' },\n      { gettaxagrouptypes: '(FUN,Fungi)' },\n      { gettaxagrouptypes: '(INS,Insects)' },\n      { gettaxagrouptypes: '(MAM,Mammals)' },\n      { gettaxagrouptypes: '(MOL,Molluscs)' },\n      { gettaxagrouptypes: '(NEM,Nematodes)' },\n      { gettaxagrouptypes: '(CAR,\"Organic carbon\")' },\n      { gettaxagrouptypes: '(OST,Ostracode)' },\n      { gettaxagrouptypes: '(MAG,Paleomagnetics)' },\n      { gettaxagrouptypes: '(PHY,\"Physical variables\")' },\n      { gettaxagrouptypes: '(PHT,Phytolith)' },\n      { gettaxagrouptypes: '(PLA,\"Plants undiff.\")' },\n      { gettaxagrouptypes: '(PRO,\"Protista undiff.\")' },\n      { gettaxagrouptypes: '(HRP,\"Reptiles and amphibians\")' },\n      { gettaxagrouptypes: '(ROT,Rotifers)' },\n      { gettaxagrouptypes: '(SIL,Silicoflagellates)' },\n      { gettaxagrouptypes: '(SPO,Sponges)' },\n      { gettaxagrouptypes: '(ISO,\"Stable isotopes\")' },\n      { gettaxagrouptypes: '(TES,\"Testate amoebae\")' },\n      { gettaxagrouptypes: '(VPL,\"Vascular plants\")' },\n      { gettaxagrouptypes: '(VER,\"Vertebrates undiff.\")' }\n    ],\n    message: 'Retrieved all taxagrouptypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxagroupresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/taxagroupresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { gettaxagrouptypes: '(ACR,Acritarchs)' },\n      { gettaxagrouptypes: '(ALG,Algae)' },\n      { gettaxagrouptypes: '(ANM,\"Animals undiff.\")' },\n      { gettaxagrouptypes: '(ANL,Annelids)' },\n      { gettaxagrouptypes: '(AQU,\"Aquatic parameters\")' },\n      { gettaxagrouptypes: '(ART,\"Arthropods undiff.\")' },\n      { gettaxagrouptypes: '(AVE,Birds)' },\n      { gettaxagrouptypes: '(BRC,Brachiopods)' },\n      { gettaxagrouptypes: '(BRY,Bryophytes)' },\n      { gettaxagrouptypes: '(BRZ,Bryozoa)' },\n      { gettaxagrouptypes: '(CHO,Chromista)' },\n      { gettaxagrouptypes: '(CRU,\"Crustaceans undiff.\")' },\n      { gettaxagrouptypes: '(DIA,Diatoms)' },\n      { gettaxagrouptypes: '(DIN,Dinoflagellates)' },\n      { gettaxagrouptypes: '(ECH,Echinoderms)' },\n      { gettaxagrouptypes: '(FSH,Fish)' },\n      { gettaxagrouptypes: '(FLT,Flatworms)' },\n      { gettaxagrouptypes: '(FOR,Foraminifera)' },\n      { gettaxagrouptypes: '(FUN,Fungi)' },\n      { gettaxagrouptypes: '(INS,Insects)' },\n      { gettaxagrouptypes: '(MAM,Mammals)' },\n      { gettaxagrouptypes: '(MOL,Molluscs)' },\n      { gettaxagrouptypes: '(NEM,Nematodes)' },\n      { gettaxagrouptypes: '(CAR,\"Organic carbon\")' },\n      { gettaxagrouptypes: '(OST,Ostracode)' },\n      { gettaxagrouptypes: '(MAG,Paleomagnetics)' },\n      { gettaxagrouptypes: '(PHY,\"Physical variables\")' },\n      { gettaxagrouptypes: '(PHT,Phytolith)' },\n      { gettaxagrouptypes: '(PLA,\"Plants undiff.\")' },\n      { gettaxagrouptypes: '(PRO,\"Protista undiff.\")' },\n      { gettaxagrouptypes: '(HRP,\"Reptiles and amphibians\")' },\n      { gettaxagrouptypes: '(ROT,Rotifers)' },\n      { gettaxagrouptypes: '(SIL,Silicoflagellates)' },\n      { gettaxagrouptypes: '(SPO,Sponges)' },\n      { gettaxagrouptypes: '(ISO,\"Stable isotopes\")' },\n      { gettaxagrouptypes: '(TES,\"Testate amoebae\")' },\n      { gettaxagrouptypes: '(VPL,\"Vascular plants\")' },\n      { gettaxagrouptypes: '(VER,\"Vertebrates undiff.\")' }\n    ],\n    message: 'Retrieved all taxagrouptypes'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/apps/taxagrouptypes' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxagroupresponse' } }\n    },\n    description: 'A table of Neotoma collection types.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "3aef9dc1-513e-4511-9e17-91f151ddf60b",
              "parentUUID": "4e010e04-b1e2-4ceb-b4dd-ec8d6bcd0911",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3aef9dc1-513e-4511-9e17-91f151ddf60b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 277,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5b43f456-9a9b-4b02-a623-1cad5bd88f5a",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 8051,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "7115bd39-ca43-42ef-b434-82ac00ce6792",
              "parentUUID": "5b43f456-9a9b-4b02-a623-1cad5bd88f5a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7115bd39-ca43-42ef-b434-82ac00ce6792"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8051,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0f0f7673-c478-4d5c-8ca8-104ba8e0f571",
          "title": "GET /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronology/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "aa7e6289-76a7-4ae9-a814-6b2dad565feb",
              "parentUUID": "0f0f7673-c478-4d5c-8ca8-104ba8e0f571",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "aa7e6289-76a7-4ae9-a814-6b2dad565feb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "beec1bde-9aae-4a19-9861-a1126ae30002",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "274af747-4c3a-421b-8680-e60ced95d9bc",
              "parentUUID": "beec1bde-9aae-4a19-9861-a1126ae30002",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "274af747-4c3a-421b-8680-e60ced95d9bc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d1372741-f75b-4489-86f5-20a701ccc670",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "609d61be-3c76-4f9a-87d4-1543757929bd",
              "parentUUID": "d1372741-f75b-4489-86f5-20a701ccc670",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "609d61be-3c76-4f9a-87d4-1543757929bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "27ecd390-989e-4800-8bf1-8d5186412ab9",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 133,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}/sites' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/siteresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: [\n          {\n            siteid: 11571,\n            sitename: 'Idavain Lake',\n            sitedescription: null,\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[-156.00243,58.75139],[-155.88776,58.75139],[-155.88776,58.7932],[-156.00243,58.7932],[-156.00243,58.75139]]]}',\n            altitude: 223,\n            collectionunitid: 13008,\n            collectionunit: 'IDV1',\n            handle: 'IDAVAIN',\n            unittype: 'Core',\n            datasetid: 17319,\n            datasettype: 'geochronologic'\n          }\n        ],\n        contactid: 1\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}/sites' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/siteresponse' } }\n    },\n    description: 'A Neotoma sites object.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}/sites' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/siteresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: [\n          {\n            siteid: 11571,\n            sitename: 'Idavain Lake',\n            sitedescription: null,\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[-156.00243,58.75139],[-155.88776,58.75139],[-155.88776,58.7932],[-156.00243,58.7932],[-156.00243,58.75139]]]}',\n            altitude: 223,\n            collectionunitid: 13008,\n            collectionunit: 'IDV1',\n            handle: 'IDAVAIN',\n            unittype: 'Core',\n            datasetid: 17319,\n            datasettype: 'geochronologic'\n          }\n        ],\n        contactid: 1\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}/sites' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/siteresponse' } }\n    },\n    description: 'A Neotoma sites object.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "1f0fdad1-d449-436f-badd-f71b342eb72f",
              "parentUUID": "27ecd390-989e-4800-8bf1-8d5186412ab9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1f0fdad1-d449-436f-badd-f71b342eb72f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "956cc0da-d919-4c5d-8a46-ef1376f713e7",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1062,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetselcresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetselcresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "db034109-0b55-432f-ab39-630ecdf28e49",
              "parentUUID": "956cc0da-d919-4c5d-8a46-ef1376f713e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "db034109-0b55-432f-ab39-630ecdf28e49"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1062,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "553ebb5b-4a8c-44e6-aa0c-59d7fd7b4b50",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1850,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetselcresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 2,\n          sitename: '15/2',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n          altitude: 305,\n          collectionunitid: 2,\n          collectionunit: '15/2',\n          handle: '15-2',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 2,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3wc7j',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 2,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/hhsf-6760',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 3,\n          sitename: '16/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n          altitude: 285,\n          collectionunitid: 3,\n          collectionunit: '16/1',\n          handle: '16-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 3,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3rp48',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 3,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/g2yc-7s57',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 4,\n          sitename: '17/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n          altitude: 235,\n          collectionunitid: 4,\n          collectionunit: '17/1',\n          handle: '17-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 4,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n39g6x',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 4,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3qp4z',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 4,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3wh55',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 4,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/7s96-8m25',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 5,\n          sitename: '17/2',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n          altitude: 335,\n          collectionunitid: 5,\n          collectionunit: '17/2',\n          handle: '17-2',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 5,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3kw21',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 5,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/8rvx-be32',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 5,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3rt1h',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 5,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n35p40',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 6,\n          sitename: '17/3',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n          altitude: 255,\n          collectionunitid: 6,\n          collectionunit: '17/3',\n          handle: '17-3',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 6,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3g59h',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 6,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3n09b',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 6,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n32011',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 7,\n          sitename: 'Three Pines Bog',\n          sitedescription: 'Bog.',\n          sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n          altitude: 294,\n          collectionunitid: 7,\n          collectionunit: null,\n          handle: '3PINES',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7857,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 7,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3x59j',\n            datasetpi: {\n              contactid: 69,\n              contactname: 'McAndrews, John H.',\n              familyname: 'McAndrews',\n              firstname: 'John H.',\n              initials: 'J.H.'\n            },\n            agerange: { ageyoung: -26, ageold: 6485 }\n          },\n          {\n            datasetid: 7,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3h98t',\n            datasetpi: {\n              contactid: 69,\n              contactname: 'McAndrews, John H.',\n              familyname: 'McAndrews',\n              firstname: 'John H.',\n              initials: 'J.H.'\n            },\n            agerange: { ageyoung: -26, ageold: 6485 }\n          },\n          {\n            datasetid: 7,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3bc7k',\n            datasetpi: {\n              contactid: 69,\n              contactname: 'McAndrews, John H.',\n              familyname: 'McAndrews',\n              firstname: 'John H.',\n              initials: 'J.H.'\n            },\n            agerange: { ageyoung: -26, ageold: 6485 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 8,\n          sitename: 'Abalone Rocks Marsh',\n          sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n          altitude: 0,\n          collectionunitid: 8,\n          collectionunit: null,\n          handle: 'ABALONE',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7858,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 8,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3sg68',\n            datasetpi: {\n              contactid: 127,\n              contactname: 'Cole, Kenneth L.',\n              familyname: 'Cole',\n              firstname: 'Kenneth L.',\n              initials: 'K.L.'\n            },\n            agerange: { ageyoung: -43, ageold: 6904 }\n          },\n          {\n            datasetid: 10469,\n            datasettype: 'charcoal',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 8,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3ch5h',\n            datasetpi: {\n              contactid: 127,\n              contactname: 'Cole, Kenneth L.',\n              familyname: 'Cole',\n              firstname: 'Kenneth L.',\n              initials: 'K.L.'\n            },\n            agerange: { ageyoung: -43, ageold: 6904 }\n          },\n          {\n            datasetid: 8,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n36p49',\n            datasetpi: {\n              contactid: 127,\n              contactname: 'Cole, Kenneth L.',\n              familyname: 'Cole',\n              firstname: 'Kenneth L.',\n              initials: 'K.L.'\n            },\n            agerange: { ageyoung: -43, ageold: 6904 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 9,\n          sitename: 'Adange',\n          sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n          sitenotes: 'The site is the wide part of the mouth of the river.',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n          altitude: 1750,\n          collectionunitid: 9,\n          collectionunit: null,\n          handle: 'ADANGE',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7859,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3301b',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: -475, ageold: 6051 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3301b',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: 0, ageold: 4000 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n37t27',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: -475, ageold: 6051 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3np4b',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: 0, ageold: 4000 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n37t27',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: 0, ageold: 4000 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3np4b',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: -475, ageold: 6051 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 10,\n          sitename: 'Site 1 (Cohen unpublished)',\n          sitedescription: null,\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n          altitude: 37,\n          collectionunitid: 10,\n          collectionunit: null,\n          handle: 'ADC001',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 10,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3409p',\n            datasetpi: {\n              contactid: 726,\n              contactname: 'Cohen, A. D.',\n              familyname: 'Cohen',\n              firstname: 'A. D.',\n              initials: 'A.D.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 10,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3j01c',\n            datasetpi: {\n              contactid: 726,\n              contactname: 'Cohen, A. D.',\n              familyname: 'Cohen',\n              firstname: 'A. D.',\n              initials: 'A.D.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 11,\n          sitename: 'Konus Exposure, Adycha River',\n          sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n          sitenotes: 'Adycha River, Lower Yana River.',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n          altitude: 130,\n          collectionunitid: 11,\n          collectionunit: null,\n          handle: 'ADYCHA',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7860,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 11,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3097s',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 1000, ageold: 8820 }\n          },\n          {\n            datasetid: 11,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3d59w',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 1000, ageold: 8820 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 12,\n          sitename: 'Ageröds Mosse',\n          sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n          sitenotes: 'Surrounding vegetation: birch woodland.',\n          geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n          altitude: 58,\n          collectionunitid: 12,\n          collectionunit: null,\n          handle: 'AGE',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 12,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Regnéll Joachim.',\n            database: 'European Pollen Database',\n            doi: '10.21233/znex-sp94',\n            datasetpi: {\n              contactid: 595,\n              contactname: 'Regnéll, Joachim',\n              familyname: 'Regnéll',\n              firstname: 'Joachim',\n              initials: 'J.'\n            },\n            agerange: { ageyoung: -26, ageold: 11004 }\n          },\n          {\n            datasetid: 7861,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: 595,\n              contactname: 'Regnéll, Joachim',\n              familyname: 'Regnéll',\n              firstname: 'Joachim',\n              initials: 'J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 12,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Regnéll Joachim.',\n            database: 'European Pollen Database',\n            doi: '10.21233/znex-sp94',\n            datasetpi: {\n              contactid: 595,\n              contactname: 'Regnéll, Joachim',\n              familyname: 'Regnéll',\n              firstname: 'Joachim',\n              initials: 'J.'\n            },\n            agerange: { ageyoung: 0, ageold: 9660 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 13,\n          sitename: 'Aguas Calientes',\n          sitedescription: 'Mire.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n          altitude: 4210,\n          collectionunitid: 13,\n          collectionunit: '1',\n          handle: 'AGUASC1',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 13,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n34s3b',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 13,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3qt16',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 14,\n          sitename: 'Aguas Calientes 2',\n          sitedescription: 'Mire.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n          altitude: 4210,\n          collectionunitid: 14,\n          collectionunit: null,\n          handle: 'AGUASC2',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7862,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 14,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3101q',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 14,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3m10z',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 15,\n          sitename: 'Aguilar',\n          sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n          altitude: 4000,\n          collectionunitid: 15,\n          collectionunit: null,\n          handle: 'AGUILAR',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7863,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 15,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3g974',\n            datasetpi: {\n              contactid: 148,\n              contactname: 'Markgraf, Vera',\n              familyname: 'Markgraf',\n              firstname: 'Vera',\n              initials: 'V.'\n            },\n            agerange: { ageyoung: 0, ageold: 9822 }\n          },\n          {\n            datasetid: 15,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3w88w',\n            datasetpi: {\n              contactid: 148,\n              contactname: 'Markgraf, Vera',\n              familyname: 'Markgraf',\n              firstname: 'Vera',\n              initials: 'V.'\n            },\n            agerange: { ageyoung: 0, ageold: 9822 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 16,\n          sitename: 'Ahlenmoor',\n          sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n          sitenotes: null,\n          geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n          altitude: 2,\n          collectionunitid: 16,\n          collectionunit: 'AHL V',\n          handle: 'AHL5',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 16,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: '10.21233/n3rg6z',\n            datasetpi: {\n              contactid: 597,\n              contactname: 'Kucan, Dusanka',\n              familyname: 'Kucan',\n              firstname: 'Dusanka',\n              initials: 'D.'\n            },\n            agerange: { ageyoung: 990, ageold: 4276 }\n          },\n          {\n            datasetid: 7864,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 16,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: '10.21233/n3rg6z',\n            datasetpi: {\n              contactid: 596,\n              contactname: 'Behre, Karl-Ernst',\n              familyname: 'Behre',\n              firstname: 'Karl-Ernst',\n              initials: 'K.-E.'\n            },\n            agerange: { ageyoung: 990, ageold: 4276 }\n          },\n          {\n            datasetid: 16,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: '10.21233/n3bh6k',\n            datasetpi: {\n              contactid: 596,\n              contactname: 'Behre, Karl-Ernst',\n              familyname: 'Behre',\n              firstname: 'Karl-Ernst',\n              initials: 'K.-E.'\n            },\n            agerange: { ageyoung: 990, ageold: 4276 }\n          },\n          {\n            datasetid: 16,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: '10.21233/n3bh6k',\n            datasetpi: {\n              contactid: 597,\n              contactname: 'Kucan, Dusanka',\n              familyname: 'Kucan',\n              firstname: 'Dusanka',\n              initials: 'D.'\n            },\n            agerange: { ageyoung: 990, ageold: 4276 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 17,\n          sitename: 'Ajata',\n          sitedescription: 'Mire.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-69.2,-18.25]}',\n          altitude: 4700,\n          collectionunitid: 17,\n          collectionunit: null,\n          handle: 'AJATA',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7865,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 17,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3ms3p',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: 0, ageold: 2839 }\n          },\n          {\n            datasetid: 17,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n36t1j',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: 0, ageold: 2839 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 18,\n          sitename: 'South Soefje Bog',\n          sitedescription: null,\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-97.51694,29.6]}',\n          altitude: 97,\n          collectionunitid: 18,\n          collectionunit: null,\n          handle: 'AKG001',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 18,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3339d',\n            datasetpi: {\n              contactid: 561,\n              contactname: 'Graham, A. K.',\n              familyname: 'Graham',\n              firstname: 'A. K.',\n              initials: 'A.K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 18,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3h012',\n            datasetpi: {\n              contactid: 561,\n              contactname: 'Graham, A. K.',\n              familyname: 'Graham',\n              firstname: 'A. K.',\n              initials: 'A.K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 18,\n          sitename: 'South Soefje Bog',\n          sitedescription: null,\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-97.51694,29.6]}',\n          altitude: 97,\n          collectionunitid: 3654,\n          collectionunit: null,\n          handle: 'SOEFJES',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 3772,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3gv4h',\n            datasetpi: {\n              contactid: 21,\n              contactname: 'Bryant, Vaughn M., Jr.',\n              familyname: 'Bryant',\n              firstname: 'Vaughn M.',\n              initials: 'V.M.'\n            },\n            agerange: { ageyoung: 120, ageold: 7900 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 19,\n          sitename: 'Akulinin Exposure P1282',\n          sitedescription: 'Exposure in river terrace. Physiography: river valley in mountains. Surrounding vegetation: secondary Betula forest.',\n          sitenotes: 'Floodplain vegetation: Salix, Populus, and Chosenia.',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[138.55,47.11667]}',\n          altitude: 20,\n          collectionunitid: 19,\n          collectionunit: 'P1282',\n          handle: 'AKULININ',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7866,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 19,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3c887',\n            datasetpi: {\n              contactid: 827,\n              contactname: 'Korotky, A. M.',\n              familyname: 'Korotky',\n              firstname: 'A. M.',\n              initials: 'A.M.'\n            },\n            agerange: { ageyoung: 529, ageold: 44478 }\n          },\n          {\n            datasetid: 19,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3z97g',\n            datasetpi: {\n              contactid: 827,\n              contactname: 'Korotky, A. M.',\n              familyname: 'Korotky',\n              firstname: 'A. M.',\n              initials: 'A.M.'\n            },\n            agerange: { ageyoung: 529, ageold: 44478 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 20,\n          sitename: 'Akuvaara',\n          sitedescription: 'Lake. Physiography: Hill of sandy/gravelly outwash. Surrounding vegetation: Thin pine forest.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[27.67406,69.12326]}',\n          altitude: 170,\n          collectionunitid: 20,\n          collectionunit: null,\n          handle: 'AKUV',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 20,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Hyvärinen, Hannu.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n37g69',\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: -36, ageold: 11118 }\n          },\n          {\n            datasetid: 7867,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 20,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Hyvärinen, Hannu.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n37g69',\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: 0, ageold: 9434 }\n          },\n          {\n            datasetid: 20,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Hyvärinen, Hannu.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3tm3t',\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: 0, ageold: 9434 }\n          },\n          {\n            datasetid: 20,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Hyvärinen, Hannu.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3tm3t',\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: -36, ageold: 11118 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 21,\n          sitename: 'Alazeya River Exposure, 8 m Terrace',\n          sitedescription: 'Peat horizon exposed in river terrace. Physiography: yedoma-alas relief. Surrounding vegetation: Larix dahurica forest-tundra.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[154.5,68.5]}',\n          altitude: 40,\n          collectionunitid: 21,\n          collectionunit: null,\n          handle: 'ALAZE',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7868,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 21,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3pt1w',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 10440, ageold: 10440 }\n          },\n          {\n            datasetid: 21,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n33s31',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 10440, ageold: 10440 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 22,\n          sitename: 'Alazeya River Exposure, 9 m Terrace',\n          sitedescription: 'Section with alluvium with insitu shrubs. Physiography: yedoma-alas relief. Surrounding vegetation: Larix dahurica forest-tundra.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[154.5,64.33333]}',\n          altitude: 40,\n          collectionunitid: 22,\n          collectionunit: null,\n          handle: 'ALAZE1',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7869,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 22,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3001d',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 4790, ageold: 4790 }\n          },\n          {\n            datasetid: 22,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3k40p',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 4790, ageold: 4790 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 24,\n          sitename: 'Alexander Lake',\n          sitedescription: 'Physiography: rolling glacial till, eskers, kettles,.',\n          sitenotes: 'Lake area from Topographic Dataset of Canada (CanVec).  Added on 7/14/21 by Grace Roper, UW-Madison.  Lake-area scripts available at https://github.com/NeotomaDB/neotoma_lakes',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-60.58333,53.33333]}',\n          altitude: 143,\n          collectionunitid: 24,\n          collectionunit: null,\n          handle: 'ALEXLAKE',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7870,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 24,\n            datasettype: 'pollen',\n            datasetnotes: 'Taxon counts and names were unclear on original Jordan data sheets - errors are possible.',\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f97t',\n            datasetpi: {\n              contactid: 52,\n              contactname: 'Jordan, Richard H.',\n              familyname: 'Jordan',\n              firstname: 'Richard H.',\n              initials: 'R.H.'\n            },\n            agerange: { ageyoung: 3472, ageold: 7602 }\n          },\n          {\n            datasetid: 24,\n            datasettype: 'pollen',\n            datasetnotes: 'Taxon counts and names were unclear on original Jordan data sheets - errors are possible.',\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3v88k',\n            datasetpi: {\n              contactid: 52,\n              contactname: 'Jordan, Richard H.',\n              familyname: 'Jordan',\n              firstname: 'Richard H.',\n              initials: 'R.H.'\n            },\n            agerange: { ageyoung: 3472, ageold: 7602 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 25,\n          sitename: 'Alexis Lake',\n          sitedescription: 'Lake in Alexis River watershed. Physiography: Mecatina Plateau/Laurentian region. Surrounding vegetation: Black Spruce, Lichen Barrens.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-57.03333,52.51667]}',\n          altitude: 200,\n          collectionunitid: 25,\n          collectionunit: null,\n          handle: 'ALEXISLK',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7871,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 25,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3qg6n',\n            datasetpi: {\n              contactid: 60,\n              contactname: 'Lamb, Henry F.',\n              familyname: 'Lamb',\n              firstname: 'Henry F.',\n              initials: 'H.F.'\n            },\n            agerange: { ageyoung: 30, ageold: 25594 }\n          },\n          {\n            datasetid: 25,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n39m4j',\n            datasetpi: {\n              contactid: 60,\n              contactname: 'Lamb, Henry F.',\n              familyname: 'Lamb',\n              firstname: 'Henry F.',\n              initials: 'H.F.'\n            },\n            agerange: { ageyoung: 30, ageold: 25594 }\n          }\n        ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetselcresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3159g',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/9twd-s570',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 1,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f596',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 2,\n          sitename: '15/2',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n          altitude: 305,\n          collectionunitid: 2,\n          collectionunit: '15/2',\n          handle: '15-2',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 2,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3wc7j',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 2,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/hhsf-6760',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 3,\n          sitename: '16/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n          altitude: 285,\n          collectionunitid: 3,\n          collectionunit: '16/1',\n          handle: '16-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 3,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3rp48',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 3,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/g2yc-7s57',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 4,\n          sitename: '17/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n          altitude: 235,\n          collectionunitid: 4,\n          collectionunit: '17/1',\n          handle: '17-1',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 4,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n39g6x',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 4,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3qp4z',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 4,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3wh55',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 4,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/7s96-8m25',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 5,\n          sitename: '17/2',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n          altitude: 335,\n          collectionunitid: 5,\n          collectionunit: '17/2',\n          handle: '17-2',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 5,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3kw21',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 5,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/8rvx-be32',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 5,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3rt1h',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 5,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n35p40',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 6,\n          sitename: '17/3',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n          altitude: 255,\n          collectionunitid: 6,\n          collectionunit: '17/3',\n          handle: '17-3',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 6,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3g59h',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 6,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3n09b',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 6,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n32011',\n            datasetpi: {\n              contactid: 40,\n              contactname: 'Gajewski, Konrad J.',\n              familyname: 'Gajewski',\n              firstname: 'Konrad J.',\n              initials: 'K.J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 7,\n          sitename: 'Three Pines Bog',\n          sitedescription: 'Bog.',\n          sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n          altitude: 294,\n          collectionunitid: 7,\n          collectionunit: null,\n          handle: '3PINES',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7857,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 7,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3x59j',\n            datasetpi: {\n              contactid: 69,\n              contactname: 'McAndrews, John H.',\n              familyname: 'McAndrews',\n              firstname: 'John H.',\n              initials: 'J.H.'\n            },\n            agerange: { ageyoung: -26, ageold: 6485 }\n          },\n          {\n            datasetid: 7,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3h98t',\n            datasetpi: {\n              contactid: 69,\n              contactname: 'McAndrews, John H.',\n              familyname: 'McAndrews',\n              firstname: 'John H.',\n              initials: 'J.H.'\n            },\n            agerange: { ageyoung: -26, ageold: 6485 }\n          },\n          {\n            datasetid: 7,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3bc7k',\n            datasetpi: {\n              contactid: 69,\n              contactname: 'McAndrews, John H.',\n              familyname: 'McAndrews',\n              firstname: 'John H.',\n              initials: 'J.H.'\n            },\n            agerange: { ageyoung: -26, ageold: 6485 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 8,\n          sitename: 'Abalone Rocks Marsh',\n          sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n          altitude: 0,\n          collectionunitid: 8,\n          collectionunit: null,\n          handle: 'ABALONE',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7858,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 8,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3sg68',\n            datasetpi: {\n              contactid: 127,\n              contactname: 'Cole, Kenneth L.',\n              familyname: 'Cole',\n              firstname: 'Kenneth L.',\n              initials: 'K.L.'\n            },\n            agerange: { ageyoung: -43, ageold: 6904 }\n          },\n          {\n            datasetid: 10469,\n            datasettype: 'charcoal',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 8,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3ch5h',\n            datasetpi: {\n              contactid: 127,\n              contactname: 'Cole, Kenneth L.',\n              familyname: 'Cole',\n              firstname: 'Kenneth L.',\n              initials: 'K.L.'\n            },\n            agerange: { ageyoung: -43, ageold: 6904 }\n          },\n          {\n            datasetid: 8,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n36p49',\n            datasetpi: {\n              contactid: 127,\n              contactname: 'Cole, Kenneth L.',\n              familyname: 'Cole',\n              firstname: 'Kenneth L.',\n              initials: 'K.L.'\n            },\n            agerange: { ageyoung: -43, ageold: 6904 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 9,\n          sitename: 'Adange',\n          sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n          sitenotes: 'The site is the wide part of the mouth of the river.',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n          altitude: 1750,\n          collectionunitid: 9,\n          collectionunit: null,\n          handle: 'ADANGE',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7859,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3301b',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: -475, ageold: 6051 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3301b',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: 0, ageold: 4000 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n37t27',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: -475, ageold: 6051 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3np4b',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: 0, ageold: 4000 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n37t27',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: 0, ageold: 4000 }\n          },\n          {\n            datasetid: 9,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Kvavadze Eliso V.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3np4b',\n            datasetpi: {\n              contactid: 558,\n              contactname: 'Kvavadze, Eliso V.',\n              familyname: 'Kvavadze',\n              firstname: 'Eliso V.',\n              initials: 'E.V.'\n            },\n            agerange: { ageyoung: -475, ageold: 6051 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 10,\n          sitename: 'Site 1 (Cohen unpublished)',\n          sitedescription: null,\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n          altitude: 37,\n          collectionunitid: 10,\n          collectionunit: null,\n          handle: 'ADC001',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 10,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3409p',\n            datasetpi: {\n              contactid: 726,\n              contactname: 'Cohen, A. D.',\n              familyname: 'Cohen',\n              firstname: 'A. D.',\n              initials: 'A.D.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 10,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3j01c',\n            datasetpi: {\n              contactid: 726,\n              contactname: 'Cohen, A. D.',\n              familyname: 'Cohen',\n              firstname: 'A. D.',\n              initials: 'A.D.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 11,\n          sitename: 'Konus Exposure, Adycha River',\n          sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n          sitenotes: 'Adycha River, Lower Yana River.',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n          altitude: 130,\n          collectionunitid: 11,\n          collectionunit: null,\n          handle: 'ADYCHA',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7860,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 11,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3097s',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 1000, ageold: 8820 }\n          },\n          {\n            datasetid: 11,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3d59w',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 1000, ageold: 8820 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 12,\n          sitename: 'Ageröds Mosse',\n          sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n          sitenotes: 'Surrounding vegetation: birch woodland.',\n          geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n          altitude: 58,\n          collectionunitid: 12,\n          collectionunit: null,\n          handle: 'AGE',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 12,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Regnéll Joachim.',\n            database: 'European Pollen Database',\n            doi: '10.21233/znex-sp94',\n            datasetpi: {\n              contactid: 595,\n              contactname: 'Regnéll, Joachim',\n              familyname: 'Regnéll',\n              firstname: 'Joachim',\n              initials: 'J.'\n            },\n            agerange: { ageyoung: -26, ageold: 11004 }\n          },\n          {\n            datasetid: 7861,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: 595,\n              contactname: 'Regnéll, Joachim',\n              familyname: 'Regnéll',\n              firstname: 'Joachim',\n              initials: 'J.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 12,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Regnéll Joachim.',\n            database: 'European Pollen Database',\n            doi: '10.21233/znex-sp94',\n            datasetpi: {\n              contactid: 595,\n              contactname: 'Regnéll, Joachim',\n              familyname: 'Regnéll',\n              firstname: 'Joachim',\n              initials: 'J.'\n            },\n            agerange: { ageyoung: 0, ageold: 9660 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 13,\n          sitename: 'Aguas Calientes',\n          sitedescription: 'Mire.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n          altitude: 4210,\n          collectionunitid: 13,\n          collectionunit: '1',\n          handle: 'AGUASC1',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 13,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n34s3b',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 13,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3qt16',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 14,\n          sitename: 'Aguas Calientes 2',\n          sitedescription: 'Mire.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n          altitude: 4210,\n          collectionunitid: 14,\n          collectionunit: null,\n          handle: 'AGUASC2',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7862,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 14,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3101q',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 14,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3m10z',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 15,\n          sitename: 'Aguilar',\n          sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n          altitude: 4000,\n          collectionunitid: 15,\n          collectionunit: null,\n          handle: 'AGUILAR',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7863,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 15,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3g974',\n            datasetpi: {\n              contactid: 148,\n              contactname: 'Markgraf, Vera',\n              familyname: 'Markgraf',\n              firstname: 'Vera',\n              initials: 'V.'\n            },\n            agerange: { ageyoung: 0, ageold: 9822 }\n          },\n          {\n            datasetid: 15,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3w88w',\n            datasetpi: {\n              contactid: 148,\n              contactname: 'Markgraf, Vera',\n              familyname: 'Markgraf',\n              firstname: 'Vera',\n              initials: 'V.'\n            },\n            agerange: { ageyoung: 0, ageold: 9822 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 16,\n          sitename: 'Ahlenmoor',\n          sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n          sitenotes: null,\n          geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n          altitude: 2,\n          collectionunitid: 16,\n          collectionunit: 'AHL V',\n          handle: 'AHL5',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 16,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: '10.21233/n3rg6z',\n            datasetpi: {\n              contactid: 597,\n              contactname: 'Kucan, Dusanka',\n              familyname: 'Kucan',\n              firstname: 'Dusanka',\n              initials: 'D.'\n            },\n            agerange: { ageyoung: 990, ageold: 4276 }\n          },\n          {\n            datasetid: 7864,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 16,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: '10.21233/n3rg6z',\n            datasetpi: {\n              contactid: 596,\n              contactname: 'Behre, Karl-Ernst',\n              familyname: 'Behre',\n              firstname: 'Karl-Ernst',\n              initials: 'K.-E.'\n            },\n            agerange: { ageyoung: 990, ageold: 4276 }\n          },\n          {\n            datasetid: 16,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: '10.21233/n3bh6k',\n            datasetpi: {\n              contactid: 596,\n              contactname: 'Behre, Karl-Ernst',\n              familyname: 'Behre',\n              firstname: 'Karl-Ernst',\n              initials: 'K.-E.'\n            },\n            agerange: { ageyoung: 990, ageold: 4276 }\n          },\n          {\n            datasetid: 16,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: '10.21233/n3bh6k',\n            datasetpi: {\n              contactid: 597,\n              contactname: 'Kucan, Dusanka',\n              familyname: 'Kucan',\n              firstname: 'Dusanka',\n              initials: 'D.'\n            },\n            agerange: { ageyoung: 990, ageold: 4276 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 17,\n          sitename: 'Ajata',\n          sitedescription: 'Mire.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-69.2,-18.25]}',\n          altitude: 4700,\n          collectionunitid: 17,\n          collectionunit: null,\n          handle: 'AJATA',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7865,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 17,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n3ms3p',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: 0, ageold: 2839 }\n          },\n          {\n            datasetid: 17,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Latin American Pollen Database',\n            doi: '10.21233/n36t1j',\n            datasetpi: {\n              contactid: 515,\n              contactname: 'Graf, Kurt',\n              familyname: 'Graf',\n              firstname: 'Kurt',\n              initials: 'K.'\n            },\n            agerange: { ageyoung: 0, ageold: 2839 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 18,\n          sitename: 'South Soefje Bog',\n          sitedescription: null,\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-97.51694,29.6]}',\n          altitude: 97,\n          collectionunitid: 18,\n          collectionunit: null,\n          handle: 'AKG001',\n          unittype: 'Modern'\n        },\n        dataset: [\n          {\n            datasetid: 18,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3339d',\n            datasetpi: {\n              contactid: 561,\n              contactname: 'Graham, A. K.',\n              familyname: 'Graham',\n              firstname: 'A. K.',\n              initials: 'A.K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 18,\n            datasettype: 'pollen surface sample',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3h012',\n            datasetpi: {\n              contactid: 561,\n              contactname: 'Graham, A. K.',\n              familyname: 'Graham',\n              firstname: 'A. K.',\n              initials: 'A.K.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 18,\n          sitename: 'South Soefje Bog',\n          sitedescription: null,\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-97.51694,29.6]}',\n          altitude: 97,\n          collectionunitid: 3654,\n          collectionunit: null,\n          handle: 'SOEFJES',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 3772,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3gv4h',\n            datasetpi: {\n              contactid: 21,\n              contactname: 'Bryant, Vaughn M., Jr.',\n              familyname: 'Bryant',\n              firstname: 'Vaughn M.',\n              initials: 'V.M.'\n            },\n            agerange: { ageyoung: 120, ageold: 7900 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 19,\n          sitename: 'Akulinin Exposure P1282',\n          sitedescription: 'Exposure in river terrace. Physiography: river valley in mountains. Surrounding vegetation: secondary Betula forest.',\n          sitenotes: 'Floodplain vegetation: Salix, Populus, and Chosenia.',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[138.55,47.11667]}',\n          altitude: 20,\n          collectionunitid: 19,\n          collectionunit: 'P1282',\n          handle: 'AKULININ',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7866,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 19,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3c887',\n            datasetpi: {\n              contactid: 827,\n              contactname: 'Korotky, A. M.',\n              familyname: 'Korotky',\n              firstname: 'A. M.',\n              initials: 'A.M.'\n            },\n            agerange: { ageyoung: 529, ageold: 44478 }\n          },\n          {\n            datasetid: 19,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3z97g',\n            datasetpi: {\n              contactid: 827,\n              contactname: 'Korotky, A. M.',\n              familyname: 'Korotky',\n              firstname: 'A. M.',\n              initials: 'A.M.'\n            },\n            agerange: { ageyoung: 529, ageold: 44478 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 20,\n          sitename: 'Akuvaara',\n          sitedescription: 'Lake. Physiography: Hill of sandy/gravelly outwash. Surrounding vegetation: Thin pine forest.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[27.67406,69.12326]}',\n          altitude: 170,\n          collectionunitid: 20,\n          collectionunit: null,\n          handle: 'AKUV',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 20,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Hyvärinen, Hannu.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n37g69',\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: -36, ageold: 11118 }\n          },\n          {\n            datasetid: 7867,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'European Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 20,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Hyvärinen, Hannu.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n37g69',\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: 0, ageold: 9434 }\n          },\n          {\n            datasetid: 20,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Hyvärinen, Hannu.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3tm3t',\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: 0, ageold: 9434 }\n          },\n          {\n            datasetid: 20,\n            datasettype: 'pollen',\n            datasetnotes: 'Data contributed by Hyvärinen, Hannu.',\n            database: 'European Pollen Database',\n            doi: '10.21233/n3tm3t',\n            datasetpi: {\n              contactid: 697,\n              contactname: 'Hyvärinen, Hannu',\n              familyname: 'Hyvärinen',\n              firstname: 'Hannu',\n              initials: 'H.'\n            },\n            agerange: { ageyoung: -36, ageold: 11118 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 21,\n          sitename: 'Alazeya River Exposure, 8 m Terrace',\n          sitedescription: 'Peat horizon exposed in river terrace. Physiography: yedoma-alas relief. Surrounding vegetation: Larix dahurica forest-tundra.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[154.5,68.5]}',\n          altitude: 40,\n          collectionunitid: 21,\n          collectionunit: null,\n          handle: 'ALAZE',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7868,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 21,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3pt1w',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 10440, ageold: 10440 }\n          },\n          {\n            datasetid: 21,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n33s31',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 10440, ageold: 10440 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 22,\n          sitename: 'Alazeya River Exposure, 9 m Terrace',\n          sitedescription: 'Section with alluvium with insitu shrubs. Physiography: yedoma-alas relief. Surrounding vegetation: Larix dahurica forest-tundra.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[154.5,64.33333]}',\n          altitude: 40,\n          collectionunitid: 22,\n          collectionunit: null,\n          handle: 'ALAZE1',\n          unittype: 'Section'\n        },\n        dataset: [\n          {\n            datasetid: 7869,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 22,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3001d',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 4790, ageold: 4790 }\n          },\n          {\n            datasetid: 22,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'Pollen Database of Siberia and the Russian Far East',\n            doi: '10.21233/n3k40p',\n            datasetpi: {\n              contactid: 306,\n              contactname: 'Lozhkin, Anatoly V.',\n              familyname: 'Lozhkin',\n              firstname: 'Anatoly V.',\n              initials: 'A.V.'\n            },\n            agerange: { ageyoung: 4790, ageold: 4790 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 24,\n          sitename: 'Alexander Lake',\n          sitedescription: 'Physiography: rolling glacial till, eskers, kettles,.',\n          sitenotes: 'Lake area from Topographic Dataset of Canada (CanVec).  Added on 7/14/21 by Grace Roper, UW-Madison.  Lake-area scripts available at https://github.com/NeotomaDB/neotoma_lakes',\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-60.58333,53.33333]}',\n          altitude: 143,\n          collectionunitid: 24,\n          collectionunit: null,\n          handle: 'ALEXLAKE',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7870,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 24,\n            datasettype: 'pollen',\n            datasetnotes: 'Taxon counts and names were unclear on original Jordan data sheets - errors are possible.',\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3f97t',\n            datasetpi: {\n              contactid: 52,\n              contactname: 'Jordan, Richard H.',\n              familyname: 'Jordan',\n              firstname: 'Richard H.',\n              initials: 'R.H.'\n            },\n            agerange: { ageyoung: 3472, ageold: 7602 }\n          },\n          {\n            datasetid: 24,\n            datasettype: 'pollen',\n            datasetnotes: 'Taxon counts and names were unclear on original Jordan data sheets - errors are possible.',\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3v88k',\n            datasetpi: {\n              contactid: 52,\n              contactname: 'Jordan, Richard H.',\n              familyname: 'Jordan',\n              firstname: 'Richard H.',\n              initials: 'R.H.'\n            },\n            agerange: { ageyoung: 3472, ageold: 7602 }\n          }\n        ]\n      },\n      {\n        site: {\n          siteid: 25,\n          sitename: 'Alexis Lake',\n          sitedescription: 'Lake in Alexis River watershed. Physiography: Mecatina Plateau/Laurentian region. Surrounding vegetation: Black Spruce, Lichen Barrens.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-57.03333,52.51667]}',\n          altitude: 200,\n          collectionunitid: 25,\n          collectionunit: null,\n          handle: 'ALEXISLK',\n          unittype: 'Core'\n        },\n        dataset: [\n          {\n            datasetid: 7871,\n            datasettype: 'geochronologic',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: null,\n            datasetpi: {\n              contactid: null,\n              contactname: null,\n              familyname: null,\n              firstname: null,\n              initials: null\n            },\n            agerange: { ageyoung: null, ageold: null }\n          },\n          {\n            datasetid: 25,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n3qg6n',\n            datasetpi: {\n              contactid: 60,\n              contactname: 'Lamb, Henry F.',\n              familyname: 'Lamb',\n              firstname: 'Henry F.',\n              initials: 'H.F.'\n            },\n            agerange: { ageyoung: 30, ageold: 25594 }\n          },\n          {\n            datasetid: 25,\n            datasettype: 'pollen',\n            datasetnotes: null,\n            database: 'North American Pollen Database',\n            doi: '10.21233/n39m4j',\n            datasetpi: {\n              contactid: 60,\n              contactname: 'Lamb, Henry F.',\n              familyname: 'Lamb',\n              firstname: 'Henry F.',\n              initials: 'H.F.'\n            },\n            agerange: { ageyoung: 30, ageold: 25594 }\n          }\n        ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "183e490e-3bad-4017-a281-55dc63aec270",
              "parentUUID": "553ebb5b-4a8c-44e6-aa0c-59d7fd7b4b50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "183e490e-3bad-4017-a281-55dc63aec270"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1850,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fab5d705-3133-49c4-9682-1b7157f89749",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2306,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        sites: {\n          site: {\n            handle: 'ADYCHA',\n            siteid: 11,\n            altitude: 130,\n            sitename: 'Konus Exposure, Adycha River',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n            sitenotes: 'Adycha River, Lower Yana River.',\n            collectionunit: null,\n            sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n            collectionunitid: 11\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3097s', '10.21233/n3d59w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 8820,\n                  ageyoung: 1000\n                }\n              ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 11,\n              datasetpi: [\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                },\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 7860,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUILAR',\n            siteid: 15,\n            altitude: 4000,\n            sitename: 'Aguilar',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n            collectionunitid: 15\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3g974', '10.21233/n3w88w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9822,\n                  ageyoung: 0\n                }\n              ],\n              database: 'Latin American Pollen Database',\n              datasetid: 15,\n              datasetpi: [\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                },\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7863,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGE',\n            siteid: 12,\n            altitude: 58,\n            sitename: 'Ageröds Mosse',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n            sitenotes: 'Surrounding vegetation: birch woodland.',\n            collectionunit: null,\n            sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n            collectionunitid: 12\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/znex-sp94' ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 11004,\n                  ageyoung: -26\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9660,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 12,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                },\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Regnéll Joachim.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7861,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '16-1',\n            siteid: 3,\n            altitude: 285,\n            sitename: '16/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n            sitenotes: null,\n            collectionunit: '16/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 3\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/g2yc-7s57', '10.21233/n3rp48' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 3,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-1',\n            siteid: 4,\n            altitude: 235,\n            sitename: '17/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n            sitenotes: null,\n            collectionunit: '17/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 4\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/7s96-8m25',\n                '10.21233/n39g6x',\n                '10.21233/n3qp4z',\n                '10.21233/n3wh55'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 4,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADANGE',\n            siteid: 9,\n            altitude: 1750,\n            sitename: 'Adange',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n            sitenotes: 'The site is the wide part of the mouth of the river.',\n            collectionunit: null,\n            sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n            collectionunitid: 9\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3301b',\n                '10.21233/n37t27',\n                '10.21233/n3np4b'\n              ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 6051,\n                  ageyoung: -475\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4000,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 9,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Kvavadze Eliso V.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7859,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC2',\n            siteid: 14,\n            altitude: 4210,\n            sitename: 'Aguas Calientes 2',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Mire.',\n            collectionunitid: 14\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3101q', '10.21233/n3m10z' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 14,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7862,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-3',\n            siteid: 6,\n            altitude: 255,\n            sitename: '17/3',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n            sitenotes: null,\n            collectionunit: '17/3',\n            sitedescription: 'Lake.',\n            collectionunitid: 6\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n32011',\n                '10.21233/n3g59h',\n                '10.21233/n3n09b'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 6,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ABALONE',\n            siteid: 8,\n            altitude: 0,\n            sitename: 'Abalone Rocks Marsh',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n            collectionunitid: 8\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n36p49',\n                '10.21233/n3ch5h',\n                '10.21233/n3sg68'\n              ],\n              agerange: [\n                {\n                  units: 'Calendar years BP',\n                  ageold: 6904,\n                  ageyoung: -43\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 8,\n              datasetpi: [\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7858,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10469,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'charcoal',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADC001',\n            siteid: 10,\n            altitude: 37,\n            sitename: 'Site 1 (Cohen unpublished)',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: null,\n            collectionunitid: 10\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3409p', '10.21233/n3j01c' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10,\n              datasetpi: [\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                },\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-2',\n            siteid: 5,\n            altitude: 335,\n            sitename: '17/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n            sitenotes: null,\n            collectionunit: '17/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 5\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/8rvx-be32',\n                '10.21233/n35p40',\n                '10.21233/n3kw21',\n                '10.21233/n3rt1h'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 5,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC1',\n            siteid: 13,\n            altitude: 4210,\n            sitename: 'Aguas Calientes',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n            sitenotes: null,\n            collectionunit: '1',\n            sitedescription: 'Mire.',\n            collectionunitid: 13\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n34s3b', '10.21233/n3qt16' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 13,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '3PINES',\n            siteid: 7,\n            altitude: 294,\n            sitename: 'Three Pines Bog',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n            sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n            collectionunit: null,\n            sitedescription: 'Bog.',\n            collectionunitid: 7\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3bc7k',\n                '10.21233/n3h98t',\n                '10.21233/n3x59j'\n              ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 6485,\n                  ageyoung: -26\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 7,\n              datasetpi: [\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7857,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AHL5',\n            siteid: 16,\n            altitude: 2,\n            sitename: 'Ahlenmoor',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n            sitenotes: null,\n            collectionunit: 'AHL V',\n            sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n            collectionunitid: 16\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3bh6k', '10.21233/n3rg6z' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4276,\n                  ageyoung: 990\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 16,\n              datasetpi: [\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7864,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-1',\n            siteid: 1,\n            altitude: 244,\n            sitename: '15/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n            sitenotes: null,\n            collectionunit: '15/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 1\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-2',\n            siteid: 2,\n            altitude: 305,\n            sitename: '15/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n            sitenotes: null,\n            collectionunit: '15/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 2\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/hhsf-6760', '10.21233/n3wc7j' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 2,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/datasetv2' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets' in your API spec\n\nres did not satisfy it because: response should be array\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        sites: {\n          site: {\n            handle: 'ADYCHA',\n            siteid: 11,\n            altitude: 130,\n            sitename: 'Konus Exposure, Adycha River',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[135.58333,67.75]}',\n            sitenotes: 'Adycha River, Lower Yana River.',\n            collectionunit: null,\n            sitedescription: 'Exposure on slope. Surrounding vegetation: open Larix dahurica forest.',\n            collectionunitid: 11\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3097s', '10.21233/n3d59w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 8820,\n                  ageyoung: 1000\n                }\n              ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 11,\n              datasetpi: [\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                },\n                {\n                  initials: 'A.V.',\n                  contactid: 306,\n                  firstname: 'Anatoly V.',\n                  familyname: 'Lozhkin',\n                  contactname: 'Lozhkin, Anatoly V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Pollen Database of Siberia and the Russian Far East',\n              datasetid: 7860,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUILAR',\n            siteid: 15,\n            altitude: 4000,\n            sitename: 'Aguilar',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-65.75,-23.83333]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Fen along creek above Mina Aguilar. Physiography: bog cut by creek draining endmoraines. Surrounding vegetation: Altiplano paramo grassland.',\n            collectionunitid: 15\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3g974', '10.21233/n3w88w' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9822,\n                  ageyoung: 0\n                }\n              ],\n              database: 'Latin American Pollen Database',\n              datasetid: 15,\n              datasetpi: [\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                },\n                {\n                  initials: 'V.',\n                  contactid: 148,\n                  firstname: 'Vera',\n                  familyname: 'Markgraf',\n                  contactname: 'Markgraf, Vera'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7863,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGE',\n            siteid: 12,\n            altitude: 58,\n            sitename: 'Ageröds Mosse',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[13.41701,55.92856],[13.43847,55.92856],[13.43847,55.94039],[13.41701,55.94039],[13.41701,55.92856]]]}',\n            sitenotes: 'Surrounding vegetation: birch woodland.',\n            collectionunit: null,\n            sitedescription: 'Forested Sphagnum bog. Physiography: till. Surrounding vegetation: pasture and arable land.',\n            collectionunitid: 12\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/znex-sp94' ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 11004,\n                  ageyoung: -26\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 9660,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 12,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                },\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Regnéll Joachim.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7861,\n              datasetpi: [\n                {\n                  initials: 'J.',\n                  contactid: 595,\n                  firstname: 'Joachim',\n                  familyname: 'Regnéll',\n                  contactname: 'Regnéll, Joachim'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '16-1',\n            siteid: 3,\n            altitude: 285,\n            sitename: '16/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.06667,55.41333]}',\n            sitenotes: null,\n            collectionunit: '16/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 3\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/g2yc-7s57', '10.21233/n3rp48' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 3,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-1',\n            siteid: 4,\n            altitude: 235,\n            sitename: '17/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.7,55.06667]}',\n            sitenotes: null,\n            collectionunit: '17/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 4\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/7s96-8m25',\n                '10.21233/n39g6x',\n                '10.21233/n3qp4z',\n                '10.21233/n3wh55'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 4,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADANGE',\n            siteid: 9,\n            altitude: 1750,\n            sitename: 'Adange',\n            unittype: 'Section',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[41.33333,43.30556]}',\n            sitenotes: 'The site is the wide part of the mouth of the river.',\n            collectionunit: null,\n            sitedescription: 'Meander of Adange river. Physiography: Fluvial terrace above flood-plain. Surrounding vegetation: Subalpine tall herbaceous vegetation.',\n            collectionunitid: 9\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3301b',\n                '10.21233/n37t27',\n                '10.21233/n3np4b'\n              ],\n              agerange: [\n                {\n                  units: 'Calibrated radiocarbon years BP',\n                  ageold: 6051,\n                  ageyoung: -475\n                },\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4000,\n                  ageyoung: 0\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 9,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                },\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: 'Data contributed by Kvavadze Eliso V.'\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7859,\n              datasetpi: [\n                {\n                  initials: 'E.V.',\n                  contactid: 558,\n                  firstname: 'Eliso V.',\n                  familyname: 'Kvavadze',\n                  contactname: 'Kvavadze, Eliso V.'\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC2',\n            siteid: 14,\n            altitude: 4210,\n            sitename: 'Aguas Calientes 2',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.58333,-23.5]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Mire.',\n            collectionunitid: 14\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3101q', '10.21233/n3m10z' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 14,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 7862,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-3',\n            siteid: 6,\n            altitude: 255,\n            sitename: '17/3',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.95,55.11667]}',\n            sitenotes: null,\n            collectionunit: '17/3',\n            sitedescription: 'Lake.',\n            collectionunitid: 6\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n32011',\n                '10.21233/n3g59h',\n                '10.21233/n3n09b'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 6,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ABALONE',\n            siteid: 8,\n            altitude: 0,\n            sitename: 'Abalone Rocks Marsh',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-119.97667,33.95639]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: 'Small estuarine marsh. Physiography: Santa Rosa Island. Surrounding vegetation: coastal marsh and grassland.',\n            collectionunitid: 8\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n36p49',\n                '10.21233/n3ch5h',\n                '10.21233/n3sg68'\n              ],\n              agerange: [\n                {\n                  units: 'Calendar years BP',\n                  ageold: 6904,\n                  ageyoung: -43\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 8,\n              datasetpi: [\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                },\n                {\n                  initials: 'K.L.',\n                  contactid: 127,\n                  firstname: 'Kenneth L.',\n                  familyname: 'Cole',\n                  contactname: 'Cole, Kenneth L.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7858,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10469,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'charcoal',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'ADC001',\n            siteid: 10,\n            altitude: 37,\n            sitename: 'Site 1 (Cohen unpublished)',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-82.33,30.83]}',\n            sitenotes: null,\n            collectionunit: null,\n            sitedescription: null,\n            collectionunitid: 10\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3409p', '10.21233/n3j01c' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 10,\n              datasetpi: [\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                },\n                {\n                  initials: 'A.D.',\n                  contactid: 726,\n                  firstname: 'A. D.',\n                  familyname: 'Cohen',\n                  contactname: 'Cohen, A. D.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '17-2',\n            siteid: 5,\n            altitude: 335,\n            sitename: '17/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-74.93333,55.25]}',\n            sitenotes: null,\n            collectionunit: '17/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 5\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/8rvx-be32',\n                '10.21233/n35p40',\n                '10.21233/n3kw21',\n                '10.21233/n3rt1h'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 5,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AGUASC1',\n            siteid: 13,\n            altitude: 4210,\n            sitename: 'Aguas Calientes',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-67.4,-23.08333]}',\n            sitenotes: null,\n            collectionunit: '1',\n            sitedescription: 'Mire.',\n            collectionunitid: 13\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n34s3b', '10.21233/n3qt16' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'Latin American Pollen Database',\n              datasetid: 13,\n              datasetpi: [\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                },\n                {\n                  initials: 'K.',\n                  contactid: 515,\n                  firstname: 'Kurt',\n                  familyname: 'Graf',\n                  contactname: 'Graf, Kurt'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '3PINES',\n            siteid: 7,\n            altitude: 294,\n            sitename: 'Three Pines Bog',\n            unittype: 'Core',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-80.11667,47]}',\n            sitenotes: 'Bog is adjacent to the Three Pines archeological site.',\n            collectionunit: null,\n            sitedescription: 'Bog.',\n            collectionunitid: 7\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/n3bc7k',\n                '10.21233/n3h98t',\n                '10.21233/n3x59j'\n              ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 6485,\n                  ageyoung: -26\n                }\n              ],\n              database: 'North American Pollen Database',\n              datasetid: 7,\n              datasetpi: [\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                },\n                {\n                  initials: 'J.H.',\n                  contactid: 69,\n                  firstname: 'John H.',\n                  familyname: 'McAndrews',\n                  contactname: 'McAndrews, John H.'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 7857,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: 'AHL5',\n            siteid: 16,\n            altitude: 2,\n            sitename: 'Ahlenmoor',\n            unittype: 'Core',\n            geography: '{\"type\":\"Polygon\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[[[8.71234,53.68449],[8.79869,53.68449],[8.79869,53.72097],[8.71234,53.72097],[8.71234,53.68449]]]}',\n            sitenotes: null,\n            collectionunit: 'AHL V',\n            sitedescription: 'Excavated bog. Physiography: Raised bog. Surrounding vegetation: Sphagnetum.',\n            collectionunitid: 16\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/n3bh6k', '10.21233/n3rg6z' ],\n              agerange: [\n                {\n                  units: 'Radiocarbon years BP',\n                  ageold: 4276,\n                  ageyoung: 990\n                }\n              ],\n              database: 'European Pollen Database',\n              datasetid: 16,\n              datasetpi: [\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'K.-E.',\n                  contactid: 596,\n                  firstname: 'Karl-Ernst',\n                  familyname: 'Behre',\n                  contactname: 'Behre, Karl-Ernst'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                },\n                {\n                  initials: 'D.',\n                  contactid: 597,\n                  firstname: 'Dusanka',\n                  familyname: 'Kucan',\n                  contactname: 'Kucan, Dusanka'\n                }\n              ],\n              datasettype: 'pollen',\n              datasetnotes: null\n            },\n            {\n              doi: [ null ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'European Pollen Database',\n              datasetid: 7864,\n              datasetpi: [\n                {\n                  initials: null,\n                  contactid: null,\n                  firstname: null,\n                  familyname: null,\n                  contactname: null\n                }\n              ],\n              datasettype: 'geochronologic',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-1',\n            siteid: 1,\n            altitude: 244,\n            sitename: '15/1',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n            sitenotes: null,\n            collectionunit: '15/1',\n            sitedescription: 'Lake.',\n            collectionunitid: 1\n          },\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      },\n      {\n        sites: {\n          site: {\n            handle: '15-2',\n            siteid: 2,\n            altitude: 305,\n            sitename: '15/2',\n            unittype: 'Modern',\n            geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.01667,55.83333]}',\n            sitenotes: null,\n            collectionunit: '15/2',\n            sitedescription: 'Lake.',\n            collectionunitid: 2\n          },\n          datasets: [\n            {\n              doi: [ '10.21233/hhsf-6760', '10.21233/n3wc7j' ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 2,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: {\n          items: { '$ref': '#/components/schemas/datasetv2' },\n          type: 'array'\n        }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "44e07a2b-dac7-4cd5-b511-d0953ddd905b",
              "parentUUID": "fab5d705-3133-49c4-9682-1b7157f89749",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "44e07a2b-dac7-4cd5-b511-d0953ddd905b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2306,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f11e3f26-b047-44d2-97e4-fb680dd57dda",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 925,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "47faf3a3-0b3e-461a-991c-02cb57b7fec0",
              "parentUUID": "f11e3f26-b047-44d2-97e4-fb680dd57dda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "47faf3a3-0b3e-461a-991c-02cb57b7fec0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 925,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0b3c901f-1cfb-41b0-8b1e-8ff977445a3f",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 132,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologiesresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/chronologiesresponse' }\n      }\n    },\n    description: 'chronology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologiesresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/chronologiesresponse' }\n      }\n    },\n    description: 'chronology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "eebaf150-3ee8-41c3-bf86-b905bc4c3b4b",
              "parentUUID": "0b3c901f-1cfb-41b0-8b1e-8ff977445a3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "eebaf150-3ee8-41c3-bf86-b905bc4c3b4b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "01056d35-21e4-43b6-aeec-3b81838b4ec4",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "04b5afe2-8993-4bb6-b2d8-5e35e87d76e3",
              "parentUUID": "01056d35-21e4-43b6-aeec-3b81838b4ec4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04b5afe2-8993-4bb6-b2d8-5e35e87d76e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 124,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9510f437-cd3f-4617-a761-787c0004e1ba",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 125,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/doiresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [ { datasetid: 1, dois: '10.21233/9twd-s570' } ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/doiresponse' } }\n    },\n    description: 'DOI'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/doiresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [ { datasetid: 1, dois: '10.21233/9twd-s570' } ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/doi' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/doiresponse' } }\n    },\n    description: 'DOI'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a1037669-cd6c-49d8-999f-84dc7f25708c",
              "parentUUID": "9510f437-cd3f-4617-a761-787c0004e1ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a1037669-cd6c-49d8-999f-84dc7f25708c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d4a55ade-c066-4d1e-b76a-74a3ad112620",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 156,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/lithologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/lithologyresponse' } }\n    },\n    description: 'Lithology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/lithologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/lithology' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/lithologyresponse' } }\n    },\n    description: 'Lithology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e0a57929-0740-4e23-bbfc-d81193e5afdf",
              "parentUUID": "d4a55ade-c066-4d1e-b76a-74a3ad112620",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e0a57929-0740-4e23-bbfc-d81193e5afdf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 156,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "da6d952a-6f74-405d-8fde-d6af0a4f228c",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 128,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/publicationsresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        publication: {\n          datasetid: 1,\n          publicationid: 251,\n          pubtypeid: 1,\n          pubtype: 'Journal Article',\n          year: '1991',\n          citation: 'Gajewski, K. 1991. Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec. Canadian Journal of Earth Sciences 28(4):643-648. [DOI: 10.1139/e91-055]',\n          articletitle: 'Représentation pollinique actuelle à la limite des arbres au Nouveau-Québec',\n          journal: 'Canadian Journal of Earth Sciences',\n          volume: '28',\n          issue: '4',\n          pages: '643-648',\n          citationnumber: null,\n          doi: '10.1139/e91-055',\n          booktitle: null,\n          numvolumes: null,\n          edition: null,\n          volumetitle: null,\n          seriestitle: null,\n          seriesvolume: null,\n          publisher: null,\n          url: null,\n          city: null,\n          state: null,\n          country: null,\n          originallanguage: null,\n          notes: null,\n          author: [\n            {\n              order: 1,\n              familyname: 'Gajewski',\n              givennames: 'Konrad J.'\n            }\n          ]\n        },\n        datasetid: [ null ]\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/publications' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/publicationsresponse' }\n      }\n    },\n    description: 'Publication'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "6f971b93-2c45-4379-98f8-8208e03c1e10",
              "parentUUID": "da6d952a-6f74-405d-8fde-d6af0a4f228c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6f971b93-2c45-4379-98f8-8208e03c1e10"
          ],
          "pending": [],
          "skipped": [],
          "duration": 128,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "246bc073-f6ab-4c64-a75f-9e8fb7d7fe15",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 121,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/sites' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/sitesresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        siteid: 1,\n        sitename: '15/1',\n        sitedescription: 'Lake.',\n        geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n        altitude: 244,\n        collectionunitid: 1,\n        collectionunit: '15/1',\n        handle: '15-1',\n        unittype: 'Modern',\n        datasetid: 1,\n        datasettype: 'pollen surface sample'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/sites' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/sitesresponse' } }\n    },\n    description: 'Site'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/sites' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/sitesresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        siteid: 1,\n        sitename: '15/1',\n        sitedescription: 'Lake.',\n        geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n        altitude: 244,\n        collectionunitid: 1,\n        collectionunit: '15/1',\n        handle: '15-1',\n        unittype: 'Modern',\n        datasetid: 1,\n        datasettype: 'pollen surface sample'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/sites' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/sitesresponse' } }\n    },\n    description: 'Site'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "4977a79a-5a87-4c8b-8845-efc01993ea26",
              "parentUUID": "246bc073-f6ab-4c64-a75f-9e8fb7d7fe15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4977a79a-5a87-4c8b-8845-efc01993ea26"
          ],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "23305f37-b184-4683-97c8-1576c42adaca",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 124,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "1675a9d0-0d34-4501-9a7e-04578559bb64",
              "parentUUID": "23305f37-b184-4683-97c8-1576c42adaca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1675a9d0-0d34-4501-9a7e-04578559bb64"
          ],
          "pending": [],
          "skipped": [],
          "duration": 124,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c4359c5b-4377-428a-b374-bc0793054237",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 130,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "267a6b3b-6571-4989-b990-9ffe6b930b54",
              "parentUUID": "c4359c5b-4377-428a-b374-bc0793054237",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "267a6b3b-6571-4989-b990-9ffe6b930b54"
          ],
          "pending": [],
          "skipped": [],
          "duration": 130,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0703ffca-6ae1-4604-893f-01e4a472538e",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "8c4e1133-5290-4c35-929f-11690b7c6bef",
              "parentUUID": "0703ffca-6ae1-4604-893f-01e4a472538e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c4e1133-5290-4c35-929f-11690b7c6bef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 139,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5560852b-0f34-48bf-9fff-ca928a586474",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b8e29b6d-09e2-4911-97f6-8b8d04297f1f",
              "parentUUID": "5560852b-0f34-48bf-9fff-ca928a586474",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8e29b6d-09e2-4911-97f6-8b8d04297f1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 128,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d9c4eb83-25fb-4023-83a5-fc6c586a60b8",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a7ee25c8-9f14-4735-992e-54ede8456fc2",
              "parentUUID": "d9c4eb83-25fb-4023-83a5-fc6c586a60b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7ee25c8-9f14-4735-992e-54ede8456fc2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1057,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1376bd88-9a9b-4785-9c41-3b247fb33952",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "22e26904-41d0-484f-b25e-d3e31df412b8",
              "parentUUID": "1376bd88-9a9b-4785-9c41-3b247fb33952",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22e26904-41d0-484f-b25e-d3e31df412b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 166,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ddd71663-82de-479f-b329-9eec50746b7c",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "86120351-12ac-4100-a8a3-6d2f8941168f",
              "parentUUID": "ddd71663-82de-479f-b329-9eec50746b7c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "86120351-12ac-4100-a8a3-6d2f8941168f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "dee26dca-cba4-4bc9-b36e-584f97d0d186",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 117,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fbe57fa7-5d8f-473b-8861-d99444fb39ab",
              "parentUUID": "dee26dca-cba4-4bc9-b36e-584f97d0d186",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fbe57fa7-5d8f-473b-8861-d99444fb39ab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 117,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4c448fdd-c5fc-425b-967b-4ea1cf33041a",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 281,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/datasetresponse\n\nres contained: {\n  body: {\n    status: 'success',\n    query: { gpid: [ 1 ], limit: 25, offset: 25 },\n    data: [],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/datasetresponse' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "6e2e2121-db6c-4381-9642-da45b814b15b",
              "parentUUID": "4c448fdd-c5fc-425b-967b-4ea1cf33041a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6e2e2121-db6c-4381-9642-da45b814b15b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 281,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f5e2175e-3be2-45b2-964d-d0b19a827212",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "76f67396-73fd-4ab4-ac60-64c9c77dcc9f",
              "parentUUID": "f5e2175e-3be2-45b2-964d-d0b19a827212",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76f67396-73fd-4ab4-ac60-64c9c77dcc9f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 224,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d2193548-9f10-429a-a227-553a26e21cf6",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "1f63262b-800a-493f-9922-342e513fc8b7",
              "parentUUID": "d2193548-9f10-429a-a227-553a26e21cf6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1f63262b-800a-493f-9922-342e513fc8b7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "349c3d62-7aef-4978-85e2-6b88a3d47df7",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fa9ec831-f1e0-49b3-9f2d-34af5c731f64",
              "parentUUID": "349c3d62-7aef-4978-85e2-6b88a3d47df7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa9ec831-f1e0-49b3-9f2d-34af5c731f64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d17d9939-6ec7-4e4a-a1be-d7849138c2d0",
          "title": "GET /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/oxcal/calibrate should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 40,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "88229267-066c-4c34-95a5-76eeb2d9205b",
              "parentUUID": "d17d9939-6ec7-4e4a-a1be-d7849138c2d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "88229267-066c-4c34-95a5-76eeb2d9205b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "dc28b127-d053-4b24-b688-9d8913275994",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "f4bc4c2f-fff8-46e4-a102-f1173e27f392",
              "parentUUID": "dc28b127-d053-4b24-b688-9d8913275994",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f4bc4c2f-fff8-46e4-a102-f1173e27f392"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c45e3e6d-d9c4-4ac7-9154-9d738f9ec5b8",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "63e9d265-ebe6-4207-b420-bb99125c7cc1",
              "parentUUID": "c45e3e6d-d9c4-4ac7-9154-9d738f9ec5b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "63e9d265-ebe6-4207-b420-bb99125c7cc1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "dc235135-745a-4771-b29e-23cd2e99c989",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a2f80b0d-e1df-46a1-b6f1-3f50e60684d9",
              "parentUUID": "dc235135-745a-4771-b29e-23cd2e99c989",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a2f80b0d-e1df-46a1-b6f1-3f50e60684d9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "531a2f2c-2249-44dc-9719-ff6944466a4d",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "09f4cc83-a2b8-4f57-a2fb-aa126c5a4988",
              "parentUUID": "531a2f2c-2249-44dc-9719-ff6944466a4d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09f4cc83-a2b8-4f57-a2fb-aa126c5a4988"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 176,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a78cb0a8-5937-4df9-8b24-552b7cd43eec",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1804,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "112bd948-e909-4dfb-b0c3-504539ce27b2",
              "parentUUID": "a78cb0a8-5937-4df9-8b24-552b7cd43eec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "112bd948-e909-4dfb-b0c3-504539ce27b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1804,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "494085ca-9d5d-4505-8f80-144526206379",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 391,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c7d40567-3f5b-4cc6-a162-9ede38ebe2d4",
              "parentUUID": "494085ca-9d5d-4505-8f80-144526206379",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7d40567-3f5b-4cc6-a162-9ede38ebe2d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 391,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4be76eb4-5551-4951-9ea6-5a6950c03dc4",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 409,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/chronologyresponse' } }\n    },\n    description: 'chronology'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in your API spec\n\nres did not satisfy it because: response can't resolve reference #/components/schemas/chronologyresponse\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/chronologies' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/chronologyresponse' } }\n    },\n    description: 'chronology'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "132da3ee-d2f2-4465-8c2b-7c45417f9c30",
              "parentUUID": "4be76eb4-5551-4951-9ea6-5a6950c03dc4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "132da3ee-d2f2-4465-8c2b-7c45417f9c30"
          ],
          "pending": [],
          "skipped": [],
          "duration": 409,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "08c8168c-8461-4e73-b938-2c20776c0e6e",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a48fed7d-0665-44e0-b3a1-aaf4454fd035",
              "parentUUID": "08c8168c-8461-4e73-b938-2c20776c0e6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a48fed7d-0665-44e0-b3a1-aaf4454fd035"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 401,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1bd7d116-a9bd-4464-afdc-98fa153e9e34",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 2042,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in your API spec\n\nres did not satisfy it because: data[0].site.sitenotes should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: [ { units: null, ageold: null, ageyoung: null } ],\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/sites/{siteid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dataset' } }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e43c8c12-97ad-4341-947a-47a2462d91db",
              "parentUUID": "1bd7d116-a9bd-4464-afdc-98fa153e9e34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e43c8c12-97ad-4341-947a-47a2462d91db"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2042,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f4ce9697-5f05-4e33-8e3b-18901fd806db",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "feed746e-a8fe-464d-9980-3e6ec1d2fdb1",
              "parentUUID": "f4ce9697-5f05-4e33-8e3b-18901fd806db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "feed746e-a8fe-464d-9980-3e6ec1d2fdb1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b642a26b-8cc1-4cb7-9f05-a7213305f6a0",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f1bbf2d7-7211-43e3-b1c3-1ab88c1e2dcd",
              "parentUUID": "b642a26b-8cc1-4cb7-9f05-a7213305f6a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1bbf2d7-7211-43e3-b1c3-1ab88c1e2dcd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f55b583d-212f-43b4-96a9-8a102d0b8020",
          "title": "GET /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "04a03837-6e7b-4c51-9a9a-ae969ece72fa",
              "parentUUID": "f55b583d-212f-43b4-96a9-8a102d0b8020",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "04a03837-6e7b-4c51-9a9a-ae969ece72fa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ae4366bf-adad-4205-ac4c-9b60e9f1320e",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronology/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/datasets_elc, /v2.0/data/datasets, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets/db, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/oxcal/calibrate, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/sites/{siteid}/sites, /v2.0/data/taxa, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "3b4c9235-2a9a-4c39-a081-15005145a9c8",
              "parentUUID": "ae4366bf-adad-4205-ac4c-9b60e9f1320e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3b4c9235-2a9a-4c39-a081-15005145a9c8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c6a6c477-de54-4d82-a06d-43874a01036c",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 121,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "e45e20dd-246f-4cc4-ab45-05afe5987ab8",
              "parentUUID": "c6a6c477-de54-4d82-a06d-43874a01036c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e45e20dd-246f-4cc4-ab45-05afe5987ab8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d59ed15b-6eb2-4b49-8864-8969b0ac9f06",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 122,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "d60681c0-b4c3-41c4-b291-86dbb47621a7",
              "parentUUID": "d59ed15b-6eb2-4b49-8864-8969b0ac9f06",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d60681c0-b4c3-41c4-b291-86dbb47621a7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 122,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6be5c4b2-7fd9-40c3-8869-7155a27a206c",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 114,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "af9b0fe5-a2cd-475e-b48b-48f00746f430",
              "parentUUID": "6be5c4b2-7fd9-40c3-8869-7155a27a206c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "af9b0fe5-a2cd-475e-b48b-48f00746f430"
          ],
          "pending": [],
          "skipped": [],
          "duration": 114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "38328156-da7b-475a-a8d3-49253d01c211",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 126,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in your API spec\n\nres did not satisfy it because: status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 1,\n        taxoncode: 'Abi',\n        taxonname: 'Abies',\n        author: 'Miller, 1754',\n        valid: true,\n        highertaxonid: 329,\n        extinct: false,\n        taxagroupid: 'VPL',\n        publicationid: 299,\n        validatorid: 44,\n        validatedate: '2017-04-21T07:00:00.000Z',\n        notes: null,\n        recdatecreated: '2012-03-21T07:00:00.000Z',\n        recdatemodified: '2017-04-21T17:46:35.000Z'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxa' } }\n    },\n    description: 'A taxon or array of taxa.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in your API spec\n\nres did not satisfy it because: status should be boolean\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 1,\n        taxoncode: 'Abi',\n        taxonname: 'Abies',\n        author: 'Miller, 1754',\n        valid: true,\n        highertaxonid: 329,\n        extinct: false,\n        taxagroupid: 'VPL',\n        publicationid: 299,\n        validatorid: 44,\n        validatedate: '2017-04-21T07:00:00.000Z',\n        notes: null,\n        recdatecreated: '2012-03-21T07:00:00.000Z',\n        recdatemodified: '2017-04-21T17:46:35.000Z'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/taxa/{taxonid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxa' } }\n    },\n    description: 'A taxon or array of taxa.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "2af89f98-4110-4b99-97cb-8f9224eb78eb",
              "parentUUID": "38328156-da7b-475a-a8d3-49253d01c211",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2af89f98-4110-4b99-97cb-8f9224eb78eb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9979d81e-f1d7-4784-84cc-fb651e1e23bc",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": true,
              "duration": 30004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js)",
                "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "ec42e8db-98af-4bac-95f7-b50e3bdc5c29",
              "parentUUID": "9979d81e-f1d7-4784-84cc-fb651e1e23bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ec42e8db-98af-4bac-95f7-b50e3bdc5c29"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30004,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1e6963c3-4879-4a98-ad25-cee2696ed524",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:260:11)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "1bad150e-543b-4215-8261-67cbe099e0db",
              "parentUUID": "1e6963c3-4879-4a98-ad25-cee2696ed524",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1bad150e-543b-4215-8261-67cbe099e0db"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4a7b4d7e-3b09-4950-88a6-a70b61d5aefb",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 12345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c3ba73bb-6e6c-4604-8461-c8bbc55b65d7",
              "parentUUID": "4a7b4d7e-3b09-4950-88a6-a70b61d5aefb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3ba73bb-6e6c-4604-8461-c8bbc55b65d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12345,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "bd53658c-fff9-4839-977f-35e395bab3c2",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "9a904da2-7ebc-4071-83b8-b1d67e327bcd",
              "parentUUID": "bd53658c-fff9-4839-977f-35e395bab3c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 627,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "98ff0a41-ddf5-4f6d-820b-f89e59453f49",
              "parentUUID": "bd53658c-fff9-4839-977f-35e395bab3c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "506115a7-d201-4a16-8923-6c78168f264c",
              "parentUUID": "bd53658c-fff9-4839-977f-35e395bab3c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "8949f520-395f-4293-9bf7-3f1247ed2438",
              "parentUUID": "bd53658c-fff9-4839-977f-35e395bab3c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "4a074e88-a97d-418d-a212-12709ed86354",
              "parentUUID": "bd53658c-fff9-4839-977f-35e395bab3c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a904da2-7ebc-4071-83b8-b1d67e327bcd",
            "98ff0a41-ddf5-4f6d-820b-f89e59453f49",
            "506115a7-d201-4a16-8923-6c78168f264c",
            "8949f520-395f-4293-9bf7-3f1247ed2438",
            "4a074e88-a97d-418d-a212-12709ed86354"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 987,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1803ba4e-97db-4bba-82d3-7567490f1644",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 812,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "262ffc56-41e8-4807-b50d-4ed9d7a04e9f",
              "parentUUID": "1803ba4e-97db-4bba-82d3-7567490f1644",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1771,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "fec0e834-b197-410a-bd81-6561c8a39973",
              "parentUUID": "1803ba4e-97db-4bba-82d3-7567490f1644",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 2103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "3428d1af-65d6-46fd-a6ab-a0de894c3c37",
              "parentUUID": "1803ba4e-97db-4bba-82d3-7567490f1644",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "262ffc56-41e8-4807-b50d-4ed9d7a04e9f",
            "fec0e834-b197-410a-bd81-6561c8a39973",
            "3428d1af-65d6-46fd-a6ab-a0de894c3c37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4686,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d0893f86-0072-403f-bf16-0476bc1d6474",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 556,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "526f4cc9-fcd5-44ed-98e1-0a66072e62ed",
              "parentUUID": "d0893f86-0072-403f-bf16-0476bc1d6474",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 1658,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "61d2391a-502c-43ad-86e9-2e8ffa5906c6",
              "parentUUID": "d0893f86-0072-403f-bf16-0476bc1d6474",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2c0a2c9b-b593-492b-8945-4ba6a76bbee2",
              "parentUUID": "d0893f86-0072-403f-bf16-0476bc1d6474",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 13208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "24cb52cc-7f42-4ca5-8787-774920c72bbe",
              "parentUUID": "d0893f86-0072-403f-bf16-0476bc1d6474",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "526f4cc9-fcd5-44ed-98e1-0a66072e62ed",
            "61d2391a-502c-43ad-86e9-2e8ffa5906c6",
            "2c0a2c9b-b593-492b-8945-4ba6a76bbee2",
            "24cb52cc-7f42-4ca5-8787-774920c72bbe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17391,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get taxon data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "66d934e0-561d-420a-be9f-33ed56eb3d81",
              "parentUUID": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 8574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "5a8e276b-33c2-4abb-a765-817a3cdd3a2f",
              "parentUUID": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "0a682d85-2d5a-4289-8e3d-283ac2959895",
              "parentUUID": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "6ce602fc-7d96-4adc-a014-2d8b40f13973",
              "parentUUID": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 2333,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "462e6b6a-adec-4b1c-a178-fc5a3a3c09e8",
              "parentUUID": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['taxonid'], 1);\n    done();\n  });",
              "err": {},
              "uuid": "563fc6c0-22cc-4c68-9ae5-33907ecf7184",
              "parentUUID": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "510eef49-a699-462e-b63f-b735a9a7ca0d",
              "parentUUID": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 192,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data.length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "a7a77d1c-639e-41c8-9c15-c0cc7d74fe70",
              "parentUUID": "f35aa0ed-d2b3-4a97-a61f-499bd8d6742b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66d934e0-561d-420a-be9f-33ed56eb3d81",
            "5a8e276b-33c2-4abb-a765-817a3cdd3a2f",
            "0a682d85-2d5a-4289-8e3d-283ac2959895",
            "6ce602fc-7d96-4adc-a014-2d8b40f13973",
            "462e6b6a-adec-4b1c-a178-fc5a3a3c09e8",
            "563fc6c0-22cc-4c68-9ae5-33907ecf7184",
            "510eef49-a699-462e-b63f-b735a9a7ca0d",
            "a7a77d1c-639e-41c8-9c15-c0cc7d74fe70"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11913,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "01c7fc2f-72b3-4ac1-a604-6dff6c70a704",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aa3eb0ae-0377-432f-b4d9-525ac37aa9a7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "907df266-c84c-47b5-bce8-c63e9a9bcad1",
                  "parentUUID": "aa3eb0ae-0377-432f-b4d9-525ac37aa9a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "907df266-c84c-47b5-bce8-c63e9a9bcad1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "876e9afc-8259-4ad5-8c70-804d373e6116",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f9c40965-bc18-49c9-bfc4-6c0c4f8e074e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5a629488-459a-46f2-95f5-eb54ca895fb9",
                  "parentUUID": "f9c40965-bc18-49c9-bfc4-6c0c4f8e074e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a629488-459a-46f2-95f5-eb54ca895fb9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9d0c4468-5bce-4e71-861c-24af488df676",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6180faf-a10f-4e8c-8a9c-1e7d1c624808",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f93b5356-4e3a-4ef6-a0db-048fc6b9aa45",
                  "parentUUID": "e6180faf-a10f-4e8c-8a9c-1e7d1c624808",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f93b5356-4e3a-4ef6-a0db-048fc6b9aa45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "42593181-907e-4352-ac72-e20f3edb671a",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3e2f2f4b-0a21-4633-9f02-0a657345e0c9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/-94875939', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e26040b1-d386-455c-8341-1e7cdeb2c0f3",
                  "parentUUID": "3e2f2f4b-0a21-4633-9f02-0a657345e0c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e26040b1-d386-455c-8341-1e7cdeb2c0f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d8a2f1a1-a021-4345-8784-f1c3e270f39e",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6677625d-c188-4ea8-9394-b5e13be4f99f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/99785699', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "387cc152-81d8-49bc-9b8b-6629162e1025",
                  "parentUUID": "6677625d-c188-4ea8-9394-b5e13be4f99f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "387cc152-81d8-49bc-9b8b-6629162e1025"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "819bf6b5-e335-4080-836c-8e080bffc8ef",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "441d959f-e5b8-419e-90bd-6228840dde77",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 869,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/3960287', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2811e57f-f490-4047-8a96-e7b46f590257",
                  "parentUUID": "441d959f-e5b8-419e-90bd-6228840dde77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2811e57f-f490-4047-8a96-e7b46f590257"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 869,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "90c40584-0858-471e-88c5-8828b51bdd28",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37b8cce0-b4f0-4308-8c51-96e6ea7a362d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 134,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 88590290, 'gpname': 'dolor fugiat sint Excepteur minim', 'rank': 1, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a982d567-53cd-4d58-82d8-ff6a6258d238",
                  "parentUUID": "37b8cce0-b4f0-4308-8c51-96e6ea7a362d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a982d567-53cd-4d58-82d8-ff6a6258d238"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 134,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8ba04268-2a0f-4a52-a1d0-d910bd19493d",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a218060c-47f6-46f1-af3e-a84f6e1d877c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/63187358', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0a36ed83-82b9-4a8e-bd01-e96c5b2e2fde",
                  "parentUUID": "a218060c-47f6-46f1-af3e-a84f6e1d877c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a36ed83-82b9-4a8e-bd01-e96c5b2e2fde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6c8116d2-2668-4773-acc6-02a842f986b0",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0710cd2-b174-4bef-81c9-93913f0800ff",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/6692001', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f46b2c50-82ec-477e-b850-04c85060a4b7",
                  "parentUUID": "a0710cd2-b174-4bef-81c9-93913f0800ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f46b2c50-82ec-477e-b850-04c85060a4b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 152,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f0fc0eef-2dc4-46bf-a2f2-7afc4125f238",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "574d901f-50b0-4174-98fc-ecf047b8d194",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/5747', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "69298455-2282-400d-ba7a-dc2cf7b850ad",
                  "parentUUID": "574d901f-50b0-4174-98fc-ecf047b8d194",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69298455-2282-400d-ba7a-dc2cf7b850ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "57a0a4a4-9ad0-48f8-8ff8-93cc78f094c8",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a527f9c1-efdf-494d-8737-9e531c971cdb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "550ff0ee-c9d2-444f-b1b6-c5e76cd42bbd",
                  "parentUUID": "a527f9c1-efdf-494d-8737-9e531c971cdb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "550ff0ee-c9d2-444f-b1b6-c5e76cd42bbd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8a5cf7c1-9787-4618-ad01-62b537656fb6",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "91f952f3-d6db-49a6-8980-d86aebe9d40d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b912abb3-1340-431f-a369-1676dc1d513d",
                  "parentUUID": "91f952f3-d6db-49a6-8980-d86aebe9d40d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b912abb3-1340-431f-a369-1676dc1d513d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3b1fdfe3-521d-427e-9faf-c2083966c69d",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d6652045-7608-420a-8bcc-3972e6cada08",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "43b060e9-d82a-40a8-95c3-9379e4f3d738",
                  "parentUUID": "d6652045-7608-420a-8bcc-3972e6cada08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43b060e9-d82a-40a8-95c3-9379e4f3d738"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "38d108c0-98cf-4057-9fc8-86d03645222d",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "99166b02-7dcf-48fa-b3c7-86450409dbd0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "75c78ea8-c47b-4fa3-b087-d35a0a1917cc",
                  "parentUUID": "99166b02-7dcf-48fa-b3c7-86450409dbd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75c78ea8-c47b-4fa3-b087-d35a0a1917cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c84269ba-f0f9-4fdc-a81a-6395bfc18fe4",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "43db7876-5ae6-4ec6-a0b7-4815ece457de",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4af3ad59-bc7e-4a1e-86c7-2cbc53e29af6",
                  "parentUUID": "43db7876-5ae6-4ec6-a0b7-4815ece457de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4af3ad59-bc7e-4a1e-86c7-2cbc53e29af6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "870acc5f-5948-4ada-8401-5248531cb318",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "78202768-1a77-45e9-87c3-ed8c12b89634",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d5d916de-fe97-4b85-8818-6c7749d3f028",
                  "parentUUID": "78202768-1a77-45e9-87c3-ed8c12b89634",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5d916de-fe97-4b85-8818-6c7749d3f028"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "129d0b16-11e5-4a4f-b28f-aa9a6fcc40c5",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f2c141a8-7fd6-4f00-884a-876a9a45ba4d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c7790f0d-2b6c-4add-b5ed-714f47364ec8",
                  "parentUUID": "f2c141a8-7fd6-4f00-884a-876a9a45ba4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7790f0d-2b6c-4add-b5ed-714f47364ec8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fbb55c3e-ca00-4bad-96c5-5b1c4b2db7ff",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fbca5f98-377d-4285-b293-d6c468eaf4e8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d8d028d3-31c8-4de5-98f1-9d1b93f74aff",
                  "parentUUID": "fbca5f98-377d-4285-b293-d6c468eaf4e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8d028d3-31c8-4de5-98f1-9d1b93f74aff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "60f3a7db-4b1a-441b-8d1f-2feb549180cd",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "649d303f-145c-4f7c-8cd2-5411a3af7bb9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "305a5b8b-8aec-4ae2-a91d-d1ef3265af09",
                  "parentUUID": "649d303f-145c-4f7c-8cd2-5411a3af7bb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "305a5b8b-8aec-4ae2-a91d-d1ef3265af09"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5e67a648-a69a-4635-89f8-0341c9b377fa",
          "title": "tests for /v2.0/data/chronology/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
          "file": "/test/v2.0-data-chronology-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e1d9fbb4-bf80-469b-8eff-756524164f3a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronology-{chronid}-test.js",
              "file": "/test/v2.0-data-chronology-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronology/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronology/87624127', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "62220d88-75dc-44fe-bedf-c50e71573dbe",
                  "parentUUID": "e1d9fbb4-bf80-469b-8eff-756524164f3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62220d88-75dc-44fe-bedf-c50e71573dbe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e8236391-ea4e-459f-9445-511e7f4c65aa",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d69c3a30-573d-419e-ba78-1fc39b1183e2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 27307983, 'familyname': 'esse', 'contactname': 'in veniam', 'contactstatus': 'extant', 'limit': 79898871, 'offset': 38058998 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5f2debe6-6048-41bc-a37a-17c3f04d0e12",
                  "parentUUID": "d69c3a30-573d-419e-ba78-1fc39b1183e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f2debe6-6048-41bc-a37a-17c3f04d0e12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 115,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "50a85807-ca88-460a-9216-6ec5157d5bba",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3f8044a4-4655-4de7-82df-04b1257c78b4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/56150576/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4ad7833f-44da-4204-a357-32a97f42c6de",
                  "parentUUID": "3f8044a4-4655-4de7-82df-04b1257c78b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ad7833f-44da-4204-a357-32a97f42c6de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "66d24621-f35b-4d36-b393-25bc61c1f1c7",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "afec2d1a-ddea-4488-9858-ac27dfc4318a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/29294895', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "870339f8-0f7b-4ddf-aefc-0db9c9b2662e",
                  "parentUUID": "afec2d1a-ddea-4488-9858-ac27dfc4318a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "870339f8-0f7b-4ddf-aefc-0db9c9b2662e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6a50e88c-a3e5-4c7d-8207-d78687023d8a",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e31f3035-94a5-456c-a5fb-8a5ffe73777f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 149,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 36561589, 'offset': 14390108 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "f868a65e-1669-4339-8934-acc3da49ff63",
                  "parentUUID": "e31f3035-94a5-456c-a5fb-8a5ffe73777f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f868a65e-1669-4339-8934-acc3da49ff63"
              ],
              "pending": [],
              "skipped": [],
              "duration": 149,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "79b08ad9-3649-4408-b4be-eb8869f3b451",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "effbc240-ceb3-4fb1-9dfd-0a66870080ba",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'siteid': 20733, 'contactid': 41171739, 'datasettype': 'esse minim', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 11652171 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7453c3bc-7337-46f9-9143-f6f107914ee5",
                  "parentUUID": "effbc240-ceb3-4fb1-9dfd-0a66870080ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7453c3bc-7337-46f9-9143-f6f107914ee5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1de4544c-10bf-4466-922f-640caef3e4b6",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e408ef3d-3dae-4c7e-87b0-a71439941c81",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/81514660/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "18da0066-dc24-41bc-a72d-1da57474d407",
                  "parentUUID": "e408ef3d-3dae-4c7e-87b0-a71439941c81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18da0066-dc24-41bc-a72d-1da57474d407"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7d3bca28-1f71-49c0-a18c-8b81fad3ca80",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a3b2890-bd6f-4521-8e16-2dcdb7885063",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/57690762/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8da5ed72-22a2-4d20-ad21-f4db64ea2156",
                  "parentUUID": "6a3b2890-bd6f-4521-8e16-2dcdb7885063",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8da5ed72-22a2-4d20-ad21-f4db64ea2156"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d4c22bed-1871-4537-8cef-494ecc1499a1",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f83113d1-a03f-436d-887e-68b52508fbcc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/82345827/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0e755d55-9663-4d16-b3b3-0956c610150e",
                  "parentUUID": "f83113d1-a03f-436d-887e-68b52508fbcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e755d55-9663-4d16-b3b3-0956c610150e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3d4b5c45-0975-4fa7-928e-4be83e2f58c8",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4aa41c88-9b40-4554-a9f7-8818268589b4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/3633764/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0f57d53c-15df-40f6-8eb2-3e0c2c88b6b9",
                  "parentUUID": "4aa41c88-9b40-4554-a9f7-8818268589b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f57d53c-15df-40f6-8eb2-3e0c2c88b6b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8eae276f-391d-4dfe-891e-61aa0f3fe1f8",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7e73df21-4660-40f0-973d-0288ec7618e0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/78566397/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d3f5a18a-8819-40c3-bbad-15b13b44fc71",
                  "parentUUID": "7e73df21-4660-40f0-973d-0288ec7618e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3f5a18a-8819-40c3-bbad-15b13b44fc71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0abc7581-46ad-439f-b3c7-532f09c51913",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab749537-c250-42ad-8a47-c656bb2af3f9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/69188231/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5a89c608-b5e7-44b2-ba05-36eafd1d8d37",
                  "parentUUID": "ab749537-c250-42ad-8a47-c656bb2af3f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a89c608-b5e7-44b2-ba05-36eafd1d8d37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d9a956a6-6b8b-4a2f-9658-b8435ecd32d0",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f274c210-eeff-4542-9a48-c8ceff853297",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/71567569/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "237d3fbd-b2b7-4b4a-8e31-67b16467491d",
                  "parentUUID": "f274c210-eeff-4542-9a48-c8ceff853297",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "237d3fbd-b2b7-4b4a-8e31-67b16467491d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0c5a38da-3a85-4ad3-b9a5-4274c4619780",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b43536e9-c7ed-49dc-a561-949f5045da1d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 138,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/59333019', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d84d3621-cc3a-4106-b997-0cda71f2b4f9",
                  "parentUUID": "b43536e9-c7ed-49dc-a561-949f5045da1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d84d3621-cc3a-4106-b997-0cda71f2b4f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 138,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c89d4a4f-6f96-43d2-aed7-0cfb609ec6d8",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd5403a6-4b97-45f9-b99b-92100a9728ed",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 1135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 27548, 'contactid': 44688781, 'datasettype': 'cillum reprehenderit cupidatat', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 2537699 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d6dd7b04-1161-4aa7-8770-3b0ebdff0290",
                  "parentUUID": "bd5403a6-4b97-45f9-b99b-92100a9728ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6dd7b04-1161-4aa7-8770-3b0ebdff0290"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1135,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "296c1b3a-c626-4634-861d-9e9dd60919ef",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d4bd2ccb-24bd-41d4-8edb-147c890a3691",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/21949863', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4bc71f45-c331-4995-8f51-3f96a8773081",
                  "parentUUID": "d4bd2ccb-24bd-41d4-8edb-147c890a3691",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bc71f45-c331-4995-8f51-3f96a8773081"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 204,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b3d5eb08-29a7-4fc6-ac69-d9f3dc165d55",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f12d2c96-60f2-4535-96b4-fc0d8bbd82e9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'in enim minim', 'limit': 89773212, 'offset': 37903628 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2cbc7b74-fc30-45ac-8956-6f90f566d092",
                  "parentUUID": "f12d2c96-60f2-4535-96b4-fc0d8bbd82e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2cbc7b74-fc30-45ac-8956-6f90f566d092"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1ff12df6-5e99-4b4f-b4a5-cf78d2f685c9",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fea0fa9c-bf15-40a0-bcdb-3b01dbe53067",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 192,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "49eb5017-7ad9-4570-93c2-ac9786a0d016",
                  "parentUUID": "fea0fa9c-bf15-40a0-bcdb-3b01dbe53067",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49eb5017-7ad9-4570-93c2-ac9786a0d016"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 192,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b77c3520-7fd8-46fe-8e71-21a527f60d7e",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c958caef-7165-4823-bb73-e61f284764bb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 179,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/98367280', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3922973f-eb9c-4d0b-b95b-67fb9624e9af",
                  "parentUUID": "c958caef-7165-4823-bb73-e61f284764bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3922973f-eb9c-4d0b-b95b-67fb9624e9af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 179,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "27db18bd-57fc-4cb8-92f9-aeb5879367d0",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "60ecb9a8-6743-417a-a8da-84114b299e71",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/20590623', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b4a9bfdd-0c86-4c56-a183-eaaf070b74e9",
                  "parentUUID": "60ecb9a8-6743-417a-a8da-84114b299e71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4a9bfdd-0c86-4c56-a183-eaaf070b74e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e71508c0-1f51-4de6-b3ab-b4b4be9a0b63",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4fde60fc-401d-4b75-81b2-6687e4be7af0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 653,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 87582162, 'gpname': 'ut magna', 'rank': 4, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d30ecf87-8891-4313-8755-185415929162",
                  "parentUUID": "4fde60fc-401d-4b75-81b2-6687e4be7af0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d30ecf87-8891-4313-8755-185415929162"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 653,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "909fb521-9410-43fd-a6b3-639b2ca3deae",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8484e299-a55c-44fb-ab9d-35da92db7607",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 402,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/90372695/datasets', {\n  'qs': { 'limit': 52094121, 'offset': 69839404 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f934a304-fb8b-4ada-b289-6992b8a7d33c",
                  "parentUUID": "8484e299-a55c-44fb-ab9d-35da92db7607",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f934a304-fb8b-4ada-b289-6992b8a7d33c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 402,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a3c5195c-f69b-4b0f-90cf-6ddfec619e6f",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "19bc9c48-5051-438a-b8a6-ca934aadda1c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 405,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/31988172/sites', {\n  'qs': { 'limit': 30963215, 'offset': 15650477 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "33bca6a2-47ee-4124-b5f4-96c724ff92e9",
                  "parentUUID": "19bc9c48-5051-438a-b8a6-ca934aadda1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33bca6a2-47ee-4124-b5f4-96c724ff92e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 405,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f7c75b6a-96e2-4d0a-89f5-6feee7e6e7bc",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5a42db05-5a64-4e33-b379-6cef5378340a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 404,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/95521762', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9f002267-7cf7-431e-9392-cd1b35bc48a3",
                  "parentUUID": "5a42db05-5a64-4e33-b379-6cef5378340a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f002267-7cf7-431e-9392-cd1b35bc48a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 404,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c20b60d5-48cb-4dc2-9a62-b7df9f23698d",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a968612a-686c-4e7c-9028-a97897294b2f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 1013,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'irure ut ut', 'taxonid': 40952, 'siteid': 19711, 'sitename': 'ad minim do ut in', 'datasettype': 'non occaecat aliqua in dolore', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 9249546, 'ageyoung': 1000, 'ageold': 10000, 'limit': 12099788, 'offset': 31578920 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "74887a79-7e34-4028-adc9-a0076a128cd7",
                  "parentUUID": "a968612a-686c-4e7c-9028-a97897294b2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74887a79-7e34-4028-adc9-a0076a128cd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1013,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d4c8a1c3-8e6c-4982-84a5-8ab5abc84243",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a68319df-c18c-4fdf-abd3-e43628091ec3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 408,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/5941885', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e153e370-63c7-4de8-b5b1-b06193eaad15",
                  "parentUUID": "a68319df-c18c-4fdf-abd3-e43628091ec3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e153e370-63c7-4de8-b5b1-b06193eaad15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 408,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9004d471-2b88-4894-adb4-ce7874eb8cba",
          "title": "tests for /v2.0/data/oxcal/calibrate",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
          "file": "/test/v2.0-data-oxcal-calibrate-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a7071269-da0d-4a3d-93b0-0ebf28384b13",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-oxcal-calibrate-test.js",
              "file": "/test/v2.0-data-oxcal-calibrate-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/data/oxcal/calibrate tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/oxcal/calibrate', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "a3872415-8dc3-43bf-9804-f87e4c4e0d69",
                  "parentUUID": "a7071269-da0d-4a3d-93b0-0ebf28384b13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a3872415-8dc3-43bf-9804-f87e4c4e0d69"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7b1f8bdb-0e63-4bff-8733-949b686b9135",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4a3ec123-3ade-4722-80e1-a07b3a94247f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 29,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'irure est fugiat esse aliquip', 'taxonid': 167, 'siteid': 15200, 'sitename': 'dolore non in deserunt', 'datasettype': 'sit voluptate amet do', 'altmin': 10, 'altmax': 100, 'loc': \"{#\\\\tc_#n'Js}\", 'ageof': 12034798, 'ageyoung': 1000, 'ageold': 10000, 'limit': 30271739, 'offset': 93600775 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "96580c36-d701-4c54-b68b-dc440d07b6ed",
                  "parentUUID": "4a3ec123-3ade-4722-80e1-a07b3a94247f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "96580c36-d701-4c54-b68b-dc440d07b6ed"
              ],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a11963fb-a8e3-41d6-901a-29264e00cf07",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c7e9849b-1552-4e75-b7a4-653cab50f178",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "11eec1d4-9b9c-46e2-a400-111b2dbf2b96",
                  "parentUUID": "c7e9849b-1552-4e75-b7a4-653cab50f178",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "11eec1d4-9b9c-46e2-a400-111b2dbf2b96"
              ],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a8921b4a-360a-4200-bd2c-9492b1907199",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5892842d-3829-4e70-9247-ce4fc2fb3c76",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 560,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 3696700, 'datasetid': 20407579, 'siteid': 4983, 'familyname': 'in id enim dolore veniam', 'pubtype': 'Authored Book', 'year': 1629, 'search': 'consequat exercitation ullamco consectetur', 'limit': 95623353, 'offset': 77433200 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fce519aa-8988-4bd2-931e-4b0942604840",
                  "parentUUID": "5892842d-3829-4e70-9247-ce4fc2fb3c76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fce519aa-8988-4bd2-931e-4b0942604840"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 560,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "21ccd0cc-023d-430b-a4d0-63da23580f37",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0eb3e468-161a-44cd-9e67-c3cc2893d1a2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 224,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/{publicationid}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "e2df231f-4939-461a-ac98-2ae27784a490",
                  "parentUUID": "0eb3e468-161a-44cd-9e67-c3cc2893d1a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e2df231f-4939-461a-ac98-2ae27784a490"
              ],
              "pending": [],
              "skipped": [],
              "duration": 224,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5eafe6fe-ebe2-4649-9c31-db2a30c589a3",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1733ab28-9058-4940-a8de-5b1060fc569a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 191,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 24737, 'sitename': 'eu est voluptate', 'altmax': 100, 'altmin': 10, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 40355368, 'offset': 90066965 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "39d4b791-2814-4b1b-ad8a-148e75de6391",
                  "parentUUID": "1733ab28-9058-4940-a8de-5b1060fc569a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39d4b791-2814-4b1b-ad8a-148e75de6391"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 191,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "19b15db8-7a55-416b-808a-f695cb59e99a",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e901465b-2217-4734-afc2-5282bd3ba151",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 318,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/21863/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "4811f937-21fb-4cf7-beac-0b189ffd49f6",
                  "parentUUID": "e901465b-2217-4734-afc2-5282bd3ba151",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4811f937-21fb-4cf7-beac-0b189ffd49f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 318,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "67fe004e-07ea-44c3-a7c2-86a7c1ff5267",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e0bc7495-d26a-472e-a000-87d78ef57900",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1897/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ebe23184-32f2-4bee-ab3c-129e1707fe9a",
                  "parentUUID": "e0bc7495-d26a-472e-a000-87d78ef57900",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebe23184-32f2-4bee-ab3c-129e1707fe9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7dfa117d-5650-4be3-a34e-35a24fe3462b",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fa49d5b7-4b70-411f-90b8-c5f9bd032e7a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 122,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1570/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8c08dc7a-18bb-46f0-b375-44fe00423b14",
                  "parentUUID": "fa49d5b7-4b70-411f-90b8-c5f9bd032e7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c08dc7a-18bb-46f0-b375-44fe00423b14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 122,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "44b38bc2-5240-46ee-b758-ac4a5c8304a5",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "42e420ff-a45a-4289-a363-69c4e3495181",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/6552/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e81b924a-e295-4cf3-9244-9be69871409a",
                  "parentUUID": "42e420ff-a45a-4289-a363-69c4e3495181",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e81b924a-e295-4cf3-9244-9be69871409a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1135,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e0cd0924-da53-416c-97b0-8e7ea1dc395f",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "952fc2c1-2c46-40ae-a18f-b7e5f3e32fe9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 397,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/27910/geopoliticalunits', {\n  'qs': { 'limit': 33247263, 'offset': 97153596 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "197aeea5-a6d0-4501-9ce9-82f987be8da4",
                  "parentUUID": "952fc2c1-2c46-40ae-a18f-b7e5f3e32fe9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "197aeea5-a6d0-4501-9ce9-82f987be8da4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 397,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "63356bf4-f7c4-4bbc-91da-dc238be664ff",
          "title": "tests for /v2.0/data/sites/{siteid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e2ccb8a8-a250-4028-9400-fef0897b37e0",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-sites-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/5218/sites', {\n  'qs': { 'limit': 11271725, 'offset': 74404187 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "1a56d487-b956-401e-8aa3-45b700b80466",
                  "parentUUID": "e2ccb8a8-a250-4028-9400-fef0897b37e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a56d487-b956-401e-8aa3-45b700b80466"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0005b09b-dae8-4633-8660-ed4258fb5f2e",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1e337397-a840-492c-93ab-9ac55160f68a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/11731', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "46f568b6-22c3-4ade-88f8-f208202cbd28",
                  "parentUUID": "1e337397-a840-492c-93ab-9ac55160f68a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46f568b6-22c3-4ade-88f8-f208202cbd28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 195,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3a4fbc41-7eab-4454-a62d-ad91c468f4e8",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "96a6190a-01e8-4b54-8eaa-be7624e8f834",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 425,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "103cabdf-8fab-4194-b504-ec6a3ec14d13",
                  "parentUUID": "96a6190a-01e8-4b54-8eaa-be7624e8f834",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "103cabdf-8fab-4194-b504-ec6a3ec14d13"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 425,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0c289803-281d-47f5-a404-778c3173e784",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c071d26-9930-43ec-a499-509abb269934",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 387,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7f21a2ce-ae22-42e6-9f40-d0e605a347ed",
                  "parentUUID": "3c071d26-9930-43ec-a499-509abb269934",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f21a2ce-ae22-42e6-9f40-d0e605a347ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 387,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "135f9a39-92d8-4e55-bdd9-758d45d75347",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6bd47a35-f91c-4643-a0ad-3ff138c61710",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 5806,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 0, 'end': 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8075cf1e-8604-42cf-b927-0b099c27b4dd",
                  "parentUUID": "6bd47a35-f91c-4643-a0ad-3ff138c61710",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8075cf1e-8604-42cf-b927-0b099c27b4dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5806,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "77d7adb6-d751-4230-a3ef-46f7c805684c",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d2212c78-d394-404d-9d65-01fdb23a3f22",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 403,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'aliqua labore cupidatat veniam', 'datasetid': 62760072, 'siteid': 25941 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3d2933f7-184f-4a28-9fa7-f77bbcac90f1",
                  "parentUUID": "d2212c78-d394-404d-9d65-01fdb23a3f22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d2933f7-184f-4a28-9fa7-f77bbcac90f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 403,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e08316d6-5383-4226-9a3c-0e3a0d6ef690",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "23db5f64-0771-40d9-b18c-4a2d45affb00",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 1258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/35095/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "95cb8ed0-0bd4-4a76-954c-fb70cb069211",
                  "parentUUID": "23db5f64-0771-40d9-b18c-4a2d45affb00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95cb8ed0-0bd4-4a76-954c-fb70cb069211"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1258,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cacd881d-aa5d-4006-86b4-24e40e8be11a",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "61b43659-d254-4571-b5c9-7c143ca27b25",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 576,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/1241', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "004e037c-cf8d-4875-a0fe-be1ec7a4bcaa",
                  "parentUUID": "61b43659-d254-4571-b5c9-7c143ca27b25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "004e037c-cf8d-4875-a0fe-be1ec7a4bcaa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 576,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a6d2f6ec-7de6-445b-b22c-feba54e427c6",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b63f2420-f674-424e-af42-f974566cd54e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "367dc4ae-7f8b-4ecb-a8a4-3dd5abf392c1",
                  "parentUUID": "b63f2420-f674-424e-af42-f974566cd54e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "367dc4ae-7f8b-4ecb-a8a4-3dd5abf392c1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "431d5735-a3a7-4650-8225-f5e1a7f0a929",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e7ca95f2-c5db-44ed-953e-911d7f69a6fa",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "356d1576-1a1a-4fb6-9bf8-719149135e29",
                  "parentUUID": "e7ca95f2-c5db-44ed-953e-911d7f69a6fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "356d1576-1a1a-4fb6-9bf8-719149135e29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}