{
  "stats": {
    "suites": 205,
    "tests": 202,
    "passes": 187,
    "pending": 0,
    "failures": 15,
    "start": "2022-09-07T00:25:10.862Z",
    "end": "2022-09-07T00:31:17.253Z",
    "duration": 366391,
    "testsRegistered": 202,
    "passPercent": 92.57425742574257,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e33dc5a2-d868-4bfe-87c3-129023f69e78",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "cb08acb6-e3cc-4ca1-b3d6-21e1c44e8443",
          "parentUUID": "e33dc5a2-d868-4bfe-87c3-129023f69e78",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "215115b2-6344-4e40-ba6c-69955b19650a",
          "title": "Get chronology data by datasetid:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/chronologies.js",
          "file": "/test/chronologies.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A call to two datasets returns two datasets of data:",
              "fullTitle": "Get chronology data by datasetid: A call to two datasets returns two datasets of data:",
              "timedOut": false,
              "duration": 1045,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/684,1001/chronologies')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'].length === 4;\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    done();\n  });",
              "err": {},
              "uuid": "8e1bdef3-0c82-46c2-a5fa-e32aa0fbfe95",
              "parentUUID": "215115b2-6344-4e40-ba6c-69955b19650a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8e1bdef3-0c82-46c2-a5fa-e32aa0fbfe95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1045,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
          "title": "Get contact data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/contacts.js",
          "file": "/test/contacts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The default limit of 25 should be reached for contact data:",
              "fullTitle": "Get contact data: The default limit of 25 should be reached for contact data:",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "4f9fd468-5361-482d-8a35-c04f201398af",
              "parentUUID": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The example in the swagger should return an object:",
              "fullTitle": "Get contact data: The example in the swagger should return an object:",
              "timedOut": false,
              "duration": 338,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts?familyname=Grimm&contactstatus=active&limit=25')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.result[0]['familyname'], 'Grimm')\n    done();\n  });",
              "err": {},
              "uuid": "8aed2c89-05b8-470c-a1c9-5f597427b19d",
              "parentUUID": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact queries should be case insensitive:",
              "fullTitle": "Get contact data: Contact queries should be case insensitive:",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?contactstatus=Retired')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "a1182251-97f3-4c56-ac11-2c27a6f8ebcc",
              "parentUUID": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of contacts retrieved:",
              "fullTitle": "Get contact data: Changing the limit should change the number of contacts retrieved:",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/?status=retired&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "9eac6b3d-224b-4681-afc7-333556a3a36b",
              "parentUUID": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single contact (12) should be returned.",
              "fullTitle": "Get contact data: A single contact (12) should be returned.",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data[0]['contactid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "c2920c24-70c2-422b-95ae-234f4d46e965",
              "parentUUID": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All contacts from datasets should be returned.",
              "fullTitle": "Get contact data: All contacts from datasets should be returned.",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(res.body.data.length, 2);\n    done();\n  });",
              "err": {},
              "uuid": "3159597f-f7f9-4b2f-a49c-abc18fbc4e22",
              "parentUUID": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of datasets.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of datasets.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    var test = []\n    assert.strictEqual(test.length, 0);\n    done();\n  });",
              "err": {},
              "uuid": "af16b002-7967-4eb8-a0f8-06431419de92",
              "parentUUID": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The length of returned contacts should be equivalent to the number of sites.",
              "fullTitle": "Get contact data: The length of returned contacts should be equivalent to the number of sites.",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/102,1435,1,27/contacts')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    if (err) return done(err);\n    assert.strictEqual(Object.keys(res.body.data).length, 4);\n    done();\n  });",
              "err": {},
              "uuid": "429e62f7-4e39-4853-bddc-d1fbcc3f548b",
              "parentUUID": "0cff3c82-3531-41d3-9d8c-78e0ec858c96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f9fd468-5361-482d-8a35-c04f201398af",
            "8aed2c89-05b8-470c-a1c9-5f597427b19d",
            "a1182251-97f3-4c56-ac11-2c27a6f8ebcc",
            "9eac6b3d-224b-4681-afc7-333556a3a36b",
            "c2920c24-70c2-422b-95ae-234f4d46e965",
            "3159597f-f7f9-4b2f-a49c-abc18fbc4e22",
            "af16b002-7967-4eb8-a0f8-06431419de92",
            "429e62f7-4e39-4853-bddc-d1fbcc3f548b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4249e488-ce45-4713-9c4c-cb985a0ce11e",
          "title": "Get datasets any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/datasets.js",
          "file": "/test/datasets.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Asking for the datasets associated with Lake Tulane work:",
              "fullTitle": "Get datasets any number of ways: Asking for the datasets associated with Lake Tulane work:",
              "timedOut": false,
              "duration": 1320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/2570/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).includes('site');\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 2570;\n  })\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]['site']['datasets'][0]).includes('datasetid');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "fe5e88da-ccbf-4280-8b22-a92cfe1e5852",
              "parentUUID": "4249e488-ce45-4713-9c4c-cb985a0ce11e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by singular id & return same id:",
              "fullTitle": "Get datasets any number of ways: Get dataset by singular id & return same id:",
              "timedOut": false,
              "duration": 944,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['siteid'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b9a27651-663c-484c-ba58-1783fa088eb5",
              "parentUUID": "4249e488-ce45-4713-9c4c-cb985a0ce11e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset from siteid gives us siteids back and datasets:",
              "fullTitle": "Get datasets any number of ways: Get dataset from siteid gives us siteids back and datasets:",
              "timedOut": false,
              "duration": 1508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/123/datasets')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body['data'][0].site.siteid === 123;\n  })\n  .expect(function (res) {\n    return res.body['data'][0].site.datasets.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "aa8de6ce-7f38-46f8-b9c0-a1f1163e142e",
              "parentUUID": "4249e488-ce45-4713-9c4c-cb985a0ce11e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset by comma separated ids & return same ids:",
              "fullTitle": "Get datasets any number of ways: Get dataset by comma separated ids & return same ids:",
              "timedOut": false,
              "duration": 1536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?siteid=12,13,14')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "b5195e03-1949-4870-925b-6695344d1034",
              "parentUUID": "4249e488-ce45-4713-9c4c-cb985a0ce11e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns all key elements of the object:",
              "fullTitle": "Get datasets any number of ways: Returns all key elements of the object:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).includes('site', 'dataset');\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f2d840d9-ff14-475f-ba1b-d9eac2972ddd",
              "parentUUID": "4249e488-ce45-4713-9c4c-cb985a0ce11e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Limits work:",
              "fullTitle": "Get datasets any number of ways: Limits work:",
              "timedOut": false,
              "duration": 1531,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?altmax=3&limit=10')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data']).length == 10;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "14a6dffb-3cee-4728-a690-6830b1a27731",
              "parentUUID": "4249e488-ce45-4713-9c4c-cb985a0ce11e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works with age validation:",
              "fullTitle": "Get datasets any number of ways: Works with age validation:",
              "timedOut": false,
              "duration": 1620,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/?ageyoung=1200&ageold=1500&altmax=3')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var test = true;\n    for (var i = 0; i < res.body['data'].length; i++) {\n      test = test &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageyoung'] < 1200 &\n        res.body['data'][i]['site']['datasets'][0]['agerange']['ageold'] > 1500;\n      if (test === false) { return test; }\n    }\n    return true;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "e88564c5-151b-43b1-84bb-0351e893238d",
              "parentUUID": "4249e488-ce45-4713-9c4c-cb985a0ce11e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe5e88da-ccbf-4280-8b22-a92cfe1e5852",
            "b9a27651-663c-484c-ba58-1783fa088eb5",
            "aa8de6ce-7f38-46f8-b9c0-a1f1163e142e",
            "b5195e03-1949-4870-925b-6695344d1034",
            "f2d840d9-ff14-475f-ba1b-d9eac2972ddd",
            "14a6dffb-3cee-4728-a690-6830b1a27731",
            "e88564c5-151b-43b1-84bb-0351e893238d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8464,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "d01ae77c-84ea-49bc-8b9e-f2509e62cf11",
          "title": "Tests for Explorer App Services",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
          "file": "/test/explorerCalls.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ff103262-3cac-4995-a00a-cad82a975959",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js",
              "file": "/test/explorerCalls.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for TaxaGroupTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaGroupTypes",
                  "timedOut": false,
                  "duration": 353,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaGroupTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "19e2cfe1-6730-4446-9dad-a1bda7f71233",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomyTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomyTypes",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomyTypes', {\n  'qs': {\n    taphonomicSystemId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c62078b1-0d54-4ce4-854f-bbec1262c518",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaphonomySystems",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaphonomySystems",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaphonomySystems', {\n  'qs': {\n    datasetTypeId: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f2b568b1-3195-42b2-99b9-c4b1120cb809",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for ElementTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for ElementTypes",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/ElementTypes', {\n  'qs': {\n    taxagroupid: 1\n  },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "fec4daf0-42c6-46db-950b-144f3334277f",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for TaxaInDatasets (a slow service)",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for TaxaInDatasets (a slow service)",
                  "timedOut": true,
                  "duration": 8004,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "Error: Timeout of 8000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js)",
                    "estack": "Error: Timeout of 8000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/simon/Documents/Neotoma/api_nodetest/test/explorerCalls.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "b2413acf-36ad-4abe-aec4-a3449f64f82e",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for collectionTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for collectionTypes",
                  "timedOut": false,
                  "duration": 907,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "68b4ac75-e84c-49dc-b00a-0da50af3823c",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for keywords",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for keywords",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2394efd9-88fe-467b-9740-47d29ed81f50",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for authorpis",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for authorpis",
                  "timedOut": false,
                  "duration": 1074,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "846a085c-fd22-4a70-8e6e-21ae3326c329",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DepositionalEnvironments",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DepositionalEnvironments",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DepositionalEnvironments', {\n  'qs': { idProperty: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "dfbb3f4d-b416-4657-9747-af6b437d585b",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Search",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Search",
                  "timedOut": false,
                  "duration": 4657,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Search', {\n  'qs': { search: '{\"taxa\":null,\"time\":null,\"space\":null,\"metadata\":null,\"datasetTypeId\":\"21\"}',\n    'time': true }\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f856ada6-fb23-4ac0-aeab-f2c9b9926a81",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for DatasetTypes",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for DatasetTypes",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "12569054-7084-4dd3-8439-264a140ac356",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for RelativeAges",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for RelativeAges",
                  "timedOut": false,
                  "duration": 297,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/RelativeAges', {\n  'qs': { agescaleid: 1 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0b573625-be32-44e7-a3fa-1ec8c66b9653",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 200 for Geochronologies",
                  "fullTitle": "Tests for Explorer App Services tests for get should respond 200 for Geochronologies",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', appServicesLocation + '/Geochronologies', {\n  'qs': { datasetId: 1001 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "70404877-6401-442c-9959-0e3c95b9124f",
                  "parentUUID": "ff103262-3cac-4995-a00a-cad82a975959",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19e2cfe1-6730-4446-9dad-a1bda7f71233",
                "c62078b1-0d54-4ce4-854f-bbec1262c518",
                "f2b568b1-3195-42b2-99b9-c4b1120cb809",
                "fec4daf0-42c6-46db-950b-144f3334277f",
                "68b4ac75-e84c-49dc-b00a-0da50af3823c",
                "2394efd9-88fe-467b-9740-47d29ed81f50",
                "846a085c-fd22-4a70-8e6e-21ae3326c329",
                "dfbb3f4d-b416-4657-9747-af6b437d585b",
                "f856ada6-fb23-4ac0-aeab-f2c9b9926a81",
                "12569054-7084-4dd3-8439-264a140ac356",
                "0b573625-be32-44e7-a3fa-1ec8c66b9653",
                "70404877-6401-442c-9959-0e3c95b9124f"
              ],
              "failures": [
                "b2413acf-36ad-4abe-aec4-a3449f64f82e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 15793,
              "root": false,
              "rootEmpty": false,
              "_timeout": 8000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 8000
        },
        {
          "uuid": "770d64c1-0de3-444f-8b81-047feb0a0b26",
          "title": "Get geopolitical data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/geopolitical.js",
          "file": "/test/geopolitical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query redirects to the api documentation.",
              "fullTitle": "Get geopolitical data: An empty query redirects to the api documentation.",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "7ddc1dbb-273d-4c32-b239-b70259befe0b",
              "parentUUID": "770d64c1-0de3-444f-8b81-047feb0a0b26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for country level data:",
              "fullTitle": "Get geopolitical data: The default limit of 25 should be reached for country level data:",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 25);\n    done();\n  });",
              "err": {},
              "uuid": "0b03d332-26ea-4de7-a820-cccea851e41e",
              "parentUUID": "770d64c1-0de3-444f-8b81-047feb0a0b26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of countries retrieved:",
              "fullTitle": "Get geopolitical data: Changing the limit should change the number of countries retrieved:",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/?rank=1&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(Object.keys(res.body.data.result).length, 30);\n    done();\n  });",
              "err": {},
              "uuid": "825bb030-6c40-40fb-ae49-c868c593ed9f",
              "parentUUID": "770d64c1-0de3-444f-8b81-047feb0a0b26",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single geopolitical unit (12) should be returned.",
              "fullTitle": "Get geopolitical data: A single geopolitical unit (12) should be returned.",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/geopoliticalunits/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.equal(res.body.data[0]['geopoliticalid'], 12);\n    done();\n  });",
              "err": {},
              "uuid": "c07cc617-a0b4-4900-96bc-ddcf3d4bad9c",
              "parentUUID": "770d64c1-0de3-444f-8b81-047feb0a0b26",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ddc1dbb-273d-4c32-b239-b70259befe0b",
            "0b03d332-26ea-4de7-a820-cccea851e41e",
            "825bb030-6c40-40fb-ae49-c868c593ed9f",
            "c07cc617-a0b4-4900-96bc-ddcf3d4bad9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 340,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "68897206-284d-46a9-aa36-3821f610767a",
          "title": "Any path goes to the api documentation:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/neotoma_test.js",
          "file": "/test/neotoma_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "`api-docs` redirects to the api documentation.",
              "fullTitle": "Any path goes to the api documentation: `api-docs` redirects to the api documentation.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2')\n  .set('Accept', 'application/json')\n  .expect(302, done);",
              "err": {},
              "uuid": "5715fe04-1235-4306-9cf7-b7cad4713489",
              "parentUUID": "68897206-284d-46a9-aa36-3821f610767a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5715fe04-1235-4306-9cf7-b7cad4713489"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3dfcba58-7d82-4940-ab74-9de8b0429821",
          "title": "Get occurrence data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/occurrence.js",
          "file": "/test/occurrence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence by singular id & return same id:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by singular id & return same id:",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "8cc16ac5-7d87-4d63-9931-15c51c699d3a",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get the Flyover test call:",
              "fullTitle": "Get occurrence data any number of ways: Get the Flyover test call:",
              "timedOut": false,
              "duration": 8194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?taxonname=rhinocerotidae,megacerops,moeritherium,ceratogaulus,gomphotherium,deinotherium,condylarthra,paraceratherium,mesonychia,pantodonta,hyaenodon,thylacosmilus,glyptodon,castoroides,toxodon,megatherium,arctodus,smilodon,mammuthus,mammut,coelodonta,megaloceras,gigantopithecus,phlegethontia,temnospondyli,lepospondyli,ichthyosauria,sauropterygia,mosasauroidea,pterosauromorpha,titanoboa,megalania,placodus,tanystropheidae,hyperodapedon,stagonolepis,scutosaurus,pareiasauria,archelon,stupendemys,protostega,placodermi,leedsichthys,onychodontiformes,acanthostega,ichthyostega,crassigyrinus,ornithosuchus,erpetosuchidae,protosuchus,dakosaurus,geosaurus,deinosuchus&lower=true&limit=999999&loc=POLYGON((-122.56 39.94,-115.21 41.96,-107.99 43.42,-100.51 44.41,-92.85 44.91,-83.49 44.84,-74.25 44.02,-70.19 43.38,-69.36 42.75,-69.02 41.76,-69.13 41.07,-69.5 40.47,-70.07 40.06,-70.75 39.9,-78.36 40.86,-85.79 41.33,-93.27 41.3,-100.68 40.78,-105.86 40.12,-111.42 39.12,-116.79 37.86,-122.28 36.29,-122.98 36.35,-123.61 36.67,-124.06 37.21,-124.27 37.88,-124.21 38.58,-123.89 39.2,-123.35 39.65,-122.56 39.94))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done)",
              "err": {},
              "uuid": "b897edde-466b-45f0-ae55-2582ff79c9d1",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failing Canis test works:",
              "fullTitle": "Get occurrence data any number of ways: Failing Canis test works:",
              "timedOut": false,
              "duration": 7313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This casuses timeout fails for some reason.  It's frustrating.\napi.get('v2.0/data/occurrences?taxonname=Canis&lower=true&limit=999999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "9a59ad60-50f3-420e-9319-5a3a26eb1673",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrence by taxon:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrence by taxon:",
              "timedOut": false,
              "duration": 963,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12/occurrences')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "c67fcb74-d23b-4301-9c8a-f434732e57b0",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping altitudes:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping altitudes:",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "882afc2d-6718-4c73-bc93-58fd3e8f5880",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break occurrences by flipping ages:",
              "fullTitle": "Get occurrence data any number of ways: Break occurrences by flipping ages:",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=5000&ageold=3000')\n  .set('Accept', 'application/json')\n  .expect(500, done);",
              "err": {},
              "uuid": "49c64de2-e97c-4335-8992-c9f55bc18f07",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Occurrences filter by age:",
              "fullTitle": "Get occurrence data any number of ways: Occurrences filter by age:",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=3000&ageold=5000')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "80db56bd-f0bd-4589-af77-204bae5c164a",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated fields:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated fields:",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?siteid=12,13,14,15&taxonname=Betula&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allSite = res.body['data'];\n    var siteids = [];\n    for (var i = 0; i < allSite.length; i++) {\n      siteids.push(allSite[i]['site']['siteid']);\n    };\n    var uniqueSites = Array.from(new Set(siteids)).sort(function (a, b) { return a - b; });\n    return (uniqueSites === [12, 13, 14, 15]);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "2851de9f-dcfb-4868-8872-c6179d0b114a",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "38d58f70-78ae-4a2d-b775-1f865b319fa7",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get hierarchical occurrences with comma separated taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get hierarchical occurrences with comma separated taxa:",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Picea,Abies&limit=25&lower=true')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return (res.body.data.length > 0);\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "6ebac24e-8f27-43c6-bd75-22d5494e2d6a",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences returns lower taxa:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences returns lower taxa:",
              "timedOut": false,
              "duration": 155,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Myrica&lower=true&limit=200')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "15d8ee02-18f5-473c-86b6-87b13b0cb4b9",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences with mammals and lower taxa works:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences with mammals and lower taxa works:",
              "timedOut": false,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?taxonname=Homo&lower=true&limit=25')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    var allTaxa = res.body['data'];\n    var taxaids = [];\n    for (var i = 0; i < allTaxa.length; i++) {\n      taxaids.push(allTaxa[i]['sample']['taxonname']);\n    };\n    var uniqueTaxa = Array.from(new Set(taxaids)).sort();\n    return uniqueTaxa.length > 1 & allTaxa.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f1dc827e-5637-4644-9f40-a4b6189c2154",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get occurrences using taxon and age bounds:",
              "fullTitle": "Get occurrence data any number of ways: Get occurrences using taxon and age bounds:",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences/?ageyoung=2000&ageold=3000&taxonname=Pinus')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "f4bcfb5c-b448-4ceb-bc8f-c5d68bb1a330",
              "parentUUID": "3dfcba58-7d82-4940-ab74-9de8b0429821",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8cc16ac5-7d87-4d63-9931-15c51c699d3a",
            "b897edde-466b-45f0-ae55-2582ff79c9d1",
            "9a59ad60-50f3-420e-9319-5a3a26eb1673",
            "c67fcb74-d23b-4301-9c8a-f434732e57b0",
            "882afc2d-6718-4c73-bc93-58fd3e8f5880",
            "49c64de2-e97c-4335-8992-c9f55bc18f07",
            "80db56bd-f0bd-4589-af77-204bae5c164a",
            "2851de9f-dcfb-4868-8872-c6179d0b114a",
            "38d58f70-78ae-4a2d-b775-1f865b319fa7",
            "6ebac24e-8f27-43c6-bd75-22d5494e2d6a",
            "15d8ee02-18f5-473c-86b6-87b13b0cb4b9",
            "f1dc827e-5637-4644-9f40-a4b6189c2154",
            "f4bcfb5c-b448-4ceb-bc8f-c5d68bb1a330"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17772,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "437ab745-e34a-4fd4-9e01-91ff934c6c13",
          "title": "Get publication data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/publications.js",
          "file": "/test/publications.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get publication by singular id & return same id:",
              "fullTitle": "Get publication data any number of ways: Get publication by singular id & return same id:",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data[0].publicationid == 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "694ad6e1-adc9-4edc-8231-f5fb0b1bbf49",
              "parentUUID": "437ab745-e34a-4fd4-9e01-91ff934c6c13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by comma sepatarated ids:",
              "fullTitle": "Get publication data any number of ways: Get publication by comma sepatarated ids:",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications/12,13')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.map(x => x.publicationid) == [12, 13];\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "32a968a0-cde9-4521-ac27-f1d75fc8450e",
              "parentUUID": "437ab745-e34a-4fd4-9e01-91ff934c6c13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by querying author:",
              "fullTitle": "Get publication data any number of ways: Get publication by querying author:",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?familyname=Grimm')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "96e1bf38-a880-43dc-8904-acf6c32cd408",
              "parentUUID": "437ab745-e34a-4fd4-9e01-91ff934c6c13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publications using pubs with missing links:",
              "fullTitle": "Get publication data any number of ways: Get publications using pubs with missing links:",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/publications?publicationid=12,14,1412,99999')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.result.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "19b5c94c-c384-460c-b5cb-77daf55bd159",
              "parentUUID": "437ab745-e34a-4fd4-9e01-91ff934c6c13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id:",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return res.body.data.length > 0;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "94c2b3ca-21d6-4dbf-83e2-6d16fdffbacc",
              "parentUUID": "437ab745-e34a-4fd4-9e01-91ff934c6c13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by site id finds pubs for all sites:",
              "fullTitle": "Get publication data any number of ways: Get publication by site id finds pubs for all sites:",
              "timedOut": false,
              "duration": 106,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12,13,14,15/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var sites = [12, 13, 14, 15]\n    var siteids = flatten(res.body.data.map(x => x.siteid))\n    return sites.every(x => siteids.includes(x));\n  })\n  .expect(200, done);",
              "err": {
                "message": "TypeError: Cannot read property 'map' of undefined",
                "estack": "TypeError: Cannot read property 'map' of undefined\n    at /home/simon/Documents/Neotoma/api_nodetest/test/publications.js:70:45\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at /home/simon/Documents/Neotoma/api_nodetest/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at endReadableNT (internal/streams/readable.js:1333:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "c91ab424-fec5-4a4c-aca4-5546fcd20c09",
              "parentUUID": "437ab745-e34a-4fd4-9e01-91ff934c6c13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get publication by dataset id finds pubs for all datasets:",
              "fullTitle": "Get publication data any number of ways: Get publication by dataset id finds pubs for all datasets:",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets/12,13,2201,6000/publications')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    const flatten = list => list.reduce(\n      (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []\n    );\n    var datasets = [12, 6000, 13, 2201]\n    var datasetids = flatten(res.body.data.map(x => x.datasetid))\n    return datasets.every(x => datasetids.includes(x));\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "43b3c827-e655-4a9e-9911-b3325f1a22d9",
              "parentUUID": "437ab745-e34a-4fd4-9e01-91ff934c6c13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "694ad6e1-adc9-4edc-8231-f5fb0b1bbf49",
            "32a968a0-cde9-4521-ac27-f1d75fc8450e",
            "96e1bf38-a880-43dc-8904-acf6c32cd408",
            "19b5c94c-c384-460c-b5cb-77daf55bd159",
            "94c2b3ca-21d6-4dbf-83e2-6d16fdffbacc",
            "43b3c827-e655-4a9e-9911-b3325f1a22d9"
          ],
          "failures": [
            "c91ab424-fec5-4a4c-aca4-5546fcd20c09"
          ],
          "pending": [],
          "skipped": [],
          "duration": 712,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e55c60f8-5c84-4842-86ce-64017a470143",
          "title": "GET /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/DatasetTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f1f7edbf-f37a-4aa3-a8a6-2c763fe0306e",
              "parentUUID": "e55c60f8-5c84-4842-86ce-64017a470143",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1f7edbf-f37a-4aa3-a8a6-2c763fe0306e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1673ea29-0b12-489a-ab40-78cf620ae4aa",
          "title": "GET /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/TaxaInDatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 237,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "741c7738-56fc-45f4-b2c9-dd3b0cc49f05",
              "parentUUID": "1673ea29-0b12-489a-ab40-78cf620ae4aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "741c7738-56fc-45f4-b2c9-dd3b0cc49f05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 237,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e36ce008-9af7-420b-a9e7-f6c952970c95",
          "title": "GET /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/apps/collectionTypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d093e30d-b6d3-4b28-9e78-06bedad806b8",
              "parentUUID": "e36ce008-9af7-420b-a9e7-f6c952970c95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d093e30d-b6d3-4b28-9e78-06bedad806b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4de06df3-0d11-445c-b0a0-b09bc44a5c0c",
          "title": "GET /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 195,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1beec3a6-17ef-4c3b-bc98-26e625f1c234",
              "parentUUID": "4de06df3-0d11-445c-b0a0-b09bc44a5c0c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1beec3a6-17ef-4c3b-bc98-26e625f1c234"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 195,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "87819940-5716-47de-a568-50a46d4d5637",
          "title": "GET /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 601,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f789178a-c6eb-4d32-910c-81708b0abd15",
              "parentUUID": "87819940-5716-47de-a568-50a46d4d5637",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f789178a-c6eb-4d32-910c-81708b0abd15"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 601,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6abe9a28-a323-4f38-b22f-b4cdd13e419d",
          "title": "GET /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 733,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "918dfbbf-da4b-4360-b655-b5ae2ab82831",
              "parentUUID": "6abe9a28-a323-4f38-b22f-b4cdd13e419d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "918dfbbf-da4b-4360-b655-b5ae2ab82831"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 733,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c5c5226b-dbd3-477a-96d4-f0d9e030e8c3",
          "title": "GET /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 364,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "939d8378-9b47-4dfd-8e70-4872159ec2e9",
              "parentUUID": "c5c5226b-dbd3-477a-96d4-f0d9e030e8c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "939d8378-9b47-4dfd-8e70-4872159ec2e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 364,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "788e7a4c-644a-4a5b-a221-fa4e25a8686c",
          "title": "GET /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e160ebf2-3bcc-42c0-90a3-5228939d1d4f",
              "parentUUID": "788e7a4c-644a-4a5b-a221-fa4e25a8686c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e160ebf2-3bcc-42c0-90a3-5228939d1d4f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1a1c861a-14fc-43ba-8a91-2794b7092b9f",
          "title": "GET /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/occurrence/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "db6167dc-4abf-495a-b914-0864d5c5bf85",
              "parentUUID": "1a1c861a-14fc-43ba-8a91-2794b7092b9f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db6167dc-4abf-495a-b914-0864d5c5bf85"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 150,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e31e0be2-dace-48b6-8fa4-cfcc0535137d",
          "title": "GET /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b0621219-d739-47b4-8ab7-a207e34e49ed",
              "parentUUID": "e31e0be2-dace-48b6-8fa4-cfcc0535137d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0621219-d739-47b4-8ab7-a207e34e49ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 141,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "eb521e6a-3b00-4e57-841d-93feb11cf286",
          "title": "GET /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v1.5/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "3855260e-e78c-48e0-9199-3cfb8c46696d",
              "parentUUID": "eb521e6a-3b00-4e57-841d-93feb11cf286",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3855260e-e78c-48e0-9199-3cfb8c46696d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c6df63f3-fc04-4aa0-95b7-bd882d18d13e",
          "title": "GET /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/authorpis should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 796,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d2ab31f0-6a1d-4bcf-8090-8b201dd0961c",
              "parentUUID": "c6df63f3-fc04-4aa0-95b7-bd882d18d13e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2ab31f0-6a1d-4bcf-8090-8b201dd0961c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 796,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d097d1fc-d87a-48dd-adb0-985a9a5d8663",
          "title": "GET /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/collectiontypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e7e4ab44-d678-4e53-af2d-30c95377a134",
              "parentUUID": "d097d1fc-d87a-48dd-adb0-985a9a5d8663",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e7e4ab44-d678-4e53-af2d-30c95377a134"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 108,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3b6060f8-16cd-45e2-ac8e-0f3812a8609d",
          "title": "GET /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/datasettypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "493ef964-cfbf-4ca7-a4af-4a628841b4c2",
              "parentUUID": "3b6060f8-16cd-45e2-ac8e-0f3812a8609d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "493ef964-cfbf-4ca7-a4af-4a628841b4c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 222,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d120d469-8998-4bb1-9806-c2917a06c116",
          "title": "GET /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/depositionalenvironments/root should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bb752dc1-e78a-4442-8870-042c49ae116b",
              "parentUUID": "d120d469-8998-4bb1-9806-c2917a06c116",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bb752dc1-e78a-4442-8870-042c49ae116b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "49d1cccf-8791-4408-a4f8-91b56db0eeee",
          "title": "GET /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/keywords should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cdf5d4a9-793b-4a25-97b7-2706e0ee7279",
              "parentUUID": "49d1cccf-8791-4408-a4f8-91b56db0eeee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cdf5d4a9-793b-4a25-97b7-2706e0ee7279"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c88a08da-071b-4e91-876c-fc94ab079249",
          "title": "GET /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taphonomysystems should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "7221f9ae-2bc5-44c2-b0ec-8133844ba363",
              "parentUUID": "c88a08da-071b-4e91-876c-fc94ab079249",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7221f9ae-2bc5-44c2-b0ec-8133844ba363"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b0d7ce07-56c4-4b71-bc3b-46f0a86952b7",
          "title": "GET /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxagrouptypes should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 356,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "b3c2e01e-d61f-44ff-b4ce-5486527a6083",
              "parentUUID": "b0d7ce07-56c4-4b71-bc3b-46f0a86952b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3c2e01e-d61f-44ff-b4ce-5486527a6083"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 356,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e16410d1-7b19-44fd-b654-c12cf4659804",
          "title": "GET /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/apps/taxaindatasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 214718,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2c1686b8-666b-421e-911c-4a6f5264dcfa",
              "parentUUID": "e16410d1-7b19-44fd-b654-c12cf4659804",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c1686b8-666b-421e-911c-4a6f5264dcfa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 214718,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "dd829a22-9389-49d8-9d3f-539f5a454345",
          "title": "GET /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/chronologies/{chronid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 604,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a0e801fb-9f23-48ca-a67b-5394833af755",
              "parentUUID": "dd829a22-9389-49d8-9d3f-539f5a454345",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0e801fb-9f23-48ca-a67b-5394833af755"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 604,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5e2a83b4-3597-4e52-945c-d766e5931393",
          "title": "GET /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 152,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: data.result[0].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[0].contactstatus should be integer, data.result[0].fax should be string, data.result[0].notes should be string, data.result[0].suffix should be string, data.result[0].url should be string, data.result[1].address should be string, data.result[1].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[1].contactstatus should be integer, data.result[1].phone should be string, data.result[1].fax should be string, data.result[1].notes should be string, data.result[1].suffix should be string, data.result[1].title should be string, data.result[1].url should be string, data.result[2].address should be string, data.result[2].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[2].contactstatus should be integer, data.result[2].phone should be string, data.result[2].fax should be string, data.result[2].notes should be string, data.result[2].suffix should be string, data.result[2].title should be string, data.result[2].url should be string, data.result[3].address should be string, data.result[3].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[3].contactstatus should be integer, data.result[3].phone should be string, data.result[3].fax should be string, data.result[3].notes should be string, data.result[3].suffix should be string, data.result[3].title should be string, data.result[3].url should be string, data.result[4].address should be string, data.result[4].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[4].contactstatus should be integer, data.result[4].phone should be string, data.result[4].fax should be string, data.result[4].notes should be string, data.result[4].suffix should be string, data.result[4].title should be string, data.result[4].url should be string, data.result[5].address should be string, data.result[5].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[5].contactstatus should be integer, data.result[5].phone should be string, data.result[5].fax should be string, data.result[5].notes should be string, data.result[5].suffix should be string, data.result[5].title should be string, data.result[5].url should be string, data.result[6].address should be string, data.result[6].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[6].contactstatus should be integer, data.result[6].phone should be string, data.result[6].fax should be string, data.result[6].notes should be string, data.result[6].suffix should be string, data.result[6].title should be string, data.result[6].url should be string, data.result[7].address should be string, data.result[7].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[7].contactstatus should be integer, data.result[7].phone should be string, data.result[7].fax should be string, data.result[7].notes should be string, data.result[7].suffix should be string, data.result[7].title should be string, data.result[7].url should be string, data.result[8].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[8].contactstatus should be integer, data.result[8].phone should be string, data.result[8].fax should be string, data.result[8].notes should be string, data.result[8].suffix should be string, data.result[8].title should be string, data.result[8].url should be string, data.result[9].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[9].contactstatus should be integer, data.result[9].phone should be string, data.result[9].fax should be string, data.result[9].notes should be string, data.result[9].suffix should be string, data.result[9].url should be string, data.result[10].address should be string, data.result[10].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[10].contactstatus should be integer, data.result[10].phone should be string, data.result[10].fax should be string, data.result[10].notes should be string, data.result[10].suffix should be string, data.result[10].title should be string, data.result[10].url should be string, data.result[11].address should be string, data.result[11].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[11].contactstatus should be integer, data.result[11].phone should be string, data.result[11].fax should be string, data.result[11].notes should be string, data.result[11].suffix should be string, data.result[11].url should be string, data.result[12].address should be string, data.result[12].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[12].contactstatus should be integer, data.result[12].phone should be string, data.result[12].fax should be string, data.result[12].notes should be string, data.result[12].suffix should be string, data.result[12].title should be string, data.result[12].url should be string, data.result[13].address should be string, data.result[13].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[13].contactstatus should be integer, data.result[13].phone should be string, data.result[13].fax should be string, data.result[13].notes should be string, data.result[13].suffix should be string, data.result[13].title should be string, data.result[13].url should be string, data.result[14].address should be string, data.result[14].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[14].contactstatus should be integer, data.result[14].phone should be string, data.result[14].fax should be string, data.result[14].notes should be string, data.result[14].suffix should be string, data.result[14].title should be string, data.result[14].url should be string, data.result[15].address should be string, data.result[15].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[15].contactstatus should be integer, data.result[15].phone should be string, data.result[15].fax should be string, data.result[15].notes should be string, data.result[15].suffix should be string, data.result[15].url should be string, data.result[16].address should be string, data.result[16].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[16].contactstatus should be integer, data.result[16].phone should be string, data.result[16].fax should be string, data.result[16].notes should be string, data.result[16].suffix should be string, data.result[16].title should be string, data.result[16].url should be string, data.result[17].address should be string, data.result[17].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[17].contactstatus should be integer, data.result[17].phone should be string, data.result[17].fax should be string, data.result[17].notes should be string, data.result[17].suffix should be string, data.result[17].title should be string, data.result[17].url should be string, data.result[18].address should be string, data.result[18].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[18].contactstatus should be integer, data.result[18].phone should be string, data.result[18].fax should be string, data.result[18].notes should be string, data.result[18].suffix should be string, data.result[18].title should be string, data.result[18].url should be string, data.result[19].address should be string, data.result[19].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[19].contactstatus should be integer, data.result[19].phone should be string, data.result[19].fax should be string, data.result[19].notes should be string, data.result[19].suffix should be string, data.result[19].title should be string, data.result[19].url should be string, data.result[20].address should be string, data.result[20].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[20].contactstatus should be integer, data.result[20].phone should be string, data.result[20].fax should be string, data.result[20].notes should be string, data.result[20].suffix should be string, data.result[20].title should be string, data.result[20].url should be string, data.result[21].address should be string, data.result[21].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[21].contactstatus should be integer, data.result[21].phone should be string, data.result[21].fax should be string, data.result[21].notes should be string, data.result[21].suffix should be string, data.result[21].title should be string, data.result[21].url should be string, data.result[22].address should be string, data.result[22].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[22].contactstatus should be integer, data.result[22].phone should be string, data.result[22].fax should be string, data.result[22].notes should be string, data.result[22].suffix should be string, data.result[22].title should be string, data.result[22].url should be string, data.result[23].address should be string, data.result[23].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[23].contactstatus should be integer, data.result[23].phone should be string, data.result[23].fax should be string, data.result[23].notes should be string, data.result[23].suffix should be string, data.result[23].title should be string, data.result[23].url should be string, data.result[24].address should be string, data.result[24].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[24].contactstatus should be integer, data.result[24].phone should be string, data.result[24].fax should be string, data.result[24].notes should be string, data.result[24].suffix should be string, data.result[24].title should be string, data.result[24].url should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: 25,\n        offset: 0\n      },\n      result: [\n        {\n          contactid: 251,\n          aliasid: 251,\n          contactname: 'Schoenweter, James',\n          contactstatusid: 1,\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          aliasid: 2848,\n          contactname: 'Parry, W. J.',\n          contactstatusid: 7,\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          aliasid: 3565,\n          contactname: 'Marvan, P.',\n          contactstatusid: 7,\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          aliasid: 2026,\n          contactname: 'Pinsof, J. D.',\n          contactstatusid: 7,\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          aliasid: 10295,\n          contactname: 'Cambon, Geneviève',\n          contactstatusid: 7,\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-04-12T16:07:37.000Z',\n          recdatemodified: '2018-04-12T16:07:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          aliasid: 2024,\n          contactname: 'Bell, G. L.',\n          contactstatusid: 7,\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          aliasid: 12752,\n          contactname: 'Zhou, Shanfu',\n          contactstatusid: 7,\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-11-05T04:45:38.000Z',\n          recdatemodified: '2018-11-05T04:45:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          aliasid: 17928,\n          contactname: 'Räsänen, Satu',\n          contactstatusid: 7,\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-01-30T16:45:55.000Z',\n          recdatemodified: '2022-01-30T16:45:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          aliasid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          contactstatusid: 1,\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          aliasid: 7247,\n          contactname: 'Andersson, Sofia',\n          contactstatusid: 1,\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          recdatecreated: '2015-05-25T00:15:50.000Z',\n          recdatemodified: '2015-05-25T00:15:51.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 18149,\n          aliasid: 18149,\n          contactname: 'Labeyrie, Laurent',\n          contactstatusid: 7,\n          familyname: 'Labeyrie',\n          leadinginitials: 'L.',\n          givennames: 'Laurent',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-05T21:03:20.000Z',\n          recdatemodified: '2022-04-05T21:03:21.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16703,\n          aliasid: 16703,\n          contactname: 'Irion, Georg',\n          contactstatusid: 6,\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-12-01T21:24:29.000Z',\n          recdatemodified: '2020-12-01T21:24:31.000Z',\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          aliasid: 2961,\n          contactname: 'Ruff, B.',\n          contactstatusid: 7,\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          aliasid: 16633,\n          contactname: 'Castro, H.',\n          contactstatusid: 7,\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-11-18T01:55:19.000Z',\n          recdatemodified: '2020-11-18T01:55:20.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          aliasid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          contactstatusid: 2,\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-10-18T03:58:42.000Z',\n          recdatemodified: '2017-10-18T03:58:42.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          aliasid: 1101,\n          contactname: 'Iversen, J.',\n          contactstatusid: 2,\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          aliasid: 599,\n          contactname: 'Farrington, A.',\n          contactstatusid: 7,\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          aliasid: 11460,\n          contactname: 'Waldrop, J. S.',\n          contactstatusid: 7,\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-06-08T08:33:33.000Z',\n          recdatemodified: '2018-06-08T08:33:34.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          aliasid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          contactstatusid: 1,\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-05-15T22:39:25.000Z',\n          recdatemodified: '2017-05-15T22:39:26.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          aliasid: 1789,\n          contactname: 'Bade, M. J.',\n          contactstatusid: 7,\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          aliasid: 2769,\n          contactname: 'Carraway, L. N.',\n          contactstatusid: 7,\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          aliasid: 7564,\n          contactname: 'Santos, F. R.',\n          contactstatusid: 7,\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2016-02-12T12:11:11.000Z',\n          recdatemodified: '2016-02-12T12:11:12.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          aliasid: 2247,\n          contactname: 'Fortsch, D. E.',\n          contactstatusid: 7,\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 18160,\n          aliasid: 18160,\n          contactname: 'Andruleit, Harald',\n          contactstatusid: 7,\n          familyname: 'Andruleit',\n          leadinginitials: 'H.',\n          givennames: 'Harald',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-07T01:14:54.000Z',\n          recdatemodified: '2022-04-07T01:14:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          aliasid: 4083,\n          contactname: 'Hudon, C.',\n          contactstatusid: 7,\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'contact'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts' in your API spec\n\nres did not satisfy it because: data.result[0].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[0].contactstatus should be integer, data.result[0].fax should be string, data.result[0].notes should be string, data.result[0].suffix should be string, data.result[0].url should be string, data.result[1].address should be string, data.result[1].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[1].contactstatus should be integer, data.result[1].phone should be string, data.result[1].fax should be string, data.result[1].notes should be string, data.result[1].suffix should be string, data.result[1].title should be string, data.result[1].url should be string, data.result[2].address should be string, data.result[2].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[2].contactstatus should be integer, data.result[2].phone should be string, data.result[2].fax should be string, data.result[2].notes should be string, data.result[2].suffix should be string, data.result[2].title should be string, data.result[2].url should be string, data.result[3].address should be string, data.result[3].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[3].contactstatus should be integer, data.result[3].phone should be string, data.result[3].fax should be string, data.result[3].notes should be string, data.result[3].suffix should be string, data.result[3].title should be string, data.result[3].url should be string, data.result[4].address should be string, data.result[4].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[4].contactstatus should be integer, data.result[4].phone should be string, data.result[4].fax should be string, data.result[4].notes should be string, data.result[4].suffix should be string, data.result[4].title should be string, data.result[4].url should be string, data.result[5].address should be string, data.result[5].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[5].contactstatus should be integer, data.result[5].phone should be string, data.result[5].fax should be string, data.result[5].notes should be string, data.result[5].suffix should be string, data.result[5].title should be string, data.result[5].url should be string, data.result[6].address should be string, data.result[6].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[6].contactstatus should be integer, data.result[6].phone should be string, data.result[6].fax should be string, data.result[6].notes should be string, data.result[6].suffix should be string, data.result[6].title should be string, data.result[6].url should be string, data.result[7].address should be string, data.result[7].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[7].contactstatus should be integer, data.result[7].phone should be string, data.result[7].fax should be string, data.result[7].notes should be string, data.result[7].suffix should be string, data.result[7].title should be string, data.result[7].url should be string, data.result[8].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[8].contactstatus should be integer, data.result[8].phone should be string, data.result[8].fax should be string, data.result[8].notes should be string, data.result[8].suffix should be string, data.result[8].title should be string, data.result[8].url should be string, data.result[9].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[9].contactstatus should be integer, data.result[9].phone should be string, data.result[9].fax should be string, data.result[9].notes should be string, data.result[9].suffix should be string, data.result[9].url should be string, data.result[10].address should be string, data.result[10].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[10].contactstatus should be integer, data.result[10].phone should be string, data.result[10].fax should be string, data.result[10].notes should be string, data.result[10].suffix should be string, data.result[10].title should be string, data.result[10].url should be string, data.result[11].address should be string, data.result[11].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[11].contactstatus should be integer, data.result[11].phone should be string, data.result[11].fax should be string, data.result[11].notes should be string, data.result[11].suffix should be string, data.result[11].url should be string, data.result[12].address should be string, data.result[12].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[12].contactstatus should be integer, data.result[12].phone should be string, data.result[12].fax should be string, data.result[12].notes should be string, data.result[12].suffix should be string, data.result[12].title should be string, data.result[12].url should be string, data.result[13].address should be string, data.result[13].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[13].contactstatus should be integer, data.result[13].phone should be string, data.result[13].fax should be string, data.result[13].notes should be string, data.result[13].suffix should be string, data.result[13].title should be string, data.result[13].url should be string, data.result[14].address should be string, data.result[14].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[14].contactstatus should be integer, data.result[14].phone should be string, data.result[14].fax should be string, data.result[14].notes should be string, data.result[14].suffix should be string, data.result[14].title should be string, data.result[14].url should be string, data.result[15].address should be string, data.result[15].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[15].contactstatus should be integer, data.result[15].phone should be string, data.result[15].fax should be string, data.result[15].notes should be string, data.result[15].suffix should be string, data.result[15].url should be string, data.result[16].address should be string, data.result[16].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[16].contactstatus should be integer, data.result[16].phone should be string, data.result[16].fax should be string, data.result[16].notes should be string, data.result[16].suffix should be string, data.result[16].title should be string, data.result[16].url should be string, data.result[17].address should be string, data.result[17].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[17].contactstatus should be integer, data.result[17].phone should be string, data.result[17].fax should be string, data.result[17].notes should be string, data.result[17].suffix should be string, data.result[17].title should be string, data.result[17].url should be string, data.result[18].address should be string, data.result[18].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[18].contactstatus should be integer, data.result[18].phone should be string, data.result[18].fax should be string, data.result[18].notes should be string, data.result[18].suffix should be string, data.result[18].title should be string, data.result[18].url should be string, data.result[19].address should be string, data.result[19].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[19].contactstatus should be integer, data.result[19].phone should be string, data.result[19].fax should be string, data.result[19].notes should be string, data.result[19].suffix should be string, data.result[19].title should be string, data.result[19].url should be string, data.result[20].address should be string, data.result[20].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[20].contactstatus should be integer, data.result[20].phone should be string, data.result[20].fax should be string, data.result[20].notes should be string, data.result[20].suffix should be string, data.result[20].title should be string, data.result[20].url should be string, data.result[21].address should be string, data.result[21].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[21].contactstatus should be integer, data.result[21].phone should be string, data.result[21].fax should be string, data.result[21].notes should be string, data.result[21].suffix should be string, data.result[21].title should be string, data.result[21].url should be string, data.result[22].address should be string, data.result[22].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[22].contactstatus should be integer, data.result[22].phone should be string, data.result[22].fax should be string, data.result[22].notes should be string, data.result[22].suffix should be string, data.result[22].title should be string, data.result[22].url should be string, data.result[23].address should be string, data.result[23].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[23].contactstatus should be integer, data.result[23].phone should be string, data.result[23].fax should be string, data.result[23].notes should be string, data.result[23].suffix should be string, data.result[23].title should be string, data.result[23].url should be string, data.result[24].address should be string, data.result[24].contactstatusid can't resolve reference #/components/schemas/contactstatusid, data.result[24].contactstatus should be integer, data.result[24].phone should be string, data.result[24].fax should be string, data.result[24].notes should be string, data.result[24].suffix should be string, data.result[24].title should be string, data.result[24].url should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: {\n      query: {\n        contactid: null,\n        contactname: null,\n        familyname: null,\n        contactstatus: null,\n        name: null,\n        similarity: null,\n        limit: 25,\n        offset: 0\n      },\n      result: [\n        {\n          contactid: 251,\n          aliasid: 251,\n          contactname: 'Schoenweter, James',\n          contactstatusid: 1,\n          familyname: 'Schoenweter',\n          leadinginitials: 'J.',\n          givennames: 'James',\n          suffix: null,\n          title: 'Dr.',\n          phone: '602-965-2930',\n          fax: null,\n          email: 'IKJXS@asuvm.inre.asu.edu',\n          url: null,\n          address: 'Anthropology Department\\r\\n' +\n            'Arizona State University\\r\\n' +\n            'Tempe, AZ 85287\\r\\n' +\n            'UNITED STATES',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 2848,\n          aliasid: 2848,\n          contactname: 'Parry, W. J.',\n          contactstatusid: 7,\n          familyname: 'Parry',\n          leadinginitials: 'W.J.',\n          givennames: 'W. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 3565,\n          aliasid: 3565,\n          contactname: 'Marvan, P.',\n          contactstatusid: 7,\n          familyname: 'Marvan',\n          leadinginitials: 'P.',\n          givennames: 'P.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2026,\n          aliasid: 2026,\n          contactname: 'Pinsof, J. D.',\n          contactstatusid: 7,\n          familyname: 'Pinsof',\n          leadinginitials: 'J.D.',\n          givennames: 'John D.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 10295,\n          aliasid: 10295,\n          contactname: 'Cambon, Geneviève',\n          contactstatusid: 7,\n          familyname: 'Cambon',\n          leadinginitials: 'G.',\n          givennames: 'Geneviève',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-04-12T16:07:37.000Z',\n          recdatemodified: '2018-04-12T16:07:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2024,\n          aliasid: 2024,\n          contactname: 'Bell, G. L.',\n          contactstatusid: 7,\n          familyname: 'Bell',\n          leadinginitials: 'G.L.',\n          givennames: 'G. L.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 12752,\n          aliasid: 12752,\n          contactname: 'Zhou, Shanfu',\n          contactstatusid: 7,\n          familyname: 'Zhou',\n          leadinginitials: 'S.',\n          givennames: 'Shanfu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-11-05T04:45:38.000Z',\n          recdatemodified: '2018-11-05T04:45:38.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 17928,\n          aliasid: 17928,\n          contactname: 'Räsänen, Satu',\n          contactstatusid: 7,\n          familyname: 'Räsänen',\n          leadinginitials: 'S.',\n          givennames: 'Satu',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-01-30T16:45:55.000Z',\n          recdatemodified: '2022-01-30T16:45:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4349,\n          aliasid: 4349,\n          contactname: 'Ahyong, Shane T.',\n          contactstatusid: 1,\n          familyname: 'Ahyong',\n          leadinginitials: 'S.T.',\n          givennames: 'Shane T.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: 'shane.ahyong@austmus.gov.au',\n          url: null,\n          address: 'Australian Museum\\r\\n6 College St.\\r\\nSydney, NSW 2010\\r\\nAustralia',\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 7247,\n          aliasid: 7247,\n          contactname: 'Andersson, Sofia',\n          contactstatusid: 1,\n          familyname: 'Andersson',\n          leadinginitials: 'S.',\n          givennames: 'Sofia',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: 'Stockholm University\\r\\nSweden',\n          notes: null,\n          recdatecreated: '2015-05-25T00:15:50.000Z',\n          recdatemodified: '2015-05-25T00:15:51.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 18149,\n          aliasid: 18149,\n          contactname: 'Labeyrie, Laurent',\n          contactstatusid: 7,\n          familyname: 'Labeyrie',\n          leadinginitials: 'L.',\n          givennames: 'Laurent',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-05T21:03:20.000Z',\n          recdatemodified: '2022-04-05T21:03:21.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16703,\n          aliasid: 16703,\n          contactname: 'Irion, Georg',\n          contactstatusid: 6,\n          familyname: 'Irion',\n          leadinginitials: 'G.',\n          givennames: 'Georg',\n          suffix: null,\n          title: 'Prof. Dr.',\n          phone: null,\n          fax: null,\n          email: 'girion@senckenberg.de',\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-12-01T21:24:29.000Z',\n          recdatemodified: '2020-12-01T21:24:31.000Z',\n          contactstatus: 'retired'\n        },\n        {\n          contactid: 2961,\n          aliasid: 2961,\n          contactname: 'Ruff, B.',\n          contactstatusid: 7,\n          familyname: 'Ruff',\n          leadinginitials: 'B.',\n          givennames: 'B.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 16633,\n          aliasid: 16633,\n          contactname: 'Castro, H.',\n          contactstatusid: 7,\n          familyname: 'Castro',\n          leadinginitials: 'H.',\n          givennames: 'H.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2020-11-18T01:55:19.000Z',\n          recdatemodified: '2020-11-18T01:55:20.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9545,\n          aliasid: 9545,\n          contactname: 'Boissier, Pierre Edmond',\n          contactstatusid: 2,\n          familyname: 'Boissier',\n          leadinginitials: 'P.E.',\n          givennames: 'Pierre Edmond',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-10-18T03:58:42.000Z',\n          recdatemodified: '2017-10-18T03:58:42.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 1101,\n          aliasid: 1101,\n          contactname: 'Iversen, J.',\n          contactstatusid: 2,\n          familyname: 'Iversen',\n          leadinginitials: 'J.',\n          givennames: 'J.',\n          suffix: null,\n          title: 'Dr.',\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'deceased'\n        },\n        {\n          contactid: 599,\n          aliasid: 599,\n          contactname: 'Farrington, A.',\n          contactstatusid: 7,\n          familyname: 'Farrington',\n          leadinginitials: 'A.',\n          givennames: 'A.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 11460,\n          aliasid: 11460,\n          contactname: 'Waldrop, J. S.',\n          contactstatusid: 7,\n          familyname: 'Waldrop',\n          leadinginitials: 'J.S.',\n          givennames: 'J. S.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2018-06-08T08:33:33.000Z',\n          recdatemodified: '2018-06-08T08:33:34.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 9243,\n          aliasid: 9243,\n          contactname: 'Teunissen van Manen, Milan L. Teunissen',\n          contactstatusid: 1,\n          familyname: 'Teunissen van Manen',\n          leadinginitials: 'M.L.',\n          givennames: 'Milan L. Teunissen',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2017-05-15T22:39:25.000Z',\n          recdatemodified: '2017-05-15T22:39:26.000Z',\n          contactstatus: 'active'\n        },\n        {\n          contactid: 1789,\n          aliasid: 1789,\n          contactname: 'Bade, M. J.',\n          contactstatusid: 7,\n          familyname: 'Bade',\n          leadinginitials: 'M.J.',\n          givennames: 'M. J.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2769,\n          aliasid: 2769,\n          contactname: 'Carraway, L. N.',\n          contactstatusid: 7,\n          familyname: 'Carraway',\n          leadinginitials: 'L.N.',\n          givennames: 'L. N.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 7564,\n          aliasid: 7564,\n          contactname: 'Santos, F. R.',\n          contactstatusid: 7,\n          familyname: 'Santos',\n          leadinginitials: 'F.R.',\n          givennames: 'F. R.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2016-02-12T12:11:11.000Z',\n          recdatemodified: '2016-02-12T12:11:12.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 2247,\n          aliasid: 2247,\n          contactname: 'Fortsch, D. E.',\n          contactstatusid: 7,\n          familyname: 'Fortsch',\n          leadinginitials: 'D.E.',\n          givennames: 'D. E.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 18160,\n          aliasid: 18160,\n          contactname: 'Andruleit, Harald',\n          contactstatusid: 7,\n          familyname: 'Andruleit',\n          leadinginitials: 'H.',\n          givennames: 'Harald',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2022-04-07T01:14:54.000Z',\n          recdatemodified: '2022-04-07T01:14:55.000Z',\n          contactstatus: 'unknown'\n        },\n        {\n          contactid: 4083,\n          aliasid: 4083,\n          contactname: 'Hudon, C.',\n          contactstatusid: 7,\n          familyname: 'Hudon',\n          leadinginitials: 'C.',\n          givennames: 'C.',\n          suffix: null,\n          title: null,\n          phone: null,\n          fax: null,\n          email: null,\n          url: null,\n          address: null,\n          notes: null,\n          recdatecreated: '2013-09-30T21:02:35.000Z',\n          recdatemodified: '2013-09-30T21:02:35.000Z',\n          contactstatus: 'unknown'\n        }\n      ]\n    }\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'contact'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "243657a3-3fd9-458d-b4c7-1008b8dd2e8f",
              "parentUUID": "5e2a83b4-3597-4e52-945c-d766e5931393",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "243657a3-3fd9-458d-b4c7-1008b8dd2e8f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 152,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "26b4b40e-2e53-482d-b3ea-a9590a554ed7",
          "title": "GET /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 139,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        aliasid: 1,\n        contactname: 'International Organization for Standardization',\n        contactstatusid: 4,\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        recdatecreated: '2013-09-30T21:02:35.000Z',\n        recdatemodified: '2013-09-30T21:02:35.000Z',\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        contactid: 1,\n        aliasid: 1,\n        contactname: 'International Organization for Standardization',\n        contactstatusid: 4,\n        familyname: 'International Organization for Standardization',\n        leadinginitials: null,\n        givennames: null,\n        suffix: null,\n        title: null,\n        phone: '+41 22 749 02 22',\n        fax: '+41 22 749 01 55',\n        email: 'countrycodes@iso.org',\n        url: 'http://www.iso.org/',\n        address: 'ISO 3166 Maintenance Agency\\r\\n' +\n          'Case postale 56\\r\\n' +\n          'CH-1211 Genève 20\\r\\n' +\n          'SWITZERLAND',\n        notes: null,\n        recdatecreated: '2013-09-30T21:02:35.000Z',\n        recdatemodified: '2013-09-30T21:02:35.000Z',\n        contactstatus: 'extant'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/contacts/{contactid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/contactresponse' } }\n    },\n    description: 'A Neotoma contacts object.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "ed9afedb-c4a1-428d-af4e-3bfe6b0edf03",
              "parentUUID": "26b4b40e-2e53-482d-b3ea-a9590a554ed7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ed9afedb-c4a1-428d-af4e-3bfe6b0edf03"
          ],
          "pending": [],
          "skipped": [],
          "duration": 139,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d2399845-44fc-4581-9e0d-d223eb5c5777",
          "title": "GET /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/contacts/{contactid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c4c29f43-5f57-4bf8-8273-0eddb8ed4a9b",
              "parentUUID": "d2399845-44fc-4581-9e0d-d223eb5c5777",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4c29f43-5f57-4bf8-8273-0eddb8ed4a9b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 209,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ef879a1d-3fe5-43d5-bc74-94393fd73a92",
          "title": "GET /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 3691,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2db72ac5-584c-48f3-87ae-dc24c88f9774",
              "parentUUID": "ef879a1d-3fe5-43d5-bc74-94393fd73a92",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2db72ac5-584c-48f3-87ae-dc24c88f9774"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3691,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1463c9c7-b80e-4269-8f46-d68682397e96",
          "title": "GET /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/db should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1050,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'Datasets'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: { status: 'success', data: [], message: 'Retrieved all tables' }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/db' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'Datasets'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "6e69d8af-37f7-4724-ab92-19111cc002ad",
              "parentUUID": "1463c9c7-b80e-4269-8f46-d68682397e96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6e69d8af-37f7-4724-ab92-19111cc002ad"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1050,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a5b4451b-0298-4c37-bd83-a239e55d5e09",
          "title": "GET /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 813,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "58abcf69-e029-48a7-b101-e8d7b230c5b2",
              "parentUUID": "a5b4451b-0298-4c37-bd83-a239e55d5e09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "58abcf69-e029-48a7-b101-e8d7b230c5b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 813,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2c990a2e-3ecb-493a-8d7b-c7cbce319aaf",
          "title": "GET /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 155,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f3bef40a-d4f2-43ad-9816-3fcd1f128abb",
              "parentUUID": "2c990a2e-3ecb-493a-8d7b-c7cbce319aaf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f3bef40a-d4f2-43ad-9816-3fcd1f128abb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 155,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9cdf37f8-a7cf-49fc-ba4f-2f3ae716094b",
          "title": "GET /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "4ce94a54-1e53-4a20-9bae-1d33ea8ad8e4",
              "parentUUID": "9cdf37f8-a7cf-49fc-ba4f-2f3ae716094b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4ce94a54-1e53-4a20-9bae-1d33ea8ad8e4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 143,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c5aca8f4-e3ca-4806-991c-ac5d0b9445bf",
          "title": "GET /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/doi should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "a7387747-9e35-435d-97af-9d1e530f9272",
              "parentUUID": "c5aca8f4-e3ca-4806-991c-ac5d0b9445bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7387747-9e35-435d-97af-9d1e530f9272"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 134,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ab4535c7-c0a9-4744-af5e-a7df83c6db96",
          "title": "GET /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/lithology should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d23d1b99-e8ff-4b2e-926b-d6e206f276d9",
              "parentUUID": "ab4535c7-c0a9-4744-af5e-a7df83c6db96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d23d1b99-e8ff-4b2e-926b-d6e206f276d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 147,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "217064d7-0341-4c6c-8c58-8abc8ef31ab6",
          "title": "GET /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "cc8b0cfa-f176-43ed-88a2-226f789b2146",
              "parentUUID": "217064d7-0341-4c6c-8c58-8abc8ef31ab6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cc8b0cfa-f176-43ed-88a2-226f789b2146"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ec2b60c2-1c8c-4467-8198-3233a5d92bf0",
          "title": "GET /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "329a9f20-0dcb-474e-a66c-aba3d4c0c1a7",
              "parentUUID": "ec2b60c2-1c8c-4467-8198-3233a5d92bf0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "329a9f20-0dcb-474e-a66c-aba3d4c0c1a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3097ea80-57ab-446d-8521-68fe610d84ac",
          "title": "GET /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets/{datasetid}/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 139,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in your API spec\n\nres did not satisfy it because: data[1].author should be string, data[1].publicationid should be integer, data[4].author should be string, data[4].publicationid should be integer, data[18].author should be string, data[18].publicationid should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        taxonid: 310,\n        taxonname: 'Ulmus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 1203,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 95,\n        taxonname: 'Eucalyptus spike',\n        author: null,\n        ecolgroup: 'LABO',\n        status: 'extant',\n        highertaxonid: 35449,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 353,\n        taxonname: 'Alnus viridis',\n        author: '(Chaix) de Candolle, 1805',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 24464,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 345,\n        taxonname: 'Ambrosia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 3668,\n        publicationid: 3717,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 21. Magnoliophyta: Asteridae, part 8: Asteraceae, part 3. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 312,\n        taxonname: 'Indeterminable',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 312,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 216,\n        taxonname: 'Pinus undiff.',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 383,\n        taxonname: 'Myrica',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 381,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 294,\n        taxonname: 'Sphagnum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'AQBR',\n        status: 'extant',\n        highertaxonid: 29991,\n        publicationid: 3726,\n        publication: 'Flora of North America Editorial Committee. 2007. Flora of North America north of Mexico. Volume 27. Bryophyta, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 391,\n        taxonname: 'Amaranthaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 7656,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 166,\n        taxonname: 'Lycopodiaceae undiff.',\n        author: 'Palisot de Beauvois ex Mirbel, 1802',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 1180,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 173,\n        taxonname: 'Huperzia lucidula',\n        author: '(Michaux) Trevisan',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 2642,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 174,\n        taxonname: 'Lycopodium obscurum',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 5011,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 153,\n        taxonname: 'Larix',\n        author: 'Miller, 1754',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 734,\n        taxonname: 'Rubus chamaemorus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 267,\n        publicationid: 7704,\n        publication: 'Flora of North America Editorial Committee. 2014. Flora of North America north of Mexico. Volume 9. Magnoliophyta: Picramniaceae to Rosaceae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 210,\n        taxonname: 'Picea',\n        author: 'A. Dietrich, 1824',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 329,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 25,\n        taxonname: 'Artemisia',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 22590,\n        publicationid: 1491,\n        publication: 'Flora of North America Editorial Committee. 2006. Flora of North America north of Mexico. Volume 19. Magnoliophyta: Asteridae, part 6: Asteraceae, part 1. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 251,\n        taxonname: 'Quercus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 328,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 74,\n        taxonname: 'Cyperaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 313,\n        taxonname: 'Unknown',\n        author: null,\n        ecolgroup: 'UNID',\n        status: 'extant',\n        highertaxonid: 313,\n        publicationid: null,\n        publication: null\n      },\n      {\n        taxonid: 72,\n        taxonname: 'Cupressaceae',\n        author: 'Gray, 1822',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 16997,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 212,\n        taxonname: 'Pinus subg. Pinus',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 385,\n        publicationid: 299,\n        publication: 'Flora of North America Editorial Committee. 1993. Flora of North America north of Mexico. Volume 2. Pteridophytes and Gymnosperms. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 307,\n        taxonname: 'Asteroideae undiff.',\n        author: 'Lindley, 1829',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 418,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 202,\n        taxonname: 'Pediastrum',\n        author: 'Meyen, 1829',\n        ecolgroup: 'ALGA',\n        status: 'extant',\n        highertaxonid: 21585,\n        publicationid: 9722,\n        publication: 'Guiry, M.D., and G.M. Guiry. 2017. AlgaeBase. World-wide electronic publication, National University of Ireland, Galway. http://www.algaebase.org.'\n      },\n      {\n        taxonid: 29,\n        taxonname: 'Betula',\n        author: 'Linnaeus, 1753',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32627,\n        publicationid: 10034,\n        publication: 'Ashburner, K., and H.A. McAllister. 2016. The genus Betula: a taxonomic revision of the birches. Reprint with additions. Botanical Magazine Monograph. Kew Publishing, Royal Botanic Gardens, Kew, Richmond, Surry, United Kingdom.'\n      },\n      {\n        taxonid: 344,\n        taxonname: 'Alnus incana',\n        author: '(Linnaeus) Moench, 1794',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 330,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      },\n      {\n        taxonid: 234,\n        taxonname: 'Polypodiaceae',\n        author: 'J. Presl & C. Presl, 1822',\n        ecolgroup: 'VACR',\n        status: 'extant',\n        highertaxonid: 9539,\n        publicationid: 9777,\n        publication: 'Pteridophyte Phylogeny Group. 2016. A community-derived classification for extant lycophytes and ferns. Journal of Systematics and Evolution 54(6):563-603. [DOI: 10.1111/jse.12229]'\n      },\n      {\n        taxonid: 92,\n        taxonname: 'Ericaceae',\n        author: 'Jussieu, 1789',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 848,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 417,\n        taxonname: 'Poaceae',\n        author: 'Barnhart, 1895',\n        ecolgroup: 'UPHE',\n        status: 'extant',\n        highertaxonid: 9108,\n        publicationid: 1490,\n        publication: 'Stevens, P.F. 2001 onwards. Angiosperm Phylogeny Website. Version 12, July 2012. http://www.mobot.org/MOBOT/research/APweb/.'\n      },\n      {\n        taxonid: 1237,\n        taxonname: 'Ostrya',\n        author: 'Scopoli, 1760',\n        ecolgroup: 'TRSH',\n        status: 'extant',\n        highertaxonid: 32626,\n        publicationid: 613,\n        publication: 'Flora of North America Editorial Committee. 1997. Flora of North America north of Mexico. Volume 3. Magnoliophyta: Magnoliidae and Hamamelidae. Oxford University Press, New York, New York, USA.'\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets/{datasetid}/taxa' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/taxonresponse' } }\n    },\n    description: 'Taxa'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a4a957d0-7cb4-455f-9cbb-90d240d7c616",
              "parentUUID": "3097ea80-57ab-446d-8521-68fe610d84ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a4a957d0-7cb4-455f-9cbb-90d240d7c616"
          ],
          "pending": [],
          "skipped": [],
          "duration": 139,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d27489b3-be3f-4617-9348-320e32cdffaa",
          "title": "GET /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 190,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1333:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "4fb5e001-97cb-4a9d-be8e-674ea21e5708",
              "parentUUID": "d27489b3-be3f-4617-9348-320e32cdffaa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4fb5e001-97cb-4a9d-be8e-674ea21e5708"
          ],
          "pending": [],
          "skipped": [],
          "duration": 190,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bfaa1350-6864-4e90-b0b7-0d73da9fa46d",
          "title": "GET /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/datasets_elc/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1085,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in your API spec\n\nres did not satisfy it because: data[0].site.datasets should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        site: {\n          siteid: 1,\n          sitename: '15/1',\n          sitedescription: 'Lake.',\n          sitenotes: null,\n          geography: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          altitude: 244,\n          collectionunitid: 1,\n          collectionunit: '15/1',\n          handle: '15-1',\n          unittype: 'Modern',\n          datasets: [\n            {\n              doi: [\n                '10.21233/9twd-s570',\n                '10.21233/n3159g',\n                '10.21233/n3f596'\n              ],\n              agerange: { units: null, ageold: null, ageyoung: null },\n              database: 'North American Pollen Database',\n              datasetid: 1,\n              datasetpi: [\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                },\n                {\n                  initials: 'K.J.',\n                  contactid: 40,\n                  firstname: 'Konrad J.',\n                  familyname: 'Gajewski',\n                  contactname: 'Gajewski, Konrad J.'\n                }\n              ],\n              datasettype: 'pollen surface sample',\n              datasetnotes: null\n            }\n          ]\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/datasets_elc/{datasetid}' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetselcresponse' }\n      }\n    },\n    description: 'A Neotoma datasets object suitable for the EarthLife Consortium API.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e038f827-5bcc-433a-9357-cce7cd2d5236",
              "parentUUID": "bfaa1350-6864-4e90-b0b7-0d73da9fa46d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e038f827-5bcc-433a-9357-cce7cd2d5236"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1085,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0db70fd6-d87b-4e4c-834b-021bcb1076fc",
          "title": "GET /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 161,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'embargo' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventtypes' },\n      { tablename: 'faciestypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosampleorigintypes' },\n      { tablename: 'sitestemp' },\n      { tablename: 'sysdiagrams' },\n      { tablename: 'variableunits' },\n      { tablename: 'sampleages' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'eventpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'rocktypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isometadata' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'lithology' },\n      { tablename: 'isostandards' },\n      { tablename: 'lithostrat' },\n      { tablename: 'isostratdata' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'relativeageunits' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'relativeages' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'keywords' },\n      { tablename: 'sampleanalysts' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'specimens' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'synonyms' },\n      { tablename: 'taphonomicsystemsdatasettypes' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'events' },\n      { tablename: 'tephras' },\n      { tablename: 'synonymy' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'taphonomicsystems' },\n      { tablename: 'taxaalthierarchytypes' },\n      { tablename: 'elementtypes' },\n      { tablename: 'variableelements' },\n      { tablename: 'fractiondated' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'geopaths' },\n      { tablename: 'elementportions' },\n      { tablename: 'relativechronology' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'geochronology' },\n      { tablename: 'taxonpaths' },\n      { tablename: 'specimendates' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'samplekeywords' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables' in your API spec\n\nres did not satisfy it because: data[0] should be string, data[1] should be string, data[2] should be string, data[3] should be string, data[4] should be string, data[5] should be string, data[6] should be string, data[7] should be string, data[8] should be string, data[9] should be string, data[10] should be string, data[11] should be string, data[12] should be string, data[13] should be string, data[14] should be string, data[15] should be string, data[16] should be string, data[17] should be string, data[18] should be string, data[19] should be string, data[20] should be string, data[21] should be string, data[22] should be string, data[23] should be string, data[24] should be string, data[25] should be string, data[26] should be string, data[27] should be string, data[28] should be string, data[29] should be string, data[30] should be string, data[31] should be string, data[32] should be string, data[33] should be string, data[34] should be string, data[35] should be string, data[36] should be string, data[37] should be string, data[38] should be string, data[39] should be string, data[40] should be string, data[41] should be string, data[42] should be string, data[43] should be string, data[44] should be string, data[45] should be string, data[46] should be string, data[47] should be string, data[48] should be string, data[49] should be string, data[50] should be string, data[51] should be string, data[52] should be string, data[53] should be string, data[54] should be string, data[55] should be string, data[56] should be string, data[57] should be string, data[58] should be string, data[59] should be string, data[60] should be string, data[61] should be string, data[62] should be string, data[63] should be string, data[64] should be string, data[65] should be string, data[66] should be string, data[67] should be string, data[68] should be string, data[69] should be string, data[70] should be string, data[71] should be string, data[72] should be string, data[73] should be string, data[74] should be string, data[75] should be string, data[76] should be string, data[77] should be string, data[78] should be string, data[79] should be string, data[80] should be string, data[81] should be string, data[82] should be string, data[83] should be string, data[84] should be string, data[85] should be string, data[86] should be string, data[87] should be string, data[88] should be string, data[89] should be string, data[90] should be string, data[91] should be string, data[92] should be string, data[93] should be string, data[94] should be string, data[95] should be string, data[96] should be string, data[97] should be string, data[98] should be string, data[99] should be string, data[100] should be string, data[101] should be string, data[102] should be string, data[103] should be string, data[104] should be string, data[105] should be string, data[106] should be string, data[107] should be string, data[108] should be string, data[109] should be string, data[110] should be string, data[111] should be string, data[112] should be string, data[113] should be string, data[114] should be string, data[115] should be string, data[116] should be string, data[117] should be string, data[118] should be string, data[119] should be string, data[120] should be string, data[121] should be string, data[122] should be string, data[123] should be string, data[124] should be string, data[125] should be string, data[126] should be string, data[127] should be string, data[128] should be string, data[129] should be string, data[130] should be string, data[131] should be string, data[132] should be string, data[133] should be string, data[134] should be string, data[135] should be string, data[136] should be string, data[137] should be string, data[138] should be string, data[139] should be string, data[140] should be string, data[141] should be string, data[142] should be string, data[143] should be string, data[144] should be string, data[145] should be string, data[146] should be string, data[147] should be string, data[148] should be string, data[149] should be string\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'embargo' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventtypes' },\n      { tablename: 'faciestypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosampleorigintypes' },\n      { tablename: 'sitestemp' },\n      { tablename: 'sysdiagrams' },\n      { tablename: 'variableunits' },\n      { tablename: 'sampleages' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'eventpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'rocktypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isometadata' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'lithology' },\n      { tablename: 'isostandards' },\n      { tablename: 'lithostrat' },\n      { tablename: 'isostratdata' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'relativeageunits' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'relativeages' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'keywords' },\n      { tablename: 'sampleanalysts' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'specimens' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'synonyms' },\n      { tablename: 'taphonomicsystemsdatasettypes' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'events' },\n      { tablename: 'tephras' },\n      { tablename: 'synonymy' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'taphonomicsystems' },\n      { tablename: 'taxaalthierarchytypes' },\n      { tablename: 'elementtypes' },\n      { tablename: 'variableelements' },\n      { tablename: 'fractiondated' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'geopaths' },\n      { tablename: 'elementportions' },\n      { tablename: 'relativechronology' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'geochronology' },\n      { tablename: 'taxonpaths' },\n      { tablename: 'specimendates' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'samplekeywords' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/dbtablenameresponse' }\n      }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "a09abc95-ffa0-4e7f-afc8-263a7155ea00",
              "parentUUID": "0db70fd6-d87b-4e4c-834b-021bcb1076fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a09abc95-ffa0-4e7f-afc8-263a7155ea00"
          ],
          "pending": [],
          "skipped": [],
          "duration": 161,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3b251492-c207-4cac-8e61-4cb569956be9",
          "title": "GET /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/dbtables/{table} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 125,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'embargo' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventtypes' },\n      { tablename: 'faciestypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosampleorigintypes' },\n      { tablename: 'sitestemp' },\n      { tablename: 'sysdiagrams' },\n      { tablename: 'variableunits' },\n      { tablename: 'sampleages' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'eventpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'rocktypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isometadata' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'lithology' },\n      { tablename: 'isostandards' },\n      { tablename: 'lithostrat' },\n      { tablename: 'isostratdata' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'relativeageunits' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'relativeages' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'keywords' },\n      { tablename: 'sampleanalysts' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'specimens' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'synonyms' },\n      { tablename: 'taphonomicsystemsdatasettypes' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'events' },\n      { tablename: 'tephras' },\n      { tablename: 'synonymy' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'taphonomicsystems' },\n      { tablename: 'taxaalthierarchytypes' },\n      { tablename: 'elementtypes' },\n      { tablename: 'variableelements' },\n      { tablename: 'fractiondated' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'geopaths' },\n      { tablename: 'elementportions' },\n      { tablename: 'relativechronology' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'geochronology' },\n      { tablename: 'taxonpaths' },\n      { tablename: 'specimendates' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'samplekeywords' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      { tablename: 'embargo' },\n      { tablename: 'externalpublications' },\n      { tablename: 'externaldatabases' },\n      { tablename: 'eventchronology' },\n      { tablename: 'eventtypes' },\n      { tablename: 'faciestypes' },\n      { tablename: 'isosampleintrosystemtypes' },\n      { tablename: 'isosampleorigintypes' },\n      { tablename: 'sitestemp' },\n      { tablename: 'sysdiagrams' },\n      { tablename: 'variableunits' },\n      { tablename: 'sampleages' },\n      { tablename: 'accumulationrates' },\n      { tablename: 'elementdatasettaxagroups' },\n      { tablename: 'elementtaxagroupportions' },\n      { tablename: 'ecolgroups' },\n      { tablename: 'elementtaxagroupsymmetries' },\n      { tablename: 'ecolgrouptypes' },\n      { tablename: 'ecolsettypes' },\n      { tablename: 'elementtaxagroupmaturities' },\n      { tablename: 'geochroncontrols' },\n      { tablename: 'elementtaxagroups' },\n      { tablename: 'geochrontypes' },\n      { tablename: 'eventpublications' },\n      { tablename: 'externaltaxa' },\n      { tablename: 'formtaxa' },\n      { tablename: 'isoinstrumentationtypes' },\n      { tablename: 'geochronpublications' },\n      { tablename: 'isomatanalsubstrate' },\n      { tablename: 'isobiomarkerbandtypes' },\n      { tablename: 'rocktypes' },\n      { tablename: 'isobiomarkertypes' },\n      { tablename: 'isoinstrumentation' },\n      { tablename: 'isosubstratetypes' },\n      { tablename: 'isospecimendata' },\n      { tablename: 'isomaterialanalyzedtypes' },\n      { tablename: 'isosrmetadata' },\n      { tablename: 'isometadata' },\n      { tablename: 'isostandardtypes' },\n      { tablename: 'isopretreatmenttypes' },\n      { tablename: 'isosamplepretreatments' },\n      { tablename: 'lithostratunits' },\n      { tablename: 'lakeparameters' },\n      { tablename: 'isoscaletypes' },\n      { tablename: 'lithology' },\n      { tablename: 'isostandards' },\n      { tablename: 'lithostrat' },\n      { tablename: 'isostratdata' },\n      { tablename: 'isovariablescaletypes' },\n      { tablename: 'radiocarbonmethods' },\n      { tablename: 'relativeageunits' },\n      { tablename: 'relativeagepublications' },\n      { tablename: 'publicationeditors' },\n      { tablename: 'repositoryspecimens' },\n      { tablename: 'relativeages' },\n      { tablename: 'publicationtranslators' },\n      { tablename: 'relativeagescales' },\n      { tablename: 'radiocarbon' },\n      { tablename: 'keywords' },\n      { tablename: 'sampleanalysts' },\n      { tablename: 'siteimages' },\n      { tablename: 'specimensextypes' },\n      { tablename: 'repositoryinstitutions' },\n      { tablename: 'specimendatescal' },\n      { tablename: 'specimendomesticstatustypes' },\n      { tablename: 'specimengenbank' },\n      { tablename: 'specimens' },\n      { tablename: 'specimentaphonomy' },\n      { tablename: 'summarydatataphonomy' },\n      { tablename: 'synonyms' },\n      { tablename: 'taphonomicsystemsdatasettypes' },\n      { tablename: 'taxagrouptypes' },\n      { tablename: 'taphonomictypes' },\n      { tablename: 'events' },\n      { tablename: 'tephras' },\n      { tablename: 'synonymy' },\n      { tablename: 'taxaalthierarchy' },\n      { tablename: 'taphonomicsystems' },\n      { tablename: 'taxaalthierarchytypes' },\n      { tablename: 'elementtypes' },\n      { tablename: 'variableelements' },\n      { tablename: 'fractiondated' },\n      { tablename: 'elementmaturities' },\n      { tablename: 'geopaths' },\n      { tablename: 'elementportions' },\n      { tablename: 'relativechronology' },\n      { tablename: 'elementsymmetries' },\n      { tablename: 'variablecontexts' },\n      { tablename: 'geochronology' },\n      { tablename: 'taxonpaths' },\n      { tablename: 'specimendates' },\n      { tablename: 'agetypes' },\n      { tablename: 'geopoliticalunits' },\n      { tablename: 'lakeparametertypes' },\n      { tablename: 'publications' },\n      { tablename: 'publicationtypes' },\n      { tablename: 'synonymtypes' },\n      { tablename: 'unitsdatasettypes' },\n      { tablename: 'variables' },\n      { tablename: 'samplekeywords' },\n      ... 50 more items\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/dbtables/{table}' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/dbtables' } }\n    },\n    description: 'Returned table.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e464b643-1bb2-40dd-822f-77a7531a410a",
              "parentUUID": "3b251492-c207-4cac-8e61-4cb569956be9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e464b643-1bb2-40dd-822f-77a7531a410a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3c54675e-ae99-4356-b0c5-cdeb47df4e76",
          "title": "GET /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/downloads/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 824,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "2b074807-e0ab-465b-b9dd-3f07dec2dba6",
              "parentUUID": "3c54675e-ae99-4356-b0c5-cdeb47df4e76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b074807-e0ab-465b-b9dd-3f07dec2dba6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 824,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2de15e80-22cb-482d-b1e1-36d182a9c7aa",
          "title": "GET /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/frozen/{datasetid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "c84d261a-6408-461a-9c36-5108db5ead69",
              "parentUUID": "2de15e80-22cb-482d-b1e1-36d182a9c7aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c84d261a-6408-461a-9c36-5108db5ead69"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 173,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "87edbd2c-803d-46ac-b879-90aa1382c7e4",
          "title": "GET /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 26,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy a '200' response defined for endpoint 'GET /api-docs/' in your API spec\n\nres had request path '/api-docs/', but your API spec has no matching path\n\nPaths found in API spec: /v1.5/apps/DatasetTypes, /v1.5/apps/TaxaInDatasets, /v1.5/apps/collectionTypes, /v1.5/data/contacts/{contactid}, /v1.5/data/datasets/{datasetid}, /v1.5/data/downloads/{datasetid}, /v1.5/data/geopoliticalunits, /v1.5/data/geopoliticalunits/{gpid}, /v1.5/data/occurrence/{occurrenceid}, /v1.5/data/sites/{siteid}, /v1.5/dbtables/{table}, /v2.0/apps/authorpis, /v2.0/apps/collectiontypes, /v2.0/apps/datasettypes, /v2.0/apps/depositionalenvironments/root, /v2.0/apps/keywords, /v2.0/apps/taphonomysystems, /v2.0/apps/taxagrouptypes, /v2.0/apps/taxaindatasets, /v2.0/data/chronologies/{chronid}, /v2.0/data/contacts, /v2.0/data/contacts/{contactid}, /v2.0/data/contacts/{contactid}/sites, /v2.0/data/datasets, /v2.0/data/datasets/db, /v2.0/data/datasets/{datasetid}, /v2.0/data/datasets/{datasetid}/chronologies, /v2.0/data/datasets/{datasetid}/contacts, /v2.0/data/datasets/{datasetid}/doi, /v2.0/data/datasets/{datasetid}/lithology, /v2.0/data/datasets/{datasetid}/publications, /v2.0/data/datasets/{datasetid}/sites, /v2.0/data/datasets/{datasetid}/taxa, /v2.0/data/datasets_elc, /v2.0/data/datasets_elc/{datasetid}, /v2.0/data/dbtables, /v2.0/data/dbtables/{table}, /v2.0/data/downloads/{datasetid}, /v2.0/data/frozen/{datasetid}, /v2.0/data/geopoliticalunits, /v2.0/data/geopoliticalunits/{gpid}, /v2.0/data/geopoliticalunits/{gpid}/datasets, /v2.0/data/geopoliticalunits/{gpid}/sites, /v2.0/data/occurrences, /v2.0/data/occurrences/{occurrenceid}, /v2.0/data/pollen, /v2.0/data/pollen/{id}, /v2.0/data/publications, /v2.0/data/publications/{publicationid}, /v2.0/data/sites, /v2.0/data/sites/{siteid}, /v2.0/data/sites/{siteid}/chronologies, /v2.0/data/sites/{siteid}/contacts, /v2.0/data/sites/{siteid}/datasets, /v2.0/data/sites/{siteid}/datasets_elc, /v2.0/data/sites/{siteid}/geopoliticalunits, /v2.0/data/summary/dsdbmonth, /v2.0/data/summary/dstypemonth, /v2.0/data/summary/rawbymonth, /v2.0/data/taxa, /v2.0/data/taxa/{taxonid}, /v2.0/data/taxa/{taxonid}/occurrences, /v2.0/dbtables/table, /v2.0/dbtables/tablenames\n\n'/api-docs/' matches servers [ 'https://api.neotomadb.org/', 'https://api-dev.neotomadb.org/' ] but no <server/endpointPath> combinations\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "40dc36f2-ac7a-4077-ad5b-3327dff12692",
              "parentUUID": "87edbd2c-803d-46ac-b879-90aa1382c7e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "40dc36f2-ac7a-4077-ad5b-3327dff12692"
          ],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "db90bcb3-be49-4b73-a7cb-d492a8cea1e4",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "67beb2a3-e603-4f5a-919f-05b0ceefc545",
              "parentUUID": "db90bcb3-be49-4b73-a7cb-d492a8cea1e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "67beb2a3-e603-4f5a-919f-05b0ceefc545"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2eb876ce-0bd5-432a-8340-bdc985e8cb5a",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 843,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: { body: { status: 'success', data: [], message: 'Retrieved results' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in your API spec\n\nres did not satisfy it because: data should be object\n\nres contained: { body: { status: 'success', data: [], message: 'Retrieved results' } }\n\nThe '200' response defined for endpoint 'GET /v2.0/data/geopoliticalunits/{gpid}/datasets' in API spec: {\n  '200': {\n    content: {\n      'application/json': {\n        schema: { '$ref': '#/components/schemas/datasetresponsev2_0' }\n      }\n    },\n    description: 'An array of datasets.'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "e073bb99-35fa-41c8-82bd-76b725606654",
              "parentUUID": "2eb876ce-0bd5-432a-8340-bdc985e8cb5a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e073bb99-35fa-41c8-82bd-76b725606654"
          ],
          "pending": [],
          "skipped": [],
          "duration": 843,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f3047391-742d-4a77-bf7c-38e6d2bede91",
          "title": "GET /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/geopoliticalunits/{gpid}/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "d835398e-e854-4900-a7e4-10f1fcae2c20",
              "parentUUID": "f3047391-742d-4a77-bf7c-38e6d2bede91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d835398e-e854-4900-a7e4-10f1fcae2c20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 166,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "80ed3dc8-ffad-4c11-affd-70586869a81f",
          "title": "GET /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 178,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}",
                "estack": "AssertionError: expected res to satisfy API spec\n\nexpected res to satisfy the '200' response defined for endpoint 'GET /v2.0/data/occurrences' in your API spec\n\nres did not satisfy it because: data[0].sample should be integer, data[1].sample should be integer, data[2].sample should be integer, data[3].sample should be integer, data[4].sample should be integer, data[5].sample should be integer, data[6].sample should be integer, data[7].sample should be integer, data[8].sample should be integer, data[9].sample should be integer, data[10].sample should be integer, data[11].sample should be integer, data[12].sample should be integer, data[13].sample should be integer, data[14].sample should be integer, data[15].sample should be integer, data[16].sample should be integer, data[17].sample should be integer, data[18].sample should be integer, data[19].sample should be integer, data[20].sample should be integer, data[21].sample should be integer, data[22].sample should be integer, data[23].sample should be integer, data[24].sample should be integer\n\nres contained: {\n  body: {\n    status: 'success',\n    data: [\n      {\n        occid: 1729801,\n        sample: {\n          taxonid: 25,\n          taxonname: 'Artemisia',\n          value: 9,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729802,\n        sample: {\n          taxonid: 29,\n          taxonname: 'Betula',\n          value: 43,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729803,\n        sample: {\n          taxonid: 72,\n          taxonname: 'Cupressaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729804,\n        sample: {\n          taxonid: 74,\n          taxonname: 'Cyperaceae',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729805,\n        sample: {\n          taxonid: 92,\n          taxonname: 'Ericaceae',\n          value: 4,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729806,\n        sample: {\n          taxonid: 95,\n          taxonname: 'Eucalyptus spike',\n          value: 116,\n          sampleunits: 'number'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729807,\n        sample: {\n          taxonid: 153,\n          taxonname: 'Larix',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729808,\n        sample: {\n          taxonid: 166,\n          taxonname: 'Lycopodiaceae undiff.',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729809,\n        sample: {\n          taxonid: 173,\n          taxonname: 'Huperzia lucidula',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729810,\n        sample: {\n          taxonid: 174,\n          taxonname: 'Lycopodium obscurum',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729811,\n        sample: {\n          taxonid: 202,\n          taxonname: 'Pediastrum',\n          value: 5,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729812,\n        sample: {\n          taxonid: 210,\n          taxonname: 'Picea',\n          value: 398,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729813,\n        sample: {\n          taxonid: 212,\n          taxonname: 'Pinus subg. Pinus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729814,\n        sample: {\n          taxonid: 216,\n          taxonname: 'Pinus undiff.',\n          value: 15,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729815,\n        sample: {\n          taxonid: 234,\n          taxonname: 'Polypodiaceae',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729816,\n        sample: {\n          taxonid: 251,\n          taxonname: 'Quercus',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729817,\n        sample: {\n          taxonid: 294,\n          taxonname: 'Sphagnum',\n          value: 61,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729818,\n        sample: {\n          taxonid: 307,\n          taxonname: 'Asteroideae undiff.',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729819,\n        sample: {\n          taxonid: 310,\n          taxonname: 'Ulmus',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729820,\n        sample: {\n          taxonid: 312,\n          taxonname: 'Indeterminable',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729821,\n        sample: {\n          taxonid: 313,\n          taxonname: 'Unknown',\n          value: 2,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729822,\n        sample: {\n          taxonid: 344,\n          taxonname: 'Alnus incana',\n          value: 7,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729823,\n        sample: {\n          taxonid: 345,\n          taxonname: 'Ambrosia',\n          value: 10,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729824,\n        sample: {\n          taxonid: 353,\n          taxonname: 'Alnus viridis',\n          value: 114,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      },\n      {\n        occid: 1729825,\n        sample: {\n          taxonid: 383,\n          taxonname: 'Myrica',\n          value: 1,\n          sampleunits: 'NISP'\n        },\n        age: { age: null, ageolder: null, ageyounger: null },\n        site: {\n          datasetid: 1,\n          siteid: 1,\n          sitename: '15/1',\n          altitude: 244,\n          location: '{\"type\":\"Point\",\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}},\"coordinates\":[-75.25,55.09167]}',\n          datasettype: 'pollen surface sample',\n          database: 'North American Pollen Database'\n        }\n      }\n    ],\n    message: 'Retrieved all tables'\n  }\n}\n\nThe '200' response defined for endpoint 'GET /v2.0/data/occurrences' in API spec: {\n  '200': {\n    content: {\n      'application/json': { schema: { '$ref': '#/components/schemas/occurrence' } }\n    },\n    description: 'occurrence'\n  }\n}\n    at Context.<anonymous> (test/responsevalidate.js:34:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "28cfbd0c-3a8d-48b1-aab5-db7e738ed20e",
              "parentUUID": "80ed3dc8-ffad-4c11-affd-70586869a81f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "28cfbd0c-3a8d-48b1-aab5-db7e738ed20e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 178,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "564fba1d-b3fa-4f87-99bc-993b0daffac3",
          "title": "GET /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/occurrences/{occurrenceid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "0bf04403-9a52-4997-b7c0-6d5eb735d01d",
              "parentUUID": "564fba1d-b3fa-4f87-99bc-993b0daffac3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0bf04403-9a52-4997-b7c0-6d5eb735d01d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "479ebede-0c40-4a57-b6b7-1ec952275a98",
          "title": "GET /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "6c8d0634-3c99-4816-acc2-61c236497d10",
              "parentUUID": "479ebede-0c40-4a57-b6b7-1ec952275a98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c8d0634-3c99-4816-acc2-61c236497d10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 41,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6ebba714-3131-4c0e-8cdb-f2b8683d276f",
          "title": "GET /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/pollen/{id} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "149b1a3f-e75d-49ef-b07a-6d61743af3ad",
              "parentUUID": "6ebba714-3131-4c0e-8cdb-f2b8683d276f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "149b1a3f-e75d-49ef-b07a-6d61743af3ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 43,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4464e647-55c1-4c16-acff-f31079cfc26b",
          "title": "GET /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 857,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "51c1f94b-a9b1-40ae-9d0e-c65e591770af",
              "parentUUID": "4464e647-55c1-4c16-acff-f31079cfc26b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51c1f94b-a9b1-40ae-9d0e-c65e591770af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 857,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0b1f13ee-500a-49e9-ac96-e878fd197071",
          "title": "GET /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/publications/{publicationid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9b2cc096-d686-4524-9642-1358c82fe60c",
              "parentUUID": "0b1f13ee-500a-49e9-ac96-e878fd197071",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b2cc096-d686-4524-9642-1358c82fe60c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a06d36e1-1e6d-487e-b873-ef08d7f0380e",
          "title": "GET /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 376,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "fd7527f1-dd12-46a6-b244-2c07c5534d0a",
              "parentUUID": "a06d36e1-1e6d-487e-b873-ef08d7f0380e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd7527f1-dd12-46a6-b244-2c07c5534d0a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 376,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2c43bdfa-7d30-4f80-99a0-a8e965171b26",
          "title": "GET /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "32ec5f91-0fc3-427d-a178-0be1ed74d339",
              "parentUUID": "2c43bdfa-7d30-4f80-99a0-a8e965171b26",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32ec5f91-0fc3-427d-a178-0be1ed74d339"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "13075dc0-46a2-4759-b2eb-e3ce8de7159c",
          "title": "GET /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/chronologies should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9f3b3094-9f37-494b-86ea-14ed9756becf",
              "parentUUID": "13075dc0-46a2-4759-b2eb-e3ce8de7159c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f3b3094-9f37-494b-86ea-14ed9756becf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 189,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7b306a95-65fa-41c7-981e-9e7cf2cd8236",
          "title": "GET /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/contacts should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "12ef80c7-38f2-4e3e-a485-9e8d343d0e7e",
              "parentUUID": "7b306a95-65fa-41c7-981e-9e7cf2cd8236",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "12ef80c7-38f2-4e3e-a485-9e8d343d0e7e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7c1d3da1-1dc0-4232-b6c5-a842d69fc008",
          "title": "GET /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 1213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "f98ec727-6377-4970-ba37-ec4accfcf68f",
              "parentUUID": "7c1d3da1-1dc0-4232-b6c5-a842d69fc008",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f98ec727-6377-4970-ba37-ec4accfcf68f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1213,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "058de36b-b06e-4740-99ff-d012b67460be",
          "title": "GET /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/datasets_elc should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 777,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "5f43019d-c736-4b7f-9efb-b7e17aff27a0",
              "parentUUID": "058de36b-b06e-4740-99ff-d012b67460be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f43019d-c736-4b7f-9efb-b7e17aff27a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 777,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aea3bb79-0f71-40f3-a0c2-96a4088887c8",
          "title": "GET /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/sites/{siteid}/geopoliticalunits should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "ebec1e65-d10c-4896-99e5-436d8aaa2502",
              "parentUUID": "aea3bb79-0f71-40f3-a0c2-96a4088887c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ebec1e65-d10c-4896-99e5-436d8aaa2502"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "39033e2e-85e2-40e7-abca-e76c25117291",
          "title": "GET /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dsdbmonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bbbdbea0-15ce-45bf-b436-a524ee4ad311",
              "parentUUID": "39033e2e-85e2-40e7-abca-e76c25117291",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbbdbea0-15ce-45bf-b436-a524ee4ad311"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 273,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2d12ba3e-2b5b-42a4-8fe7-e2ce9d87f0e3",
          "title": "GET /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/dstypemonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 264,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "bb1bbd64-0de9-4dcd-8de8-9fb32bcf2495",
              "parentUUID": "2d12ba3e-2b5b-42a4-8fe7-e2ce9d87f0e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bb1bbd64-0de9-4dcd-8de8-9fb32bcf2495"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 264,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cafb6b70-2a28-4574-9a6b-fe5d605e4174",
          "title": "GET /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/summary/rawbymonth should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 4943,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "e74d1f12-07b1-4829-9110-9867bfa4a73c",
              "parentUUID": "cafb6b70-2a28-4574-9a6b-fe5d605e4174",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e74d1f12-07b1-4829-9110-9867bfa4a73c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4943,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "80660aa4-9483-4ab1-bdca-a009533efc2a",
          "title": "GET /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "1d2b0b65-a97e-4c76-92ea-4db859b22119",
              "parentUUID": "80660aa4-9483-4ab1-bdca-a009533efc2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d2b0b65-a97e-4c76-92ea-4db859b22119"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "029cdc2b-9963-48d4-a62c-850e9065116a",
          "title": "GET /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid} should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "8c0d5de6-7bd6-4811-841e-cd6c88a901ed",
              "parentUUID": "029cdc2b-9963-48d4-a62c-850e9065116a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c0d5de6-7bd6-4811-841e-cd6c88a901ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 130,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "df8132f1-9579-48e3-b138-c8091fc56cc6",
          "title": "GET /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/data/taxa/{taxonid}/occurrences should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 38600,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "9476f3ff-6de8-4e2b-a589-aab54000fb41",
              "parentUUID": "df8132f1-9579-48e3-b138-c8091fc56cc6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9476f3ff-6de8-4e2b-a589-aab54000fb41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38600,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0da21118-616c-4dbc-a49a-7a5664a516af",
          "title": "GET /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/table should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 28,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {
                "message": "Error: Request failed with status code 500",
                "estack": "Error: Request failed with status code 500\n    at createError (node_modules/axios/lib/core/createError.js:16:15)\n    at settle (node_modules/axios/lib/core/settle.js:17:12)\n    at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)\n    at endReadableNT (internal/streams/readable.js:1333:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                "diff": null
              },
              "uuid": "96c2ef20-4589-4408-b1a2-bd045c6f6d24",
              "parentUUID": "0da21118-616c-4dbc-a49a-7a5664a516af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "96c2ef20-4589-4408-b1a2-bd045c6f6d24"
          ],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "97215dca-cef1-4caa-9b42-552dd89c5d83",
          "title": "GET /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/responsevalidate.js",
          "file": "/test/responsevalidate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should satisfy OpenAPI spec",
              "fullTitle": "GET /v2.0/dbtables/tablenames should satisfy OpenAPI spec",
              "timedOut": false,
              "duration": 512,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get an HTTP response from your server (e.g. using axios)\nconst res = await axios.get('http://localhost:3005' + apipath)\nexpect(res.status).to.equal(200);\nexpect(res).to.satisfyApiSpec;",
              "err": {},
              "uuid": "066b56e7-b482-44c2-8190-be56e021d5fc",
              "parentUUID": "97215dca-cef1-4caa-9b42-552dd89c5d83",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "066b56e7-b482-44c2-8190-be56e021d5fc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 512,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "91191b79-d3b4-4fad-b280-40bb18fed592",
          "title": "Get site data any number of ways:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/sites.js",
          "file": "/test/sites.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get site by singular id & return same id:",
              "fullTitle": "Get site data any number of ways: Get site by singular id & return same id:",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/12')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body['data'][0]['siteid'] === 12 & Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "71e5f24a-e4d4-44ab-8775-9fc6a65f532f",
              "parentUUID": "91191b79-d3b4-4fad-b280-40bb18fed592",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by altitude:",
              "fullTitle": "Get site data any number of ways: Get site by altitude:",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=5000&altmin=3000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(Object.keys(res.body['data'][0]).length > 0);\n    done();\n  });",
              "err": {},
              "uuid": "97e182e2-b110-4e34-93fe-c6a0e3b65786",
              "parentUUID": "91191b79-d3b4-4fad-b280-40bb18fed592",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by flipping altitudes:",
              "fullTitle": "Get site data any number of ways: Break sites by flipping altitudes:",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/?altmax=3000&altmin=5000')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body.status === 'failure');\n    done();\n  });",
              "err": {},
              "uuid": "90aa233b-48e4-465c-bf05-7553d88a6c10",
              "parentUUID": "91191b79-d3b4-4fad-b280-40bb18fed592",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Break sites by passing invalid siteid:",
              "fullTitle": "Get site data any number of ways: Break sites by passing invalid siteid:",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites/abcd')\n  .set('Accept', 'application/json')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(500, done);\n    done();\n  });",
              "err": {},
              "uuid": "3ba05d49-1ab2-4f25-9634-83f8dc533fe8",
              "parentUUID": "91191b79-d3b4-4fad-b280-40bb18fed592",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site by contact information for multiple authors:",
              "fullTitle": "Get site data any number of ways: Get site by contact information for multiple authors:",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/contacts/12,13/sites')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length === 2;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "ef641906-5c47-40c6-8a49-69fc25cc4310",
              "parentUUID": "91191b79-d3b4-4fad-b280-40bb18fed592",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "71e5f24a-e4d4-44ab-8775-9fc6a65f532f",
            "97e182e2-b110-4e34-93fe-c6a0e3b65786",
            "90aa233b-48e4-465c-bf05-7553d88a6c10",
            "3ba05d49-1ab2-4f25-9634-83f8dc533fe8",
            "ef641906-5c47-40c6-8a49-69fc25cc4310"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 527,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dc3409ae-4e74-4ee9-9af2-8b042052405d",
          "title": "Get Neotoma data with geoJSON extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get occurrence data using a simple geoJSON:",
              "timedOut": false,
              "duration": 495,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "13077ccb-969a-49d8-a2fe-07f47fb49f2d",
              "parentUUID": "dc3409ae-4e74-4ee9-9af2-8b042052405d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get site data using a simple geoJSON:",
              "timedOut": false,
              "duration": 262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "3e486b67-ec4d-4f1d-b9b9-37eecfbb9194",
              "parentUUID": "dc3409ae-4e74-4ee9-9af2-8b042052405d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple geoJSON:",
              "fullTitle": "Get Neotoma data with geoJSON extents: Get dataset data using a simple geoJSON:",
              "timedOut": false,
              "duration": 1404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc={\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-103.497447,41.001635],[-102.865784,41.001988],[-102.556789,41.002219],[-102.051614,41.002377],[-102.051725,40.537839],[-102.051744,40.003078],[-102.050422,39.646048],[-102.048449,39.303138],[-102.045388,38.813392],[-102.045324,38.453647],[-102.044644,38.045532],[-102.041574,37.680436],[-102.041974,37.352613],[-102.04224,36.993083],[-102.698142,36.995149],[-102.814616,37.000783],[-103.002199,37.000104],[-103.733247,36.998016],[-104.338833,36.993535],[-105.000554,36.993264],[-105.1208,36.995428],[-105.62747,36.995679],[-106.201469,36.994122],[-106.869796,36.992426],[-106.877292,37.000139],[-107.420913,37.000005],[-108.000623,37.000001],[-108.249358,36.999015],[-108.620309,36.999287],[-109.045223,36.999084],[-109.04581,37.374993],[-109.041865,37.530726],[-109.041058,37.907236],[-109.041762,38.16469],[-109.060062,38.275489],[-109.059541,38.719888],[-109.054189,38.874984],[-109.051512,39.126095],[-109.051363,39.497674],[-109.050615,39.87497],[-109.050946,40.444368],[-109.048044,40.619231],[-109.050076,41.000659],[-108.884138,41.000094],[-108.250649,41.000114],[-107.625624,41.002124],[-106.857773,41.002663],[-106.453859,41.002057],[-106.217573,40.997734],[-105.730421,40.996886],[-105.277138,40.998173],[-104.855273,40.998048],[-104.675999,41.000957],[-104.053249,41.001406]]]}')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "cb06a6cd-348c-42ad-885a-08133d2906f8",
              "parentUUID": "dc3409ae-4e74-4ee9-9af2-8b042052405d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13077ccb-969a-49d8-a2fe-07f47fb49f2d",
            "3e486b67-ec4d-4f1d-b9b9-37eecfbb9194",
            "cb06a6cd-348c-42ad-885a-08133d2906f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2161,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e0871fb6-0504-4139-ab34-4e51ab0e4a50",
          "title": "Get Neotoma data with WKT extents:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/spatial.js",
          "file": "/test/spatial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get occurrence data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get occurrence data using a simple WKT:",
              "timedOut": false,
              "duration": 649,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/occurrences?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "5db38be1-3afb-44be-a1d3-be54f463187c",
              "parentUUID": "e0871fb6-0504-4139-ab34-4e51ab0e4a50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get site data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get site data using a simple WKT:",
              "timedOut": false,
              "duration": 308,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/sites?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "7f0d72a3-4bd6-4835-beb9-575468b7fa6c",
              "parentUUID": "e0871fb6-0504-4139-ab34-4e51ab0e4a50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1316,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((-104.053249 41.001406,-103.497447 41.001635,-102.865784 41.001988,-102.556789 41.002219,-102.051614 41.002377,-102.051725 40.537839,-102.051744 40.003078,-102.050422 39.646048,-102.048449 39.303138,-102.045388 38.813392,-102.045324 38.453647,-102.044644 38.045532,-102.041574 37.680436,-102.041974 37.352613,-102.04224 36.993083,-102.698142 36.995149,-102.814616 37.000783,-103.002199 37.000104,-103.733247 36.998016,-104.338833 36.993535,-105.000554 36.993264,-105.1208 36.995428,-105.62747 36.995679,-106.201469 36.994122,-106.869796 36.992426,-106.877292 37.000139,-107.420913 37.000005,-108.000623 37.000001,-108.249358 36.999015,-108.620309 36.999287,-109.045223 36.999084,-109.04581 37.374993,-109.041865 37.530726,-109.041058 37.907236,-109.041762 38.16469,-109.060062 38.275489,-109.059541 38.719888,-109.054189 38.874984,-109.051512 39.126095,-109.051363 39.497674,-109.050615 39.87497,-109.050946 40.444368,-109.048044 40.619231,-109.050076 41.000659,-108.884138 41.000094,-108.250649 41.000114,-107.625624 41.002124,-106.857773 41.002663,-106.453859 41.002057,-106.217573 40.997734,-105.730421 40.996886,-105.277138 40.998173,-104.855273 40.998048,-104.675999 41.000957,-104.053249 41.001406))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "e0533b45-63a0-41df-9302-eb38ff86edb2",
              "parentUUID": "e0871fb6-0504-4139-ab34-4e51ab0e4a50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get dataset data using a simple WKT:",
              "fullTitle": "Get Neotoma data with WKT extents: Get dataset data using a simple WKT:",
              "timedOut": false,
              "duration": 1534,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/datasets?loc=POLYGON((139.8%20-33.7,%20150.1%20-33.7,%20150.1%20-39.1,%20139.8%20-39.1,%20139.8%20-33.7))')\n  .set('Accept', 'application/json')\n  .expect(function (res) {\n    return Object.keys(res.body['data'][0]).length > 0;\n  })\n  .expect(function (res) {\n    return res.body['data'][0]['occurrence'] === 12;\n  })\n  .expect(200, done);",
              "err": {},
              "uuid": "92c6d595-b63c-402d-b623-535f1275035d",
              "parentUUID": "e0871fb6-0504-4139-ab34-4e51ab0e4a50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5db38be1-3afb-44be-a1d3-be54f463187c",
            "7f0d72a3-4bd6-4835-beb9-575468b7fa6c",
            "e0533b45-63a0-41df-9302-eb38ff86edb2",
            "92c6d595-b63c-402d-b623-535f1275035d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3807,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
          "title": "Get taxon data:",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/taxa.js",
          "file": "/test/taxa.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "An empty query returns the first 25 taxa.",
              "fullTitle": "Get taxon data: An empty query returns the first 25 taxa.",
              "timedOut": false,
              "duration": 288,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/')\n  .set('Accept', 'application/json')\n  .expect(200, done);",
              "err": {},
              "uuid": "85dfc9dc-35c0-41ff-864d-1b6977809a94",
              "parentUUID": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A single taxon should be returned by id:",
              "fullTitle": "Get taxon data: A single taxon should be returned by id:",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/12')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 12);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "ab515b58-62bb-4b27-a4e2-382833f9301f",
              "parentUUID": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should be case insensitive:",
              "fullTitle": "Get taxon data: Taxon queries should be case insensitive:",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "fef47ab5-0347-4dc8-9800-f7332daebed3",
              "parentUUID": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 164,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "b4eb92d5-5aef-4a0d-aec6-70547c1286a9",
              "parentUUID": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hierarchical taxon queries should accept comma separated lists:",
              "fullTitle": "Get taxon data: Hierarchical taxon queries should accept comma separated lists:",
              "timedOut": false,
              "duration": 426,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abies,picea&lower=true')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "9d141bbe-aefa-4658-ace8-ce562b59aa29",
              "parentUUID": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Taxon queries should accept `*` as a wildcard:",
              "fullTitle": "Get taxon data: Taxon queries should accept `*` as a wildcard:",
              "timedOut": false,
              "duration": 172,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=abie*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data[0]['taxonid'], 1);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "77a714e2-719c-400f-8953-0a308f400927",
              "parentUUID": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The default limit of 25 should be reached for taxon data:",
              "fullTitle": "Get taxon data: The default limit of 25 should be reached for taxon data:",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 25);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "4028a38a-8e12-4641-b082-a56e833cdefa",
              "parentUUID": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing the limit should change the number of taxa retrieved:",
              "fullTitle": "Get taxon data: Changing the limit should change the number of taxa retrieved:",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.get('v2.0/data/taxa/?taxonname=a*&limit=30')\n  .set('Accept', 'application/json')\n  .end(function (err, res) {\n    assert.strictEqual(res.body.data.length, 30);\n    done();\n    if (err) {\n      console.log(err.message)\n    };\n  });",
              "err": {},
              "uuid": "f41dc75d-7c46-4900-a89f-444726694572",
              "parentUUID": "20ed5f6e-b3e1-4d79-8408-7382c99ee3db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85dfc9dc-35c0-41ff-864d-1b6977809a94",
            "ab515b58-62bb-4b27-a4e2-382833f9301f",
            "fef47ab5-0347-4dc8-9800-f7332daebed3",
            "b4eb92d5-5aef-4a0d-aec6-70547c1286a9",
            "9d141bbe-aefa-4658-ace8-ce562b59aa29",
            "77a714e2-719c-400f-8953-0a308f400927",
            "4028a38a-8e12-4641-b082-a56e833cdefa",
            "f41dc75d-7c46-4900-a89f-444726694572"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1680,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "25e6d56f-64b3-4cff-b9b6-a4bb99a2ffea",
          "title": "tests for /v1.5/apps/DatasetTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
          "file": "/test/v1.5-apps-DatasetTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "42f2ce96-c90a-4ddf-b33d-58f9c8192d97",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-DatasetTypes-test.js",
              "file": "/test/v1.5-apps-DatasetTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/DatasetTypes tests for get should respond 200 for \"Returns the set of dataset types supported by Neotoma.\"",
                  "timedOut": false,
                  "duration": 157,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/DatasetTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "5cf05680-de2a-4979-800c-578ccfc7b335",
                  "parentUUID": "42f2ce96-c90a-4ddf-b33d-58f9c8192d97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5cf05680-de2a-4979-800c-578ccfc7b335"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 157,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f6b8fd90-2d50-476d-a856-729fa29ec7f6",
          "title": "tests for /v1.5/apps/TaxaInDatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
          "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b3b54381-8238-4e09-9a8a-8eecf086c89b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-TaxaInDatasets-test.js",
              "file": "/test/v1.5-apps-TaxaInDatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "fullTitle": "tests for /v1.5/apps/TaxaInDatasets tests for get should respond 200 for \"An array of taxon identities with associated dataset IDs.\"",
                  "timedOut": false,
                  "duration": 8077,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/TaxaInDatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2dd74263-3b0a-4b64-a5cf-a5053d42bd87",
                  "parentUUID": "b3b54381-8238-4e09-9a8a-8eecf086c89b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dd74263-3b0a-4b64-a5cf-a5053d42bd87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8077,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4b7f6197-2c54-483c-89be-10cf1d4f6944",
          "title": "tests for /v1.5/apps/collectionTypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
          "file": "/test/v1.5-apps-collectionTypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9dfcb18e-f0ad-4531-ab72-48bf53ce17e9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-apps-collectionTypes-test.js",
              "file": "/test/v1.5-apps-collectionTypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "fullTitle": "tests for /v1.5/apps/collectionTypes tests for get should respond 200 for \"Returns the set of collectiontypes recorded in Neotoma.\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/apps/collectionTypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6dd27efd-684f-4b57-9d4f-46acc441ab14",
                  "parentUUID": "9dfcb18e-f0ad-4531-ab72-48bf53ce17e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dd27efd-684f-4b57-9d4f-46acc441ab14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ac3628b0-7a19-4890-ae1c-362ecaaba426",
          "title": "tests for /v1.5/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
          "file": "/test/v1.5-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6cdc7de7-6feb-4211-8083-d2faac27ea0a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-contacts-{contactid}-test.js",
              "file": "/test/v1.5-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Contact\"",
                  "fullTitle": "tests for /v1.5/data/contacts/{contactid} tests for get should respond 200 for \"Contact\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/contacts/-19740071', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "45202249-569e-4a15-8368-09a424e4f168",
                  "parentUUID": "6cdc7de7-6feb-4211-8083-d2faac27ea0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45202249-569e-4a15-8368-09a424e4f168"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1fe99f5e-0250-48ab-830e-cddbfffb1b50",
          "title": "tests for /v1.5/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
          "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "31239831-30de-424d-ac1b-6e755c1c93e9",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-datasets-{datasetid}-test.js",
              "file": "/test/v1.5-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v1.5/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 842,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2dfa0cbe-5e8c-467c-b456-7021fbf9238c",
                  "parentUUID": "31239831-30de-424d-ac1b-6e755c1c93e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dfa0cbe-5e8c-467c-b456-7021fbf9238c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 842,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6da4f035-1f33-4fcc-b866-d257302c132b",
          "title": "tests for /v1.5/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
          "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0acc2062-1e38-4dbb-9f18-62593f39cef7",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-downloads-{datasetid}-test.js",
              "file": "/test/v1.5-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v1.5/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 714,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/downloads/6648', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "db506f2e-8e83-4d96-bebe-c46db5b74666",
                  "parentUUID": "0acc2062-1e38-4dbb-9f18-62593f39cef7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db506f2e-8e83-4d96-bebe-c46db5b74666"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 714,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bd0f3154-bed3-4158-804e-a158772bf4c0",
          "title": "tests for /v1.5/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57e5cecf-04b2-4d28-ac3f-207766912b02",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 205,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits', {\n  'qs': { 'gpid': 8923, 'gpname': 'nisi', 'rank': 4, 'lower': false },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "810b627f-50e2-465b-acb0-567651b4f528",
                  "parentUUID": "57e5cecf-04b2-4d28-ac3f-207766912b02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "810b627f-50e2-465b-acb0-567651b4f528"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 205,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "28d762db-6492-4a5b-b22b-3519b829464f",
          "title": "tests for /v1.5/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ba63b5d6-6636-46cc-9685-1ffe094b5240",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v1.5-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v1.5/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/geopoliticalunits/39', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7e441d72-8cd8-492f-aa3f-d41ec66bf14d",
                  "parentUUID": "ba63b5d6-6636-46cc-9685-1ffe094b5240",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e441d72-8cd8-492f-aa3f-d41ec66bf14d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "99a2b74e-1ef0-45b7-b033-9ed7aa2cfaae",
          "title": "tests for /v1.5/data/occurrence/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4c1f1378-218e-480b-86cc-9e48034cdf39",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "file": "/test/v1.5-data-occurrence-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A single occurrence object.\"",
                  "fullTitle": "tests for /v1.5/data/occurrence/{occurrenceid} tests for get should respond 200 for \"A single occurrence object.\"",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/occurrence/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a9f54587-6ebf-4a35-90de-c44fdaced3bc",
                  "parentUUID": "4c1f1378-218e-480b-86cc-9e48034cdf39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9f54587-6ebf-4a35-90de-c44fdaced3bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e671da29-fba4-4f4c-b624-17e3851bc877",
          "title": "tests for /v1.5/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
          "file": "/test/v1.5-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d16ab735-b06a-4b4a-88f9-dcbd4d8ff17d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-data-sites-{siteid}-test.js",
              "file": "/test/v1.5-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of site elements.\"",
                  "fullTitle": "tests for /v1.5/data/sites/{siteid} tests for get should respond 200 for \"An array of site elements.\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/data/sites/6834', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "6b435988-1251-4b10-8e26-20e90000d959",
                  "parentUUID": "d16ab735-b06a-4b4a-88f9-dcbd4d8ff17d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b435988-1251-4b10-8e26-20e90000d959"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2059ad1d-b617-4596-96e6-78638beb9bff",
          "title": "tests for /v1.5/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
          "file": "/test/v1.5-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b6dfb35c-31c7-439e-930a-3847b378d9fd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v1.5-dbtables-{table}-test.js",
              "file": "/test/v1.5-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v1.5/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v1.5/dbtables/geochrontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "eb8b8f95-9e7e-4071-9240-b673ca86a1c5",
                  "parentUUID": "b6dfb35c-31c7-439e-930a-3847b378d9fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb8b8f95-9e7e-4071-9240-b673ca86a1c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "89b03bc3-3e12-4def-ba29-cc85e15d9ebd",
          "title": "tests for /v2.0/apps/authorpis",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
          "file": "/test/v2.0-apps-authorpis-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2b60e6c5-9840-49de-9399-0f2a685f2bd6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-authorpis-test.js",
              "file": "/test/v2.0-apps-authorpis-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/authorpis tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/authorpis', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3f10fc95-c73b-4701-b049-80f878f85674",
                  "parentUUID": "2b60e6c5-9840-49de-9399-0f2a685f2bd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f10fc95-c73b-4701-b049-80f878f85674"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f9ea9224-315b-479a-b5ca-94a88fefd465",
          "title": "tests for /v2.0/apps/collectiontypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
          "file": "/test/v2.0-apps-collectiontypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac0d1659-1f7e-4b6e-95cc-41924a4f4fed",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-collectiontypes-test.js",
              "file": "/test/v2.0-apps-collectiontypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/collectiontypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/collectiontypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c5dad528-e68d-41db-994c-47c632cc0122",
                  "parentUUID": "ac0d1659-1f7e-4b6e-95cc-41924a4f4fed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5dad528-e68d-41db-994c-47c632cc0122"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "94ba3c3d-0d4b-4da2-8ee0-cbd0fe3c50d2",
          "title": "tests for /v2.0/apps/datasettypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
          "file": "/test/v2.0-apps-datasettypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b2e92354-829d-483f-a7de-762216a60661",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-datasettypes-test.js",
              "file": "/test/v2.0-apps-datasettypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/datasettypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/datasettypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a4bf80de-e06e-4d34-aed0-7677d4c34f8e",
                  "parentUUID": "b2e92354-829d-483f-a7de-762216a60661",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4bf80de-e06e-4d34-aed0-7677d4c34f8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9db5da37-1478-477f-aab1-ab7c512f36e7",
          "title": "tests for /v2.0/apps/depositionalenvironments/root",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
          "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "11defb26-db53-42a3-9f40-3558da17beca",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-depositionalenvironments-root-test.js",
              "file": "/test/v2.0-apps-depositionalenvironments-root-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/depositionalenvironments/root tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/depositionalenvironments/root', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f0d416b1-c82e-4432-8ea6-d1b33fa675ae",
                  "parentUUID": "11defb26-db53-42a3-9f40-3558da17beca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0d416b1-c82e-4432-8ea6-d1b33fa675ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6ea8ffb4-4219-4cd2-8e49-1365cde10803",
          "title": "tests for /v2.0/apps/keywords",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
          "file": "/test/v2.0-apps-keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f2fbc39f-e356-425b-83bd-45d95a17b5da",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-keywords-test.js",
              "file": "/test/v2.0-apps-keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "fullTitle": "tests for /v2.0/apps/keywords tests for get should respond 200 for \"A list of all keywords used for analysis units in the database.\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/keywords', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0ace3260-b75e-4e8e-9611-ad9c3456fe24",
                  "parentUUID": "f2fbc39f-e356-425b-83bd-45d95a17b5da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ace3260-b75e-4e8e-9611-ad9c3456fe24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "32e4202d-a128-4fb0-99d2-759c18ae9347",
          "title": "tests for /v2.0/apps/taphonomysystems",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
          "file": "/test/v2.0-apps-taphonomysystems-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bfc13244-fa26-470c-b2db-f3167f5e02ab",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taphonomysystems-test.js",
              "file": "/test/v2.0-apps-taphonomysystems-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taphonomysystems tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taphonomysystems', {\n  'qs': { 'datasettypeid': 17 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8ffa9b63-18ad-47a1-8676-e47cf7c1d3f5",
                  "parentUUID": "bfc13244-fa26-470c-b2db-f3167f5e02ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ffa9b63-18ad-47a1-8676-e47cf7c1d3f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8ee79387-0da9-46b9-bf19-fb0fac30b0e5",
          "title": "tests for /v2.0/apps/taxagrouptypes",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
          "file": "/test/v2.0-apps-taxagrouptypes-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "15aa53b6-39c3-4810-a210-1b42d62f67a2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxagrouptypes-test.js",
              "file": "/test/v2.0-apps-taxagrouptypes-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A table of Neotoma collection types.\"",
                  "fullTitle": "tests for /v2.0/apps/taxagrouptypes tests for get should respond 200 for \"A table of Neotoma collection types.\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxagrouptypes', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "94f987f0-4ef5-472d-bae4-6469f1405d55",
                  "parentUUID": "15aa53b6-39c3-4810-a210-1b42d62f67a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94f987f0-4ef5-472d-bae4-6469f1405d55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "89ddde5a-0730-4b52-be66-e38ed81429f6",
          "title": "tests for /v2.0/apps/taxaindatasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
          "file": "/test/v2.0-apps-taxaindatasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "72e4d44c-af1a-4b0e-b7ff-081848d548e6",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-apps-taxaindatasets-test.js",
              "file": "/test/v2.0-apps-taxaindatasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "fullTitle": "tests for /v2.0/apps/taxaindatasets tests for get should respond 200 for \"A list of all taxa in neotoma and the datasets in which they are found.\"",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/apps/taxaindatasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "08dbd6d8-b9b0-430a-82be-1b11fda026b1",
                  "parentUUID": "72e4d44c-af1a-4b0e-b7ff-081848d548e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08dbd6d8-b9b0-430a-82be-1b11fda026b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "860c92ae-18c5-402e-b97c-80225b0cf6d4",
          "title": "tests for /v2.0/data/chronologies/{chronid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
          "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8d83b329-86a4-4db9-8a5a-ab15d4db5d2f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-chronologies-{chronid}-test.js",
              "file": "/test/v2.0-data-chronologies-{chronid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma chronology object.\"",
                  "fullTitle": "tests for /v2.0/data/chronologies/{chronid} tests for get should respond 200 for \"A Neotoma chronology object.\"",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/chronologies/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2485f6ff-ad74-4cf1-a6a8-9ec5490d771c",
                  "parentUUID": "8d83b329-86a4-4db9-8a5a-ab15d4db5d2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2485f6ff-ad74-4cf1-a6a8-9ec5490d771c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9dbfd10c-bf09-4d60-9d79-a04c55281675",
          "title": "tests for /v2.0/data/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
          "file": "/test/v2.0-data-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "85059689-c77c-4162-b5a0-538a043b7530",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-test.js",
              "file": "/test/v2.0-data-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts', {\n  'qs': { 'contactid': 19485, 'familyname': 'laborum consectetur nulla voluptate', 'contactname': 'enim in veniam tempor', 'contactstatus': 'inactive', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "37c89a6e-1cd0-482a-8986-3d640c2ff921",
                  "parentUUID": "85059689-c77c-4162-b5a0-538a043b7530",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37c89a6e-1cd0-482a-8986-3d640c2ff921"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b357f69c-5924-4cc6-aefe-b26b140bc295",
          "title": "tests for /v2.0/data/contacts/{contactid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7214d9ae-e5b4-47a7-81ed-610cac1eec85",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma sites object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid}/sites tests for get should respond 200 for \"A Neotoma sites object.\"",
                  "timedOut": false,
                  "duration": 323,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "91cb2573-20dd-444d-aade-a399d546da41",
                  "parentUUID": "7214d9ae-e5b4-47a7-81ed-610cac1eec85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91cb2573-20dd-444d-aade-a399d546da41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 323,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "38554802-a940-4597-b180-5dfb5a3dfd0f",
          "title": "tests for /v2.0/data/contacts/{contactid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
          "file": "/test/v2.0-data-contacts-{contactid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1bca120c-b185-4c6f-86d9-4ceaefe6d182",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-contacts-{contactid}-test.js",
              "file": "/test/v2.0-data-contacts-{contactid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma contacts object.\"",
                  "fullTitle": "tests for /v2.0/data/contacts/{contactid} tests for get should respond 200 for \"A Neotoma contacts object.\"",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/contacts/7938', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d7adb3fa-3299-49ed-9d1a-d066de8a34c4",
                  "parentUUID": "1bca120c-b185-4c6f-86d9-4ceaefe6d182",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7adb3fa-3299-49ed-9d1a-d066de8a34c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "151ca7db-1e7a-4b80-a3a4-32d68420ef73",
          "title": "tests for /v2.0/data/datasets/db",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
          "file": "/test/v2.0-data-datasets-db-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "54e3a5a4-a55f-4949-9883-7179bcffc0e3",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-db-test.js",
              "file": "/test/v2.0-data-datasets-db-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Datasets\"",
                  "fullTitle": "tests for /v2.0/data/datasets/db tests for get should respond 200 for \"Datasets\"",
                  "timedOut": false,
                  "duration": 2137,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/db', {\n  'qs': { 'limit': 10, 'offset': 0, 'database': 'Diatom Paleolimnology Data Cooperative (DPDC)' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b7e7fc48-e730-4ba7-907d-6c86277128af",
                  "parentUUID": "54e3a5a4-a55f-4949-9883-7179bcffc0e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7e7fc48-e730-4ba7-907d-6c86277128af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2137,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "52315218-c4c4-40e3-9b6e-0706f459e6ab",
          "title": "tests for /v2.0/data/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
          "file": "/test/v2.0-data-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f3c06e37-a5f0-4c36-b31e-2e42611fdcd4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-test.js",
              "file": "/test/v2.0-data-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 922,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets', {\n  'qs': { 'datasetid': 54574889, 'siteid': 23772, 'contactid': 12550, 'datasettype': 'fugiat occaecat in sit', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'gpid': 9982, 'ageyoung': 1000, 'ageold': 10000, 'ageof': 17416279, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c4717253-6db8-4e0c-be61-bd28041dd6b7",
                  "parentUUID": "f3c06e37-a5f0-4c36-b31e-2e42611fdcd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4717253-6db8-4e0c-be61-bd28041dd6b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 922,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "534dda8d-5a07-4384-91a9-2a1c86a41c9d",
          "title": "tests for /v2.0/data/datasets/{datasetid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c3951cb-38a5-456b-932a-7616362af0e8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 149,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/6292/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "963c857a-8a84-4251-8d6f-f51743b7babf",
                  "parentUUID": "0c3951cb-38a5-456b-932a-7616362af0e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "963c857a-8a84-4251-8d6f-f51743b7babf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 149,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cb896403-745c-4c3a-ab37-1f903d7533d9",
          "title": "tests for /v2.0/data/datasets/{datasetid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1a9ba9a7-3df2-4fa8-ba2e-8199b47e5561",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d5ebd1d3-5074-49be-a1f6-35d3eb1b0c92",
                  "parentUUID": "1a9ba9a7-3df2-4fa8-ba2e-8199b47e5561",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5ebd1d3-5074-49be-a1f6-35d3eb1b0c92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6c666d84-39b5-4b37-9458-bdd1f3fdd7e7",
          "title": "tests for /v2.0/data/datasets/{datasetid}/doi",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "316b2f93-b129-47ee-bb4f-b2fa6075990a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-doi-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"DOI\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/doi tests for get should respond 200 for \"DOI\"",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/doi', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "65416581-23b2-4be7-a5fb-2a419613522d",
                  "parentUUID": "316b2f93-b129-47ee-bb4f-b2fa6075990a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65416581-23b2-4be7-a5fb-2a419613522d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d16c85b2-0def-4560-89f2-e7306c36466f",
          "title": "tests for /v2.0/data/datasets/{datasetid}/lithology",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0a23481-8d2e-4af6-aa0c-fbc5ba0031a2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-lithology-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Lithology\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/lithology tests for get should respond 200 for \"Lithology\"",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/lithology', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e0f8a5f1-cd01-43dc-8114-e67cc6f35867",
                  "parentUUID": "a0a23481-8d2e-4af6-aa0c-fbc5ba0031a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0f8a5f1-cd01-43dc-8114-e67cc6f35867"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5252dfd2-f320-4942-a187-5e6009247e10",
          "title": "tests for /v2.0/data/datasets/{datasetid}/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c196361b-41de-4482-a031-f7cbfd378c5f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Publication\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/publications tests for get should respond 200 for \"Publication\"",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/3929/publications', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "15138a06-30ce-4426-93a7-cd77f44a407a",
                  "parentUUID": "c196361b-41de-4482-a031-f7cbfd378c5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15138a06-30ce-4426-93a7-cd77f44a407a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f3d01510-573c-403f-8465-a6ccfd45a9e0",
          "title": "tests for /v2.0/data/datasets/{datasetid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef673951-86c4-46e0-a79d-fa446613d24d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Site\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/sites tests for get should respond 200 for \"Site\"",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/sites', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "f8c97035-f410-4380-bb1a-0fba00502660",
                  "parentUUID": "ef673951-86c4-46e0-a79d-fa446613d24d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8c97035-f410-4380-bb1a-0fba00502660"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8a8e8a32-3a76-4cc8-a87a-f3ba7aceaf8d",
          "title": "tests for /v2.0/data/datasets/{datasetid}/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "236aea7c-884a-4052-8d8a-bcbdb5ee36a2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Taxa\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid}/taxa tests for get should respond 200 for \"Taxa\"",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500/taxa', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7f038c55-617b-4d33-a988-c7ae52441c7e",
                  "parentUUID": "236aea7c-884a-4052-8d8a-bcbdb5ee36a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f038c55-617b-4d33-a988-c7ae52441c7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "261a11aa-e9e4-4e48-9515-e2abfbf0230e",
          "title": "tests for /v2.0/data/datasets/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cfd5777f-f828-4695-a560-ae2e7081b746",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/datasets/{datasetid} tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1012,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "821e692a-460e-4350-b679-f891f7c00a5d",
                  "parentUUID": "cfd5777f-f828-4695-a560-ae2e7081b746",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "821e692a-460e-4350-b679-f891f7c00a5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1012,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "85c09416-f811-4d32-9477-510395d36de6",
          "title": "tests for /v2.0/data/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
          "file": "/test/v2.0-data-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c59d8674-91bf-41d5-84ed-c6a11c2c97a1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-test.js",
              "file": "/test/v2.0-data-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 127,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc', {\n  'qs': { 'siteid': 3887, 'contactid': 18856, 'datasettype': 'aute laborum sed elit', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageyoung': 1000, 'ageold': 10000, 'ageof': 22555059 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 500 to equal 200",
                    "estack": "AssertionError: expected status code 500 to equal 200",
                    "diff": null
                  },
                  "uuid": "b623b37e-37d8-470c-b07c-b4e05663b2a8",
                  "parentUUID": "c59d8674-91bf-41d5-84ed-c6a11c2c97a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b623b37e-37d8-470c-b07c-b4e05663b2a8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "145bbfbb-8257-4ed3-95f1-d8fd4d73c0a1",
          "title": "tests for /v2.0/data/datasets_elc/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c3779e52-134d-4b84-a517-807d76ef575a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "file": "/test/v2.0-data-datasets_elc-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "fullTitle": "tests for /v2.0/data/datasets_elc/{datasetid} tests for get should respond 200 for \"A Neotoma datasets object suitable for the EarthLife Consortium API.\"",
                  "timedOut": false,
                  "duration": 1097,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/datasets_elc/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e03222be-434f-499d-9751-fe079bccff76",
                  "parentUUID": "c3779e52-134d-4b84-a517-807d76ef575a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e03222be-434f-499d-9751-fe079bccff76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1097,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c009c306-1ace-4508-9c0b-b271754ca23c",
          "title": "tests for /v2.0/data/dbtables",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
          "file": "/test/v2.0-data-dbtables-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2f1bc4a6-a633-480c-894a-e653aaacb094",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-test.js",
              "file": "/test/v2.0-data-dbtables-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables', {\n  'qs': { 'table': 'sit tempor qui voluptate culpa', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "156f74bb-fd55-41e8-a392-52fc2d58e688",
                  "parentUUID": "2f1bc4a6-a633-480c-894a-e653aaacb094",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "156f74bb-fd55-41e8-a392-52fc2d58e688"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 152,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d8ef1fc8-56a0-4359-9e36-66cc9dfeeda0",
          "title": "tests for /v2.0/data/dbtables/{table}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
          "file": "/test/v2.0-data-dbtables-{table}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fa3f3b3a-133b-4c8e-967c-56665223b408",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-dbtables-{table}-test.js",
              "file": "/test/v2.0-data-dbtables-{table}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/data/dbtables/{table} tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/dbtables/{table}', {\n  'qs': { 'table': 'non irure amet' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ad54ca0d-99d5-4e6f-8a5e-63f85a4eaf9a",
                  "parentUUID": "fa3f3b3a-133b-4c8e-967c-56665223b408",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad54ca0d-99d5-4e6f-8a5e-63f85a4eaf9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6b88f08b-afb3-4868-8d0b-6956ec25c4fe",
          "title": "tests for /v2.0/data/downloads/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
          "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0076ca35-eb45-4c27-9aef-a80c11f3e202",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-downloads-{datasetid}-test.js",
              "file": "/test/v2.0-data-downloads-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/downloads/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 1790,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/downloads/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "2ffc5ad6-eb81-46a2-bc6f-6b3cd8b81e50",
                  "parentUUID": "0076ca35-eb45-4c27-9aef-a80c11f3e202",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ffc5ad6-eb81-46a2-bc6f-6b3cd8b81e50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1790,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "07195291-437a-4a80-bf76-3863dac900ea",
          "title": "tests for /v2.0/data/frozen/{datasetid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
          "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fcc3b17b-c04c-456f-89a6-667214bd1a93",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-frozen-{datasetid}-test.js",
              "file": "/test/v2.0-data-frozen-{datasetid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned download object.\"",
                  "fullTitle": "tests for /v2.0/data/frozen/{datasetid} tests for get should respond 200 for \"Returned download object.\"",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/frozen/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "3faeeeea-650c-4e25-8f1e-ac2361c79a59",
                  "parentUUID": "fcc3b17b-c04c-456f-89a6-667214bd1a93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3faeeeea-650c-4e25-8f1e-ac2361c79a59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 347,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6835172b-1579-4df2-9314-002d1acb2404",
          "title": "tests for /v2.0/data/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7e5526cb-905e-4a0c-be0b-92101c60ea07",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits', {\n  'qs': { 'gpid': 5203, 'gpname': 'laboris ullamco anim ut', 'rank': 4, 'lower': true },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "82d4957f-b1e9-41a2-9a8a-a95f76734f34",
                  "parentUUID": "7e5526cb-905e-4a0c-be0b-92101c60ea07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82d4957f-b1e9-41a2-9a8a-a95f76734f34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4fb10764-8a37-45a2-8efe-55956956e3cd",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "044a040d-9ead-45e5-8642-ef7564162402",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1832,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/6747/datasets', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "98e7520b-52ad-4b54-a353-a0d74f3d4e19",
                  "parentUUID": "044a040d-9ead-45e5-8642-ef7564162402",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98e7520b-52ad-4b54-a353-a0d74f3d4e19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1832,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "756542ac-bd8f-4b63-8da3-55c09b39b94e",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "67bd1e08-247a-4fc5-a589-662137bef702",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid}/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/5668/sites', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b78d691e-5c53-4fba-b583-d2e2dc6702a4",
                  "parentUUID": "67bd1e08-247a-4fc5-a589-662137bef702",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b78d691e-5c53-4fba-b583-d2e2dc6702a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 132,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e6e96579-7a7e-4289-8cbe-e0746f0043ac",
          "title": "tests for /v2.0/data/geopoliticalunits/{gpid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f8a45007-ab8f-4e9d-adb5-f36eaeeb9beb",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "file": "/test/v2.0-data-geopoliticalunits-{gpid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/geopoliticalunits/{gpid} tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/geopoliticalunits/2114', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ef741a10-8c3e-4de1-90ba-a607066438f0",
                  "parentUUID": "f8a45007-ab8f-4e9d-adb5-f36eaeeb9beb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef741a10-8c3e-4de1-90ba-a607066438f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "33e005fa-d063-4366-8a95-838a47c8981c",
          "title": "tests for /v2.0/data/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
          "file": "/test/v2.0-data-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "642e1951-50f8-487b-890e-53fa9e57c6dc",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-test.js",
              "file": "/test/v2.0-data-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 140,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences', {\n  'qs': { 'taxonname': 'dolor Duis', 'taxonid': 29302, 'siteid': 12634, 'sitename': 'labore cupidatat pariatur', 'datasettype': 'Lorem', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 20574057, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0f7b1249-6947-467c-a374-2c4e0c602296",
                  "parentUUID": "642e1951-50f8-487b-890e-53fa9e57c6dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f7b1249-6947-467c-a374-2c4e0c602296"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1f99ea4d-239e-4d3a-a4a8-7c562ef1e00b",
          "title": "tests for /v2.0/data/occurrences/{occurrenceid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cdbf7a27-534a-47c2-917a-01adc3a46ba2",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "file": "/test/v2.0-data-occurrences-{occurrenceid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/occurrences/{occurrenceid} tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/occurrences/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a1cc7db3-68e4-45d1-a241-f627efd0d24a",
                  "parentUUID": "cdbf7a27-534a-47c2-917a-01adc3a46ba2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1cc7db3-68e4-45d1-a241-f627efd0d24a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c3e02c4e-d7e5-437e-b36b-8620ef67887d",
          "title": "tests for /v2.0/data/pollen",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
          "file": "/test/v2.0-data-pollen-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "843d79bd-b2dc-4820-a63c-082792e1f838",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-test.js",
              "file": "/test/v2.0-data-pollen-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen', {\n  'qs': { 'taxonname': 'anim', 'taxonid': 4694, 'siteid': 25737, 'sitename': 'cupidatat tempor', 'datasettype': 'velit eu incididunt', 'altmin': 10, 'altmax': 100, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'ageof': 6490861, 'ageyoung': 1000, 'ageold': 10000, 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "d74c02b8-3554-46ef-8dca-d8cc05fa5036",
                  "parentUUID": "843d79bd-b2dc-4820-a63c-082792e1f838",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d74c02b8-3554-46ef-8dca-d8cc05fa5036"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4902a6c5-b930-41f0-9323-48b8aa1c9782",
          "title": "tests for /v2.0/data/pollen/{id}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
          "file": "/test/v2.0-data-pollen-{id}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "08365c24-87ab-492e-985a-a0ec92c6d8cd",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-pollen-{id}-test.js",
              "file": "/test/v2.0-data-pollen-{id}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "fullTitle": "tests for /v2.0/data/pollen/{id} tests for get should respond 200 for \"A record of all pollen samples in time/space for a particular taxon.\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/pollen/{id}', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "7b2d67d1-64c2-4fce-a7ce-b9f2a2599952",
                  "parentUUID": "08365c24-87ab-492e-985a-a0ec92c6d8cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b2d67d1-64c2-4fce-a7ce-b9f2a2599952"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "14b10d5e-73ba-4561-85f1-517933223dbf",
          "title": "tests for /v2.0/data/publications",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
          "file": "/test/v2.0-data-publications-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8008eafc-a222-42bb-be92-c900a7f5c118",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-test.js",
              "file": "/test/v2.0-data-publications-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications', {\n  'qs': { 'publicationid': 10459, 'datasetid': 78412794, 'siteid': 19799, 'familyname': 'ipsum', 'pubtype': 'Journal Article', 'year': 1658, 'search': 'in', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ee830151-6269-4490-a8ee-dbaed207a141",
                  "parentUUID": "8008eafc-a222-42bb-be92-c900a7f5c118",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee830151-6269-4490-a8ee-dbaed207a141"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4577030e-9d8e-426d-aa8e-23a1aec02873",
          "title": "tests for /v2.0/data/publications/{publicationid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
          "file": "/test/v2.0-data-publications-{publicationid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "442e2b39-cc6c-42a4-9cf2-ad736a4ce001",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-publications-{publicationid}-test.js",
              "file": "/test/v2.0-data-publications-{publicationid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of publications.\"",
                  "fullTitle": "tests for /v2.0/data/publications/{publicationid} tests for get should respond 200 for \"A list of publications.\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/publications/1075', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ae69876d-4b59-4237-aa10-3b8519ddc215",
                  "parentUUID": "442e2b39-cc6c-42a4-9cf2-ad736a4ce001",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae69876d-4b59-4237-aa10-3b8519ddc215"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4766ec0b-be91-4fd5-a545-0798e2d0f8cc",
          "title": "tests for /v2.0/data/sites",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
          "file": "/test/v2.0-data-sites-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a127f43f-d567-456b-ad49-fed6a0012312",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-test.js",
              "file": "/test/v2.0-data-sites-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites', {\n  'qs': { 'siteid': 7058, 'sitename': 'ut aliqua officia id', 'altmax': 100, 'altmin': 10, 'loc':'{\"type\":\"Polygon\",\"coordinates\":[[[-104.053249,41.001406],[-104.675999,41.000957],[-104.855273,40.998048],[-105.277138,40.998173],[-105.730421,40.996886],[-106.217573,40.997734],[-106.453859,41.002057],[-106.857773,41.002663],[-107.625624,41.002124],[-108.250649,41.000114],[-108.884138,41.000094],[-109.050076,41.000659],[-109.048044,40.619231],[-109.050946,40.444368],[-109.050615,39.87497],[-109.051363,39.497674],[-109.051512,39.126095],[-109.054189,38.874984],[-109.059541,38.719888],[-109.060062,38.275489],[-109.041762,38.16469],[-109.041058,37.907236],[-109.041865,37.530726],[-109.04581,37.374993],[-109.045223,36.999084],[-108.620309,36.999287],[-108.249358,36.999015],[-108.000623,37.000001],[-107.420913,37.000005],[-106.877292,37.000139],[-106.869796,36.992426],[-106.201469,36.994122],[-105.62747,36.995679],[-105.1208,36.995428],[-105.000554,36.993264],[-104.338833,36.993535],[-103.733247,36.998016],[-103.002199,37.000104],[-102.814616,37.000783],[-102.698142,36.995149],[-102.04224,36.993083],[-102.041974,37.352613],[-102.041574,37.680436],[-102.044644,38.045532],[-102.045324,38.453647],[-102.045388,38.813392],[-102.048449,39.303138],[-102.050422,39.646048],[-102.051744,40.003078],[-102.051725,40.537839],[-102.051614,41.002377],[-102.556789,41.002219],[-102.865784,41.001988],[-103.497447,41.001635],[-104.053249,41.001406]]]}', 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "9c1b20f0-0acb-4e64-b961-97edc4a93e14",
                  "parentUUID": "a127f43f-d567-456b-ad49-fed6a0012312",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c1b20f0-0acb-4e64-b961-97edc4a93e14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1cbfa042-f31b-4c5d-8e20-442024340fad",
          "title": "tests for /v2.0/data/sites/{siteid}/chronologies",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eda44ef1-6fdc-466c-ab6c-917c006051b8",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-chronologies-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"chronology\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/chronologies tests for get should respond 200 for \"chronology\"",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/1968/chronologies', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a2f74dce-6715-4c8c-a6f0-23991dd5dcfb",
                  "parentUUID": "eda44ef1-6fdc-466c-ab6c-917c006051b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2f74dce-6715-4c8c-a6f0-23991dd5dcfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "42d90bb8-1d78-4ad7-a52c-82ad07c274ce",
          "title": "tests for /v2.0/data/sites/{siteid}/contacts",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6be00e72-de73-43af-b199-fca11b0ff20c",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-contacts-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"contact\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/contacts tests for get should respond 200 for \"contact\"",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/contacts', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "04a36799-98aa-4718-9a80-9d684bdbbde3",
                  "parentUUID": "6be00e72-de73-43af-b199-fca11b0ff20c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04a36799-98aa-4718-9a80-9d684bdbbde3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8fc7c299-229c-47a6-badf-277fff317754",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "07f75f9e-ad66-4d23-a3a9-645474d11926",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 1446,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ae5ea7a3-d7ce-4c27-ad58-bff342a6be02",
                  "parentUUID": "07f75f9e-ad66-4d23-a3a9-645474d11926",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae5ea7a3-d7ce-4c27-ad58-bff342a6be02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1446,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a190a3a4-8a3c-4ad3-b49d-0ae6bc30fd8e",
          "title": "tests for /v2.0/data/sites/{siteid}/datasets_elc",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9cb4a202-2629-4f86-89d1-600ed94f6504",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-datasets_elc-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of datasets.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/datasets_elc tests for get should respond 200 for \"An array of datasets.\"",
                  "timedOut": false,
                  "duration": 910,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/datasets_elc', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "e4d5b441-cc78-4107-9256-90463d650389",
                  "parentUUID": "9cb4a202-2629-4f86-89d1-600ed94f6504",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4d5b441-cc78-4107-9256-90463d650389"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 910,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "92dabc3d-5f26-40c7-8ae5-0267397f3abd",
          "title": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "07d68a08-674b-4ca3-9200-dfa28e28fe0d",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-geopoliticalunits-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of geopolitical units.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid}/geopoliticalunits tests for get should respond 200 for \"An array of geopolitical units.\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500/geopoliticalunits', {\n  'qs': { 'limit': 10, 'offset': 0 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ae672ce4-c0f4-4478-a8a0-855ee08958b4",
                  "parentUUID": "07d68a08-674b-4ca3-9200-dfa28e28fe0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae672ce4-c0f4-4478-a8a0-855ee08958b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "72ec17bd-e02e-4997-99ca-aeabacb7e22e",
          "title": "tests for /v2.0/data/sites/{siteid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
          "file": "/test/v2.0-data-sites-{siteid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36e14ec8-862a-4d17-a3f0-40e4cec2b47e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-sites-{siteid}-test.js",
              "file": "/test/v2.0-data-sites-{siteid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"An array of sites.\"",
                  "fullTitle": "tests for /v2.0/data/sites/{siteid} tests for get should respond 200 for \"An array of sites.\"",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/sites/500', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "562832ab-99e2-41f5-b14e-b8fb88a211f7",
                  "parentUUID": "36e14ec8-862a-4d17-a3f0-40e4cec2b47e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "562832ab-99e2-41f5-b14e-b8fb88a211f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0da2cdcd-1dd5-4d8f-a692-d21188148c91",
          "title": "tests for /v2.0/data/summary/dsdbmonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
          "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "857e6792-c784-45eb-8475-7006a979ae2e",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dsdbmonth-test.js",
              "file": "/test/v2.0-data-summary-dsdbmonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dsdbmonth tests for get should respond 200 for \"A count of the datasets added by database for the requested period.\"",
                  "timedOut": false,
                  "duration": 320,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dsdbmonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "06770b2f-ed54-42bb-88ed-9ce3ba56d187",
                  "parentUUID": "857e6792-c784-45eb-8475-7006a979ae2e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06770b2f-ed54-42bb-88ed-9ce3ba56d187"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 320,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c90fa25b-0069-4c1e-8bc1-74ff07b4470f",
          "title": "tests for /v2.0/data/summary/dstypemonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
          "file": "/test/v2.0-data-summary-dstypemonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c55af069-f268-44cd-be90-fbb33abff44b",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-dstypemonth-test.js",
              "file": "/test/v2.0-data-summary-dstypemonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "fullTitle": "tests for /v2.0/data/summary/dstypemonth tests for get should respond 200 for \"A count of the datasets added by datasettype for the requested period.\"",
                  "timedOut": false,
                  "duration": 315,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/dstypemonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "a8d5b89f-45af-4205-b88e-f5e6f9d1b825",
                  "parentUUID": "c55af069-f268-44cd-be90-fbb33abff44b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8d5b89f-45af-4205-b88e-f5e6f9d1b825"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 315,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f5baa6af-bbd2-45bf-8aa3-62800a1e0d26",
          "title": "tests for /v2.0/data/summary/rawbymonth",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
          "file": "/test/v2.0-data-summary-rawbymonth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5eb10dfd-1d14-4ba9-9493-70b853824274",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-summary-rawbymonth-test.js",
              "file": "/test/v2.0-data-summary-rawbymonth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "fullTitle": "tests for /v2.0/data/summary/rawbymonth tests for get should respond 200 for \"A count of the data objects added to Neotoma.\"",
                  "timedOut": false,
                  "duration": 4964,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/summary/rawbymonth', {\n  'qs': { 'start': 1, 'end': 10 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8268a4d3-8f27-47e5-9e15-17dd9ed86d52",
                  "parentUUID": "5eb10dfd-1d14-4ba9-9493-70b853824274",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8268a4d3-8f27-47e5-9e15-17dd9ed86d52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4964,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6cf8b173-137b-4ab6-b93c-a33ecd56e8ef",
          "title": "tests for /v2.0/data/taxa",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
          "file": "/test/v2.0-data-taxa-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b8893f1b-48e7-40fa-9b84-8d1f0dec46ab",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-test.js",
              "file": "/test/v2.0-data-taxa-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa', {\n  'qs': { 'taxonname': 'do minim quis', 'datasetid': 55055263, 'siteid': 18587 },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "32df2dbe-438a-4c70-bbbe-5d5f5c8f35d2",
                  "parentUUID": "b8893f1b-48e7-40fa-9b84-8d1f0dec46ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32df2dbe-438a-4c70-bbbe-5d5f5c8f35d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 139,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "63822fb5-a005-4417-ace5-8ce363298369",
          "title": "tests for /v2.0/data/taxa/{taxonid}/occurrences",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fb0fe5a8-878a-47b2-8d0c-b9c31b12812a",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-occurrences-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"occurrence\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid}/occurrences tests for get should respond 200 for \"occurrence\"",
                  "timedOut": false,
                  "duration": 1422,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/500/occurrences', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "36fcc2e4-cf87-4cd7-aa59-150acecd117c",
                  "parentUUID": "fb0fe5a8-878a-47b2-8d0c-b9c31b12812a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36fcc2e4-cf87-4cd7-aa59-150acecd117c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1422,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "539fc9ad-2cd7-4c4e-9b32-bd1624885520",
          "title": "tests for /v2.0/data/taxa/{taxonid}",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
          "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "66d27390-9668-4f7f-adab-93ad518e0fea",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-data-taxa-{taxonid}-test.js",
              "file": "/test/v2.0-data-taxa-{taxonid}-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A taxon or array of taxa.\"",
                  "fullTitle": "tests for /v2.0/data/taxa/{taxonid} tests for get should respond 200 for \"A taxon or array of taxa.\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/data/taxa/7141', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8d9c0665-5d44-4520-923e-d824adce752a",
                  "parentUUID": "66d27390-9668-4f7f-adab-93ad518e0fea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d9c0665-5d44-4520-923e-d824adce752a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c5ea8901-8b33-4dc9-b8c1-c014e9a97c9b",
          "title": "tests for /v2.0/dbtables/table",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
          "file": "/test/v2.0-dbtables-table-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c663d575-47a2-499c-9d6b-3904ecd08f11",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-table-test.js",
              "file": "/test/v2.0-dbtables-table-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Returned table.\"",
                  "fullTitle": "tests for /v2.0/dbtables/table tests for get should respond 200 for \"Returned table.\"",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/table', {\n  'qs': { 'table': 'geochrontypes' },\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "86131484-b796-46e6-9661-0f75824610d2",
                  "parentUUID": "c663d575-47a2-499c-9d6b-3904ecd08f11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86131484-b796-46e6-9661-0f75824610d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8f3b984e-ecc0-4352-9e17-ae9fd5e1a771",
          "title": "tests for /v2.0/dbtables/tablenames",
          "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
          "file": "/test/v2.0-dbtables-tablenames-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6cfff197-6d8a-4160-9d3b-e2cb2c63a250",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Neotoma/api_nodetest/test/v2.0-dbtables-tablenames-test.js",
              "file": "/test/v2.0-dbtables-tablenames-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "fullTitle": "tests for /v2.0/dbtables/tablenames tests for get should respond 200 for \"A list of all the tables in the Neotoma database.\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3005/v2.0/dbtables/tablenames', {\n  'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "c0e7f008-242e-4063-ba31-bb3942f6252d",
                  "parentUUID": "6cfff197-6d8a-4160-9d3b-e2cb2c63a250",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0e7f008-242e-4063-ba31-bb3942f6252d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}