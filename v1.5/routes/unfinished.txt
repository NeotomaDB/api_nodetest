/**

* @swagger
* definitions:
*   chronology:
*     properties:
*       ChronologyID:
*         type: integer
*         format: int64
*       controls:
*         type: object
*         properties:
*           ChronControlID:
*             type: integer
*             format: int64
*           Age:
*             type: number
*             format: float
*           AgeYounger:
*             type: number
*             format: float
*           AgeOlder:
*             type: number
*             format: float
*           ControlType:
*             type: string
*           Depth:
*             type: number
*             format: float
*           Thickness:
*             type: number
*             format: float
*       Default:
*         type: boolean
*       ChronologyName:
*         type: string
*       AgeType:
*         type: string
*       AgeModel:
*         type: integer
*         format: int64
*       AgeYounger:
*         type: number
*         format: float
*       AgeOlder:
*         type: number
*         format: float
*       Notes:
*         type: string
*       DatePrepared:
*         type: string
*         format: date
*       Datasets:
*         type: object
*         properties:
*           DatasetID:
*             type: integer
*             format: int64
*           DatasetType:
*             type: string 
*/

/**
* @swagger
* /v2/data/chronology:
*   get:
*     summary: Chronology metadata for a dataset.
*     description: Returns the chronology and chronological controls used for a dataset age model.
*     parameters:
*       - name: chronid
*         description: Unique chronology identifier.
*         in: path
*         required: true
*         type: string
*     produces:
*       - application/json
*     responses:
*       200:
*        description: Chronology
*        schema:
*          type: object
*          items:
*            $ref: '#/definitions/chronology'
*/
router.get('/v2/data/chronology', db.chronology);
router.get('/v2/data/chronology/:id', db.chronology);

/**
* @swagger
* definitions:
*   download:
*     properties:
*       type: object
*/

/**
* @swagger
* /v2/data/download:
*   get:
*     summary: Returns the named Neotoma Database table.
*     description: Returns the named Neotoma Database table.
*     parameters:
*       - name: datasetid
*         description: Table name.
*         in: path
*         required: true
*         type: string
*     produces:
*       - application/json
*     responses:
*       200:
*        description: Returned download object.
*        schema:
*          type: array
*          items:
*            $ref: '#/definitions/download'
*/

router.get('/v2/data/download/', db.download);
router.get('/v2/data/download/:datasetid', db.download);

/**
* @swagger
* definitions:
*   occurrence:
*     properties:
*       OccurID: 
*         type: integer
*         format: int64
*       Age:
*         type: number
*         format: float
*       TaxonID:
*         type: integer
*         format: int32
*       TaxonName:
*         type: string
*       AgeYounger:
*         type: number
*         format: float
*       AgeOlder:
*         type: number
*         format: float
*       DatasetID:
*         type: integer
*         format: int32
*       DatabaseName:
*         type: string
*       DatasetType:
*         type: string
*       SiteName:
*         type: string
*       SiteID: 
*         type: integer
*         format: int32
*       Altitude:
*         type: number
*         format: float
*       LongitudeWest:
*         type: number
*         format: float
*       LongitudeEast:
*         type: number
*         format: float
*       LatitudeNorth:
*         type: number
*         format: float
*       LatitudeSouth:
*         type: number
*         format: float
*/


/**
* @swagger
* /v2/data/occurrence:
*   get:
*     summary: Individual occurrence records for Neotoma records.
*     description: Returns occurrence information for a particular taxon, geographic region or temporal slice.
*     parameters:
*       - name: occid
*         description: Unique occurrence identifier.
*         in: path
*         required: true
*         type: integer
*         format: int64
*     produces:
*       - application/json
*     responses:
*       200:
*        description: Occurrence
*        schema:
*          type: object
*          items:
*            $ref: '#/definitions/occurrence'
*/

router.get('/v2/data/occurrence/', db.occurrence);
router.get('/v2/data/occurrence/:id', db.occurrence);


/**
* @swagger
* definitions:
*   pollen:
*     properties:
*       TaxonName:
*         type: string
*       EcolGroups:
*         type: array
*         items:
*           type: string
*       TaxonCode: 
*         type: string
*       Author:
*         type: string
*       PublicationID:
*         type: integer
*         format: int32
*       TaxonID:
*         type: integer
*         format: int32
*       TaxaGroupID:
*         type: string
*       HigherTaxonID:
*         type: integer
*         format: int32
*       Extinct:
*         type: boolean
*       Notes:
*         type: string
*/

/**
 * @swagger
 * /v2/data/pollen:
 *   get:
 *     summary: Pollen data from Neotoma.
 *     description: Returns information about pollen.
 *     parameters:
 *       - name: taxonid
 *         description: Numeric ID for taxa.
 *         in: path
 *         required: false
 *         type: integer
 *         format: int32
 *       - name: taxonname
 *         description: Name of the taxon, can include wildcards.
 *         in: query
 *         required: false
 *         type: string
 *       - name: nametype
 *         description: Not sure.
 *         in: query
 *         required: false
 *         type: string
 *       - name: taxonids
 *         description: Numeric ID for taxa.
 *         in: query
 *         required: false
 *         type: array
 *         items:
 *           type: integer
 *           format: int32
 *       - name: ageyoung
 *         description: Most recent age, in calendar years before present.
 *         in: query
 *         required: false
 *         type: number
 *         format: float
 *       - name: ageold
 *         description: Oldest age, in calendar years before present.
 *         in: query
 *         required: false
 *         type: number
 *         format: float
 *       - name: agedocontain
 *       - name: coords
 *       - name: bbox
 *       - name: wkt
 *       - name: sitename
 *         description: Name of site for pollen record.
 *         in: query
 *         required: false
 *         type: string
 *       - name: siteid
 *         description: Numeric site ID.
 *         in: query
 *         required: false
 *         type: integer
 *         format: int32
 *       - name: format
 *       - name: limit
 *       - name: offset
 *       - name: fields
 *       - name: vocab
 *       - name: occurrences
 *     produces:
 *       - application/json
 *     responses:
 *       200:
*         description: A pollen response..
*         schema:
*           type: array
*           items:
*             $ref: '#/definitions/pollen'
*/

router.get('/v2/data/pollen/', db.pollen);
router.get('/v2/data/pollen/:id', db.pollen);

